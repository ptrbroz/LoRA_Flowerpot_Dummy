
Flowerpot_Dummy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08009780  08009780  00019780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc8  08009dc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd0  08009dd0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001dc  08009fb4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08009fb4  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9e2  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b3  00000000  00000000  0002fbe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00031da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00032958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d32  00000000  00000000  00033438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f09d  00000000  00000000  0004916a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082585  00000000  00000000  00058207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da78c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b68  00000000  00000000  000da7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009764 	.word	0x08009764

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08009764 	.word	0x08009764

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fcb7 	bl	8001db0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc01 	bl	8001c54 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fca9 	bl	8001db0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc9f 	bl	8001db0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc23 	bl	8001ccc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc19 	bl	8001ccc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f82e 	bl	8000538 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__udivmoddi4>:
 8000538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053a:	4657      	mov	r7, sl
 800053c:	464e      	mov	r6, r9
 800053e:	4645      	mov	r5, r8
 8000540:	46de      	mov	lr, fp
 8000542:	b5e0      	push	{r5, r6, r7, lr}
 8000544:	0004      	movs	r4, r0
 8000546:	000d      	movs	r5, r1
 8000548:	4692      	mov	sl, r2
 800054a:	4699      	mov	r9, r3
 800054c:	b083      	sub	sp, #12
 800054e:	428b      	cmp	r3, r1
 8000550:	d830      	bhi.n	80005b4 <__udivmoddi4+0x7c>
 8000552:	d02d      	beq.n	80005b0 <__udivmoddi4+0x78>
 8000554:	4649      	mov	r1, r9
 8000556:	4650      	mov	r0, sl
 8000558:	f002 fba8 	bl	8002cac <__clzdi2>
 800055c:	0029      	movs	r1, r5
 800055e:	0006      	movs	r6, r0
 8000560:	0020      	movs	r0, r4
 8000562:	f002 fba3 	bl	8002cac <__clzdi2>
 8000566:	1a33      	subs	r3, r6, r0
 8000568:	4698      	mov	r8, r3
 800056a:	3b20      	subs	r3, #32
 800056c:	469b      	mov	fp, r3
 800056e:	d433      	bmi.n	80005d8 <__udivmoddi4+0xa0>
 8000570:	465a      	mov	r2, fp
 8000572:	4653      	mov	r3, sl
 8000574:	4093      	lsls	r3, r2
 8000576:	4642      	mov	r2, r8
 8000578:	001f      	movs	r7, r3
 800057a:	4653      	mov	r3, sl
 800057c:	4093      	lsls	r3, r2
 800057e:	001e      	movs	r6, r3
 8000580:	42af      	cmp	r7, r5
 8000582:	d83a      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000584:	42af      	cmp	r7, r5
 8000586:	d100      	bne.n	800058a <__udivmoddi4+0x52>
 8000588:	e078      	b.n	800067c <__udivmoddi4+0x144>
 800058a:	465b      	mov	r3, fp
 800058c:	1ba4      	subs	r4, r4, r6
 800058e:	41bd      	sbcs	r5, r7
 8000590:	2b00      	cmp	r3, #0
 8000592:	da00      	bge.n	8000596 <__udivmoddi4+0x5e>
 8000594:	e075      	b.n	8000682 <__udivmoddi4+0x14a>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	465a      	mov	r2, fp
 80005a2:	4093      	lsls	r3, r2
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	2301      	movs	r3, #1
 80005a8:	4642      	mov	r2, r8
 80005aa:	4093      	lsls	r3, r2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	e028      	b.n	8000602 <__udivmoddi4+0xca>
 80005b0:	4282      	cmp	r2, r0
 80005b2:	d9cf      	bls.n	8000554 <__udivmoddi4+0x1c>
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <__udivmoddi4+0x8e>
 80005c2:	601c      	str	r4, [r3, #0]
 80005c4:	605d      	str	r5, [r3, #4]
 80005c6:	9800      	ldr	r0, [sp, #0]
 80005c8:	9901      	ldr	r1, [sp, #4]
 80005ca:	b003      	add	sp, #12
 80005cc:	bcf0      	pop	{r4, r5, r6, r7}
 80005ce:	46bb      	mov	fp, r7
 80005d0:	46b2      	mov	sl, r6
 80005d2:	46a9      	mov	r9, r5
 80005d4:	46a0      	mov	r8, r4
 80005d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005d8:	4642      	mov	r2, r8
 80005da:	2320      	movs	r3, #32
 80005dc:	1a9b      	subs	r3, r3, r2
 80005de:	4652      	mov	r2, sl
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4641      	mov	r1, r8
 80005e4:	0013      	movs	r3, r2
 80005e6:	464a      	mov	r2, r9
 80005e8:	408a      	lsls	r2, r1
 80005ea:	0017      	movs	r7, r2
 80005ec:	4642      	mov	r2, r8
 80005ee:	431f      	orrs	r7, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	4093      	lsls	r3, r2
 80005f4:	001e      	movs	r6, r3
 80005f6:	42af      	cmp	r7, r5
 80005f8:	d9c4      	bls.n	8000584 <__udivmoddi4+0x4c>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	4643      	mov	r3, r8
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0d9      	beq.n	80005bc <__udivmoddi4+0x84>
 8000608:	07fb      	lsls	r3, r7, #31
 800060a:	0872      	lsrs	r2, r6, #1
 800060c:	431a      	orrs	r2, r3
 800060e:	4646      	mov	r6, r8
 8000610:	087b      	lsrs	r3, r7, #1
 8000612:	e00e      	b.n	8000632 <__udivmoddi4+0xfa>
 8000614:	42ab      	cmp	r3, r5
 8000616:	d101      	bne.n	800061c <__udivmoddi4+0xe4>
 8000618:	42a2      	cmp	r2, r4
 800061a:	d80c      	bhi.n	8000636 <__udivmoddi4+0xfe>
 800061c:	1aa4      	subs	r4, r4, r2
 800061e:	419d      	sbcs	r5, r3
 8000620:	2001      	movs	r0, #1
 8000622:	1924      	adds	r4, r4, r4
 8000624:	416d      	adcs	r5, r5
 8000626:	2100      	movs	r1, #0
 8000628:	3e01      	subs	r6, #1
 800062a:	1824      	adds	r4, r4, r0
 800062c:	414d      	adcs	r5, r1
 800062e:	2e00      	cmp	r6, #0
 8000630:	d006      	beq.n	8000640 <__udivmoddi4+0x108>
 8000632:	42ab      	cmp	r3, r5
 8000634:	d9ee      	bls.n	8000614 <__udivmoddi4+0xdc>
 8000636:	3e01      	subs	r6, #1
 8000638:	1924      	adds	r4, r4, r4
 800063a:	416d      	adcs	r5, r5
 800063c:	2e00      	cmp	r6, #0
 800063e:	d1f8      	bne.n	8000632 <__udivmoddi4+0xfa>
 8000640:	9800      	ldr	r0, [sp, #0]
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	465b      	mov	r3, fp
 8000646:	1900      	adds	r0, r0, r4
 8000648:	4169      	adcs	r1, r5
 800064a:	2b00      	cmp	r3, #0
 800064c:	db24      	blt.n	8000698 <__udivmoddi4+0x160>
 800064e:	002b      	movs	r3, r5
 8000650:	465a      	mov	r2, fp
 8000652:	4644      	mov	r4, r8
 8000654:	40d3      	lsrs	r3, r2
 8000656:	002a      	movs	r2, r5
 8000658:	40e2      	lsrs	r2, r4
 800065a:	001c      	movs	r4, r3
 800065c:	465b      	mov	r3, fp
 800065e:	0015      	movs	r5, r2
 8000660:	2b00      	cmp	r3, #0
 8000662:	db2a      	blt.n	80006ba <__udivmoddi4+0x182>
 8000664:	0026      	movs	r6, r4
 8000666:	409e      	lsls	r6, r3
 8000668:	0033      	movs	r3, r6
 800066a:	0026      	movs	r6, r4
 800066c:	4647      	mov	r7, r8
 800066e:	40be      	lsls	r6, r7
 8000670:	0032      	movs	r2, r6
 8000672:	1a80      	subs	r0, r0, r2
 8000674:	4199      	sbcs	r1, r3
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	9101      	str	r1, [sp, #4]
 800067a:	e79f      	b.n	80005bc <__udivmoddi4+0x84>
 800067c:	42a3      	cmp	r3, r4
 800067e:	d8bc      	bhi.n	80005fa <__udivmoddi4+0xc2>
 8000680:	e783      	b.n	800058a <__udivmoddi4+0x52>
 8000682:	4642      	mov	r2, r8
 8000684:	2320      	movs	r3, #32
 8000686:	2100      	movs	r1, #0
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	2200      	movs	r2, #0
 800068c:	9100      	str	r1, [sp, #0]
 800068e:	9201      	str	r2, [sp, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	40da      	lsrs	r2, r3
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	e786      	b.n	80005a6 <__udivmoddi4+0x6e>
 8000698:	4642      	mov	r2, r8
 800069a:	2320      	movs	r3, #32
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	4646      	mov	r6, r8
 80006a2:	409a      	lsls	r2, r3
 80006a4:	0023      	movs	r3, r4
 80006a6:	40f3      	lsrs	r3, r6
 80006a8:	4644      	mov	r4, r8
 80006aa:	4313      	orrs	r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	40e2      	lsrs	r2, r4
 80006b0:	001c      	movs	r4, r3
 80006b2:	465b      	mov	r3, fp
 80006b4:	0015      	movs	r5, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	dad4      	bge.n	8000664 <__udivmoddi4+0x12c>
 80006ba:	4642      	mov	r2, r8
 80006bc:	002f      	movs	r7, r5
 80006be:	2320      	movs	r3, #32
 80006c0:	0026      	movs	r6, r4
 80006c2:	4097      	lsls	r7, r2
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	40de      	lsrs	r6, r3
 80006c8:	003b      	movs	r3, r7
 80006ca:	4333      	orrs	r3, r6
 80006cc:	e7cd      	b.n	800066a <__udivmoddi4+0x132>
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <__aeabi_fdiv>:
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	464f      	mov	r7, r9
 80006d4:	4646      	mov	r6, r8
 80006d6:	46d6      	mov	lr, sl
 80006d8:	0245      	lsls	r5, r0, #9
 80006da:	b5c0      	push	{r6, r7, lr}
 80006dc:	0047      	lsls	r7, r0, #1
 80006de:	1c0c      	adds	r4, r1, #0
 80006e0:	0a6d      	lsrs	r5, r5, #9
 80006e2:	0e3f      	lsrs	r7, r7, #24
 80006e4:	0fc6      	lsrs	r6, r0, #31
 80006e6:	2f00      	cmp	r7, #0
 80006e8:	d066      	beq.n	80007b8 <__aeabi_fdiv+0xe8>
 80006ea:	2fff      	cmp	r7, #255	; 0xff
 80006ec:	d06c      	beq.n	80007c8 <__aeabi_fdiv+0xf8>
 80006ee:	2300      	movs	r3, #0
 80006f0:	00ea      	lsls	r2, r5, #3
 80006f2:	2580      	movs	r5, #128	; 0x80
 80006f4:	4699      	mov	r9, r3
 80006f6:	469a      	mov	sl, r3
 80006f8:	04ed      	lsls	r5, r5, #19
 80006fa:	4315      	orrs	r5, r2
 80006fc:	3f7f      	subs	r7, #127	; 0x7f
 80006fe:	0260      	lsls	r0, r4, #9
 8000700:	0061      	lsls	r1, r4, #1
 8000702:	0a43      	lsrs	r3, r0, #9
 8000704:	4698      	mov	r8, r3
 8000706:	0e09      	lsrs	r1, r1, #24
 8000708:	0fe4      	lsrs	r4, r4, #31
 800070a:	2900      	cmp	r1, #0
 800070c:	d048      	beq.n	80007a0 <__aeabi_fdiv+0xd0>
 800070e:	29ff      	cmp	r1, #255	; 0xff
 8000710:	d010      	beq.n	8000734 <__aeabi_fdiv+0x64>
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	00d8      	lsls	r0, r3, #3
 8000716:	04d2      	lsls	r2, r2, #19
 8000718:	4302      	orrs	r2, r0
 800071a:	4690      	mov	r8, r2
 800071c:	2000      	movs	r0, #0
 800071e:	397f      	subs	r1, #127	; 0x7f
 8000720:	464a      	mov	r2, r9
 8000722:	0033      	movs	r3, r6
 8000724:	1a7f      	subs	r7, r7, r1
 8000726:	4302      	orrs	r2, r0
 8000728:	496c      	ldr	r1, [pc, #432]	; (80008dc <__aeabi_fdiv+0x20c>)
 800072a:	0092      	lsls	r2, r2, #2
 800072c:	588a      	ldr	r2, [r1, r2]
 800072e:	4063      	eors	r3, r4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4697      	mov	pc, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	d16d      	bne.n	8000814 <__aeabi_fdiv+0x144>
 8000738:	2002      	movs	r0, #2
 800073a:	3fff      	subs	r7, #255	; 0xff
 800073c:	e033      	b.n	80007a6 <__aeabi_fdiv+0xd6>
 800073e:	2300      	movs	r3, #0
 8000740:	4698      	mov	r8, r3
 8000742:	0026      	movs	r6, r4
 8000744:	4645      	mov	r5, r8
 8000746:	4682      	mov	sl, r0
 8000748:	4653      	mov	r3, sl
 800074a:	2b02      	cmp	r3, #2
 800074c:	d100      	bne.n	8000750 <__aeabi_fdiv+0x80>
 800074e:	e07f      	b.n	8000850 <__aeabi_fdiv+0x180>
 8000750:	2b03      	cmp	r3, #3
 8000752:	d100      	bne.n	8000756 <__aeabi_fdiv+0x86>
 8000754:	e094      	b.n	8000880 <__aeabi_fdiv+0x1b0>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d017      	beq.n	800078a <__aeabi_fdiv+0xba>
 800075a:	0038      	movs	r0, r7
 800075c:	307f      	adds	r0, #127	; 0x7f
 800075e:	2800      	cmp	r0, #0
 8000760:	dd5f      	ble.n	8000822 <__aeabi_fdiv+0x152>
 8000762:	076b      	lsls	r3, r5, #29
 8000764:	d004      	beq.n	8000770 <__aeabi_fdiv+0xa0>
 8000766:	230f      	movs	r3, #15
 8000768:	402b      	ands	r3, r5
 800076a:	2b04      	cmp	r3, #4
 800076c:	d000      	beq.n	8000770 <__aeabi_fdiv+0xa0>
 800076e:	3504      	adds	r5, #4
 8000770:	012b      	lsls	r3, r5, #4
 8000772:	d503      	bpl.n	800077c <__aeabi_fdiv+0xac>
 8000774:	0038      	movs	r0, r7
 8000776:	4b5a      	ldr	r3, [pc, #360]	; (80008e0 <__aeabi_fdiv+0x210>)
 8000778:	3080      	adds	r0, #128	; 0x80
 800077a:	401d      	ands	r5, r3
 800077c:	28fe      	cmp	r0, #254	; 0xfe
 800077e:	dc67      	bgt.n	8000850 <__aeabi_fdiv+0x180>
 8000780:	01ad      	lsls	r5, r5, #6
 8000782:	0a6d      	lsrs	r5, r5, #9
 8000784:	b2c0      	uxtb	r0, r0
 8000786:	e002      	b.n	800078e <__aeabi_fdiv+0xbe>
 8000788:	001e      	movs	r6, r3
 800078a:	2000      	movs	r0, #0
 800078c:	2500      	movs	r5, #0
 800078e:	05c0      	lsls	r0, r0, #23
 8000790:	4328      	orrs	r0, r5
 8000792:	07f6      	lsls	r6, r6, #31
 8000794:	4330      	orrs	r0, r6
 8000796:	bce0      	pop	{r5, r6, r7}
 8000798:	46ba      	mov	sl, r7
 800079a:	46b1      	mov	r9, r6
 800079c:	46a8      	mov	r8, r5
 800079e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d12b      	bne.n	80007fc <__aeabi_fdiv+0x12c>
 80007a4:	2001      	movs	r0, #1
 80007a6:	464a      	mov	r2, r9
 80007a8:	0033      	movs	r3, r6
 80007aa:	494e      	ldr	r1, [pc, #312]	; (80008e4 <__aeabi_fdiv+0x214>)
 80007ac:	4302      	orrs	r2, r0
 80007ae:	0092      	lsls	r2, r2, #2
 80007b0:	588a      	ldr	r2, [r1, r2]
 80007b2:	4063      	eors	r3, r4
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4697      	mov	pc, r2
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d113      	bne.n	80007e4 <__aeabi_fdiv+0x114>
 80007bc:	2304      	movs	r3, #4
 80007be:	4699      	mov	r9, r3
 80007c0:	3b03      	subs	r3, #3
 80007c2:	2700      	movs	r7, #0
 80007c4:	469a      	mov	sl, r3
 80007c6:	e79a      	b.n	80006fe <__aeabi_fdiv+0x2e>
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d105      	bne.n	80007d8 <__aeabi_fdiv+0x108>
 80007cc:	2308      	movs	r3, #8
 80007ce:	4699      	mov	r9, r3
 80007d0:	3b06      	subs	r3, #6
 80007d2:	27ff      	movs	r7, #255	; 0xff
 80007d4:	469a      	mov	sl, r3
 80007d6:	e792      	b.n	80006fe <__aeabi_fdiv+0x2e>
 80007d8:	230c      	movs	r3, #12
 80007da:	4699      	mov	r9, r3
 80007dc:	3b09      	subs	r3, #9
 80007de:	27ff      	movs	r7, #255	; 0xff
 80007e0:	469a      	mov	sl, r3
 80007e2:	e78c      	b.n	80006fe <__aeabi_fdiv+0x2e>
 80007e4:	0028      	movs	r0, r5
 80007e6:	f002 fa43 	bl	8002c70 <__clzsi2>
 80007ea:	2776      	movs	r7, #118	; 0x76
 80007ec:	1f43      	subs	r3, r0, #5
 80007ee:	409d      	lsls	r5, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	427f      	negs	r7, r7
 80007f4:	4699      	mov	r9, r3
 80007f6:	469a      	mov	sl, r3
 80007f8:	1a3f      	subs	r7, r7, r0
 80007fa:	e780      	b.n	80006fe <__aeabi_fdiv+0x2e>
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 fa37 	bl	8002c70 <__clzsi2>
 8000802:	4642      	mov	r2, r8
 8000804:	1f43      	subs	r3, r0, #5
 8000806:	2176      	movs	r1, #118	; 0x76
 8000808:	409a      	lsls	r2, r3
 800080a:	4249      	negs	r1, r1
 800080c:	1a09      	subs	r1, r1, r0
 800080e:	4690      	mov	r8, r2
 8000810:	2000      	movs	r0, #0
 8000812:	e785      	b.n	8000720 <__aeabi_fdiv+0x50>
 8000814:	21ff      	movs	r1, #255	; 0xff
 8000816:	2003      	movs	r0, #3
 8000818:	e782      	b.n	8000720 <__aeabi_fdiv+0x50>
 800081a:	001e      	movs	r6, r3
 800081c:	20ff      	movs	r0, #255	; 0xff
 800081e:	2500      	movs	r5, #0
 8000820:	e7b5      	b.n	800078e <__aeabi_fdiv+0xbe>
 8000822:	2301      	movs	r3, #1
 8000824:	1a1b      	subs	r3, r3, r0
 8000826:	2b1b      	cmp	r3, #27
 8000828:	dcaf      	bgt.n	800078a <__aeabi_fdiv+0xba>
 800082a:	379e      	adds	r7, #158	; 0x9e
 800082c:	0029      	movs	r1, r5
 800082e:	40bd      	lsls	r5, r7
 8000830:	40d9      	lsrs	r1, r3
 8000832:	1e6a      	subs	r2, r5, #1
 8000834:	4195      	sbcs	r5, r2
 8000836:	430d      	orrs	r5, r1
 8000838:	076b      	lsls	r3, r5, #29
 800083a:	d004      	beq.n	8000846 <__aeabi_fdiv+0x176>
 800083c:	230f      	movs	r3, #15
 800083e:	402b      	ands	r3, r5
 8000840:	2b04      	cmp	r3, #4
 8000842:	d000      	beq.n	8000846 <__aeabi_fdiv+0x176>
 8000844:	3504      	adds	r5, #4
 8000846:	016b      	lsls	r3, r5, #5
 8000848:	d544      	bpl.n	80008d4 <__aeabi_fdiv+0x204>
 800084a:	2001      	movs	r0, #1
 800084c:	2500      	movs	r5, #0
 800084e:	e79e      	b.n	800078e <__aeabi_fdiv+0xbe>
 8000850:	20ff      	movs	r0, #255	; 0xff
 8000852:	2500      	movs	r5, #0
 8000854:	e79b      	b.n	800078e <__aeabi_fdiv+0xbe>
 8000856:	2580      	movs	r5, #128	; 0x80
 8000858:	2600      	movs	r6, #0
 800085a:	20ff      	movs	r0, #255	; 0xff
 800085c:	03ed      	lsls	r5, r5, #15
 800085e:	e796      	b.n	800078e <__aeabi_fdiv+0xbe>
 8000860:	2300      	movs	r3, #0
 8000862:	4698      	mov	r8, r3
 8000864:	2080      	movs	r0, #128	; 0x80
 8000866:	03c0      	lsls	r0, r0, #15
 8000868:	4205      	tst	r5, r0
 800086a:	d009      	beq.n	8000880 <__aeabi_fdiv+0x1b0>
 800086c:	4643      	mov	r3, r8
 800086e:	4203      	tst	r3, r0
 8000870:	d106      	bne.n	8000880 <__aeabi_fdiv+0x1b0>
 8000872:	4645      	mov	r5, r8
 8000874:	4305      	orrs	r5, r0
 8000876:	026d      	lsls	r5, r5, #9
 8000878:	0026      	movs	r6, r4
 800087a:	20ff      	movs	r0, #255	; 0xff
 800087c:	0a6d      	lsrs	r5, r5, #9
 800087e:	e786      	b.n	800078e <__aeabi_fdiv+0xbe>
 8000880:	2080      	movs	r0, #128	; 0x80
 8000882:	03c0      	lsls	r0, r0, #15
 8000884:	4305      	orrs	r5, r0
 8000886:	026d      	lsls	r5, r5, #9
 8000888:	20ff      	movs	r0, #255	; 0xff
 800088a:	0a6d      	lsrs	r5, r5, #9
 800088c:	e77f      	b.n	800078e <__aeabi_fdiv+0xbe>
 800088e:	4641      	mov	r1, r8
 8000890:	016a      	lsls	r2, r5, #5
 8000892:	0148      	lsls	r0, r1, #5
 8000894:	4282      	cmp	r2, r0
 8000896:	d219      	bcs.n	80008cc <__aeabi_fdiv+0x1fc>
 8000898:	211b      	movs	r1, #27
 800089a:	2500      	movs	r5, #0
 800089c:	3f01      	subs	r7, #1
 800089e:	2601      	movs	r6, #1
 80008a0:	0014      	movs	r4, r2
 80008a2:	006d      	lsls	r5, r5, #1
 80008a4:	0052      	lsls	r2, r2, #1
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	db01      	blt.n	80008ae <__aeabi_fdiv+0x1de>
 80008aa:	4290      	cmp	r0, r2
 80008ac:	d801      	bhi.n	80008b2 <__aeabi_fdiv+0x1e2>
 80008ae:	1a12      	subs	r2, r2, r0
 80008b0:	4335      	orrs	r5, r6
 80008b2:	3901      	subs	r1, #1
 80008b4:	2900      	cmp	r1, #0
 80008b6:	d1f3      	bne.n	80008a0 <__aeabi_fdiv+0x1d0>
 80008b8:	1e50      	subs	r0, r2, #1
 80008ba:	4182      	sbcs	r2, r0
 80008bc:	0038      	movs	r0, r7
 80008be:	307f      	adds	r0, #127	; 0x7f
 80008c0:	001e      	movs	r6, r3
 80008c2:	4315      	orrs	r5, r2
 80008c4:	2800      	cmp	r0, #0
 80008c6:	dd00      	ble.n	80008ca <__aeabi_fdiv+0x1fa>
 80008c8:	e74b      	b.n	8000762 <__aeabi_fdiv+0x92>
 80008ca:	e7aa      	b.n	8000822 <__aeabi_fdiv+0x152>
 80008cc:	211a      	movs	r1, #26
 80008ce:	2501      	movs	r5, #1
 80008d0:	1a12      	subs	r2, r2, r0
 80008d2:	e7e4      	b.n	800089e <__aeabi_fdiv+0x1ce>
 80008d4:	01ad      	lsls	r5, r5, #6
 80008d6:	2000      	movs	r0, #0
 80008d8:	0a6d      	lsrs	r5, r5, #9
 80008da:	e758      	b.n	800078e <__aeabi_fdiv+0xbe>
 80008dc:	08009828 	.word	0x08009828
 80008e0:	f7ffffff 	.word	0xf7ffffff
 80008e4:	08009868 	.word	0x08009868

080008e8 <__aeabi_fmul>:
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ea:	4657      	mov	r7, sl
 80008ec:	464e      	mov	r6, r9
 80008ee:	4645      	mov	r5, r8
 80008f0:	46de      	mov	lr, fp
 80008f2:	0244      	lsls	r4, r0, #9
 80008f4:	b5e0      	push	{r5, r6, r7, lr}
 80008f6:	0045      	lsls	r5, r0, #1
 80008f8:	1c0f      	adds	r7, r1, #0
 80008fa:	0a64      	lsrs	r4, r4, #9
 80008fc:	0e2d      	lsrs	r5, r5, #24
 80008fe:	0fc6      	lsrs	r6, r0, #31
 8000900:	2d00      	cmp	r5, #0
 8000902:	d047      	beq.n	8000994 <__aeabi_fmul+0xac>
 8000904:	2dff      	cmp	r5, #255	; 0xff
 8000906:	d04d      	beq.n	80009a4 <__aeabi_fmul+0xbc>
 8000908:	2300      	movs	r3, #0
 800090a:	2080      	movs	r0, #128	; 0x80
 800090c:	469a      	mov	sl, r3
 800090e:	469b      	mov	fp, r3
 8000910:	00e4      	lsls	r4, r4, #3
 8000912:	04c0      	lsls	r0, r0, #19
 8000914:	4304      	orrs	r4, r0
 8000916:	3d7f      	subs	r5, #127	; 0x7f
 8000918:	0278      	lsls	r0, r7, #9
 800091a:	0a43      	lsrs	r3, r0, #9
 800091c:	4699      	mov	r9, r3
 800091e:	007a      	lsls	r2, r7, #1
 8000920:	0ffb      	lsrs	r3, r7, #31
 8000922:	4698      	mov	r8, r3
 8000924:	0e12      	lsrs	r2, r2, #24
 8000926:	464b      	mov	r3, r9
 8000928:	d044      	beq.n	80009b4 <__aeabi_fmul+0xcc>
 800092a:	2aff      	cmp	r2, #255	; 0xff
 800092c:	d011      	beq.n	8000952 <__aeabi_fmul+0x6a>
 800092e:	00d8      	lsls	r0, r3, #3
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	04db      	lsls	r3, r3, #19
 8000934:	4303      	orrs	r3, r0
 8000936:	4699      	mov	r9, r3
 8000938:	2000      	movs	r0, #0
 800093a:	3a7f      	subs	r2, #127	; 0x7f
 800093c:	18ad      	adds	r5, r5, r2
 800093e:	4647      	mov	r7, r8
 8000940:	4653      	mov	r3, sl
 8000942:	4077      	eors	r7, r6
 8000944:	1c69      	adds	r1, r5, #1
 8000946:	2b0f      	cmp	r3, #15
 8000948:	d83f      	bhi.n	80009ca <__aeabi_fmul+0xe2>
 800094a:	4a72      	ldr	r2, [pc, #456]	; (8000b14 <__aeabi_fmul+0x22c>)
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	58d3      	ldr	r3, [r2, r3]
 8000950:	469f      	mov	pc, r3
 8000952:	35ff      	adds	r5, #255	; 0xff
 8000954:	2b00      	cmp	r3, #0
 8000956:	d000      	beq.n	800095a <__aeabi_fmul+0x72>
 8000958:	e079      	b.n	8000a4e <__aeabi_fmul+0x166>
 800095a:	4652      	mov	r2, sl
 800095c:	2302      	movs	r3, #2
 800095e:	431a      	orrs	r2, r3
 8000960:	4692      	mov	sl, r2
 8000962:	2002      	movs	r0, #2
 8000964:	e7eb      	b.n	800093e <__aeabi_fmul+0x56>
 8000966:	4647      	mov	r7, r8
 8000968:	464c      	mov	r4, r9
 800096a:	4683      	mov	fp, r0
 800096c:	465b      	mov	r3, fp
 800096e:	2b02      	cmp	r3, #2
 8000970:	d028      	beq.n	80009c4 <__aeabi_fmul+0xdc>
 8000972:	2b03      	cmp	r3, #3
 8000974:	d100      	bne.n	8000978 <__aeabi_fmul+0x90>
 8000976:	e0c6      	b.n	8000b06 <__aeabi_fmul+0x21e>
 8000978:	2b01      	cmp	r3, #1
 800097a:	d14f      	bne.n	8000a1c <__aeabi_fmul+0x134>
 800097c:	2000      	movs	r0, #0
 800097e:	2400      	movs	r4, #0
 8000980:	05c0      	lsls	r0, r0, #23
 8000982:	07ff      	lsls	r7, r7, #31
 8000984:	4320      	orrs	r0, r4
 8000986:	4338      	orrs	r0, r7
 8000988:	bcf0      	pop	{r4, r5, r6, r7}
 800098a:	46bb      	mov	fp, r7
 800098c:	46b2      	mov	sl, r6
 800098e:	46a9      	mov	r9, r5
 8000990:	46a0      	mov	r8, r4
 8000992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000994:	2c00      	cmp	r4, #0
 8000996:	d171      	bne.n	8000a7c <__aeabi_fmul+0x194>
 8000998:	2304      	movs	r3, #4
 800099a:	469a      	mov	sl, r3
 800099c:	3b03      	subs	r3, #3
 800099e:	2500      	movs	r5, #0
 80009a0:	469b      	mov	fp, r3
 80009a2:	e7b9      	b.n	8000918 <__aeabi_fmul+0x30>
 80009a4:	2c00      	cmp	r4, #0
 80009a6:	d163      	bne.n	8000a70 <__aeabi_fmul+0x188>
 80009a8:	2308      	movs	r3, #8
 80009aa:	469a      	mov	sl, r3
 80009ac:	3b06      	subs	r3, #6
 80009ae:	25ff      	movs	r5, #255	; 0xff
 80009b0:	469b      	mov	fp, r3
 80009b2:	e7b1      	b.n	8000918 <__aeabi_fmul+0x30>
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d150      	bne.n	8000a5a <__aeabi_fmul+0x172>
 80009b8:	4652      	mov	r2, sl
 80009ba:	3301      	adds	r3, #1
 80009bc:	431a      	orrs	r2, r3
 80009be:	4692      	mov	sl, r2
 80009c0:	2001      	movs	r0, #1
 80009c2:	e7bc      	b.n	800093e <__aeabi_fmul+0x56>
 80009c4:	20ff      	movs	r0, #255	; 0xff
 80009c6:	2400      	movs	r4, #0
 80009c8:	e7da      	b.n	8000980 <__aeabi_fmul+0x98>
 80009ca:	4648      	mov	r0, r9
 80009cc:	0c26      	lsrs	r6, r4, #16
 80009ce:	0424      	lsls	r4, r4, #16
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	0404      	lsls	r4, r0, #16
 80009d4:	0c24      	lsrs	r4, r4, #16
 80009d6:	464b      	mov	r3, r9
 80009d8:	0020      	movs	r0, r4
 80009da:	0c1b      	lsrs	r3, r3, #16
 80009dc:	4350      	muls	r0, r2
 80009de:	4374      	muls	r4, r6
 80009e0:	435a      	muls	r2, r3
 80009e2:	435e      	muls	r6, r3
 80009e4:	1912      	adds	r2, r2, r4
 80009e6:	0c03      	lsrs	r3, r0, #16
 80009e8:	189b      	adds	r3, r3, r2
 80009ea:	429c      	cmp	r4, r3
 80009ec:	d903      	bls.n	80009f6 <__aeabi_fmul+0x10e>
 80009ee:	2280      	movs	r2, #128	; 0x80
 80009f0:	0252      	lsls	r2, r2, #9
 80009f2:	4694      	mov	ip, r2
 80009f4:	4466      	add	r6, ip
 80009f6:	0400      	lsls	r0, r0, #16
 80009f8:	041a      	lsls	r2, r3, #16
 80009fa:	0c00      	lsrs	r0, r0, #16
 80009fc:	1812      	adds	r2, r2, r0
 80009fe:	0194      	lsls	r4, r2, #6
 8000a00:	1e60      	subs	r0, r4, #1
 8000a02:	4184      	sbcs	r4, r0
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	0e92      	lsrs	r2, r2, #26
 8000a08:	199b      	adds	r3, r3, r6
 8000a0a:	4314      	orrs	r4, r2
 8000a0c:	019b      	lsls	r3, r3, #6
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	d572      	bpl.n	8000afa <__aeabi_fmul+0x212>
 8000a14:	2001      	movs	r0, #1
 8000a16:	0863      	lsrs	r3, r4, #1
 8000a18:	4004      	ands	r4, r0
 8000a1a:	431c      	orrs	r4, r3
 8000a1c:	0008      	movs	r0, r1
 8000a1e:	307f      	adds	r0, #127	; 0x7f
 8000a20:	2800      	cmp	r0, #0
 8000a22:	dd3c      	ble.n	8000a9e <__aeabi_fmul+0x1b6>
 8000a24:	0763      	lsls	r3, r4, #29
 8000a26:	d004      	beq.n	8000a32 <__aeabi_fmul+0x14a>
 8000a28:	230f      	movs	r3, #15
 8000a2a:	4023      	ands	r3, r4
 8000a2c:	2b04      	cmp	r3, #4
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_fmul+0x14a>
 8000a30:	3404      	adds	r4, #4
 8000a32:	0123      	lsls	r3, r4, #4
 8000a34:	d503      	bpl.n	8000a3e <__aeabi_fmul+0x156>
 8000a36:	3180      	adds	r1, #128	; 0x80
 8000a38:	0008      	movs	r0, r1
 8000a3a:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <__aeabi_fmul+0x230>)
 8000a3c:	401c      	ands	r4, r3
 8000a3e:	28fe      	cmp	r0, #254	; 0xfe
 8000a40:	dcc0      	bgt.n	80009c4 <__aeabi_fmul+0xdc>
 8000a42:	01a4      	lsls	r4, r4, #6
 8000a44:	0a64      	lsrs	r4, r4, #9
 8000a46:	b2c0      	uxtb	r0, r0
 8000a48:	e79a      	b.n	8000980 <__aeabi_fmul+0x98>
 8000a4a:	0037      	movs	r7, r6
 8000a4c:	e78e      	b.n	800096c <__aeabi_fmul+0x84>
 8000a4e:	4652      	mov	r2, sl
 8000a50:	2303      	movs	r3, #3
 8000a52:	431a      	orrs	r2, r3
 8000a54:	4692      	mov	sl, r2
 8000a56:	2003      	movs	r0, #3
 8000a58:	e771      	b.n	800093e <__aeabi_fmul+0x56>
 8000a5a:	4648      	mov	r0, r9
 8000a5c:	f002 f908 	bl	8002c70 <__clzsi2>
 8000a60:	464a      	mov	r2, r9
 8000a62:	1f43      	subs	r3, r0, #5
 8000a64:	409a      	lsls	r2, r3
 8000a66:	1a2d      	subs	r5, r5, r0
 8000a68:	4691      	mov	r9, r2
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	3d76      	subs	r5, #118	; 0x76
 8000a6e:	e766      	b.n	800093e <__aeabi_fmul+0x56>
 8000a70:	230c      	movs	r3, #12
 8000a72:	469a      	mov	sl, r3
 8000a74:	3b09      	subs	r3, #9
 8000a76:	25ff      	movs	r5, #255	; 0xff
 8000a78:	469b      	mov	fp, r3
 8000a7a:	e74d      	b.n	8000918 <__aeabi_fmul+0x30>
 8000a7c:	0020      	movs	r0, r4
 8000a7e:	f002 f8f7 	bl	8002c70 <__clzsi2>
 8000a82:	2576      	movs	r5, #118	; 0x76
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409c      	lsls	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	426d      	negs	r5, r5
 8000a8c:	469a      	mov	sl, r3
 8000a8e:	469b      	mov	fp, r3
 8000a90:	1a2d      	subs	r5, r5, r0
 8000a92:	e741      	b.n	8000918 <__aeabi_fmul+0x30>
 8000a94:	2480      	movs	r4, #128	; 0x80
 8000a96:	2700      	movs	r7, #0
 8000a98:	20ff      	movs	r0, #255	; 0xff
 8000a9a:	03e4      	lsls	r4, r4, #15
 8000a9c:	e770      	b.n	8000980 <__aeabi_fmul+0x98>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	1a1b      	subs	r3, r3, r0
 8000aa2:	2b1b      	cmp	r3, #27
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_fmul+0x1c0>
 8000aa6:	e769      	b.n	800097c <__aeabi_fmul+0x94>
 8000aa8:	319e      	adds	r1, #158	; 0x9e
 8000aaa:	0020      	movs	r0, r4
 8000aac:	408c      	lsls	r4, r1
 8000aae:	40d8      	lsrs	r0, r3
 8000ab0:	1e63      	subs	r3, r4, #1
 8000ab2:	419c      	sbcs	r4, r3
 8000ab4:	4304      	orrs	r4, r0
 8000ab6:	0763      	lsls	r3, r4, #29
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_fmul+0x1dc>
 8000aba:	230f      	movs	r3, #15
 8000abc:	4023      	ands	r3, r4
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_fmul+0x1dc>
 8000ac2:	3404      	adds	r4, #4
 8000ac4:	0163      	lsls	r3, r4, #5
 8000ac6:	d51a      	bpl.n	8000afe <__aeabi_fmul+0x216>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	2400      	movs	r4, #0
 8000acc:	e758      	b.n	8000980 <__aeabi_fmul+0x98>
 8000ace:	2080      	movs	r0, #128	; 0x80
 8000ad0:	03c0      	lsls	r0, r0, #15
 8000ad2:	4204      	tst	r4, r0
 8000ad4:	d009      	beq.n	8000aea <__aeabi_fmul+0x202>
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	4203      	tst	r3, r0
 8000ada:	d106      	bne.n	8000aea <__aeabi_fmul+0x202>
 8000adc:	464c      	mov	r4, r9
 8000ade:	4304      	orrs	r4, r0
 8000ae0:	0264      	lsls	r4, r4, #9
 8000ae2:	4647      	mov	r7, r8
 8000ae4:	20ff      	movs	r0, #255	; 0xff
 8000ae6:	0a64      	lsrs	r4, r4, #9
 8000ae8:	e74a      	b.n	8000980 <__aeabi_fmul+0x98>
 8000aea:	2080      	movs	r0, #128	; 0x80
 8000aec:	03c0      	lsls	r0, r0, #15
 8000aee:	4304      	orrs	r4, r0
 8000af0:	0264      	lsls	r4, r4, #9
 8000af2:	0037      	movs	r7, r6
 8000af4:	20ff      	movs	r0, #255	; 0xff
 8000af6:	0a64      	lsrs	r4, r4, #9
 8000af8:	e742      	b.n	8000980 <__aeabi_fmul+0x98>
 8000afa:	0029      	movs	r1, r5
 8000afc:	e78e      	b.n	8000a1c <__aeabi_fmul+0x134>
 8000afe:	01a4      	lsls	r4, r4, #6
 8000b00:	2000      	movs	r0, #0
 8000b02:	0a64      	lsrs	r4, r4, #9
 8000b04:	e73c      	b.n	8000980 <__aeabi_fmul+0x98>
 8000b06:	2080      	movs	r0, #128	; 0x80
 8000b08:	03c0      	lsls	r0, r0, #15
 8000b0a:	4304      	orrs	r4, r0
 8000b0c:	0264      	lsls	r4, r4, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a64      	lsrs	r4, r4, #9
 8000b12:	e735      	b.n	8000980 <__aeabi_fmul+0x98>
 8000b14:	080098a8 	.word	0x080098a8
 8000b18:	f7ffffff 	.word	0xf7ffffff

08000b1c <__aeabi_fsub>:
 8000b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1e:	4646      	mov	r6, r8
 8000b20:	46d6      	mov	lr, sl
 8000b22:	464f      	mov	r7, r9
 8000b24:	0243      	lsls	r3, r0, #9
 8000b26:	0a5b      	lsrs	r3, r3, #9
 8000b28:	00da      	lsls	r2, r3, #3
 8000b2a:	4694      	mov	ip, r2
 8000b2c:	024a      	lsls	r2, r1, #9
 8000b2e:	b5c0      	push	{r6, r7, lr}
 8000b30:	0044      	lsls	r4, r0, #1
 8000b32:	0a56      	lsrs	r6, r2, #9
 8000b34:	1c05      	adds	r5, r0, #0
 8000b36:	46b0      	mov	r8, r6
 8000b38:	0e24      	lsrs	r4, r4, #24
 8000b3a:	004e      	lsls	r6, r1, #1
 8000b3c:	0992      	lsrs	r2, r2, #6
 8000b3e:	001f      	movs	r7, r3
 8000b40:	0020      	movs	r0, r4
 8000b42:	4692      	mov	sl, r2
 8000b44:	0fed      	lsrs	r5, r5, #31
 8000b46:	0e36      	lsrs	r6, r6, #24
 8000b48:	0fc9      	lsrs	r1, r1, #31
 8000b4a:	2eff      	cmp	r6, #255	; 0xff
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fsub+0x34>
 8000b4e:	e07f      	b.n	8000c50 <__aeabi_fsub+0x134>
 8000b50:	2201      	movs	r2, #1
 8000b52:	4051      	eors	r1, r2
 8000b54:	428d      	cmp	r5, r1
 8000b56:	d051      	beq.n	8000bfc <__aeabi_fsub+0xe0>
 8000b58:	1ba2      	subs	r2, r4, r6
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	2a00      	cmp	r2, #0
 8000b5e:	dc00      	bgt.n	8000b62 <__aeabi_fsub+0x46>
 8000b60:	e07e      	b.n	8000c60 <__aeabi_fsub+0x144>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_fsub+0x4c>
 8000b66:	e099      	b.n	8000c9c <__aeabi_fsub+0x180>
 8000b68:	2cff      	cmp	r4, #255	; 0xff
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_fsub+0x52>
 8000b6c:	e08c      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	4652      	mov	r2, sl
 8000b72:	04db      	lsls	r3, r3, #19
 8000b74:	431a      	orrs	r2, r3
 8000b76:	4692      	mov	sl, r2
 8000b78:	464a      	mov	r2, r9
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2a1b      	cmp	r2, #27
 8000b7e:	dc08      	bgt.n	8000b92 <__aeabi_fsub+0x76>
 8000b80:	4653      	mov	r3, sl
 8000b82:	2120      	movs	r1, #32
 8000b84:	40d3      	lsrs	r3, r2
 8000b86:	1a89      	subs	r1, r1, r2
 8000b88:	4652      	mov	r2, sl
 8000b8a:	408a      	lsls	r2, r1
 8000b8c:	1e51      	subs	r1, r2, #1
 8000b8e:	418a      	sbcs	r2, r1
 8000b90:	4313      	orrs	r3, r2
 8000b92:	4662      	mov	r2, ip
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	015a      	lsls	r2, r3, #5
 8000b98:	d400      	bmi.n	8000b9c <__aeabi_fsub+0x80>
 8000b9a:	e0f3      	b.n	8000d84 <__aeabi_fsub+0x268>
 8000b9c:	019b      	lsls	r3, r3, #6
 8000b9e:	099e      	lsrs	r6, r3, #6
 8000ba0:	0030      	movs	r0, r6
 8000ba2:	f002 f865 	bl	8002c70 <__clzsi2>
 8000ba6:	3805      	subs	r0, #5
 8000ba8:	4086      	lsls	r6, r0
 8000baa:	4284      	cmp	r4, r0
 8000bac:	dd00      	ble.n	8000bb0 <__aeabi_fsub+0x94>
 8000bae:	e0f7      	b.n	8000da0 <__aeabi_fsub+0x284>
 8000bb0:	0032      	movs	r2, r6
 8000bb2:	1b04      	subs	r4, r0, r4
 8000bb4:	2020      	movs	r0, #32
 8000bb6:	3401      	adds	r4, #1
 8000bb8:	40e2      	lsrs	r2, r4
 8000bba:	1b04      	subs	r4, r0, r4
 8000bbc:	40a6      	lsls	r6, r4
 8000bbe:	0033      	movs	r3, r6
 8000bc0:	1e5e      	subs	r6, r3, #1
 8000bc2:	41b3      	sbcs	r3, r6
 8000bc4:	2400      	movs	r4, #0
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	075a      	lsls	r2, r3, #29
 8000bca:	d004      	beq.n	8000bd6 <__aeabi_fsub+0xba>
 8000bcc:	220f      	movs	r2, #15
 8000bce:	401a      	ands	r2, r3
 8000bd0:	2a04      	cmp	r2, #4
 8000bd2:	d000      	beq.n	8000bd6 <__aeabi_fsub+0xba>
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	015a      	lsls	r2, r3, #5
 8000bd8:	d400      	bmi.n	8000bdc <__aeabi_fsub+0xc0>
 8000bda:	e0d6      	b.n	8000d8a <__aeabi_fsub+0x26e>
 8000bdc:	1c62      	adds	r2, r4, #1
 8000bde:	2cfe      	cmp	r4, #254	; 0xfe
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fsub+0xc8>
 8000be2:	e0da      	b.n	8000d9a <__aeabi_fsub+0x27e>
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	0a5f      	lsrs	r7, r3, #9
 8000be8:	b2d0      	uxtb	r0, r2
 8000bea:	05c0      	lsls	r0, r0, #23
 8000bec:	4338      	orrs	r0, r7
 8000bee:	07ed      	lsls	r5, r5, #31
 8000bf0:	4328      	orrs	r0, r5
 8000bf2:	bce0      	pop	{r5, r6, r7}
 8000bf4:	46ba      	mov	sl, r7
 8000bf6:	46b1      	mov	r9, r6
 8000bf8:	46a8      	mov	r8, r5
 8000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bfc:	1ba2      	subs	r2, r4, r6
 8000bfe:	4691      	mov	r9, r2
 8000c00:	2a00      	cmp	r2, #0
 8000c02:	dd63      	ble.n	8000ccc <__aeabi_fsub+0x1b0>
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fsub+0xee>
 8000c08:	e099      	b.n	8000d3e <__aeabi_fsub+0x222>
 8000c0a:	2cff      	cmp	r4, #255	; 0xff
 8000c0c:	d03c      	beq.n	8000c88 <__aeabi_fsub+0x16c>
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	4652      	mov	r2, sl
 8000c12:	04db      	lsls	r3, r3, #19
 8000c14:	431a      	orrs	r2, r3
 8000c16:	4692      	mov	sl, r2
 8000c18:	464a      	mov	r2, r9
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2a1b      	cmp	r2, #27
 8000c1e:	dc08      	bgt.n	8000c32 <__aeabi_fsub+0x116>
 8000c20:	4653      	mov	r3, sl
 8000c22:	2120      	movs	r1, #32
 8000c24:	40d3      	lsrs	r3, r2
 8000c26:	1a89      	subs	r1, r1, r2
 8000c28:	4652      	mov	r2, sl
 8000c2a:	408a      	lsls	r2, r1
 8000c2c:	1e51      	subs	r1, r2, #1
 8000c2e:	418a      	sbcs	r2, r1
 8000c30:	4313      	orrs	r3, r2
 8000c32:	4463      	add	r3, ip
 8000c34:	015a      	lsls	r2, r3, #5
 8000c36:	d400      	bmi.n	8000c3a <__aeabi_fsub+0x11e>
 8000c38:	e0a4      	b.n	8000d84 <__aeabi_fsub+0x268>
 8000c3a:	3401      	adds	r4, #1
 8000c3c:	2cff      	cmp	r4, #255	; 0xff
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_fsub+0x126>
 8000c40:	e0ab      	b.n	8000d9a <__aeabi_fsub+0x27e>
 8000c42:	2201      	movs	r2, #1
 8000c44:	4997      	ldr	r1, [pc, #604]	; (8000ea4 <__aeabi_fsub+0x388>)
 8000c46:	401a      	ands	r2, r3
 8000c48:	085b      	lsrs	r3, r3, #1
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	e7bb      	b.n	8000bc8 <__aeabi_fsub+0xac>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d032      	beq.n	8000cba <__aeabi_fsub+0x19e>
 8000c54:	428d      	cmp	r5, r1
 8000c56:	d035      	beq.n	8000cc4 <__aeabi_fsub+0x1a8>
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	4252      	negs	r2, r2
 8000c5c:	4691      	mov	r9, r2
 8000c5e:	44a1      	add	r9, r4
 8000c60:	464a      	mov	r2, r9
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d051      	beq.n	8000d0a <__aeabi_fsub+0x1ee>
 8000c66:	1b30      	subs	r0, r6, r4
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_fsub+0x152>
 8000c6c:	e09c      	b.n	8000da8 <__aeabi_fsub+0x28c>
 8000c6e:	4663      	mov	r3, ip
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x15a>
 8000c74:	e0df      	b.n	8000e36 <__aeabi_fsub+0x31a>
 8000c76:	3801      	subs	r0, #1
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_fsub+0x162>
 8000c7c:	e0f7      	b.n	8000e6e <__aeabi_fsub+0x352>
 8000c7e:	2eff      	cmp	r6, #255	; 0xff
 8000c80:	d000      	beq.n	8000c84 <__aeabi_fsub+0x168>
 8000c82:	e099      	b.n	8000db8 <__aeabi_fsub+0x29c>
 8000c84:	000d      	movs	r5, r1
 8000c86:	4643      	mov	r3, r8
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_fsub+0x172>
 8000c8c:	e085      	b.n	8000d9a <__aeabi_fsub+0x27e>
 8000c8e:	2780      	movs	r7, #128	; 0x80
 8000c90:	03ff      	lsls	r7, r7, #15
 8000c92:	431f      	orrs	r7, r3
 8000c94:	027f      	lsls	r7, r7, #9
 8000c96:	20ff      	movs	r0, #255	; 0xff
 8000c98:	0a7f      	lsrs	r7, r7, #9
 8000c9a:	e7a6      	b.n	8000bea <__aeabi_fsub+0xce>
 8000c9c:	4652      	mov	r2, sl
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	d074      	beq.n	8000d8c <__aeabi_fsub+0x270>
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4252      	negs	r2, r2
 8000ca6:	4690      	mov	r8, r2
 8000ca8:	44c1      	add	r9, r8
 8000caa:	464a      	mov	r2, r9
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_fsub+0x196>
 8000cb0:	e0c8      	b.n	8000e44 <__aeabi_fsub+0x328>
 8000cb2:	2cff      	cmp	r4, #255	; 0xff
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fsub+0x19c>
 8000cb6:	e75f      	b.n	8000b78 <__aeabi_fsub+0x5c>
 8000cb8:	e7e6      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4051      	eors	r1, r2
 8000cbe:	42a9      	cmp	r1, r5
 8000cc0:	d000      	beq.n	8000cc4 <__aeabi_fsub+0x1a8>
 8000cc2:	e749      	b.n	8000b58 <__aeabi_fsub+0x3c>
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	4252      	negs	r2, r2
 8000cc8:	4691      	mov	r9, r2
 8000cca:	44a1      	add	r9, r4
 8000ccc:	464a      	mov	r2, r9
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	d043      	beq.n	8000d5a <__aeabi_fsub+0x23e>
 8000cd2:	1b31      	subs	r1, r6, r4
 8000cd4:	2c00      	cmp	r4, #0
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fsub+0x1be>
 8000cd8:	e08c      	b.n	8000df4 <__aeabi_fsub+0x2d8>
 8000cda:	2eff      	cmp	r6, #255	; 0xff
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x1c4>
 8000cde:	e092      	b.n	8000e06 <__aeabi_fsub+0x2ea>
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	4662      	mov	r2, ip
 8000ce4:	04db      	lsls	r3, r3, #19
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	4694      	mov	ip, r2
 8000cea:	2301      	movs	r3, #1
 8000cec:	291b      	cmp	r1, #27
 8000cee:	dc09      	bgt.n	8000d04 <__aeabi_fsub+0x1e8>
 8000cf0:	2020      	movs	r0, #32
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	40cb      	lsrs	r3, r1
 8000cf8:	1a41      	subs	r1, r0, r1
 8000cfa:	408a      	lsls	r2, r1
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	1e48      	subs	r0, r1, #1
 8000d00:	4181      	sbcs	r1, r0
 8000d02:	430b      	orrs	r3, r1
 8000d04:	0034      	movs	r4, r6
 8000d06:	4453      	add	r3, sl
 8000d08:	e794      	b.n	8000c34 <__aeabi_fsub+0x118>
 8000d0a:	22fe      	movs	r2, #254	; 0xfe
 8000d0c:	1c66      	adds	r6, r4, #1
 8000d0e:	4232      	tst	r2, r6
 8000d10:	d164      	bne.n	8000ddc <__aeabi_fsub+0x2c0>
 8000d12:	2c00      	cmp	r4, #0
 8000d14:	d000      	beq.n	8000d18 <__aeabi_fsub+0x1fc>
 8000d16:	e082      	b.n	8000e1e <__aeabi_fsub+0x302>
 8000d18:	4663      	mov	r3, ip
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_fsub+0x204>
 8000d1e:	e0ab      	b.n	8000e78 <__aeabi_fsub+0x35c>
 8000d20:	4653      	mov	r3, sl
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x20c>
 8000d26:	e760      	b.n	8000bea <__aeabi_fsub+0xce>
 8000d28:	4663      	mov	r3, ip
 8000d2a:	4652      	mov	r2, sl
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	015a      	lsls	r2, r3, #5
 8000d30:	d400      	bmi.n	8000d34 <__aeabi_fsub+0x218>
 8000d32:	e0aa      	b.n	8000e8a <__aeabi_fsub+0x36e>
 8000d34:	4663      	mov	r3, ip
 8000d36:	4652      	mov	r2, sl
 8000d38:	000d      	movs	r5, r1
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	e744      	b.n	8000bc8 <__aeabi_fsub+0xac>
 8000d3e:	4652      	mov	r2, sl
 8000d40:	2a00      	cmp	r2, #0
 8000d42:	d023      	beq.n	8000d8c <__aeabi_fsub+0x270>
 8000d44:	2201      	movs	r2, #1
 8000d46:	4252      	negs	r2, r2
 8000d48:	4690      	mov	r8, r2
 8000d4a:	44c1      	add	r9, r8
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	d075      	beq.n	8000e3e <__aeabi_fsub+0x322>
 8000d52:	2cff      	cmp	r4, #255	; 0xff
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fsub+0x23c>
 8000d56:	e75f      	b.n	8000c18 <__aeabi_fsub+0xfc>
 8000d58:	e796      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000d5a:	26fe      	movs	r6, #254	; 0xfe
 8000d5c:	3401      	adds	r4, #1
 8000d5e:	4226      	tst	r6, r4
 8000d60:	d153      	bne.n	8000e0a <__aeabi_fsub+0x2ee>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d172      	bne.n	8000e4c <__aeabi_fsub+0x330>
 8000d66:	4663      	mov	r3, ip
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x252>
 8000d6c:	e093      	b.n	8000e96 <__aeabi_fsub+0x37a>
 8000d6e:	4653      	mov	r3, sl
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x25a>
 8000d74:	e739      	b.n	8000bea <__aeabi_fsub+0xce>
 8000d76:	4463      	add	r3, ip
 8000d78:	2400      	movs	r4, #0
 8000d7a:	015a      	lsls	r2, r3, #5
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_fsub+0x268>
 8000d7e:	4a4a      	ldr	r2, [pc, #296]	; (8000ea8 <__aeabi_fsub+0x38c>)
 8000d80:	3401      	adds	r4, #1
 8000d82:	4013      	ands	r3, r2
 8000d84:	075a      	lsls	r2, r3, #29
 8000d86:	d000      	beq.n	8000d8a <__aeabi_fsub+0x26e>
 8000d88:	e720      	b.n	8000bcc <__aeabi_fsub+0xb0>
 8000d8a:	08db      	lsrs	r3, r3, #3
 8000d8c:	2cff      	cmp	r4, #255	; 0xff
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_fsub+0x276>
 8000d90:	e77a      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000d92:	025b      	lsls	r3, r3, #9
 8000d94:	0a5f      	lsrs	r7, r3, #9
 8000d96:	b2e0      	uxtb	r0, r4
 8000d98:	e727      	b.n	8000bea <__aeabi_fsub+0xce>
 8000d9a:	20ff      	movs	r0, #255	; 0xff
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	e724      	b.n	8000bea <__aeabi_fsub+0xce>
 8000da0:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <__aeabi_fsub+0x38c>)
 8000da2:	1a24      	subs	r4, r4, r0
 8000da4:	4033      	ands	r3, r6
 8000da6:	e70f      	b.n	8000bc8 <__aeabi_fsub+0xac>
 8000da8:	2eff      	cmp	r6, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x292>
 8000dac:	e76a      	b.n	8000c84 <__aeabi_fsub+0x168>
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	4662      	mov	r2, ip
 8000db2:	04db      	lsls	r3, r3, #19
 8000db4:	431a      	orrs	r2, r3
 8000db6:	4694      	mov	ip, r2
 8000db8:	2301      	movs	r3, #1
 8000dba:	281b      	cmp	r0, #27
 8000dbc:	dc09      	bgt.n	8000dd2 <__aeabi_fsub+0x2b6>
 8000dbe:	2420      	movs	r4, #32
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	4662      	mov	r2, ip
 8000dc4:	40c3      	lsrs	r3, r0
 8000dc6:	1a20      	subs	r0, r4, r0
 8000dc8:	4082      	lsls	r2, r0
 8000dca:	0010      	movs	r0, r2
 8000dcc:	1e44      	subs	r4, r0, #1
 8000dce:	41a0      	sbcs	r0, r4
 8000dd0:	4303      	orrs	r3, r0
 8000dd2:	4652      	mov	r2, sl
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	0034      	movs	r4, r6
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	e6dc      	b.n	8000b96 <__aeabi_fsub+0x7a>
 8000ddc:	4663      	mov	r3, ip
 8000dde:	4652      	mov	r2, sl
 8000de0:	1a9e      	subs	r6, r3, r2
 8000de2:	0173      	lsls	r3, r6, #5
 8000de4:	d417      	bmi.n	8000e16 <__aeabi_fsub+0x2fa>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d000      	beq.n	8000dec <__aeabi_fsub+0x2d0>
 8000dea:	e6d9      	b.n	8000ba0 <__aeabi_fsub+0x84>
 8000dec:	2500      	movs	r5, #0
 8000dee:	2000      	movs	r0, #0
 8000df0:	2700      	movs	r7, #0
 8000df2:	e6fa      	b.n	8000bea <__aeabi_fsub+0xce>
 8000df4:	4663      	mov	r3, ip
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d044      	beq.n	8000e84 <__aeabi_fsub+0x368>
 8000dfa:	3901      	subs	r1, #1
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d04c      	beq.n	8000e9a <__aeabi_fsub+0x37e>
 8000e00:	2eff      	cmp	r6, #255	; 0xff
 8000e02:	d000      	beq.n	8000e06 <__aeabi_fsub+0x2ea>
 8000e04:	e771      	b.n	8000cea <__aeabi_fsub+0x1ce>
 8000e06:	4643      	mov	r3, r8
 8000e08:	e73e      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000e0a:	2cff      	cmp	r4, #255	; 0xff
 8000e0c:	d0c5      	beq.n	8000d9a <__aeabi_fsub+0x27e>
 8000e0e:	4652      	mov	r2, sl
 8000e10:	4462      	add	r2, ip
 8000e12:	0853      	lsrs	r3, r2, #1
 8000e14:	e7b6      	b.n	8000d84 <__aeabi_fsub+0x268>
 8000e16:	4663      	mov	r3, ip
 8000e18:	000d      	movs	r5, r1
 8000e1a:	1ad6      	subs	r6, r2, r3
 8000e1c:	e6c0      	b.n	8000ba0 <__aeabi_fsub+0x84>
 8000e1e:	4662      	mov	r2, ip
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	d116      	bne.n	8000e52 <__aeabi_fsub+0x336>
 8000e24:	4653      	mov	r3, sl
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d000      	beq.n	8000e2c <__aeabi_fsub+0x310>
 8000e2a:	e72b      	b.n	8000c84 <__aeabi_fsub+0x168>
 8000e2c:	2780      	movs	r7, #128	; 0x80
 8000e2e:	2500      	movs	r5, #0
 8000e30:	20ff      	movs	r0, #255	; 0xff
 8000e32:	03ff      	lsls	r7, r7, #15
 8000e34:	e6d9      	b.n	8000bea <__aeabi_fsub+0xce>
 8000e36:	000d      	movs	r5, r1
 8000e38:	4643      	mov	r3, r8
 8000e3a:	0034      	movs	r4, r6
 8000e3c:	e7a6      	b.n	8000d8c <__aeabi_fsub+0x270>
 8000e3e:	4653      	mov	r3, sl
 8000e40:	4463      	add	r3, ip
 8000e42:	e6f7      	b.n	8000c34 <__aeabi_fsub+0x118>
 8000e44:	4663      	mov	r3, ip
 8000e46:	4652      	mov	r2, sl
 8000e48:	1a9b      	subs	r3, r3, r2
 8000e4a:	e6a4      	b.n	8000b96 <__aeabi_fsub+0x7a>
 8000e4c:	4662      	mov	r2, ip
 8000e4e:	2a00      	cmp	r2, #0
 8000e50:	d0d9      	beq.n	8000e06 <__aeabi_fsub+0x2ea>
 8000e52:	4652      	mov	r2, sl
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d100      	bne.n	8000e5a <__aeabi_fsub+0x33e>
 8000e58:	e716      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	03d2      	lsls	r2, r2, #15
 8000e5e:	4213      	tst	r3, r2
 8000e60:	d100      	bne.n	8000e64 <__aeabi_fsub+0x348>
 8000e62:	e711      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000e64:	4640      	mov	r0, r8
 8000e66:	4210      	tst	r0, r2
 8000e68:	d000      	beq.n	8000e6c <__aeabi_fsub+0x350>
 8000e6a:	e70d      	b.n	8000c88 <__aeabi_fsub+0x16c>
 8000e6c:	e70a      	b.n	8000c84 <__aeabi_fsub+0x168>
 8000e6e:	4652      	mov	r2, sl
 8000e70:	000d      	movs	r5, r1
 8000e72:	0034      	movs	r4, r6
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	e68e      	b.n	8000b96 <__aeabi_fsub+0x7a>
 8000e78:	4653      	mov	r3, sl
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d008      	beq.n	8000e90 <__aeabi_fsub+0x374>
 8000e7e:	000d      	movs	r5, r1
 8000e80:	4647      	mov	r7, r8
 8000e82:	e6b2      	b.n	8000bea <__aeabi_fsub+0xce>
 8000e84:	4643      	mov	r3, r8
 8000e86:	0034      	movs	r4, r6
 8000e88:	e780      	b.n	8000d8c <__aeabi_fsub+0x270>
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_fsub+0x374>
 8000e8e:	e779      	b.n	8000d84 <__aeabi_fsub+0x268>
 8000e90:	2500      	movs	r5, #0
 8000e92:	2700      	movs	r7, #0
 8000e94:	e6a9      	b.n	8000bea <__aeabi_fsub+0xce>
 8000e96:	4647      	mov	r7, r8
 8000e98:	e6a7      	b.n	8000bea <__aeabi_fsub+0xce>
 8000e9a:	4653      	mov	r3, sl
 8000e9c:	0034      	movs	r4, r6
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e6c8      	b.n	8000c34 <__aeabi_fsub+0x118>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	7dffffff 	.word	0x7dffffff
 8000ea8:	fbffffff 	.word	0xfbffffff

08000eac <__aeabi_i2f>:
 8000eac:	b570      	push	{r4, r5, r6, lr}
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d013      	beq.n	8000eda <__aeabi_i2f+0x2e>
 8000eb2:	17c3      	asrs	r3, r0, #31
 8000eb4:	18c5      	adds	r5, r0, r3
 8000eb6:	405d      	eors	r5, r3
 8000eb8:	0fc4      	lsrs	r4, r0, #31
 8000eba:	0028      	movs	r0, r5
 8000ebc:	f001 fed8 	bl	8002c70 <__clzsi2>
 8000ec0:	239e      	movs	r3, #158	; 0x9e
 8000ec2:	0001      	movs	r1, r0
 8000ec4:	1a1b      	subs	r3, r3, r0
 8000ec6:	2b96      	cmp	r3, #150	; 0x96
 8000ec8:	dc0f      	bgt.n	8000eea <__aeabi_i2f+0x3e>
 8000eca:	2808      	cmp	r0, #8
 8000ecc:	dd01      	ble.n	8000ed2 <__aeabi_i2f+0x26>
 8000ece:	3908      	subs	r1, #8
 8000ed0:	408d      	lsls	r5, r1
 8000ed2:	026d      	lsls	r5, r5, #9
 8000ed4:	0a6d      	lsrs	r5, r5, #9
 8000ed6:	b2d8      	uxtb	r0, r3
 8000ed8:	e002      	b.n	8000ee0 <__aeabi_i2f+0x34>
 8000eda:	2400      	movs	r4, #0
 8000edc:	2000      	movs	r0, #0
 8000ede:	2500      	movs	r5, #0
 8000ee0:	05c0      	lsls	r0, r0, #23
 8000ee2:	4328      	orrs	r0, r5
 8000ee4:	07e4      	lsls	r4, r4, #31
 8000ee6:	4320      	orrs	r0, r4
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
 8000eea:	2b99      	cmp	r3, #153	; 0x99
 8000eec:	dd0b      	ble.n	8000f06 <__aeabi_i2f+0x5a>
 8000eee:	2205      	movs	r2, #5
 8000ef0:	002e      	movs	r6, r5
 8000ef2:	1a12      	subs	r2, r2, r0
 8000ef4:	40d6      	lsrs	r6, r2
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	321b      	adds	r2, #27
 8000efa:	4095      	lsls	r5, r2
 8000efc:	0028      	movs	r0, r5
 8000efe:	1e45      	subs	r5, r0, #1
 8000f00:	41a8      	sbcs	r0, r5
 8000f02:	0035      	movs	r5, r6
 8000f04:	4305      	orrs	r5, r0
 8000f06:	2905      	cmp	r1, #5
 8000f08:	dd01      	ble.n	8000f0e <__aeabi_i2f+0x62>
 8000f0a:	1f4a      	subs	r2, r1, #5
 8000f0c:	4095      	lsls	r5, r2
 8000f0e:	002a      	movs	r2, r5
 8000f10:	4e08      	ldr	r6, [pc, #32]	; (8000f34 <__aeabi_i2f+0x88>)
 8000f12:	4032      	ands	r2, r6
 8000f14:	0768      	lsls	r0, r5, #29
 8000f16:	d009      	beq.n	8000f2c <__aeabi_i2f+0x80>
 8000f18:	200f      	movs	r0, #15
 8000f1a:	4028      	ands	r0, r5
 8000f1c:	2804      	cmp	r0, #4
 8000f1e:	d005      	beq.n	8000f2c <__aeabi_i2f+0x80>
 8000f20:	3204      	adds	r2, #4
 8000f22:	0150      	lsls	r0, r2, #5
 8000f24:	d502      	bpl.n	8000f2c <__aeabi_i2f+0x80>
 8000f26:	239f      	movs	r3, #159	; 0x9f
 8000f28:	4032      	ands	r2, r6
 8000f2a:	1a5b      	subs	r3, r3, r1
 8000f2c:	0192      	lsls	r2, r2, #6
 8000f2e:	0a55      	lsrs	r5, r2, #9
 8000f30:	b2d8      	uxtb	r0, r3
 8000f32:	e7d5      	b.n	8000ee0 <__aeabi_i2f+0x34>
 8000f34:	fbffffff 	.word	0xfbffffff

08000f38 <__aeabi_ui2f>:
 8000f38:	b570      	push	{r4, r5, r6, lr}
 8000f3a:	1e05      	subs	r5, r0, #0
 8000f3c:	d00e      	beq.n	8000f5c <__aeabi_ui2f+0x24>
 8000f3e:	f001 fe97 	bl	8002c70 <__clzsi2>
 8000f42:	239e      	movs	r3, #158	; 0x9e
 8000f44:	0004      	movs	r4, r0
 8000f46:	1a1b      	subs	r3, r3, r0
 8000f48:	2b96      	cmp	r3, #150	; 0x96
 8000f4a:	dc0c      	bgt.n	8000f66 <__aeabi_ui2f+0x2e>
 8000f4c:	2808      	cmp	r0, #8
 8000f4e:	dd01      	ble.n	8000f54 <__aeabi_ui2f+0x1c>
 8000f50:	3c08      	subs	r4, #8
 8000f52:	40a5      	lsls	r5, r4
 8000f54:	026d      	lsls	r5, r5, #9
 8000f56:	0a6d      	lsrs	r5, r5, #9
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	e001      	b.n	8000f60 <__aeabi_ui2f+0x28>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	2500      	movs	r5, #0
 8000f60:	05c0      	lsls	r0, r0, #23
 8000f62:	4328      	orrs	r0, r5
 8000f64:	bd70      	pop	{r4, r5, r6, pc}
 8000f66:	2b99      	cmp	r3, #153	; 0x99
 8000f68:	dd09      	ble.n	8000f7e <__aeabi_ui2f+0x46>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	0029      	movs	r1, r5
 8000f6e:	321b      	adds	r2, #27
 8000f70:	4091      	lsls	r1, r2
 8000f72:	1e4a      	subs	r2, r1, #1
 8000f74:	4191      	sbcs	r1, r2
 8000f76:	2205      	movs	r2, #5
 8000f78:	1a12      	subs	r2, r2, r0
 8000f7a:	40d5      	lsrs	r5, r2
 8000f7c:	430d      	orrs	r5, r1
 8000f7e:	2c05      	cmp	r4, #5
 8000f80:	dd01      	ble.n	8000f86 <__aeabi_ui2f+0x4e>
 8000f82:	1f62      	subs	r2, r4, #5
 8000f84:	4095      	lsls	r5, r2
 8000f86:	0029      	movs	r1, r5
 8000f88:	4e08      	ldr	r6, [pc, #32]	; (8000fac <__aeabi_ui2f+0x74>)
 8000f8a:	4031      	ands	r1, r6
 8000f8c:	076a      	lsls	r2, r5, #29
 8000f8e:	d009      	beq.n	8000fa4 <__aeabi_ui2f+0x6c>
 8000f90:	200f      	movs	r0, #15
 8000f92:	4028      	ands	r0, r5
 8000f94:	2804      	cmp	r0, #4
 8000f96:	d005      	beq.n	8000fa4 <__aeabi_ui2f+0x6c>
 8000f98:	3104      	adds	r1, #4
 8000f9a:	014a      	lsls	r2, r1, #5
 8000f9c:	d502      	bpl.n	8000fa4 <__aeabi_ui2f+0x6c>
 8000f9e:	239f      	movs	r3, #159	; 0x9f
 8000fa0:	4031      	ands	r1, r6
 8000fa2:	1b1b      	subs	r3, r3, r4
 8000fa4:	0189      	lsls	r1, r1, #6
 8000fa6:	0a4d      	lsrs	r5, r1, #9
 8000fa8:	b2d8      	uxtb	r0, r3
 8000faa:	e7d9      	b.n	8000f60 <__aeabi_ui2f+0x28>
 8000fac:	fbffffff 	.word	0xfbffffff

08000fb0 <__aeabi_dadd>:
 8000fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb2:	464f      	mov	r7, r9
 8000fb4:	46d6      	mov	lr, sl
 8000fb6:	4646      	mov	r6, r8
 8000fb8:	000d      	movs	r5, r1
 8000fba:	0001      	movs	r1, r0
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	b5c0      	push	{r6, r7, lr}
 8000fc0:	0017      	movs	r7, r2
 8000fc2:	032b      	lsls	r3, r5, #12
 8000fc4:	0a5a      	lsrs	r2, r3, #9
 8000fc6:	0f4b      	lsrs	r3, r1, #29
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	00ca      	lsls	r2, r1, #3
 8000fcc:	4691      	mov	r9, r2
 8000fce:	0302      	lsls	r2, r0, #12
 8000fd0:	006e      	lsls	r6, r5, #1
 8000fd2:	0041      	lsls	r1, r0, #1
 8000fd4:	0a52      	lsrs	r2, r2, #9
 8000fd6:	0fec      	lsrs	r4, r5, #31
 8000fd8:	0f7d      	lsrs	r5, r7, #29
 8000fda:	4315      	orrs	r5, r2
 8000fdc:	0d76      	lsrs	r6, r6, #21
 8000fde:	0d49      	lsrs	r1, r1, #21
 8000fe0:	0fc0      	lsrs	r0, r0, #31
 8000fe2:	4682      	mov	sl, r0
 8000fe4:	46ac      	mov	ip, r5
 8000fe6:	00ff      	lsls	r7, r7, #3
 8000fe8:	1a72      	subs	r2, r6, r1
 8000fea:	4284      	cmp	r4, r0
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dadd+0x40>
 8000fee:	e098      	b.n	8001122 <__aeabi_dadd+0x172>
 8000ff0:	2a00      	cmp	r2, #0
 8000ff2:	dc00      	bgt.n	8000ff6 <__aeabi_dadd+0x46>
 8000ff4:	e081      	b.n	80010fa <__aeabi_dadd+0x14a>
 8000ff6:	2900      	cmp	r1, #0
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dadd+0x4c>
 8000ffa:	e0b6      	b.n	800116a <__aeabi_dadd+0x1ba>
 8000ffc:	49c9      	ldr	r1, [pc, #804]	; (8001324 <__aeabi_dadd+0x374>)
 8000ffe:	428e      	cmp	r6, r1
 8001000:	d100      	bne.n	8001004 <__aeabi_dadd+0x54>
 8001002:	e172      	b.n	80012ea <__aeabi_dadd+0x33a>
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	0028      	movs	r0, r5
 8001008:	0409      	lsls	r1, r1, #16
 800100a:	4308      	orrs	r0, r1
 800100c:	4684      	mov	ip, r0
 800100e:	2a38      	cmp	r2, #56	; 0x38
 8001010:	dd00      	ble.n	8001014 <__aeabi_dadd+0x64>
 8001012:	e15e      	b.n	80012d2 <__aeabi_dadd+0x322>
 8001014:	2a1f      	cmp	r2, #31
 8001016:	dd00      	ble.n	800101a <__aeabi_dadd+0x6a>
 8001018:	e1ee      	b.n	80013f8 <__aeabi_dadd+0x448>
 800101a:	2020      	movs	r0, #32
 800101c:	0039      	movs	r1, r7
 800101e:	4665      	mov	r5, ip
 8001020:	1a80      	subs	r0, r0, r2
 8001022:	4087      	lsls	r7, r0
 8001024:	40d1      	lsrs	r1, r2
 8001026:	4085      	lsls	r5, r0
 8001028:	430d      	orrs	r5, r1
 800102a:	0039      	movs	r1, r7
 800102c:	1e4f      	subs	r7, r1, #1
 800102e:	41b9      	sbcs	r1, r7
 8001030:	4667      	mov	r7, ip
 8001032:	40d7      	lsrs	r7, r2
 8001034:	4329      	orrs	r1, r5
 8001036:	1bdb      	subs	r3, r3, r7
 8001038:	464a      	mov	r2, r9
 800103a:	1a55      	subs	r5, r2, r1
 800103c:	45a9      	cmp	r9, r5
 800103e:	4189      	sbcs	r1, r1
 8001040:	4249      	negs	r1, r1
 8001042:	1a5b      	subs	r3, r3, r1
 8001044:	4698      	mov	r8, r3
 8001046:	4643      	mov	r3, r8
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	d400      	bmi.n	800104e <__aeabi_dadd+0x9e>
 800104c:	e0cc      	b.n	80011e8 <__aeabi_dadd+0x238>
 800104e:	4643      	mov	r3, r8
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	0a5b      	lsrs	r3, r3, #9
 8001054:	4698      	mov	r8, r3
 8001056:	4643      	mov	r3, r8
 8001058:	2b00      	cmp	r3, #0
 800105a:	d100      	bne.n	800105e <__aeabi_dadd+0xae>
 800105c:	e12c      	b.n	80012b8 <__aeabi_dadd+0x308>
 800105e:	4640      	mov	r0, r8
 8001060:	f001 fe06 	bl	8002c70 <__clzsi2>
 8001064:	0001      	movs	r1, r0
 8001066:	3908      	subs	r1, #8
 8001068:	2220      	movs	r2, #32
 800106a:	0028      	movs	r0, r5
 800106c:	4643      	mov	r3, r8
 800106e:	1a52      	subs	r2, r2, r1
 8001070:	408b      	lsls	r3, r1
 8001072:	40d0      	lsrs	r0, r2
 8001074:	408d      	lsls	r5, r1
 8001076:	4303      	orrs	r3, r0
 8001078:	428e      	cmp	r6, r1
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0xce>
 800107c:	e117      	b.n	80012ae <__aeabi_dadd+0x2fe>
 800107e:	1b8e      	subs	r6, r1, r6
 8001080:	1c72      	adds	r2, r6, #1
 8001082:	2a1f      	cmp	r2, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xd8>
 8001086:	e1a7      	b.n	80013d8 <__aeabi_dadd+0x428>
 8001088:	2120      	movs	r1, #32
 800108a:	0018      	movs	r0, r3
 800108c:	002e      	movs	r6, r5
 800108e:	1a89      	subs	r1, r1, r2
 8001090:	408d      	lsls	r5, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40d6      	lsrs	r6, r2
 8001096:	40d3      	lsrs	r3, r2
 8001098:	1e69      	subs	r1, r5, #1
 800109a:	418d      	sbcs	r5, r1
 800109c:	4330      	orrs	r0, r6
 800109e:	4698      	mov	r8, r3
 80010a0:	2600      	movs	r6, #0
 80010a2:	4305      	orrs	r5, r0
 80010a4:	076b      	lsls	r3, r5, #29
 80010a6:	d009      	beq.n	80010bc <__aeabi_dadd+0x10c>
 80010a8:	230f      	movs	r3, #15
 80010aa:	402b      	ands	r3, r5
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d005      	beq.n	80010bc <__aeabi_dadd+0x10c>
 80010b0:	1d2b      	adds	r3, r5, #4
 80010b2:	42ab      	cmp	r3, r5
 80010b4:	41ad      	sbcs	r5, r5
 80010b6:	426d      	negs	r5, r5
 80010b8:	44a8      	add	r8, r5
 80010ba:	001d      	movs	r5, r3
 80010bc:	4643      	mov	r3, r8
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	d400      	bmi.n	80010c4 <__aeabi_dadd+0x114>
 80010c2:	e094      	b.n	80011ee <__aeabi_dadd+0x23e>
 80010c4:	4b97      	ldr	r3, [pc, #604]	; (8001324 <__aeabi_dadd+0x374>)
 80010c6:	1c72      	adds	r2, r6, #1
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x11e>
 80010cc:	e09d      	b.n	800120a <__aeabi_dadd+0x25a>
 80010ce:	4641      	mov	r1, r8
 80010d0:	4b95      	ldr	r3, [pc, #596]	; (8001328 <__aeabi_dadd+0x378>)
 80010d2:	08ed      	lsrs	r5, r5, #3
 80010d4:	4019      	ands	r1, r3
 80010d6:	000b      	movs	r3, r1
 80010d8:	0552      	lsls	r2, r2, #21
 80010da:	0749      	lsls	r1, r1, #29
 80010dc:	025b      	lsls	r3, r3, #9
 80010de:	4329      	orrs	r1, r5
 80010e0:	0b1b      	lsrs	r3, r3, #12
 80010e2:	0d52      	lsrs	r2, r2, #21
 80010e4:	0512      	lsls	r2, r2, #20
 80010e6:	4313      	orrs	r3, r2
 80010e8:	07e4      	lsls	r4, r4, #31
 80010ea:	4323      	orrs	r3, r4
 80010ec:	0008      	movs	r0, r1
 80010ee:	0019      	movs	r1, r3
 80010f0:	bce0      	pop	{r5, r6, r7}
 80010f2:	46ba      	mov	sl, r7
 80010f4:	46b1      	mov	r9, r6
 80010f6:	46a8      	mov	r8, r5
 80010f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fa:	2a00      	cmp	r2, #0
 80010fc:	d043      	beq.n	8001186 <__aeabi_dadd+0x1d6>
 80010fe:	1b8a      	subs	r2, r1, r6
 8001100:	2e00      	cmp	r6, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_dadd+0x156>
 8001104:	e12a      	b.n	800135c <__aeabi_dadd+0x3ac>
 8001106:	464c      	mov	r4, r9
 8001108:	431c      	orrs	r4, r3
 800110a:	d100      	bne.n	800110e <__aeabi_dadd+0x15e>
 800110c:	e1d1      	b.n	80014b2 <__aeabi_dadd+0x502>
 800110e:	1e54      	subs	r4, r2, #1
 8001110:	2a01      	cmp	r2, #1
 8001112:	d100      	bne.n	8001116 <__aeabi_dadd+0x166>
 8001114:	e21f      	b.n	8001556 <__aeabi_dadd+0x5a6>
 8001116:	4d83      	ldr	r5, [pc, #524]	; (8001324 <__aeabi_dadd+0x374>)
 8001118:	42aa      	cmp	r2, r5
 800111a:	d100      	bne.n	800111e <__aeabi_dadd+0x16e>
 800111c:	e272      	b.n	8001604 <__aeabi_dadd+0x654>
 800111e:	0022      	movs	r2, r4
 8001120:	e123      	b.n	800136a <__aeabi_dadd+0x3ba>
 8001122:	2a00      	cmp	r2, #0
 8001124:	dc00      	bgt.n	8001128 <__aeabi_dadd+0x178>
 8001126:	e098      	b.n	800125a <__aeabi_dadd+0x2aa>
 8001128:	2900      	cmp	r1, #0
 800112a:	d042      	beq.n	80011b2 <__aeabi_dadd+0x202>
 800112c:	497d      	ldr	r1, [pc, #500]	; (8001324 <__aeabi_dadd+0x374>)
 800112e:	428e      	cmp	r6, r1
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x184>
 8001132:	e0da      	b.n	80012ea <__aeabi_dadd+0x33a>
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0028      	movs	r0, r5
 8001138:	0409      	lsls	r1, r1, #16
 800113a:	4308      	orrs	r0, r1
 800113c:	4684      	mov	ip, r0
 800113e:	2a38      	cmp	r2, #56	; 0x38
 8001140:	dd00      	ble.n	8001144 <__aeabi_dadd+0x194>
 8001142:	e129      	b.n	8001398 <__aeabi_dadd+0x3e8>
 8001144:	2a1f      	cmp	r2, #31
 8001146:	dc00      	bgt.n	800114a <__aeabi_dadd+0x19a>
 8001148:	e187      	b.n	800145a <__aeabi_dadd+0x4aa>
 800114a:	0011      	movs	r1, r2
 800114c:	4665      	mov	r5, ip
 800114e:	3920      	subs	r1, #32
 8001150:	40cd      	lsrs	r5, r1
 8001152:	2a20      	cmp	r2, #32
 8001154:	d004      	beq.n	8001160 <__aeabi_dadd+0x1b0>
 8001156:	2040      	movs	r0, #64	; 0x40
 8001158:	4661      	mov	r1, ip
 800115a:	1a82      	subs	r2, r0, r2
 800115c:	4091      	lsls	r1, r2
 800115e:	430f      	orrs	r7, r1
 8001160:	0039      	movs	r1, r7
 8001162:	1e4f      	subs	r7, r1, #1
 8001164:	41b9      	sbcs	r1, r7
 8001166:	430d      	orrs	r5, r1
 8001168:	e11b      	b.n	80013a2 <__aeabi_dadd+0x3f2>
 800116a:	0029      	movs	r1, r5
 800116c:	4339      	orrs	r1, r7
 800116e:	d100      	bne.n	8001172 <__aeabi_dadd+0x1c2>
 8001170:	e0b5      	b.n	80012de <__aeabi_dadd+0x32e>
 8001172:	1e51      	subs	r1, r2, #1
 8001174:	2a01      	cmp	r2, #1
 8001176:	d100      	bne.n	800117a <__aeabi_dadd+0x1ca>
 8001178:	e1ab      	b.n	80014d2 <__aeabi_dadd+0x522>
 800117a:	486a      	ldr	r0, [pc, #424]	; (8001324 <__aeabi_dadd+0x374>)
 800117c:	4282      	cmp	r2, r0
 800117e:	d100      	bne.n	8001182 <__aeabi_dadd+0x1d2>
 8001180:	e1b2      	b.n	80014e8 <__aeabi_dadd+0x538>
 8001182:	000a      	movs	r2, r1
 8001184:	e743      	b.n	800100e <__aeabi_dadd+0x5e>
 8001186:	4969      	ldr	r1, [pc, #420]	; (800132c <__aeabi_dadd+0x37c>)
 8001188:	1c75      	adds	r5, r6, #1
 800118a:	420d      	tst	r5, r1
 800118c:	d000      	beq.n	8001190 <__aeabi_dadd+0x1e0>
 800118e:	e0cf      	b.n	8001330 <__aeabi_dadd+0x380>
 8001190:	2e00      	cmp	r6, #0
 8001192:	d000      	beq.n	8001196 <__aeabi_dadd+0x1e6>
 8001194:	e193      	b.n	80014be <__aeabi_dadd+0x50e>
 8001196:	4649      	mov	r1, r9
 8001198:	4319      	orrs	r1, r3
 800119a:	d100      	bne.n	800119e <__aeabi_dadd+0x1ee>
 800119c:	e1d1      	b.n	8001542 <__aeabi_dadd+0x592>
 800119e:	4661      	mov	r1, ip
 80011a0:	4339      	orrs	r1, r7
 80011a2:	d000      	beq.n	80011a6 <__aeabi_dadd+0x1f6>
 80011a4:	e1e3      	b.n	800156e <__aeabi_dadd+0x5be>
 80011a6:	4649      	mov	r1, r9
 80011a8:	0758      	lsls	r0, r3, #29
 80011aa:	08c9      	lsrs	r1, r1, #3
 80011ac:	4301      	orrs	r1, r0
 80011ae:	08db      	lsrs	r3, r3, #3
 80011b0:	e026      	b.n	8001200 <__aeabi_dadd+0x250>
 80011b2:	0029      	movs	r1, r5
 80011b4:	4339      	orrs	r1, r7
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0x20a>
 80011b8:	e091      	b.n	80012de <__aeabi_dadd+0x32e>
 80011ba:	1e51      	subs	r1, r2, #1
 80011bc:	2a01      	cmp	r2, #1
 80011be:	d005      	beq.n	80011cc <__aeabi_dadd+0x21c>
 80011c0:	4858      	ldr	r0, [pc, #352]	; (8001324 <__aeabi_dadd+0x374>)
 80011c2:	4282      	cmp	r2, r0
 80011c4:	d100      	bne.n	80011c8 <__aeabi_dadd+0x218>
 80011c6:	e18f      	b.n	80014e8 <__aeabi_dadd+0x538>
 80011c8:	000a      	movs	r2, r1
 80011ca:	e7b8      	b.n	800113e <__aeabi_dadd+0x18e>
 80011cc:	003d      	movs	r5, r7
 80011ce:	444d      	add	r5, r9
 80011d0:	454d      	cmp	r5, r9
 80011d2:	4189      	sbcs	r1, r1
 80011d4:	4463      	add	r3, ip
 80011d6:	4698      	mov	r8, r3
 80011d8:	4249      	negs	r1, r1
 80011da:	4488      	add	r8, r1
 80011dc:	4643      	mov	r3, r8
 80011de:	2602      	movs	r6, #2
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	d500      	bpl.n	80011e6 <__aeabi_dadd+0x236>
 80011e4:	e0eb      	b.n	80013be <__aeabi_dadd+0x40e>
 80011e6:	3e01      	subs	r6, #1
 80011e8:	076b      	lsls	r3, r5, #29
 80011ea:	d000      	beq.n	80011ee <__aeabi_dadd+0x23e>
 80011ec:	e75c      	b.n	80010a8 <__aeabi_dadd+0xf8>
 80011ee:	4643      	mov	r3, r8
 80011f0:	08e9      	lsrs	r1, r5, #3
 80011f2:	075a      	lsls	r2, r3, #29
 80011f4:	4311      	orrs	r1, r2
 80011f6:	0032      	movs	r2, r6
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	484a      	ldr	r0, [pc, #296]	; (8001324 <__aeabi_dadd+0x374>)
 80011fc:	4282      	cmp	r2, r0
 80011fe:	d021      	beq.n	8001244 <__aeabi_dadd+0x294>
 8001200:	031b      	lsls	r3, r3, #12
 8001202:	0552      	lsls	r2, r2, #21
 8001204:	0b1b      	lsrs	r3, r3, #12
 8001206:	0d52      	lsrs	r2, r2, #21
 8001208:	e76c      	b.n	80010e4 <__aeabi_dadd+0x134>
 800120a:	2300      	movs	r3, #0
 800120c:	2100      	movs	r1, #0
 800120e:	e769      	b.n	80010e4 <__aeabi_dadd+0x134>
 8001210:	002a      	movs	r2, r5
 8001212:	433a      	orrs	r2, r7
 8001214:	d069      	beq.n	80012ea <__aeabi_dadd+0x33a>
 8001216:	464a      	mov	r2, r9
 8001218:	0758      	lsls	r0, r3, #29
 800121a:	08d1      	lsrs	r1, r2, #3
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	031b      	lsls	r3, r3, #12
 8001222:	4308      	orrs	r0, r1
 8001224:	421a      	tst	r2, r3
 8001226:	d007      	beq.n	8001238 <__aeabi_dadd+0x288>
 8001228:	0029      	movs	r1, r5
 800122a:	08ed      	lsrs	r5, r5, #3
 800122c:	421d      	tst	r5, r3
 800122e:	d103      	bne.n	8001238 <__aeabi_dadd+0x288>
 8001230:	002a      	movs	r2, r5
 8001232:	08ff      	lsrs	r7, r7, #3
 8001234:	0748      	lsls	r0, r1, #29
 8001236:	4338      	orrs	r0, r7
 8001238:	0f43      	lsrs	r3, r0, #29
 800123a:	00c1      	lsls	r1, r0, #3
 800123c:	075b      	lsls	r3, r3, #29
 800123e:	08c9      	lsrs	r1, r1, #3
 8001240:	4319      	orrs	r1, r3
 8001242:	0013      	movs	r3, r2
 8001244:	000a      	movs	r2, r1
 8001246:	431a      	orrs	r2, r3
 8001248:	d100      	bne.n	800124c <__aeabi_dadd+0x29c>
 800124a:	e213      	b.n	8001674 <__aeabi_dadd+0x6c4>
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	0312      	lsls	r2, r2, #12
 8001250:	4313      	orrs	r3, r2
 8001252:	031b      	lsls	r3, r3, #12
 8001254:	4a33      	ldr	r2, [pc, #204]	; (8001324 <__aeabi_dadd+0x374>)
 8001256:	0b1b      	lsrs	r3, r3, #12
 8001258:	e744      	b.n	80010e4 <__aeabi_dadd+0x134>
 800125a:	2a00      	cmp	r2, #0
 800125c:	d04b      	beq.n	80012f6 <__aeabi_dadd+0x346>
 800125e:	1b8a      	subs	r2, r1, r6
 8001260:	2e00      	cmp	r6, #0
 8001262:	d100      	bne.n	8001266 <__aeabi_dadd+0x2b6>
 8001264:	e0e7      	b.n	8001436 <__aeabi_dadd+0x486>
 8001266:	482f      	ldr	r0, [pc, #188]	; (8001324 <__aeabi_dadd+0x374>)
 8001268:	4281      	cmp	r1, r0
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x2be>
 800126c:	e195      	b.n	800159a <__aeabi_dadd+0x5ea>
 800126e:	2080      	movs	r0, #128	; 0x80
 8001270:	0400      	lsls	r0, r0, #16
 8001272:	4303      	orrs	r3, r0
 8001274:	2a38      	cmp	r2, #56	; 0x38
 8001276:	dd00      	ble.n	800127a <__aeabi_dadd+0x2ca>
 8001278:	e143      	b.n	8001502 <__aeabi_dadd+0x552>
 800127a:	2a1f      	cmp	r2, #31
 800127c:	dd00      	ble.n	8001280 <__aeabi_dadd+0x2d0>
 800127e:	e1db      	b.n	8001638 <__aeabi_dadd+0x688>
 8001280:	2020      	movs	r0, #32
 8001282:	001d      	movs	r5, r3
 8001284:	464e      	mov	r6, r9
 8001286:	1a80      	subs	r0, r0, r2
 8001288:	4085      	lsls	r5, r0
 800128a:	40d6      	lsrs	r6, r2
 800128c:	4335      	orrs	r5, r6
 800128e:	464e      	mov	r6, r9
 8001290:	4086      	lsls	r6, r0
 8001292:	0030      	movs	r0, r6
 8001294:	40d3      	lsrs	r3, r2
 8001296:	1e46      	subs	r6, r0, #1
 8001298:	41b0      	sbcs	r0, r6
 800129a:	449c      	add	ip, r3
 800129c:	4305      	orrs	r5, r0
 800129e:	19ed      	adds	r5, r5, r7
 80012a0:	42bd      	cmp	r5, r7
 80012a2:	419b      	sbcs	r3, r3
 80012a4:	425b      	negs	r3, r3
 80012a6:	4463      	add	r3, ip
 80012a8:	4698      	mov	r8, r3
 80012aa:	000e      	movs	r6, r1
 80012ac:	e07f      	b.n	80013ae <__aeabi_dadd+0x3fe>
 80012ae:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <__aeabi_dadd+0x378>)
 80012b0:	1a76      	subs	r6, r6, r1
 80012b2:	4013      	ands	r3, r2
 80012b4:	4698      	mov	r8, r3
 80012b6:	e6f5      	b.n	80010a4 <__aeabi_dadd+0xf4>
 80012b8:	0028      	movs	r0, r5
 80012ba:	f001 fcd9 	bl	8002c70 <__clzsi2>
 80012be:	0001      	movs	r1, r0
 80012c0:	3118      	adds	r1, #24
 80012c2:	291f      	cmp	r1, #31
 80012c4:	dc00      	bgt.n	80012c8 <__aeabi_dadd+0x318>
 80012c6:	e6cf      	b.n	8001068 <__aeabi_dadd+0xb8>
 80012c8:	002b      	movs	r3, r5
 80012ca:	3808      	subs	r0, #8
 80012cc:	4083      	lsls	r3, r0
 80012ce:	2500      	movs	r5, #0
 80012d0:	e6d2      	b.n	8001078 <__aeabi_dadd+0xc8>
 80012d2:	4662      	mov	r2, ip
 80012d4:	433a      	orrs	r2, r7
 80012d6:	0011      	movs	r1, r2
 80012d8:	1e4f      	subs	r7, r1, #1
 80012da:	41b9      	sbcs	r1, r7
 80012dc:	e6ac      	b.n	8001038 <__aeabi_dadd+0x88>
 80012de:	4649      	mov	r1, r9
 80012e0:	0758      	lsls	r0, r3, #29
 80012e2:	08c9      	lsrs	r1, r1, #3
 80012e4:	4301      	orrs	r1, r0
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	e787      	b.n	80011fa <__aeabi_dadd+0x24a>
 80012ea:	4649      	mov	r1, r9
 80012ec:	075a      	lsls	r2, r3, #29
 80012ee:	08c9      	lsrs	r1, r1, #3
 80012f0:	4311      	orrs	r1, r2
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	e7a6      	b.n	8001244 <__aeabi_dadd+0x294>
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <__aeabi_dadd+0x37c>)
 80012f8:	1c70      	adds	r0, r6, #1
 80012fa:	4208      	tst	r0, r1
 80012fc:	d000      	beq.n	8001300 <__aeabi_dadd+0x350>
 80012fe:	e0bb      	b.n	8001478 <__aeabi_dadd+0x4c8>
 8001300:	2e00      	cmp	r6, #0
 8001302:	d000      	beq.n	8001306 <__aeabi_dadd+0x356>
 8001304:	e114      	b.n	8001530 <__aeabi_dadd+0x580>
 8001306:	4649      	mov	r1, r9
 8001308:	4319      	orrs	r1, r3
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x35e>
 800130c:	e175      	b.n	80015fa <__aeabi_dadd+0x64a>
 800130e:	0029      	movs	r1, r5
 8001310:	4339      	orrs	r1, r7
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x366>
 8001314:	e17e      	b.n	8001614 <__aeabi_dadd+0x664>
 8001316:	4649      	mov	r1, r9
 8001318:	0758      	lsls	r0, r3, #29
 800131a:	08c9      	lsrs	r1, r1, #3
 800131c:	4301      	orrs	r1, r0
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	e76e      	b.n	8001200 <__aeabi_dadd+0x250>
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	000007ff 	.word	0x000007ff
 8001328:	ff7fffff 	.word	0xff7fffff
 800132c:	000007fe 	.word	0x000007fe
 8001330:	4649      	mov	r1, r9
 8001332:	1bcd      	subs	r5, r1, r7
 8001334:	4661      	mov	r1, ip
 8001336:	1a58      	subs	r0, r3, r1
 8001338:	45a9      	cmp	r9, r5
 800133a:	4189      	sbcs	r1, r1
 800133c:	4249      	negs	r1, r1
 800133e:	4688      	mov	r8, r1
 8001340:	0001      	movs	r1, r0
 8001342:	4640      	mov	r0, r8
 8001344:	1a09      	subs	r1, r1, r0
 8001346:	4688      	mov	r8, r1
 8001348:	0209      	lsls	r1, r1, #8
 800134a:	d500      	bpl.n	800134e <__aeabi_dadd+0x39e>
 800134c:	e0a6      	b.n	800149c <__aeabi_dadd+0x4ec>
 800134e:	4641      	mov	r1, r8
 8001350:	4329      	orrs	r1, r5
 8001352:	d000      	beq.n	8001356 <__aeabi_dadd+0x3a6>
 8001354:	e67f      	b.n	8001056 <__aeabi_dadd+0xa6>
 8001356:	2300      	movs	r3, #0
 8001358:	2400      	movs	r4, #0
 800135a:	e751      	b.n	8001200 <__aeabi_dadd+0x250>
 800135c:	4cc7      	ldr	r4, [pc, #796]	; (800167c <__aeabi_dadd+0x6cc>)
 800135e:	42a1      	cmp	r1, r4
 8001360:	d100      	bne.n	8001364 <__aeabi_dadd+0x3b4>
 8001362:	e0c7      	b.n	80014f4 <__aeabi_dadd+0x544>
 8001364:	2480      	movs	r4, #128	; 0x80
 8001366:	0424      	lsls	r4, r4, #16
 8001368:	4323      	orrs	r3, r4
 800136a:	2a38      	cmp	r2, #56	; 0x38
 800136c:	dc54      	bgt.n	8001418 <__aeabi_dadd+0x468>
 800136e:	2a1f      	cmp	r2, #31
 8001370:	dd00      	ble.n	8001374 <__aeabi_dadd+0x3c4>
 8001372:	e0cc      	b.n	800150e <__aeabi_dadd+0x55e>
 8001374:	2420      	movs	r4, #32
 8001376:	4648      	mov	r0, r9
 8001378:	1aa4      	subs	r4, r4, r2
 800137a:	001d      	movs	r5, r3
 800137c:	464e      	mov	r6, r9
 800137e:	40a0      	lsls	r0, r4
 8001380:	40d6      	lsrs	r6, r2
 8001382:	40a5      	lsls	r5, r4
 8001384:	0004      	movs	r4, r0
 8001386:	40d3      	lsrs	r3, r2
 8001388:	4662      	mov	r2, ip
 800138a:	4335      	orrs	r5, r6
 800138c:	1e66      	subs	r6, r4, #1
 800138e:	41b4      	sbcs	r4, r6
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	469c      	mov	ip, r3
 8001394:	4325      	orrs	r5, r4
 8001396:	e044      	b.n	8001422 <__aeabi_dadd+0x472>
 8001398:	4662      	mov	r2, ip
 800139a:	433a      	orrs	r2, r7
 800139c:	0015      	movs	r5, r2
 800139e:	1e6f      	subs	r7, r5, #1
 80013a0:	41bd      	sbcs	r5, r7
 80013a2:	444d      	add	r5, r9
 80013a4:	454d      	cmp	r5, r9
 80013a6:	4189      	sbcs	r1, r1
 80013a8:	4249      	negs	r1, r1
 80013aa:	4688      	mov	r8, r1
 80013ac:	4498      	add	r8, r3
 80013ae:	4643      	mov	r3, r8
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	d400      	bmi.n	80013b6 <__aeabi_dadd+0x406>
 80013b4:	e718      	b.n	80011e8 <__aeabi_dadd+0x238>
 80013b6:	4bb1      	ldr	r3, [pc, #708]	; (800167c <__aeabi_dadd+0x6cc>)
 80013b8:	3601      	adds	r6, #1
 80013ba:	429e      	cmp	r6, r3
 80013bc:	d049      	beq.n	8001452 <__aeabi_dadd+0x4a2>
 80013be:	4642      	mov	r2, r8
 80013c0:	4baf      	ldr	r3, [pc, #700]	; (8001680 <__aeabi_dadd+0x6d0>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	401a      	ands	r2, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	086a      	lsrs	r2, r5, #1
 80013ca:	400d      	ands	r5, r1
 80013cc:	4315      	orrs	r5, r2
 80013ce:	07d9      	lsls	r1, r3, #31
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	4698      	mov	r8, r3
 80013d4:	430d      	orrs	r5, r1
 80013d6:	e665      	b.n	80010a4 <__aeabi_dadd+0xf4>
 80013d8:	0018      	movs	r0, r3
 80013da:	3e1f      	subs	r6, #31
 80013dc:	40f0      	lsrs	r0, r6
 80013de:	2a20      	cmp	r2, #32
 80013e0:	d003      	beq.n	80013ea <__aeabi_dadd+0x43a>
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	1a8a      	subs	r2, r1, r2
 80013e6:	4093      	lsls	r3, r2
 80013e8:	431d      	orrs	r5, r3
 80013ea:	1e69      	subs	r1, r5, #1
 80013ec:	418d      	sbcs	r5, r1
 80013ee:	2300      	movs	r3, #0
 80013f0:	2600      	movs	r6, #0
 80013f2:	4698      	mov	r8, r3
 80013f4:	4305      	orrs	r5, r0
 80013f6:	e6f7      	b.n	80011e8 <__aeabi_dadd+0x238>
 80013f8:	0011      	movs	r1, r2
 80013fa:	4665      	mov	r5, ip
 80013fc:	3920      	subs	r1, #32
 80013fe:	40cd      	lsrs	r5, r1
 8001400:	2a20      	cmp	r2, #32
 8001402:	d004      	beq.n	800140e <__aeabi_dadd+0x45e>
 8001404:	2040      	movs	r0, #64	; 0x40
 8001406:	4661      	mov	r1, ip
 8001408:	1a82      	subs	r2, r0, r2
 800140a:	4091      	lsls	r1, r2
 800140c:	430f      	orrs	r7, r1
 800140e:	0039      	movs	r1, r7
 8001410:	1e4f      	subs	r7, r1, #1
 8001412:	41b9      	sbcs	r1, r7
 8001414:	4329      	orrs	r1, r5
 8001416:	e60f      	b.n	8001038 <__aeabi_dadd+0x88>
 8001418:	464a      	mov	r2, r9
 800141a:	4313      	orrs	r3, r2
 800141c:	001d      	movs	r5, r3
 800141e:	1e6b      	subs	r3, r5, #1
 8001420:	419d      	sbcs	r5, r3
 8001422:	1b7d      	subs	r5, r7, r5
 8001424:	42af      	cmp	r7, r5
 8001426:	419b      	sbcs	r3, r3
 8001428:	4662      	mov	r2, ip
 800142a:	425b      	negs	r3, r3
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	4698      	mov	r8, r3
 8001430:	4654      	mov	r4, sl
 8001432:	000e      	movs	r6, r1
 8001434:	e607      	b.n	8001046 <__aeabi_dadd+0x96>
 8001436:	4648      	mov	r0, r9
 8001438:	4318      	orrs	r0, r3
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x48e>
 800143c:	e0b3      	b.n	80015a6 <__aeabi_dadd+0x5f6>
 800143e:	1e50      	subs	r0, r2, #1
 8001440:	2a01      	cmp	r2, #1
 8001442:	d100      	bne.n	8001446 <__aeabi_dadd+0x496>
 8001444:	e10d      	b.n	8001662 <__aeabi_dadd+0x6b2>
 8001446:	4d8d      	ldr	r5, [pc, #564]	; (800167c <__aeabi_dadd+0x6cc>)
 8001448:	42aa      	cmp	r2, r5
 800144a:	d100      	bne.n	800144e <__aeabi_dadd+0x49e>
 800144c:	e0a5      	b.n	800159a <__aeabi_dadd+0x5ea>
 800144e:	0002      	movs	r2, r0
 8001450:	e710      	b.n	8001274 <__aeabi_dadd+0x2c4>
 8001452:	0032      	movs	r2, r6
 8001454:	2300      	movs	r3, #0
 8001456:	2100      	movs	r1, #0
 8001458:	e644      	b.n	80010e4 <__aeabi_dadd+0x134>
 800145a:	2120      	movs	r1, #32
 800145c:	0038      	movs	r0, r7
 800145e:	1a89      	subs	r1, r1, r2
 8001460:	4665      	mov	r5, ip
 8001462:	408f      	lsls	r7, r1
 8001464:	408d      	lsls	r5, r1
 8001466:	40d0      	lsrs	r0, r2
 8001468:	1e79      	subs	r1, r7, #1
 800146a:	418f      	sbcs	r7, r1
 800146c:	4305      	orrs	r5, r0
 800146e:	433d      	orrs	r5, r7
 8001470:	4667      	mov	r7, ip
 8001472:	40d7      	lsrs	r7, r2
 8001474:	19db      	adds	r3, r3, r7
 8001476:	e794      	b.n	80013a2 <__aeabi_dadd+0x3f2>
 8001478:	4a80      	ldr	r2, [pc, #512]	; (800167c <__aeabi_dadd+0x6cc>)
 800147a:	4290      	cmp	r0, r2
 800147c:	d100      	bne.n	8001480 <__aeabi_dadd+0x4d0>
 800147e:	e0ec      	b.n	800165a <__aeabi_dadd+0x6aa>
 8001480:	0039      	movs	r1, r7
 8001482:	4449      	add	r1, r9
 8001484:	4549      	cmp	r1, r9
 8001486:	4192      	sbcs	r2, r2
 8001488:	4463      	add	r3, ip
 800148a:	4252      	negs	r2, r2
 800148c:	189b      	adds	r3, r3, r2
 800148e:	07dd      	lsls	r5, r3, #31
 8001490:	0849      	lsrs	r1, r1, #1
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	4698      	mov	r8, r3
 8001496:	0006      	movs	r6, r0
 8001498:	430d      	orrs	r5, r1
 800149a:	e6a5      	b.n	80011e8 <__aeabi_dadd+0x238>
 800149c:	464a      	mov	r2, r9
 800149e:	1abd      	subs	r5, r7, r2
 80014a0:	42af      	cmp	r7, r5
 80014a2:	4189      	sbcs	r1, r1
 80014a4:	4662      	mov	r2, ip
 80014a6:	4249      	negs	r1, r1
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	1a5b      	subs	r3, r3, r1
 80014ac:	4698      	mov	r8, r3
 80014ae:	4654      	mov	r4, sl
 80014b0:	e5d1      	b.n	8001056 <__aeabi_dadd+0xa6>
 80014b2:	076c      	lsls	r4, r5, #29
 80014b4:	08f9      	lsrs	r1, r7, #3
 80014b6:	4321      	orrs	r1, r4
 80014b8:	08eb      	lsrs	r3, r5, #3
 80014ba:	0004      	movs	r4, r0
 80014bc:	e69d      	b.n	80011fa <__aeabi_dadd+0x24a>
 80014be:	464a      	mov	r2, r9
 80014c0:	431a      	orrs	r2, r3
 80014c2:	d175      	bne.n	80015b0 <__aeabi_dadd+0x600>
 80014c4:	4661      	mov	r1, ip
 80014c6:	4339      	orrs	r1, r7
 80014c8:	d114      	bne.n	80014f4 <__aeabi_dadd+0x544>
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	2400      	movs	r4, #0
 80014ce:	031b      	lsls	r3, r3, #12
 80014d0:	e6bc      	b.n	800124c <__aeabi_dadd+0x29c>
 80014d2:	464a      	mov	r2, r9
 80014d4:	1bd5      	subs	r5, r2, r7
 80014d6:	45a9      	cmp	r9, r5
 80014d8:	4189      	sbcs	r1, r1
 80014da:	4662      	mov	r2, ip
 80014dc:	4249      	negs	r1, r1
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	1a5b      	subs	r3, r3, r1
 80014e2:	4698      	mov	r8, r3
 80014e4:	2601      	movs	r6, #1
 80014e6:	e5ae      	b.n	8001046 <__aeabi_dadd+0x96>
 80014e8:	464a      	mov	r2, r9
 80014ea:	08d1      	lsrs	r1, r2, #3
 80014ec:	075a      	lsls	r2, r3, #29
 80014ee:	4311      	orrs	r1, r2
 80014f0:	08db      	lsrs	r3, r3, #3
 80014f2:	e6a7      	b.n	8001244 <__aeabi_dadd+0x294>
 80014f4:	4663      	mov	r3, ip
 80014f6:	08f9      	lsrs	r1, r7, #3
 80014f8:	075a      	lsls	r2, r3, #29
 80014fa:	4654      	mov	r4, sl
 80014fc:	4311      	orrs	r1, r2
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	e6a0      	b.n	8001244 <__aeabi_dadd+0x294>
 8001502:	464a      	mov	r2, r9
 8001504:	4313      	orrs	r3, r2
 8001506:	001d      	movs	r5, r3
 8001508:	1e6b      	subs	r3, r5, #1
 800150a:	419d      	sbcs	r5, r3
 800150c:	e6c7      	b.n	800129e <__aeabi_dadd+0x2ee>
 800150e:	0014      	movs	r4, r2
 8001510:	001e      	movs	r6, r3
 8001512:	3c20      	subs	r4, #32
 8001514:	40e6      	lsrs	r6, r4
 8001516:	2a20      	cmp	r2, #32
 8001518:	d005      	beq.n	8001526 <__aeabi_dadd+0x576>
 800151a:	2440      	movs	r4, #64	; 0x40
 800151c:	1aa2      	subs	r2, r4, r2
 800151e:	4093      	lsls	r3, r2
 8001520:	464a      	mov	r2, r9
 8001522:	431a      	orrs	r2, r3
 8001524:	4691      	mov	r9, r2
 8001526:	464d      	mov	r5, r9
 8001528:	1e6b      	subs	r3, r5, #1
 800152a:	419d      	sbcs	r5, r3
 800152c:	4335      	orrs	r5, r6
 800152e:	e778      	b.n	8001422 <__aeabi_dadd+0x472>
 8001530:	464a      	mov	r2, r9
 8001532:	431a      	orrs	r2, r3
 8001534:	d000      	beq.n	8001538 <__aeabi_dadd+0x588>
 8001536:	e66b      	b.n	8001210 <__aeabi_dadd+0x260>
 8001538:	076b      	lsls	r3, r5, #29
 800153a:	08f9      	lsrs	r1, r7, #3
 800153c:	4319      	orrs	r1, r3
 800153e:	08eb      	lsrs	r3, r5, #3
 8001540:	e680      	b.n	8001244 <__aeabi_dadd+0x294>
 8001542:	4661      	mov	r1, ip
 8001544:	4339      	orrs	r1, r7
 8001546:	d054      	beq.n	80015f2 <__aeabi_dadd+0x642>
 8001548:	4663      	mov	r3, ip
 800154a:	08f9      	lsrs	r1, r7, #3
 800154c:	075c      	lsls	r4, r3, #29
 800154e:	4321      	orrs	r1, r4
 8001550:	08db      	lsrs	r3, r3, #3
 8001552:	0004      	movs	r4, r0
 8001554:	e654      	b.n	8001200 <__aeabi_dadd+0x250>
 8001556:	464a      	mov	r2, r9
 8001558:	1abd      	subs	r5, r7, r2
 800155a:	42af      	cmp	r7, r5
 800155c:	4189      	sbcs	r1, r1
 800155e:	4662      	mov	r2, ip
 8001560:	4249      	negs	r1, r1
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	1a5b      	subs	r3, r3, r1
 8001566:	4698      	mov	r8, r3
 8001568:	0004      	movs	r4, r0
 800156a:	2601      	movs	r6, #1
 800156c:	e56b      	b.n	8001046 <__aeabi_dadd+0x96>
 800156e:	464a      	mov	r2, r9
 8001570:	1bd5      	subs	r5, r2, r7
 8001572:	45a9      	cmp	r9, r5
 8001574:	4189      	sbcs	r1, r1
 8001576:	4662      	mov	r2, ip
 8001578:	4249      	negs	r1, r1
 800157a:	1a9a      	subs	r2, r3, r2
 800157c:	1a52      	subs	r2, r2, r1
 800157e:	4690      	mov	r8, r2
 8001580:	0212      	lsls	r2, r2, #8
 8001582:	d532      	bpl.n	80015ea <__aeabi_dadd+0x63a>
 8001584:	464a      	mov	r2, r9
 8001586:	1abd      	subs	r5, r7, r2
 8001588:	42af      	cmp	r7, r5
 800158a:	4189      	sbcs	r1, r1
 800158c:	4662      	mov	r2, ip
 800158e:	4249      	negs	r1, r1
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	1a5b      	subs	r3, r3, r1
 8001594:	4698      	mov	r8, r3
 8001596:	0004      	movs	r4, r0
 8001598:	e584      	b.n	80010a4 <__aeabi_dadd+0xf4>
 800159a:	4663      	mov	r3, ip
 800159c:	08f9      	lsrs	r1, r7, #3
 800159e:	075a      	lsls	r2, r3, #29
 80015a0:	4311      	orrs	r1, r2
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	e64e      	b.n	8001244 <__aeabi_dadd+0x294>
 80015a6:	08f9      	lsrs	r1, r7, #3
 80015a8:	0768      	lsls	r0, r5, #29
 80015aa:	4301      	orrs	r1, r0
 80015ac:	08eb      	lsrs	r3, r5, #3
 80015ae:	e624      	b.n	80011fa <__aeabi_dadd+0x24a>
 80015b0:	4662      	mov	r2, ip
 80015b2:	433a      	orrs	r2, r7
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x608>
 80015b6:	e698      	b.n	80012ea <__aeabi_dadd+0x33a>
 80015b8:	464a      	mov	r2, r9
 80015ba:	08d1      	lsrs	r1, r2, #3
 80015bc:	075a      	lsls	r2, r3, #29
 80015be:	4311      	orrs	r1, r2
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	031b      	lsls	r3, r3, #12
 80015c6:	421a      	tst	r2, r3
 80015c8:	d008      	beq.n	80015dc <__aeabi_dadd+0x62c>
 80015ca:	4660      	mov	r0, ip
 80015cc:	08c5      	lsrs	r5, r0, #3
 80015ce:	421d      	tst	r5, r3
 80015d0:	d104      	bne.n	80015dc <__aeabi_dadd+0x62c>
 80015d2:	4654      	mov	r4, sl
 80015d4:	002a      	movs	r2, r5
 80015d6:	08f9      	lsrs	r1, r7, #3
 80015d8:	0743      	lsls	r3, r0, #29
 80015da:	4319      	orrs	r1, r3
 80015dc:	0f4b      	lsrs	r3, r1, #29
 80015de:	00c9      	lsls	r1, r1, #3
 80015e0:	075b      	lsls	r3, r3, #29
 80015e2:	08c9      	lsrs	r1, r1, #3
 80015e4:	4319      	orrs	r1, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	e62c      	b.n	8001244 <__aeabi_dadd+0x294>
 80015ea:	4641      	mov	r1, r8
 80015ec:	4329      	orrs	r1, r5
 80015ee:	d000      	beq.n	80015f2 <__aeabi_dadd+0x642>
 80015f0:	e5fa      	b.n	80011e8 <__aeabi_dadd+0x238>
 80015f2:	2300      	movs	r3, #0
 80015f4:	000a      	movs	r2, r1
 80015f6:	2400      	movs	r4, #0
 80015f8:	e602      	b.n	8001200 <__aeabi_dadd+0x250>
 80015fa:	076b      	lsls	r3, r5, #29
 80015fc:	08f9      	lsrs	r1, r7, #3
 80015fe:	4319      	orrs	r1, r3
 8001600:	08eb      	lsrs	r3, r5, #3
 8001602:	e5fd      	b.n	8001200 <__aeabi_dadd+0x250>
 8001604:	4663      	mov	r3, ip
 8001606:	08f9      	lsrs	r1, r7, #3
 8001608:	075b      	lsls	r3, r3, #29
 800160a:	4319      	orrs	r1, r3
 800160c:	4663      	mov	r3, ip
 800160e:	0004      	movs	r4, r0
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	e617      	b.n	8001244 <__aeabi_dadd+0x294>
 8001614:	003d      	movs	r5, r7
 8001616:	444d      	add	r5, r9
 8001618:	4463      	add	r3, ip
 800161a:	454d      	cmp	r5, r9
 800161c:	4189      	sbcs	r1, r1
 800161e:	4698      	mov	r8, r3
 8001620:	4249      	negs	r1, r1
 8001622:	4488      	add	r8, r1
 8001624:	4643      	mov	r3, r8
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	d400      	bmi.n	800162c <__aeabi_dadd+0x67c>
 800162a:	e5dd      	b.n	80011e8 <__aeabi_dadd+0x238>
 800162c:	4642      	mov	r2, r8
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <__aeabi_dadd+0x6d0>)
 8001630:	2601      	movs	r6, #1
 8001632:	401a      	ands	r2, r3
 8001634:	4690      	mov	r8, r2
 8001636:	e5d7      	b.n	80011e8 <__aeabi_dadd+0x238>
 8001638:	0010      	movs	r0, r2
 800163a:	001e      	movs	r6, r3
 800163c:	3820      	subs	r0, #32
 800163e:	40c6      	lsrs	r6, r0
 8001640:	2a20      	cmp	r2, #32
 8001642:	d005      	beq.n	8001650 <__aeabi_dadd+0x6a0>
 8001644:	2040      	movs	r0, #64	; 0x40
 8001646:	1a82      	subs	r2, r0, r2
 8001648:	4093      	lsls	r3, r2
 800164a:	464a      	mov	r2, r9
 800164c:	431a      	orrs	r2, r3
 800164e:	4691      	mov	r9, r2
 8001650:	464d      	mov	r5, r9
 8001652:	1e6b      	subs	r3, r5, #1
 8001654:	419d      	sbcs	r5, r3
 8001656:	4335      	orrs	r5, r6
 8001658:	e621      	b.n	800129e <__aeabi_dadd+0x2ee>
 800165a:	0002      	movs	r2, r0
 800165c:	2300      	movs	r3, #0
 800165e:	2100      	movs	r1, #0
 8001660:	e540      	b.n	80010e4 <__aeabi_dadd+0x134>
 8001662:	464a      	mov	r2, r9
 8001664:	19d5      	adds	r5, r2, r7
 8001666:	42bd      	cmp	r5, r7
 8001668:	4189      	sbcs	r1, r1
 800166a:	4463      	add	r3, ip
 800166c:	4698      	mov	r8, r3
 800166e:	4249      	negs	r1, r1
 8001670:	4488      	add	r8, r1
 8001672:	e5b3      	b.n	80011dc <__aeabi_dadd+0x22c>
 8001674:	2100      	movs	r1, #0
 8001676:	4a01      	ldr	r2, [pc, #4]	; (800167c <__aeabi_dadd+0x6cc>)
 8001678:	000b      	movs	r3, r1
 800167a:	e533      	b.n	80010e4 <__aeabi_dadd+0x134>
 800167c:	000007ff 	.word	0x000007ff
 8001680:	ff7fffff 	.word	0xff7fffff

08001684 <__aeabi_ddiv>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	4657      	mov	r7, sl
 8001688:	464e      	mov	r6, r9
 800168a:	4645      	mov	r5, r8
 800168c:	46de      	mov	lr, fp
 800168e:	b5e0      	push	{r5, r6, r7, lr}
 8001690:	4681      	mov	r9, r0
 8001692:	0005      	movs	r5, r0
 8001694:	030c      	lsls	r4, r1, #12
 8001696:	0048      	lsls	r0, r1, #1
 8001698:	4692      	mov	sl, r2
 800169a:	001f      	movs	r7, r3
 800169c:	b085      	sub	sp, #20
 800169e:	0b24      	lsrs	r4, r4, #12
 80016a0:	0d40      	lsrs	r0, r0, #21
 80016a2:	0fce      	lsrs	r6, r1, #31
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d059      	beq.n	800175c <__aeabi_ddiv+0xd8>
 80016a8:	4b87      	ldr	r3, [pc, #540]	; (80018c8 <__aeabi_ddiv+0x244>)
 80016aa:	4298      	cmp	r0, r3
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x2c>
 80016ae:	e098      	b.n	80017e2 <__aeabi_ddiv+0x15e>
 80016b0:	0f6b      	lsrs	r3, r5, #29
 80016b2:	00e4      	lsls	r4, r4, #3
 80016b4:	431c      	orrs	r4, r3
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	4323      	orrs	r3, r4
 80016bc:	4698      	mov	r8, r3
 80016be:	4b83      	ldr	r3, [pc, #524]	; (80018cc <__aeabi_ddiv+0x248>)
 80016c0:	00ed      	lsls	r5, r5, #3
 80016c2:	469b      	mov	fp, r3
 80016c4:	2300      	movs	r3, #0
 80016c6:	4699      	mov	r9, r3
 80016c8:	4483      	add	fp, r0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	033c      	lsls	r4, r7, #12
 80016ce:	007b      	lsls	r3, r7, #1
 80016d0:	4650      	mov	r0, sl
 80016d2:	0b24      	lsrs	r4, r4, #12
 80016d4:	0d5b      	lsrs	r3, r3, #21
 80016d6:	0fff      	lsrs	r7, r7, #31
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d067      	beq.n	80017ac <__aeabi_ddiv+0x128>
 80016dc:	4a7a      	ldr	r2, [pc, #488]	; (80018c8 <__aeabi_ddiv+0x244>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d018      	beq.n	8001714 <__aeabi_ddiv+0x90>
 80016e2:	497a      	ldr	r1, [pc, #488]	; (80018cc <__aeabi_ddiv+0x248>)
 80016e4:	0f42      	lsrs	r2, r0, #29
 80016e6:	468c      	mov	ip, r1
 80016e8:	00e4      	lsls	r4, r4, #3
 80016ea:	4659      	mov	r1, fp
 80016ec:	4314      	orrs	r4, r2
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	4463      	add	r3, ip
 80016f2:	0412      	lsls	r2, r2, #16
 80016f4:	1acb      	subs	r3, r1, r3
 80016f6:	4314      	orrs	r4, r2
 80016f8:	469b      	mov	fp, r3
 80016fa:	00c2      	lsls	r2, r0, #3
 80016fc:	2000      	movs	r0, #0
 80016fe:	0033      	movs	r3, r6
 8001700:	407b      	eors	r3, r7
 8001702:	469a      	mov	sl, r3
 8001704:	464b      	mov	r3, r9
 8001706:	2b0f      	cmp	r3, #15
 8001708:	d900      	bls.n	800170c <__aeabi_ddiv+0x88>
 800170a:	e0ef      	b.n	80018ec <__aeabi_ddiv+0x268>
 800170c:	4970      	ldr	r1, [pc, #448]	; (80018d0 <__aeabi_ddiv+0x24c>)
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	58cb      	ldr	r3, [r1, r3]
 8001712:	469f      	mov	pc, r3
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <__aeabi_ddiv+0x250>)
 8001716:	4652      	mov	r2, sl
 8001718:	469c      	mov	ip, r3
 800171a:	4322      	orrs	r2, r4
 800171c:	44e3      	add	fp, ip
 800171e:	2a00      	cmp	r2, #0
 8001720:	d000      	beq.n	8001724 <__aeabi_ddiv+0xa0>
 8001722:	e095      	b.n	8001850 <__aeabi_ddiv+0x1cc>
 8001724:	4649      	mov	r1, r9
 8001726:	2302      	movs	r3, #2
 8001728:	4319      	orrs	r1, r3
 800172a:	4689      	mov	r9, r1
 800172c:	2400      	movs	r4, #0
 800172e:	2002      	movs	r0, #2
 8001730:	e7e5      	b.n	80016fe <__aeabi_ddiv+0x7a>
 8001732:	2300      	movs	r3, #0
 8001734:	2400      	movs	r4, #0
 8001736:	2500      	movs	r5, #0
 8001738:	4652      	mov	r2, sl
 800173a:	051b      	lsls	r3, r3, #20
 800173c:	4323      	orrs	r3, r4
 800173e:	07d2      	lsls	r2, r2, #31
 8001740:	4313      	orrs	r3, r2
 8001742:	0028      	movs	r0, r5
 8001744:	0019      	movs	r1, r3
 8001746:	b005      	add	sp, #20
 8001748:	bcf0      	pop	{r4, r5, r6, r7}
 800174a:	46bb      	mov	fp, r7
 800174c:	46b2      	mov	sl, r6
 800174e:	46a9      	mov	r9, r5
 8001750:	46a0      	mov	r8, r4
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001754:	2400      	movs	r4, #0
 8001756:	2500      	movs	r5, #0
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <__aeabi_ddiv+0x244>)
 800175a:	e7ed      	b.n	8001738 <__aeabi_ddiv+0xb4>
 800175c:	464b      	mov	r3, r9
 800175e:	4323      	orrs	r3, r4
 8001760:	4698      	mov	r8, r3
 8001762:	d100      	bne.n	8001766 <__aeabi_ddiv+0xe2>
 8001764:	e089      	b.n	800187a <__aeabi_ddiv+0x1f6>
 8001766:	2c00      	cmp	r4, #0
 8001768:	d100      	bne.n	800176c <__aeabi_ddiv+0xe8>
 800176a:	e1e0      	b.n	8001b2e <__aeabi_ddiv+0x4aa>
 800176c:	0020      	movs	r0, r4
 800176e:	f001 fa7f 	bl	8002c70 <__clzsi2>
 8001772:	0001      	movs	r1, r0
 8001774:	0002      	movs	r2, r0
 8001776:	390b      	subs	r1, #11
 8001778:	231d      	movs	r3, #29
 800177a:	1a5b      	subs	r3, r3, r1
 800177c:	4649      	mov	r1, r9
 800177e:	0010      	movs	r0, r2
 8001780:	40d9      	lsrs	r1, r3
 8001782:	3808      	subs	r0, #8
 8001784:	4084      	lsls	r4, r0
 8001786:	000b      	movs	r3, r1
 8001788:	464d      	mov	r5, r9
 800178a:	4323      	orrs	r3, r4
 800178c:	4698      	mov	r8, r3
 800178e:	4085      	lsls	r5, r0
 8001790:	4851      	ldr	r0, [pc, #324]	; (80018d8 <__aeabi_ddiv+0x254>)
 8001792:	033c      	lsls	r4, r7, #12
 8001794:	1a83      	subs	r3, r0, r2
 8001796:	469b      	mov	fp, r3
 8001798:	2300      	movs	r3, #0
 800179a:	4699      	mov	r9, r3
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	007b      	lsls	r3, r7, #1
 80017a0:	4650      	mov	r0, sl
 80017a2:	0b24      	lsrs	r4, r4, #12
 80017a4:	0d5b      	lsrs	r3, r3, #21
 80017a6:	0fff      	lsrs	r7, r7, #31
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d197      	bne.n	80016dc <__aeabi_ddiv+0x58>
 80017ac:	4652      	mov	r2, sl
 80017ae:	4322      	orrs	r2, r4
 80017b0:	d055      	beq.n	800185e <__aeabi_ddiv+0x1da>
 80017b2:	2c00      	cmp	r4, #0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_ddiv+0x134>
 80017b6:	e1ca      	b.n	8001b4e <__aeabi_ddiv+0x4ca>
 80017b8:	0020      	movs	r0, r4
 80017ba:	f001 fa59 	bl	8002c70 <__clzsi2>
 80017be:	0002      	movs	r2, r0
 80017c0:	3a0b      	subs	r2, #11
 80017c2:	231d      	movs	r3, #29
 80017c4:	0001      	movs	r1, r0
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	4652      	mov	r2, sl
 80017ca:	3908      	subs	r1, #8
 80017cc:	40da      	lsrs	r2, r3
 80017ce:	408c      	lsls	r4, r1
 80017d0:	4314      	orrs	r4, r2
 80017d2:	4652      	mov	r2, sl
 80017d4:	408a      	lsls	r2, r1
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <__aeabi_ddiv+0x258>)
 80017d8:	4458      	add	r0, fp
 80017da:	469b      	mov	fp, r3
 80017dc:	4483      	add	fp, r0
 80017de:	2000      	movs	r0, #0
 80017e0:	e78d      	b.n	80016fe <__aeabi_ddiv+0x7a>
 80017e2:	464b      	mov	r3, r9
 80017e4:	4323      	orrs	r3, r4
 80017e6:	4698      	mov	r8, r3
 80017e8:	d140      	bne.n	800186c <__aeabi_ddiv+0x1e8>
 80017ea:	2308      	movs	r3, #8
 80017ec:	4699      	mov	r9, r3
 80017ee:	3b06      	subs	r3, #6
 80017f0:	2500      	movs	r5, #0
 80017f2:	4683      	mov	fp, r0
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	e769      	b.n	80016cc <__aeabi_ddiv+0x48>
 80017f8:	46b2      	mov	sl, r6
 80017fa:	9b00      	ldr	r3, [sp, #0]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d0a9      	beq.n	8001754 <__aeabi_ddiv+0xd0>
 8001800:	2b03      	cmp	r3, #3
 8001802:	d100      	bne.n	8001806 <__aeabi_ddiv+0x182>
 8001804:	e211      	b.n	8001c2a <__aeabi_ddiv+0x5a6>
 8001806:	2b01      	cmp	r3, #1
 8001808:	d093      	beq.n	8001732 <__aeabi_ddiv+0xae>
 800180a:	4a35      	ldr	r2, [pc, #212]	; (80018e0 <__aeabi_ddiv+0x25c>)
 800180c:	445a      	add	r2, fp
 800180e:	2a00      	cmp	r2, #0
 8001810:	dc00      	bgt.n	8001814 <__aeabi_ddiv+0x190>
 8001812:	e13c      	b.n	8001a8e <__aeabi_ddiv+0x40a>
 8001814:	076b      	lsls	r3, r5, #29
 8001816:	d000      	beq.n	800181a <__aeabi_ddiv+0x196>
 8001818:	e1a7      	b.n	8001b6a <__aeabi_ddiv+0x4e6>
 800181a:	08ed      	lsrs	r5, r5, #3
 800181c:	4643      	mov	r3, r8
 800181e:	01db      	lsls	r3, r3, #7
 8001820:	d506      	bpl.n	8001830 <__aeabi_ddiv+0x1ac>
 8001822:	4642      	mov	r2, r8
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <__aeabi_ddiv+0x260>)
 8001826:	401a      	ands	r2, r3
 8001828:	4690      	mov	r8, r2
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	00d2      	lsls	r2, r2, #3
 800182e:	445a      	add	r2, fp
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <__aeabi_ddiv+0x264>)
 8001832:	429a      	cmp	r2, r3
 8001834:	dc8e      	bgt.n	8001754 <__aeabi_ddiv+0xd0>
 8001836:	4643      	mov	r3, r8
 8001838:	0552      	lsls	r2, r2, #21
 800183a:	0758      	lsls	r0, r3, #29
 800183c:	025c      	lsls	r4, r3, #9
 800183e:	4305      	orrs	r5, r0
 8001840:	0b24      	lsrs	r4, r4, #12
 8001842:	0d53      	lsrs	r3, r2, #21
 8001844:	e778      	b.n	8001738 <__aeabi_ddiv+0xb4>
 8001846:	46ba      	mov	sl, r7
 8001848:	46a0      	mov	r8, r4
 800184a:	0015      	movs	r5, r2
 800184c:	9000      	str	r0, [sp, #0]
 800184e:	e7d4      	b.n	80017fa <__aeabi_ddiv+0x176>
 8001850:	464a      	mov	r2, r9
 8001852:	2303      	movs	r3, #3
 8001854:	431a      	orrs	r2, r3
 8001856:	4691      	mov	r9, r2
 8001858:	2003      	movs	r0, #3
 800185a:	4652      	mov	r2, sl
 800185c:	e74f      	b.n	80016fe <__aeabi_ddiv+0x7a>
 800185e:	4649      	mov	r1, r9
 8001860:	2301      	movs	r3, #1
 8001862:	4319      	orrs	r1, r3
 8001864:	4689      	mov	r9, r1
 8001866:	2400      	movs	r4, #0
 8001868:	2001      	movs	r0, #1
 800186a:	e748      	b.n	80016fe <__aeabi_ddiv+0x7a>
 800186c:	230c      	movs	r3, #12
 800186e:	4699      	mov	r9, r3
 8001870:	3b09      	subs	r3, #9
 8001872:	46a0      	mov	r8, r4
 8001874:	4683      	mov	fp, r0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	e728      	b.n	80016cc <__aeabi_ddiv+0x48>
 800187a:	2304      	movs	r3, #4
 800187c:	4699      	mov	r9, r3
 800187e:	2300      	movs	r3, #0
 8001880:	469b      	mov	fp, r3
 8001882:	3301      	adds	r3, #1
 8001884:	2500      	movs	r5, #0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	e720      	b.n	80016cc <__aeabi_ddiv+0x48>
 800188a:	2300      	movs	r3, #0
 800188c:	2480      	movs	r4, #128	; 0x80
 800188e:	469a      	mov	sl, r3
 8001890:	2500      	movs	r5, #0
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <__aeabi_ddiv+0x244>)
 8001894:	0324      	lsls	r4, r4, #12
 8001896:	e74f      	b.n	8001738 <__aeabi_ddiv+0xb4>
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	4641      	mov	r1, r8
 800189c:	031b      	lsls	r3, r3, #12
 800189e:	4219      	tst	r1, r3
 80018a0:	d008      	beq.n	80018b4 <__aeabi_ddiv+0x230>
 80018a2:	421c      	tst	r4, r3
 80018a4:	d106      	bne.n	80018b4 <__aeabi_ddiv+0x230>
 80018a6:	431c      	orrs	r4, r3
 80018a8:	0324      	lsls	r4, r4, #12
 80018aa:	46ba      	mov	sl, r7
 80018ac:	0015      	movs	r5, r2
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <__aeabi_ddiv+0x244>)
 80018b0:	0b24      	lsrs	r4, r4, #12
 80018b2:	e741      	b.n	8001738 <__aeabi_ddiv+0xb4>
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	4643      	mov	r3, r8
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	431c      	orrs	r4, r3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	46b2      	mov	sl, r6
 80018c0:	4b01      	ldr	r3, [pc, #4]	; (80018c8 <__aeabi_ddiv+0x244>)
 80018c2:	0b24      	lsrs	r4, r4, #12
 80018c4:	e738      	b.n	8001738 <__aeabi_ddiv+0xb4>
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	000007ff 	.word	0x000007ff
 80018cc:	fffffc01 	.word	0xfffffc01
 80018d0:	080098e8 	.word	0x080098e8
 80018d4:	fffff801 	.word	0xfffff801
 80018d8:	fffffc0d 	.word	0xfffffc0d
 80018dc:	000003f3 	.word	0x000003f3
 80018e0:	000003ff 	.word	0x000003ff
 80018e4:	feffffff 	.word	0xfeffffff
 80018e8:	000007fe 	.word	0x000007fe
 80018ec:	4544      	cmp	r4, r8
 80018ee:	d200      	bcs.n	80018f2 <__aeabi_ddiv+0x26e>
 80018f0:	e116      	b.n	8001b20 <__aeabi_ddiv+0x49c>
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0x272>
 80018f4:	e111      	b.n	8001b1a <__aeabi_ddiv+0x496>
 80018f6:	2301      	movs	r3, #1
 80018f8:	425b      	negs	r3, r3
 80018fa:	469c      	mov	ip, r3
 80018fc:	002e      	movs	r6, r5
 80018fe:	4640      	mov	r0, r8
 8001900:	2500      	movs	r5, #0
 8001902:	44e3      	add	fp, ip
 8001904:	0223      	lsls	r3, r4, #8
 8001906:	0e14      	lsrs	r4, r2, #24
 8001908:	431c      	orrs	r4, r3
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	4699      	mov	r9, r3
 800190e:	0423      	lsls	r3, r4, #16
 8001910:	0c1f      	lsrs	r7, r3, #16
 8001912:	0212      	lsls	r2, r2, #8
 8001914:	4649      	mov	r1, r9
 8001916:	9200      	str	r2, [sp, #0]
 8001918:	9701      	str	r7, [sp, #4]
 800191a:	f7fe fc97 	bl	800024c <__aeabi_uidivmod>
 800191e:	0002      	movs	r2, r0
 8001920:	437a      	muls	r2, r7
 8001922:	040b      	lsls	r3, r1, #16
 8001924:	0c31      	lsrs	r1, r6, #16
 8001926:	4680      	mov	r8, r0
 8001928:	4319      	orrs	r1, r3
 800192a:	428a      	cmp	r2, r1
 800192c:	d90b      	bls.n	8001946 <__aeabi_ddiv+0x2c2>
 800192e:	2301      	movs	r3, #1
 8001930:	425b      	negs	r3, r3
 8001932:	469c      	mov	ip, r3
 8001934:	1909      	adds	r1, r1, r4
 8001936:	44e0      	add	r8, ip
 8001938:	428c      	cmp	r4, r1
 800193a:	d804      	bhi.n	8001946 <__aeabi_ddiv+0x2c2>
 800193c:	428a      	cmp	r2, r1
 800193e:	d902      	bls.n	8001946 <__aeabi_ddiv+0x2c2>
 8001940:	1e83      	subs	r3, r0, #2
 8001942:	4698      	mov	r8, r3
 8001944:	1909      	adds	r1, r1, r4
 8001946:	1a88      	subs	r0, r1, r2
 8001948:	4649      	mov	r1, r9
 800194a:	f7fe fc7f 	bl	800024c <__aeabi_uidivmod>
 800194e:	0409      	lsls	r1, r1, #16
 8001950:	468c      	mov	ip, r1
 8001952:	0431      	lsls	r1, r6, #16
 8001954:	4666      	mov	r6, ip
 8001956:	9a01      	ldr	r2, [sp, #4]
 8001958:	0c09      	lsrs	r1, r1, #16
 800195a:	4342      	muls	r2, r0
 800195c:	0003      	movs	r3, r0
 800195e:	4331      	orrs	r1, r6
 8001960:	428a      	cmp	r2, r1
 8001962:	d904      	bls.n	800196e <__aeabi_ddiv+0x2ea>
 8001964:	1909      	adds	r1, r1, r4
 8001966:	3b01      	subs	r3, #1
 8001968:	428c      	cmp	r4, r1
 800196a:	d800      	bhi.n	800196e <__aeabi_ddiv+0x2ea>
 800196c:	e111      	b.n	8001b92 <__aeabi_ddiv+0x50e>
 800196e:	1a89      	subs	r1, r1, r2
 8001970:	4642      	mov	r2, r8
 8001972:	9e00      	ldr	r6, [sp, #0]
 8001974:	0412      	lsls	r2, r2, #16
 8001976:	431a      	orrs	r2, r3
 8001978:	0c33      	lsrs	r3, r6, #16
 800197a:	001f      	movs	r7, r3
 800197c:	0c10      	lsrs	r0, r2, #16
 800197e:	4690      	mov	r8, r2
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	0413      	lsls	r3, r2, #16
 8001984:	0432      	lsls	r2, r6, #16
 8001986:	0c16      	lsrs	r6, r2, #16
 8001988:	0032      	movs	r2, r6
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	435a      	muls	r2, r3
 800198e:	9603      	str	r6, [sp, #12]
 8001990:	437b      	muls	r3, r7
 8001992:	4346      	muls	r6, r0
 8001994:	4378      	muls	r0, r7
 8001996:	0c17      	lsrs	r7, r2, #16
 8001998:	46bc      	mov	ip, r7
 800199a:	199b      	adds	r3, r3, r6
 800199c:	4463      	add	r3, ip
 800199e:	429e      	cmp	r6, r3
 80019a0:	d903      	bls.n	80019aa <__aeabi_ddiv+0x326>
 80019a2:	2680      	movs	r6, #128	; 0x80
 80019a4:	0276      	lsls	r6, r6, #9
 80019a6:	46b4      	mov	ip, r6
 80019a8:	4460      	add	r0, ip
 80019aa:	0c1e      	lsrs	r6, r3, #16
 80019ac:	1830      	adds	r0, r6, r0
 80019ae:	0416      	lsls	r6, r2, #16
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	0c36      	lsrs	r6, r6, #16
 80019b4:	199e      	adds	r6, r3, r6
 80019b6:	4281      	cmp	r1, r0
 80019b8:	d200      	bcs.n	80019bc <__aeabi_ddiv+0x338>
 80019ba:	e09c      	b.n	8001af6 <__aeabi_ddiv+0x472>
 80019bc:	d100      	bne.n	80019c0 <__aeabi_ddiv+0x33c>
 80019be:	e097      	b.n	8001af0 <__aeabi_ddiv+0x46c>
 80019c0:	1bae      	subs	r6, r5, r6
 80019c2:	1a09      	subs	r1, r1, r0
 80019c4:	42b5      	cmp	r5, r6
 80019c6:	4180      	sbcs	r0, r0
 80019c8:	4240      	negs	r0, r0
 80019ca:	1a08      	subs	r0, r1, r0
 80019cc:	4284      	cmp	r4, r0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0x34e>
 80019d0:	e111      	b.n	8001bf6 <__aeabi_ddiv+0x572>
 80019d2:	4649      	mov	r1, r9
 80019d4:	f7fe fc3a 	bl	800024c <__aeabi_uidivmod>
 80019d8:	9a01      	ldr	r2, [sp, #4]
 80019da:	040b      	lsls	r3, r1, #16
 80019dc:	4342      	muls	r2, r0
 80019de:	0c31      	lsrs	r1, r6, #16
 80019e0:	0005      	movs	r5, r0
 80019e2:	4319      	orrs	r1, r3
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x374>
 80019e8:	1909      	adds	r1, r1, r4
 80019ea:	3d01      	subs	r5, #1
 80019ec:	428c      	cmp	r4, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x374>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x374>
 80019f4:	1e85      	subs	r5, r0, #2
 80019f6:	1909      	adds	r1, r1, r4
 80019f8:	1a88      	subs	r0, r1, r2
 80019fa:	4649      	mov	r1, r9
 80019fc:	f7fe fc26 	bl	800024c <__aeabi_uidivmod>
 8001a00:	0409      	lsls	r1, r1, #16
 8001a02:	468c      	mov	ip, r1
 8001a04:	0431      	lsls	r1, r6, #16
 8001a06:	4666      	mov	r6, ip
 8001a08:	9a01      	ldr	r2, [sp, #4]
 8001a0a:	0c09      	lsrs	r1, r1, #16
 8001a0c:	4342      	muls	r2, r0
 8001a0e:	0003      	movs	r3, r0
 8001a10:	4331      	orrs	r1, r6
 8001a12:	428a      	cmp	r2, r1
 8001a14:	d907      	bls.n	8001a26 <__aeabi_ddiv+0x3a2>
 8001a16:	1909      	adds	r1, r1, r4
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	428c      	cmp	r4, r1
 8001a1c:	d803      	bhi.n	8001a26 <__aeabi_ddiv+0x3a2>
 8001a1e:	428a      	cmp	r2, r1
 8001a20:	d901      	bls.n	8001a26 <__aeabi_ddiv+0x3a2>
 8001a22:	1e83      	subs	r3, r0, #2
 8001a24:	1909      	adds	r1, r1, r4
 8001a26:	9e03      	ldr	r6, [sp, #12]
 8001a28:	1a89      	subs	r1, r1, r2
 8001a2a:	0032      	movs	r2, r6
 8001a2c:	042d      	lsls	r5, r5, #16
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	9f02      	ldr	r7, [sp, #8]
 8001a32:	042b      	lsls	r3, r5, #16
 8001a34:	0c1b      	lsrs	r3, r3, #16
 8001a36:	435a      	muls	r2, r3
 8001a38:	437b      	muls	r3, r7
 8001a3a:	469c      	mov	ip, r3
 8001a3c:	0c28      	lsrs	r0, r5, #16
 8001a3e:	4346      	muls	r6, r0
 8001a40:	0c13      	lsrs	r3, r2, #16
 8001a42:	44b4      	add	ip, r6
 8001a44:	4463      	add	r3, ip
 8001a46:	4378      	muls	r0, r7
 8001a48:	429e      	cmp	r6, r3
 8001a4a:	d903      	bls.n	8001a54 <__aeabi_ddiv+0x3d0>
 8001a4c:	2680      	movs	r6, #128	; 0x80
 8001a4e:	0276      	lsls	r6, r6, #9
 8001a50:	46b4      	mov	ip, r6
 8001a52:	4460      	add	r0, ip
 8001a54:	0c1e      	lsrs	r6, r3, #16
 8001a56:	0412      	lsls	r2, r2, #16
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	0c12      	lsrs	r2, r2, #16
 8001a5c:	1830      	adds	r0, r6, r0
 8001a5e:	189b      	adds	r3, r3, r2
 8001a60:	4281      	cmp	r1, r0
 8001a62:	d306      	bcc.n	8001a72 <__aeabi_ddiv+0x3ee>
 8001a64:	d002      	beq.n	8001a6c <__aeabi_ddiv+0x3e8>
 8001a66:	2301      	movs	r3, #1
 8001a68:	431d      	orrs	r5, r3
 8001a6a:	e6ce      	b.n	800180a <__aeabi_ddiv+0x186>
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_ddiv+0x3ee>
 8001a70:	e6cb      	b.n	800180a <__aeabi_ddiv+0x186>
 8001a72:	1861      	adds	r1, r4, r1
 8001a74:	1e6e      	subs	r6, r5, #1
 8001a76:	42a1      	cmp	r1, r4
 8001a78:	d200      	bcs.n	8001a7c <__aeabi_ddiv+0x3f8>
 8001a7a:	e0a4      	b.n	8001bc6 <__aeabi_ddiv+0x542>
 8001a7c:	4281      	cmp	r1, r0
 8001a7e:	d200      	bcs.n	8001a82 <__aeabi_ddiv+0x3fe>
 8001a80:	e0c9      	b.n	8001c16 <__aeabi_ddiv+0x592>
 8001a82:	d100      	bne.n	8001a86 <__aeabi_ddiv+0x402>
 8001a84:	e0d9      	b.n	8001c3a <__aeabi_ddiv+0x5b6>
 8001a86:	0035      	movs	r5, r6
 8001a88:	e7ed      	b.n	8001a66 <__aeabi_ddiv+0x3e2>
 8001a8a:	2501      	movs	r5, #1
 8001a8c:	426d      	negs	r5, r5
 8001a8e:	2101      	movs	r1, #1
 8001a90:	1a89      	subs	r1, r1, r2
 8001a92:	2938      	cmp	r1, #56	; 0x38
 8001a94:	dd00      	ble.n	8001a98 <__aeabi_ddiv+0x414>
 8001a96:	e64c      	b.n	8001732 <__aeabi_ddiv+0xae>
 8001a98:	291f      	cmp	r1, #31
 8001a9a:	dc00      	bgt.n	8001a9e <__aeabi_ddiv+0x41a>
 8001a9c:	e07f      	b.n	8001b9e <__aeabi_ddiv+0x51a>
 8001a9e:	231f      	movs	r3, #31
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	1a9a      	subs	r2, r3, r2
 8001aa4:	4643      	mov	r3, r8
 8001aa6:	40d3      	lsrs	r3, r2
 8001aa8:	2920      	cmp	r1, #32
 8001aaa:	d004      	beq.n	8001ab6 <__aeabi_ddiv+0x432>
 8001aac:	4644      	mov	r4, r8
 8001aae:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <__aeabi_ddiv+0x5c0>)
 8001ab0:	445a      	add	r2, fp
 8001ab2:	4094      	lsls	r4, r2
 8001ab4:	4325      	orrs	r5, r4
 8001ab6:	1e6a      	subs	r2, r5, #1
 8001ab8:	4195      	sbcs	r5, r2
 8001aba:	2207      	movs	r2, #7
 8001abc:	432b      	orrs	r3, r5
 8001abe:	0015      	movs	r5, r2
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	401d      	ands	r5, r3
 8001ac4:	421a      	tst	r2, r3
 8001ac6:	d100      	bne.n	8001aca <__aeabi_ddiv+0x446>
 8001ac8:	e0a1      	b.n	8001c0e <__aeabi_ddiv+0x58a>
 8001aca:	220f      	movs	r2, #15
 8001acc:	2400      	movs	r4, #0
 8001ace:	401a      	ands	r2, r3
 8001ad0:	2a04      	cmp	r2, #4
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_ddiv+0x452>
 8001ad4:	e098      	b.n	8001c08 <__aeabi_ddiv+0x584>
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	419b      	sbcs	r3, r3
 8001adc:	425b      	negs	r3, r3
 8001ade:	18e4      	adds	r4, r4, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	0222      	lsls	r2, r4, #8
 8001ae4:	d400      	bmi.n	8001ae8 <__aeabi_ddiv+0x464>
 8001ae6:	e08f      	b.n	8001c08 <__aeabi_ddiv+0x584>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	2400      	movs	r4, #0
 8001aec:	2500      	movs	r5, #0
 8001aee:	e623      	b.n	8001738 <__aeabi_ddiv+0xb4>
 8001af0:	42b5      	cmp	r5, r6
 8001af2:	d300      	bcc.n	8001af6 <__aeabi_ddiv+0x472>
 8001af4:	e764      	b.n	80019c0 <__aeabi_ddiv+0x33c>
 8001af6:	4643      	mov	r3, r8
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	9b00      	ldr	r3, [sp, #0]
 8001afc:	469c      	mov	ip, r3
 8001afe:	4465      	add	r5, ip
 8001b00:	001f      	movs	r7, r3
 8001b02:	429d      	cmp	r5, r3
 8001b04:	419b      	sbcs	r3, r3
 8001b06:	425b      	negs	r3, r3
 8001b08:	191b      	adds	r3, r3, r4
 8001b0a:	18c9      	adds	r1, r1, r3
 8001b0c:	428c      	cmp	r4, r1
 8001b0e:	d23a      	bcs.n	8001b86 <__aeabi_ddiv+0x502>
 8001b10:	4288      	cmp	r0, r1
 8001b12:	d863      	bhi.n	8001bdc <__aeabi_ddiv+0x558>
 8001b14:	d060      	beq.n	8001bd8 <__aeabi_ddiv+0x554>
 8001b16:	4690      	mov	r8, r2
 8001b18:	e752      	b.n	80019c0 <__aeabi_ddiv+0x33c>
 8001b1a:	42aa      	cmp	r2, r5
 8001b1c:	d900      	bls.n	8001b20 <__aeabi_ddiv+0x49c>
 8001b1e:	e6ea      	b.n	80018f6 <__aeabi_ddiv+0x272>
 8001b20:	4643      	mov	r3, r8
 8001b22:	07de      	lsls	r6, r3, #31
 8001b24:	0858      	lsrs	r0, r3, #1
 8001b26:	086b      	lsrs	r3, r5, #1
 8001b28:	431e      	orrs	r6, r3
 8001b2a:	07ed      	lsls	r5, r5, #31
 8001b2c:	e6ea      	b.n	8001904 <__aeabi_ddiv+0x280>
 8001b2e:	4648      	mov	r0, r9
 8001b30:	f001 f89e 	bl	8002c70 <__clzsi2>
 8001b34:	0001      	movs	r1, r0
 8001b36:	0002      	movs	r2, r0
 8001b38:	3115      	adds	r1, #21
 8001b3a:	3220      	adds	r2, #32
 8001b3c:	291c      	cmp	r1, #28
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_ddiv+0x4be>
 8001b40:	e61a      	b.n	8001778 <__aeabi_ddiv+0xf4>
 8001b42:	464b      	mov	r3, r9
 8001b44:	3808      	subs	r0, #8
 8001b46:	4083      	lsls	r3, r0
 8001b48:	2500      	movs	r5, #0
 8001b4a:	4698      	mov	r8, r3
 8001b4c:	e620      	b.n	8001790 <__aeabi_ddiv+0x10c>
 8001b4e:	f001 f88f 	bl	8002c70 <__clzsi2>
 8001b52:	0003      	movs	r3, r0
 8001b54:	001a      	movs	r2, r3
 8001b56:	3215      	adds	r2, #21
 8001b58:	3020      	adds	r0, #32
 8001b5a:	2a1c      	cmp	r2, #28
 8001b5c:	dc00      	bgt.n	8001b60 <__aeabi_ddiv+0x4dc>
 8001b5e:	e630      	b.n	80017c2 <__aeabi_ddiv+0x13e>
 8001b60:	4654      	mov	r4, sl
 8001b62:	3b08      	subs	r3, #8
 8001b64:	2200      	movs	r2, #0
 8001b66:	409c      	lsls	r4, r3
 8001b68:	e635      	b.n	80017d6 <__aeabi_ddiv+0x152>
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	402b      	ands	r3, r5
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0x4f0>
 8001b72:	e652      	b.n	800181a <__aeabi_ddiv+0x196>
 8001b74:	2305      	movs	r3, #5
 8001b76:	425b      	negs	r3, r3
 8001b78:	42ab      	cmp	r3, r5
 8001b7a:	419b      	sbcs	r3, r3
 8001b7c:	3504      	adds	r5, #4
 8001b7e:	425b      	negs	r3, r3
 8001b80:	08ed      	lsrs	r5, r5, #3
 8001b82:	4498      	add	r8, r3
 8001b84:	e64a      	b.n	800181c <__aeabi_ddiv+0x198>
 8001b86:	428c      	cmp	r4, r1
 8001b88:	d1c5      	bne.n	8001b16 <__aeabi_ddiv+0x492>
 8001b8a:	42af      	cmp	r7, r5
 8001b8c:	d9c0      	bls.n	8001b10 <__aeabi_ddiv+0x48c>
 8001b8e:	4690      	mov	r8, r2
 8001b90:	e716      	b.n	80019c0 <__aeabi_ddiv+0x33c>
 8001b92:	428a      	cmp	r2, r1
 8001b94:	d800      	bhi.n	8001b98 <__aeabi_ddiv+0x514>
 8001b96:	e6ea      	b.n	800196e <__aeabi_ddiv+0x2ea>
 8001b98:	1e83      	subs	r3, r0, #2
 8001b9a:	1909      	adds	r1, r1, r4
 8001b9c:	e6e7      	b.n	800196e <__aeabi_ddiv+0x2ea>
 8001b9e:	4a2a      	ldr	r2, [pc, #168]	; (8001c48 <__aeabi_ddiv+0x5c4>)
 8001ba0:	0028      	movs	r0, r5
 8001ba2:	445a      	add	r2, fp
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	4095      	lsls	r5, r2
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	40c8      	lsrs	r0, r1
 8001bac:	1e6a      	subs	r2, r5, #1
 8001bae:	4195      	sbcs	r5, r2
 8001bb0:	4644      	mov	r4, r8
 8001bb2:	4303      	orrs	r3, r0
 8001bb4:	432b      	orrs	r3, r5
 8001bb6:	40cc      	lsrs	r4, r1
 8001bb8:	075a      	lsls	r2, r3, #29
 8001bba:	d092      	beq.n	8001ae2 <__aeabi_ddiv+0x45e>
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	2a04      	cmp	r2, #4
 8001bc2:	d188      	bne.n	8001ad6 <__aeabi_ddiv+0x452>
 8001bc4:	e78d      	b.n	8001ae2 <__aeabi_ddiv+0x45e>
 8001bc6:	0035      	movs	r5, r6
 8001bc8:	4281      	cmp	r1, r0
 8001bca:	d000      	beq.n	8001bce <__aeabi_ddiv+0x54a>
 8001bcc:	e74b      	b.n	8001a66 <__aeabi_ddiv+0x3e2>
 8001bce:	9a00      	ldr	r2, [sp, #0]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_ddiv+0x552>
 8001bd4:	e747      	b.n	8001a66 <__aeabi_ddiv+0x3e2>
 8001bd6:	e618      	b.n	800180a <__aeabi_ddiv+0x186>
 8001bd8:	42ae      	cmp	r6, r5
 8001bda:	d99c      	bls.n	8001b16 <__aeabi_ddiv+0x492>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	425b      	negs	r3, r3
 8001be0:	469c      	mov	ip, r3
 8001be2:	9b00      	ldr	r3, [sp, #0]
 8001be4:	44e0      	add	r8, ip
 8001be6:	469c      	mov	ip, r3
 8001be8:	4465      	add	r5, ip
 8001bea:	429d      	cmp	r5, r3
 8001bec:	419b      	sbcs	r3, r3
 8001bee:	425b      	negs	r3, r3
 8001bf0:	191b      	adds	r3, r3, r4
 8001bf2:	18c9      	adds	r1, r1, r3
 8001bf4:	e6e4      	b.n	80019c0 <__aeabi_ddiv+0x33c>
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <__aeabi_ddiv+0x5c8>)
 8001bf8:	445a      	add	r2, fp
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	dc00      	bgt.n	8001c00 <__aeabi_ddiv+0x57c>
 8001bfe:	e744      	b.n	8001a8a <__aeabi_ddiv+0x406>
 8001c00:	2301      	movs	r3, #1
 8001c02:	2500      	movs	r5, #0
 8001c04:	4498      	add	r8, r3
 8001c06:	e609      	b.n	800181c <__aeabi_ddiv+0x198>
 8001c08:	0765      	lsls	r5, r4, #29
 8001c0a:	0264      	lsls	r4, r4, #9
 8001c0c:	0b24      	lsrs	r4, r4, #12
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	431d      	orrs	r5, r3
 8001c12:	2300      	movs	r3, #0
 8001c14:	e590      	b.n	8001738 <__aeabi_ddiv+0xb4>
 8001c16:	9e00      	ldr	r6, [sp, #0]
 8001c18:	3d02      	subs	r5, #2
 8001c1a:	0072      	lsls	r2, r6, #1
 8001c1c:	42b2      	cmp	r2, r6
 8001c1e:	41bf      	sbcs	r7, r7
 8001c20:	427f      	negs	r7, r7
 8001c22:	193c      	adds	r4, r7, r4
 8001c24:	1909      	adds	r1, r1, r4
 8001c26:	9200      	str	r2, [sp, #0]
 8001c28:	e7ce      	b.n	8001bc8 <__aeabi_ddiv+0x544>
 8001c2a:	2480      	movs	r4, #128	; 0x80
 8001c2c:	4643      	mov	r3, r8
 8001c2e:	0324      	lsls	r4, r4, #12
 8001c30:	431c      	orrs	r4, r3
 8001c32:	0324      	lsls	r4, r4, #12
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <__aeabi_ddiv+0x5cc>)
 8001c36:	0b24      	lsrs	r4, r4, #12
 8001c38:	e57e      	b.n	8001738 <__aeabi_ddiv+0xb4>
 8001c3a:	9a00      	ldr	r2, [sp, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d3ea      	bcc.n	8001c16 <__aeabi_ddiv+0x592>
 8001c40:	0035      	movs	r5, r6
 8001c42:	e7c4      	b.n	8001bce <__aeabi_ddiv+0x54a>
 8001c44:	0000043e 	.word	0x0000043e
 8001c48:	0000041e 	.word	0x0000041e
 8001c4c:	000003ff 	.word	0x000003ff
 8001c50:	000007ff 	.word	0x000007ff

08001c54 <__eqdf2>:
 8001c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c56:	464f      	mov	r7, r9
 8001c58:	4646      	mov	r6, r8
 8001c5a:	46d6      	mov	lr, sl
 8001c5c:	4694      	mov	ip, r2
 8001c5e:	4691      	mov	r9, r2
 8001c60:	031a      	lsls	r2, r3, #12
 8001c62:	0b12      	lsrs	r2, r2, #12
 8001c64:	4d18      	ldr	r5, [pc, #96]	; (8001cc8 <__eqdf2+0x74>)
 8001c66:	b5c0      	push	{r6, r7, lr}
 8001c68:	004c      	lsls	r4, r1, #1
 8001c6a:	030f      	lsls	r7, r1, #12
 8001c6c:	4692      	mov	sl, r2
 8001c6e:	005a      	lsls	r2, r3, #1
 8001c70:	0006      	movs	r6, r0
 8001c72:	4680      	mov	r8, r0
 8001c74:	0b3f      	lsrs	r7, r7, #12
 8001c76:	2001      	movs	r0, #1
 8001c78:	0d64      	lsrs	r4, r4, #21
 8001c7a:	0fc9      	lsrs	r1, r1, #31
 8001c7c:	0d52      	lsrs	r2, r2, #21
 8001c7e:	0fdb      	lsrs	r3, r3, #31
 8001c80:	42ac      	cmp	r4, r5
 8001c82:	d00a      	beq.n	8001c9a <__eqdf2+0x46>
 8001c84:	42aa      	cmp	r2, r5
 8001c86:	d003      	beq.n	8001c90 <__eqdf2+0x3c>
 8001c88:	4294      	cmp	r4, r2
 8001c8a:	d101      	bne.n	8001c90 <__eqdf2+0x3c>
 8001c8c:	4557      	cmp	r7, sl
 8001c8e:	d00d      	beq.n	8001cac <__eqdf2+0x58>
 8001c90:	bce0      	pop	{r5, r6, r7}
 8001c92:	46ba      	mov	sl, r7
 8001c94:	46b1      	mov	r9, r6
 8001c96:	46a8      	mov	r8, r5
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9a:	003d      	movs	r5, r7
 8001c9c:	4335      	orrs	r5, r6
 8001c9e:	d1f7      	bne.n	8001c90 <__eqdf2+0x3c>
 8001ca0:	42a2      	cmp	r2, r4
 8001ca2:	d1f5      	bne.n	8001c90 <__eqdf2+0x3c>
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	4665      	mov	r5, ip
 8001ca8:	432a      	orrs	r2, r5
 8001caa:	d1f1      	bne.n	8001c90 <__eqdf2+0x3c>
 8001cac:	2001      	movs	r0, #1
 8001cae:	45c8      	cmp	r8, r9
 8001cb0:	d1ee      	bne.n	8001c90 <__eqdf2+0x3c>
 8001cb2:	4299      	cmp	r1, r3
 8001cb4:	d006      	beq.n	8001cc4 <__eqdf2+0x70>
 8001cb6:	2c00      	cmp	r4, #0
 8001cb8:	d1ea      	bne.n	8001c90 <__eqdf2+0x3c>
 8001cba:	433e      	orrs	r6, r7
 8001cbc:	0030      	movs	r0, r6
 8001cbe:	1e46      	subs	r6, r0, #1
 8001cc0:	41b0      	sbcs	r0, r6
 8001cc2:	e7e5      	b.n	8001c90 <__eqdf2+0x3c>
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e7e3      	b.n	8001c90 <__eqdf2+0x3c>
 8001cc8:	000007ff 	.word	0x000007ff

08001ccc <__gedf2>:
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	464e      	mov	r6, r9
 8001cd0:	4645      	mov	r5, r8
 8001cd2:	4657      	mov	r7, sl
 8001cd4:	46de      	mov	lr, fp
 8001cd6:	0004      	movs	r4, r0
 8001cd8:	0018      	movs	r0, r3
 8001cda:	b5e0      	push	{r5, r6, r7, lr}
 8001cdc:	0016      	movs	r6, r2
 8001cde:	031b      	lsls	r3, r3, #12
 8001ce0:	0b1b      	lsrs	r3, r3, #12
 8001ce2:	4d32      	ldr	r5, [pc, #200]	; (8001dac <__gedf2+0xe0>)
 8001ce4:	030f      	lsls	r7, r1, #12
 8001ce6:	004a      	lsls	r2, r1, #1
 8001ce8:	4699      	mov	r9, r3
 8001cea:	0043      	lsls	r3, r0, #1
 8001cec:	46a4      	mov	ip, r4
 8001cee:	46b0      	mov	r8, r6
 8001cf0:	0b3f      	lsrs	r7, r7, #12
 8001cf2:	0d52      	lsrs	r2, r2, #21
 8001cf4:	0fc9      	lsrs	r1, r1, #31
 8001cf6:	0d5b      	lsrs	r3, r3, #21
 8001cf8:	0fc0      	lsrs	r0, r0, #31
 8001cfa:	42aa      	cmp	r2, r5
 8001cfc:	d029      	beq.n	8001d52 <__gedf2+0x86>
 8001cfe:	42ab      	cmp	r3, r5
 8001d00:	d018      	beq.n	8001d34 <__gedf2+0x68>
 8001d02:	2a00      	cmp	r2, #0
 8001d04:	d12a      	bne.n	8001d5c <__gedf2+0x90>
 8001d06:	433c      	orrs	r4, r7
 8001d08:	46a3      	mov	fp, r4
 8001d0a:	4265      	negs	r5, r4
 8001d0c:	4165      	adcs	r5, r4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <__gedf2+0x4c>
 8001d12:	464c      	mov	r4, r9
 8001d14:	4326      	orrs	r6, r4
 8001d16:	d027      	beq.n	8001d68 <__gedf2+0x9c>
 8001d18:	2d00      	cmp	r5, #0
 8001d1a:	d115      	bne.n	8001d48 <__gedf2+0x7c>
 8001d1c:	4281      	cmp	r1, r0
 8001d1e:	d028      	beq.n	8001d72 <__gedf2+0xa6>
 8001d20:	2002      	movs	r0, #2
 8001d22:	3901      	subs	r1, #1
 8001d24:	4008      	ands	r0, r1
 8001d26:	3801      	subs	r0, #1
 8001d28:	bcf0      	pop	{r4, r5, r6, r7}
 8001d2a:	46bb      	mov	fp, r7
 8001d2c:	46b2      	mov	sl, r6
 8001d2e:	46a9      	mov	r9, r5
 8001d30:	46a0      	mov	r8, r4
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d34:	464d      	mov	r5, r9
 8001d36:	432e      	orrs	r6, r5
 8001d38:	d12f      	bne.n	8001d9a <__gedf2+0xce>
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d1ee      	bne.n	8001d1c <__gedf2+0x50>
 8001d3e:	433c      	orrs	r4, r7
 8001d40:	4265      	negs	r5, r4
 8001d42:	4165      	adcs	r5, r4
 8001d44:	2d00      	cmp	r5, #0
 8001d46:	d0e9      	beq.n	8001d1c <__gedf2+0x50>
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	d1ed      	bne.n	8001d28 <__gedf2+0x5c>
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	4240      	negs	r0, r0
 8001d50:	e7ea      	b.n	8001d28 <__gedf2+0x5c>
 8001d52:	003d      	movs	r5, r7
 8001d54:	4325      	orrs	r5, r4
 8001d56:	d120      	bne.n	8001d9a <__gedf2+0xce>
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d0eb      	beq.n	8001d34 <__gedf2+0x68>
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1dd      	bne.n	8001d1c <__gedf2+0x50>
 8001d60:	464c      	mov	r4, r9
 8001d62:	4326      	orrs	r6, r4
 8001d64:	d1da      	bne.n	8001d1c <__gedf2+0x50>
 8001d66:	e7db      	b.n	8001d20 <__gedf2+0x54>
 8001d68:	465b      	mov	r3, fp
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0db      	beq.n	8001d28 <__gedf2+0x5c>
 8001d70:	e7d6      	b.n	8001d20 <__gedf2+0x54>
 8001d72:	429a      	cmp	r2, r3
 8001d74:	dc0a      	bgt.n	8001d8c <__gedf2+0xc0>
 8001d76:	dbe7      	blt.n	8001d48 <__gedf2+0x7c>
 8001d78:	454f      	cmp	r7, r9
 8001d7a:	d8d1      	bhi.n	8001d20 <__gedf2+0x54>
 8001d7c:	d010      	beq.n	8001da0 <__gedf2+0xd4>
 8001d7e:	2000      	movs	r0, #0
 8001d80:	454f      	cmp	r7, r9
 8001d82:	d2d1      	bcs.n	8001d28 <__gedf2+0x5c>
 8001d84:	2900      	cmp	r1, #0
 8001d86:	d0e1      	beq.n	8001d4c <__gedf2+0x80>
 8001d88:	0008      	movs	r0, r1
 8001d8a:	e7cd      	b.n	8001d28 <__gedf2+0x5c>
 8001d8c:	4243      	negs	r3, r0
 8001d8e:	4158      	adcs	r0, r3
 8001d90:	2302      	movs	r3, #2
 8001d92:	4240      	negs	r0, r0
 8001d94:	4018      	ands	r0, r3
 8001d96:	3801      	subs	r0, #1
 8001d98:	e7c6      	b.n	8001d28 <__gedf2+0x5c>
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	4240      	negs	r0, r0
 8001d9e:	e7c3      	b.n	8001d28 <__gedf2+0x5c>
 8001da0:	45c4      	cmp	ip, r8
 8001da2:	d8bd      	bhi.n	8001d20 <__gedf2+0x54>
 8001da4:	2000      	movs	r0, #0
 8001da6:	45c4      	cmp	ip, r8
 8001da8:	d2be      	bcs.n	8001d28 <__gedf2+0x5c>
 8001daa:	e7eb      	b.n	8001d84 <__gedf2+0xb8>
 8001dac:	000007ff 	.word	0x000007ff

08001db0 <__ledf2>:
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db2:	464e      	mov	r6, r9
 8001db4:	4645      	mov	r5, r8
 8001db6:	4657      	mov	r7, sl
 8001db8:	46de      	mov	lr, fp
 8001dba:	0004      	movs	r4, r0
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	0016      	movs	r6, r2
 8001dc2:	031b      	lsls	r3, r3, #12
 8001dc4:	0b1b      	lsrs	r3, r3, #12
 8001dc6:	4d31      	ldr	r5, [pc, #196]	; (8001e8c <__ledf2+0xdc>)
 8001dc8:	030f      	lsls	r7, r1, #12
 8001dca:	004a      	lsls	r2, r1, #1
 8001dcc:	4699      	mov	r9, r3
 8001dce:	0043      	lsls	r3, r0, #1
 8001dd0:	46a4      	mov	ip, r4
 8001dd2:	46b0      	mov	r8, r6
 8001dd4:	0b3f      	lsrs	r7, r7, #12
 8001dd6:	0d52      	lsrs	r2, r2, #21
 8001dd8:	0fc9      	lsrs	r1, r1, #31
 8001dda:	0d5b      	lsrs	r3, r3, #21
 8001ddc:	0fc0      	lsrs	r0, r0, #31
 8001dde:	42aa      	cmp	r2, r5
 8001de0:	d011      	beq.n	8001e06 <__ledf2+0x56>
 8001de2:	42ab      	cmp	r3, r5
 8001de4:	d014      	beq.n	8001e10 <__ledf2+0x60>
 8001de6:	2a00      	cmp	r2, #0
 8001de8:	d12f      	bne.n	8001e4a <__ledf2+0x9a>
 8001dea:	433c      	orrs	r4, r7
 8001dec:	46a3      	mov	fp, r4
 8001dee:	4265      	negs	r5, r4
 8001df0:	4165      	adcs	r5, r4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d114      	bne.n	8001e20 <__ledf2+0x70>
 8001df6:	464c      	mov	r4, r9
 8001df8:	4326      	orrs	r6, r4
 8001dfa:	d111      	bne.n	8001e20 <__ledf2+0x70>
 8001dfc:	465b      	mov	r3, fp
 8001dfe:	2000      	movs	r0, #0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d017      	beq.n	8001e34 <__ledf2+0x84>
 8001e04:	e010      	b.n	8001e28 <__ledf2+0x78>
 8001e06:	003d      	movs	r5, r7
 8001e08:	4325      	orrs	r5, r4
 8001e0a:	d112      	bne.n	8001e32 <__ledf2+0x82>
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d11c      	bne.n	8001e4a <__ledf2+0x9a>
 8001e10:	464d      	mov	r5, r9
 8001e12:	432e      	orrs	r6, r5
 8001e14:	d10d      	bne.n	8001e32 <__ledf2+0x82>
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	d104      	bne.n	8001e24 <__ledf2+0x74>
 8001e1a:	433c      	orrs	r4, r7
 8001e1c:	4265      	negs	r5, r4
 8001e1e:	4165      	adcs	r5, r4
 8001e20:	2d00      	cmp	r5, #0
 8001e22:	d10d      	bne.n	8001e40 <__ledf2+0x90>
 8001e24:	4281      	cmp	r1, r0
 8001e26:	d016      	beq.n	8001e56 <__ledf2+0xa6>
 8001e28:	2002      	movs	r0, #2
 8001e2a:	3901      	subs	r1, #1
 8001e2c:	4008      	ands	r0, r1
 8001e2e:	3801      	subs	r0, #1
 8001e30:	e000      	b.n	8001e34 <__ledf2+0x84>
 8001e32:	2002      	movs	r0, #2
 8001e34:	bcf0      	pop	{r4, r5, r6, r7}
 8001e36:	46bb      	mov	fp, r7
 8001e38:	46b2      	mov	sl, r6
 8001e3a:	46a9      	mov	r9, r5
 8001e3c:	46a0      	mov	r8, r4
 8001e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d1f7      	bne.n	8001e34 <__ledf2+0x84>
 8001e44:	2001      	movs	r0, #1
 8001e46:	4240      	negs	r0, r0
 8001e48:	e7f4      	b.n	8001e34 <__ledf2+0x84>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ea      	bne.n	8001e24 <__ledf2+0x74>
 8001e4e:	464c      	mov	r4, r9
 8001e50:	4326      	orrs	r6, r4
 8001e52:	d1e7      	bne.n	8001e24 <__ledf2+0x74>
 8001e54:	e7e8      	b.n	8001e28 <__ledf2+0x78>
 8001e56:	429a      	cmp	r2, r3
 8001e58:	dd06      	ble.n	8001e68 <__ledf2+0xb8>
 8001e5a:	4243      	negs	r3, r0
 8001e5c:	4158      	adcs	r0, r3
 8001e5e:	2302      	movs	r3, #2
 8001e60:	4240      	negs	r0, r0
 8001e62:	4018      	ands	r0, r3
 8001e64:	3801      	subs	r0, #1
 8001e66:	e7e5      	b.n	8001e34 <__ledf2+0x84>
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbe9      	blt.n	8001e40 <__ledf2+0x90>
 8001e6c:	454f      	cmp	r7, r9
 8001e6e:	d8db      	bhi.n	8001e28 <__ledf2+0x78>
 8001e70:	d006      	beq.n	8001e80 <__ledf2+0xd0>
 8001e72:	2000      	movs	r0, #0
 8001e74:	454f      	cmp	r7, r9
 8001e76:	d2dd      	bcs.n	8001e34 <__ledf2+0x84>
 8001e78:	2900      	cmp	r1, #0
 8001e7a:	d0e3      	beq.n	8001e44 <__ledf2+0x94>
 8001e7c:	0008      	movs	r0, r1
 8001e7e:	e7d9      	b.n	8001e34 <__ledf2+0x84>
 8001e80:	45c4      	cmp	ip, r8
 8001e82:	d8d1      	bhi.n	8001e28 <__ledf2+0x78>
 8001e84:	2000      	movs	r0, #0
 8001e86:	45c4      	cmp	ip, r8
 8001e88:	d2d4      	bcs.n	8001e34 <__ledf2+0x84>
 8001e8a:	e7f5      	b.n	8001e78 <__ledf2+0xc8>
 8001e8c:	000007ff 	.word	0x000007ff

08001e90 <__aeabi_dmul>:
 8001e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e92:	4657      	mov	r7, sl
 8001e94:	464e      	mov	r6, r9
 8001e96:	4645      	mov	r5, r8
 8001e98:	46de      	mov	lr, fp
 8001e9a:	b5e0      	push	{r5, r6, r7, lr}
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	030c      	lsls	r4, r1, #12
 8001ea0:	004b      	lsls	r3, r1, #1
 8001ea2:	0006      	movs	r6, r0
 8001ea4:	4692      	mov	sl, r2
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	0b24      	lsrs	r4, r4, #12
 8001eaa:	0d5b      	lsrs	r3, r3, #21
 8001eac:	0fcf      	lsrs	r7, r1, #31
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d06c      	beq.n	8001f8c <__aeabi_dmul+0xfc>
 8001eb2:	4add      	ldr	r2, [pc, #884]	; (8002228 <__aeabi_dmul+0x398>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dmul+0x2a>
 8001eb8:	e086      	b.n	8001fc8 <__aeabi_dmul+0x138>
 8001eba:	0f42      	lsrs	r2, r0, #29
 8001ebc:	00e4      	lsls	r4, r4, #3
 8001ebe:	4314      	orrs	r4, r2
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	0412      	lsls	r2, r2, #16
 8001ec4:	4314      	orrs	r4, r2
 8001ec6:	4ad9      	ldr	r2, [pc, #868]	; (800222c <__aeabi_dmul+0x39c>)
 8001ec8:	00c5      	lsls	r5, r0, #3
 8001eca:	4694      	mov	ip, r2
 8001ecc:	4463      	add	r3, ip
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	469b      	mov	fp, r3
 8001ed6:	4643      	mov	r3, r8
 8001ed8:	4642      	mov	r2, r8
 8001eda:	031e      	lsls	r6, r3, #12
 8001edc:	0fd2      	lsrs	r2, r2, #31
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4650      	mov	r0, sl
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	0b36      	lsrs	r6, r6, #12
 8001ee6:	0d5b      	lsrs	r3, r3, #21
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dmul+0x5c>
 8001eea:	e078      	b.n	8001fde <__aeabi_dmul+0x14e>
 8001eec:	4ace      	ldr	r2, [pc, #824]	; (8002228 <__aeabi_dmul+0x398>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01d      	beq.n	8001f2e <__aeabi_dmul+0x9e>
 8001ef2:	49ce      	ldr	r1, [pc, #824]	; (800222c <__aeabi_dmul+0x39c>)
 8001ef4:	0f42      	lsrs	r2, r0, #29
 8001ef6:	468c      	mov	ip, r1
 8001ef8:	9900      	ldr	r1, [sp, #0]
 8001efa:	4463      	add	r3, ip
 8001efc:	00f6      	lsls	r6, r6, #3
 8001efe:	468c      	mov	ip, r1
 8001f00:	4316      	orrs	r6, r2
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	449c      	add	ip, r3
 8001f06:	0412      	lsls	r2, r2, #16
 8001f08:	4663      	mov	r3, ip
 8001f0a:	4316      	orrs	r6, r2
 8001f0c:	00c2      	lsls	r2, r0, #3
 8001f0e:	2000      	movs	r0, #0
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	9900      	ldr	r1, [sp, #0]
 8001f14:	4643      	mov	r3, r8
 8001f16:	3101      	adds	r1, #1
 8001f18:	468c      	mov	ip, r1
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	407b      	eors	r3, r7
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	290f      	cmp	r1, #15
 8001f22:	d900      	bls.n	8001f26 <__aeabi_dmul+0x96>
 8001f24:	e07e      	b.n	8002024 <__aeabi_dmul+0x194>
 8001f26:	4bc2      	ldr	r3, [pc, #776]	; (8002230 <__aeabi_dmul+0x3a0>)
 8001f28:	0089      	lsls	r1, r1, #2
 8001f2a:	5859      	ldr	r1, [r3, r1]
 8001f2c:	468f      	mov	pc, r1
 8001f2e:	4652      	mov	r2, sl
 8001f30:	9b00      	ldr	r3, [sp, #0]
 8001f32:	4332      	orrs	r2, r6
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dmul+0xa8>
 8001f36:	e156      	b.n	80021e6 <__aeabi_dmul+0x356>
 8001f38:	49bb      	ldr	r1, [pc, #748]	; (8002228 <__aeabi_dmul+0x398>)
 8001f3a:	2600      	movs	r6, #0
 8001f3c:	468c      	mov	ip, r1
 8001f3e:	4463      	add	r3, ip
 8001f40:	4649      	mov	r1, r9
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2302      	movs	r3, #2
 8001f46:	4319      	orrs	r1, r3
 8001f48:	4689      	mov	r9, r1
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	e7e1      	b.n	8001f12 <__aeabi_dmul+0x82>
 8001f4e:	4643      	mov	r3, r8
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	0034      	movs	r4, r6
 8001f54:	0015      	movs	r5, r2
 8001f56:	4683      	mov	fp, r0
 8001f58:	465b      	mov	r3, fp
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d05e      	beq.n	800201c <__aeabi_dmul+0x18c>
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dmul+0xd4>
 8001f62:	e1f3      	b.n	800234c <__aeabi_dmul+0x4bc>
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d000      	beq.n	8001f6a <__aeabi_dmul+0xda>
 8001f68:	e118      	b.n	800219c <__aeabi_dmul+0x30c>
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2400      	movs	r4, #0
 8001f6e:	2500      	movs	r5, #0
 8001f70:	9b01      	ldr	r3, [sp, #4]
 8001f72:	0512      	lsls	r2, r2, #20
 8001f74:	4322      	orrs	r2, r4
 8001f76:	07db      	lsls	r3, r3, #31
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	0028      	movs	r0, r5
 8001f7c:	0011      	movs	r1, r2
 8001f7e:	b007      	add	sp, #28
 8001f80:	bcf0      	pop	{r4, r5, r6, r7}
 8001f82:	46bb      	mov	fp, r7
 8001f84:	46b2      	mov	sl, r6
 8001f86:	46a9      	mov	r9, r5
 8001f88:	46a0      	mov	r8, r4
 8001f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8c:	0025      	movs	r5, r4
 8001f8e:	4305      	orrs	r5, r0
 8001f90:	d100      	bne.n	8001f94 <__aeabi_dmul+0x104>
 8001f92:	e141      	b.n	8002218 <__aeabi_dmul+0x388>
 8001f94:	2c00      	cmp	r4, #0
 8001f96:	d100      	bne.n	8001f9a <__aeabi_dmul+0x10a>
 8001f98:	e1ad      	b.n	80022f6 <__aeabi_dmul+0x466>
 8001f9a:	0020      	movs	r0, r4
 8001f9c:	f000 fe68 	bl	8002c70 <__clzsi2>
 8001fa0:	0001      	movs	r1, r0
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	390b      	subs	r1, #11
 8001fa6:	231d      	movs	r3, #29
 8001fa8:	0010      	movs	r0, r2
 8001faa:	1a5b      	subs	r3, r3, r1
 8001fac:	0031      	movs	r1, r6
 8001fae:	0035      	movs	r5, r6
 8001fb0:	3808      	subs	r0, #8
 8001fb2:	4084      	lsls	r4, r0
 8001fb4:	40d9      	lsrs	r1, r3
 8001fb6:	4085      	lsls	r5, r0
 8001fb8:	430c      	orrs	r4, r1
 8001fba:	489e      	ldr	r0, [pc, #632]	; (8002234 <__aeabi_dmul+0x3a4>)
 8001fbc:	1a83      	subs	r3, r0, r2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	4699      	mov	r9, r3
 8001fc4:	469b      	mov	fp, r3
 8001fc6:	e786      	b.n	8001ed6 <__aeabi_dmul+0x46>
 8001fc8:	0005      	movs	r5, r0
 8001fca:	4325      	orrs	r5, r4
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_dmul+0x140>
 8001fce:	e11c      	b.n	800220a <__aeabi_dmul+0x37a>
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	4691      	mov	r9, r2
 8001fda:	469b      	mov	fp, r3
 8001fdc:	e77b      	b.n	8001ed6 <__aeabi_dmul+0x46>
 8001fde:	4652      	mov	r2, sl
 8001fe0:	4332      	orrs	r2, r6
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dmul+0x156>
 8001fe4:	e10a      	b.n	80021fc <__aeabi_dmul+0x36c>
 8001fe6:	2e00      	cmp	r6, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dmul+0x15c>
 8001fea:	e176      	b.n	80022da <__aeabi_dmul+0x44a>
 8001fec:	0030      	movs	r0, r6
 8001fee:	f000 fe3f 	bl	8002c70 <__clzsi2>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	3a0b      	subs	r2, #11
 8001ff6:	231d      	movs	r3, #29
 8001ff8:	0001      	movs	r1, r0
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	4652      	mov	r2, sl
 8001ffe:	3908      	subs	r1, #8
 8002000:	40da      	lsrs	r2, r3
 8002002:	408e      	lsls	r6, r1
 8002004:	4316      	orrs	r6, r2
 8002006:	4652      	mov	r2, sl
 8002008:	408a      	lsls	r2, r1
 800200a:	9b00      	ldr	r3, [sp, #0]
 800200c:	4989      	ldr	r1, [pc, #548]	; (8002234 <__aeabi_dmul+0x3a4>)
 800200e:	1a18      	subs	r0, r3, r0
 8002010:	0003      	movs	r3, r0
 8002012:	468c      	mov	ip, r1
 8002014:	4463      	add	r3, ip
 8002016:	2000      	movs	r0, #0
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	e77a      	b.n	8001f12 <__aeabi_dmul+0x82>
 800201c:	2400      	movs	r4, #0
 800201e:	2500      	movs	r5, #0
 8002020:	4a81      	ldr	r2, [pc, #516]	; (8002228 <__aeabi_dmul+0x398>)
 8002022:	e7a5      	b.n	8001f70 <__aeabi_dmul+0xe0>
 8002024:	0c2f      	lsrs	r7, r5, #16
 8002026:	042d      	lsls	r5, r5, #16
 8002028:	0c2d      	lsrs	r5, r5, #16
 800202a:	002b      	movs	r3, r5
 800202c:	0c11      	lsrs	r1, r2, #16
 800202e:	0412      	lsls	r2, r2, #16
 8002030:	0c12      	lsrs	r2, r2, #16
 8002032:	4353      	muls	r3, r2
 8002034:	4698      	mov	r8, r3
 8002036:	0013      	movs	r3, r2
 8002038:	0028      	movs	r0, r5
 800203a:	437b      	muls	r3, r7
 800203c:	4699      	mov	r9, r3
 800203e:	4348      	muls	r0, r1
 8002040:	4448      	add	r0, r9
 8002042:	4683      	mov	fp, r0
 8002044:	4640      	mov	r0, r8
 8002046:	000b      	movs	r3, r1
 8002048:	0c00      	lsrs	r0, r0, #16
 800204a:	4682      	mov	sl, r0
 800204c:	4658      	mov	r0, fp
 800204e:	437b      	muls	r3, r7
 8002050:	4450      	add	r0, sl
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	4581      	cmp	r9, r0
 8002056:	d906      	bls.n	8002066 <__aeabi_dmul+0x1d6>
 8002058:	469a      	mov	sl, r3
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	4699      	mov	r9, r3
 8002060:	44ca      	add	sl, r9
 8002062:	4653      	mov	r3, sl
 8002064:	9302      	str	r3, [sp, #8]
 8002066:	0c03      	lsrs	r3, r0, #16
 8002068:	469b      	mov	fp, r3
 800206a:	4643      	mov	r3, r8
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	0400      	lsls	r0, r0, #16
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	4698      	mov	r8, r3
 8002074:	0003      	movs	r3, r0
 8002076:	4443      	add	r3, r8
 8002078:	9304      	str	r3, [sp, #16]
 800207a:	0c33      	lsrs	r3, r6, #16
 800207c:	4699      	mov	r9, r3
 800207e:	002b      	movs	r3, r5
 8002080:	0436      	lsls	r6, r6, #16
 8002082:	0c36      	lsrs	r6, r6, #16
 8002084:	4373      	muls	r3, r6
 8002086:	4698      	mov	r8, r3
 8002088:	0033      	movs	r3, r6
 800208a:	437b      	muls	r3, r7
 800208c:	469a      	mov	sl, r3
 800208e:	464b      	mov	r3, r9
 8002090:	435d      	muls	r5, r3
 8002092:	435f      	muls	r7, r3
 8002094:	4643      	mov	r3, r8
 8002096:	4455      	add	r5, sl
 8002098:	0c18      	lsrs	r0, r3, #16
 800209a:	1940      	adds	r0, r0, r5
 800209c:	4582      	cmp	sl, r0
 800209e:	d903      	bls.n	80020a8 <__aeabi_dmul+0x218>
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	025b      	lsls	r3, r3, #9
 80020a4:	469a      	mov	sl, r3
 80020a6:	4457      	add	r7, sl
 80020a8:	0c05      	lsrs	r5, r0, #16
 80020aa:	19eb      	adds	r3, r5, r7
 80020ac:	9305      	str	r3, [sp, #20]
 80020ae:	4643      	mov	r3, r8
 80020b0:	041d      	lsls	r5, r3, #16
 80020b2:	0c2d      	lsrs	r5, r5, #16
 80020b4:	0400      	lsls	r0, r0, #16
 80020b6:	1940      	adds	r0, r0, r5
 80020b8:	0c25      	lsrs	r5, r4, #16
 80020ba:	0424      	lsls	r4, r4, #16
 80020bc:	0c24      	lsrs	r4, r4, #16
 80020be:	0027      	movs	r7, r4
 80020c0:	4357      	muls	r7, r2
 80020c2:	436a      	muls	r2, r5
 80020c4:	4690      	mov	r8, r2
 80020c6:	002a      	movs	r2, r5
 80020c8:	0c3b      	lsrs	r3, r7, #16
 80020ca:	469a      	mov	sl, r3
 80020cc:	434a      	muls	r2, r1
 80020ce:	4361      	muls	r1, r4
 80020d0:	4441      	add	r1, r8
 80020d2:	4451      	add	r1, sl
 80020d4:	4483      	add	fp, r0
 80020d6:	4588      	cmp	r8, r1
 80020d8:	d903      	bls.n	80020e2 <__aeabi_dmul+0x252>
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	4698      	mov	r8, r3
 80020e0:	4442      	add	r2, r8
 80020e2:	043f      	lsls	r7, r7, #16
 80020e4:	0c0b      	lsrs	r3, r1, #16
 80020e6:	0c3f      	lsrs	r7, r7, #16
 80020e8:	0409      	lsls	r1, r1, #16
 80020ea:	19c9      	adds	r1, r1, r7
 80020ec:	0027      	movs	r7, r4
 80020ee:	4698      	mov	r8, r3
 80020f0:	464b      	mov	r3, r9
 80020f2:	4377      	muls	r7, r6
 80020f4:	435c      	muls	r4, r3
 80020f6:	436e      	muls	r6, r5
 80020f8:	435d      	muls	r5, r3
 80020fa:	0c3b      	lsrs	r3, r7, #16
 80020fc:	4699      	mov	r9, r3
 80020fe:	19a4      	adds	r4, r4, r6
 8002100:	444c      	add	r4, r9
 8002102:	4442      	add	r2, r8
 8002104:	9503      	str	r5, [sp, #12]
 8002106:	42a6      	cmp	r6, r4
 8002108:	d904      	bls.n	8002114 <__aeabi_dmul+0x284>
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4698      	mov	r8, r3
 8002110:	4445      	add	r5, r8
 8002112:	9503      	str	r5, [sp, #12]
 8002114:	9b02      	ldr	r3, [sp, #8]
 8002116:	043f      	lsls	r7, r7, #16
 8002118:	445b      	add	r3, fp
 800211a:	001e      	movs	r6, r3
 800211c:	4283      	cmp	r3, r0
 800211e:	4180      	sbcs	r0, r0
 8002120:	0423      	lsls	r3, r4, #16
 8002122:	4698      	mov	r8, r3
 8002124:	9b05      	ldr	r3, [sp, #20]
 8002126:	0c3f      	lsrs	r7, r7, #16
 8002128:	4447      	add	r7, r8
 800212a:	4698      	mov	r8, r3
 800212c:	1876      	adds	r6, r6, r1
 800212e:	428e      	cmp	r6, r1
 8002130:	4189      	sbcs	r1, r1
 8002132:	4447      	add	r7, r8
 8002134:	4240      	negs	r0, r0
 8002136:	183d      	adds	r5, r7, r0
 8002138:	46a8      	mov	r8, r5
 800213a:	4693      	mov	fp, r2
 800213c:	4249      	negs	r1, r1
 800213e:	468a      	mov	sl, r1
 8002140:	44c3      	add	fp, r8
 8002142:	429f      	cmp	r7, r3
 8002144:	41bf      	sbcs	r7, r7
 8002146:	4580      	cmp	r8, r0
 8002148:	4180      	sbcs	r0, r0
 800214a:	9b03      	ldr	r3, [sp, #12]
 800214c:	44da      	add	sl, fp
 800214e:	4698      	mov	r8, r3
 8002150:	4653      	mov	r3, sl
 8002152:	4240      	negs	r0, r0
 8002154:	427f      	negs	r7, r7
 8002156:	4307      	orrs	r7, r0
 8002158:	0c24      	lsrs	r4, r4, #16
 800215a:	4593      	cmp	fp, r2
 800215c:	4192      	sbcs	r2, r2
 800215e:	458a      	cmp	sl, r1
 8002160:	4189      	sbcs	r1, r1
 8002162:	193f      	adds	r7, r7, r4
 8002164:	0ddc      	lsrs	r4, r3, #23
 8002166:	9b04      	ldr	r3, [sp, #16]
 8002168:	0275      	lsls	r5, r6, #9
 800216a:	431d      	orrs	r5, r3
 800216c:	1e68      	subs	r0, r5, #1
 800216e:	4185      	sbcs	r5, r0
 8002170:	4653      	mov	r3, sl
 8002172:	4252      	negs	r2, r2
 8002174:	4249      	negs	r1, r1
 8002176:	430a      	orrs	r2, r1
 8002178:	18bf      	adds	r7, r7, r2
 800217a:	4447      	add	r7, r8
 800217c:	0df6      	lsrs	r6, r6, #23
 800217e:	027f      	lsls	r7, r7, #9
 8002180:	4335      	orrs	r5, r6
 8002182:	025a      	lsls	r2, r3, #9
 8002184:	433c      	orrs	r4, r7
 8002186:	4315      	orrs	r5, r2
 8002188:	01fb      	lsls	r3, r7, #7
 800218a:	d400      	bmi.n	800218e <__aeabi_dmul+0x2fe>
 800218c:	e0c1      	b.n	8002312 <__aeabi_dmul+0x482>
 800218e:	2101      	movs	r1, #1
 8002190:	086a      	lsrs	r2, r5, #1
 8002192:	400d      	ands	r5, r1
 8002194:	4315      	orrs	r5, r2
 8002196:	07e2      	lsls	r2, r4, #31
 8002198:	4315      	orrs	r5, r2
 800219a:	0864      	lsrs	r4, r4, #1
 800219c:	4926      	ldr	r1, [pc, #152]	; (8002238 <__aeabi_dmul+0x3a8>)
 800219e:	4461      	add	r1, ip
 80021a0:	2900      	cmp	r1, #0
 80021a2:	dd56      	ble.n	8002252 <__aeabi_dmul+0x3c2>
 80021a4:	076b      	lsls	r3, r5, #29
 80021a6:	d009      	beq.n	80021bc <__aeabi_dmul+0x32c>
 80021a8:	220f      	movs	r2, #15
 80021aa:	402a      	ands	r2, r5
 80021ac:	2a04      	cmp	r2, #4
 80021ae:	d005      	beq.n	80021bc <__aeabi_dmul+0x32c>
 80021b0:	1d2a      	adds	r2, r5, #4
 80021b2:	42aa      	cmp	r2, r5
 80021b4:	41ad      	sbcs	r5, r5
 80021b6:	426d      	negs	r5, r5
 80021b8:	1964      	adds	r4, r4, r5
 80021ba:	0015      	movs	r5, r2
 80021bc:	01e3      	lsls	r3, r4, #7
 80021be:	d504      	bpl.n	80021ca <__aeabi_dmul+0x33a>
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	4a1e      	ldr	r2, [pc, #120]	; (800223c <__aeabi_dmul+0x3ac>)
 80021c4:	00c9      	lsls	r1, r1, #3
 80021c6:	4014      	ands	r4, r2
 80021c8:	4461      	add	r1, ip
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <__aeabi_dmul+0x3b0>)
 80021cc:	4291      	cmp	r1, r2
 80021ce:	dd00      	ble.n	80021d2 <__aeabi_dmul+0x342>
 80021d0:	e724      	b.n	800201c <__aeabi_dmul+0x18c>
 80021d2:	0762      	lsls	r2, r4, #29
 80021d4:	08ed      	lsrs	r5, r5, #3
 80021d6:	0264      	lsls	r4, r4, #9
 80021d8:	0549      	lsls	r1, r1, #21
 80021da:	4315      	orrs	r5, r2
 80021dc:	0b24      	lsrs	r4, r4, #12
 80021de:	0d4a      	lsrs	r2, r1, #21
 80021e0:	e6c6      	b.n	8001f70 <__aeabi_dmul+0xe0>
 80021e2:	9701      	str	r7, [sp, #4]
 80021e4:	e6b8      	b.n	8001f58 <__aeabi_dmul+0xc8>
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <__aeabi_dmul+0x398>)
 80021e8:	2003      	movs	r0, #3
 80021ea:	4694      	mov	ip, r2
 80021ec:	4463      	add	r3, ip
 80021ee:	464a      	mov	r2, r9
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2303      	movs	r3, #3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	4691      	mov	r9, r2
 80021f8:	4652      	mov	r2, sl
 80021fa:	e68a      	b.n	8001f12 <__aeabi_dmul+0x82>
 80021fc:	4649      	mov	r1, r9
 80021fe:	2301      	movs	r3, #1
 8002200:	4319      	orrs	r1, r3
 8002202:	4689      	mov	r9, r1
 8002204:	2600      	movs	r6, #0
 8002206:	2001      	movs	r0, #1
 8002208:	e683      	b.n	8001f12 <__aeabi_dmul+0x82>
 800220a:	220c      	movs	r2, #12
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2303      	movs	r3, #3
 8002210:	0005      	movs	r5, r0
 8002212:	4691      	mov	r9, r2
 8002214:	469b      	mov	fp, r3
 8002216:	e65e      	b.n	8001ed6 <__aeabi_dmul+0x46>
 8002218:	2304      	movs	r3, #4
 800221a:	4699      	mov	r9, r3
 800221c:	2300      	movs	r3, #0
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	3301      	adds	r3, #1
 8002222:	2400      	movs	r4, #0
 8002224:	469b      	mov	fp, r3
 8002226:	e656      	b.n	8001ed6 <__aeabi_dmul+0x46>
 8002228:	000007ff 	.word	0x000007ff
 800222c:	fffffc01 	.word	0xfffffc01
 8002230:	08009928 	.word	0x08009928
 8002234:	fffffc0d 	.word	0xfffffc0d
 8002238:	000003ff 	.word	0x000003ff
 800223c:	feffffff 	.word	0xfeffffff
 8002240:	000007fe 	.word	0x000007fe
 8002244:	2300      	movs	r3, #0
 8002246:	2480      	movs	r4, #128	; 0x80
 8002248:	2500      	movs	r5, #0
 800224a:	4a44      	ldr	r2, [pc, #272]	; (800235c <__aeabi_dmul+0x4cc>)
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	0324      	lsls	r4, r4, #12
 8002250:	e68e      	b.n	8001f70 <__aeabi_dmul+0xe0>
 8002252:	2001      	movs	r0, #1
 8002254:	1a40      	subs	r0, r0, r1
 8002256:	2838      	cmp	r0, #56	; 0x38
 8002258:	dd00      	ble.n	800225c <__aeabi_dmul+0x3cc>
 800225a:	e686      	b.n	8001f6a <__aeabi_dmul+0xda>
 800225c:	281f      	cmp	r0, #31
 800225e:	dd5b      	ble.n	8002318 <__aeabi_dmul+0x488>
 8002260:	221f      	movs	r2, #31
 8002262:	0023      	movs	r3, r4
 8002264:	4252      	negs	r2, r2
 8002266:	1a51      	subs	r1, r2, r1
 8002268:	40cb      	lsrs	r3, r1
 800226a:	0019      	movs	r1, r3
 800226c:	2820      	cmp	r0, #32
 800226e:	d003      	beq.n	8002278 <__aeabi_dmul+0x3e8>
 8002270:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <__aeabi_dmul+0x4d0>)
 8002272:	4462      	add	r2, ip
 8002274:	4094      	lsls	r4, r2
 8002276:	4325      	orrs	r5, r4
 8002278:	1e6a      	subs	r2, r5, #1
 800227a:	4195      	sbcs	r5, r2
 800227c:	002a      	movs	r2, r5
 800227e:	430a      	orrs	r2, r1
 8002280:	2107      	movs	r1, #7
 8002282:	000d      	movs	r5, r1
 8002284:	2400      	movs	r4, #0
 8002286:	4015      	ands	r5, r2
 8002288:	4211      	tst	r1, r2
 800228a:	d05b      	beq.n	8002344 <__aeabi_dmul+0x4b4>
 800228c:	210f      	movs	r1, #15
 800228e:	2400      	movs	r4, #0
 8002290:	4011      	ands	r1, r2
 8002292:	2904      	cmp	r1, #4
 8002294:	d053      	beq.n	800233e <__aeabi_dmul+0x4ae>
 8002296:	1d11      	adds	r1, r2, #4
 8002298:	4291      	cmp	r1, r2
 800229a:	4192      	sbcs	r2, r2
 800229c:	4252      	negs	r2, r2
 800229e:	18a4      	adds	r4, r4, r2
 80022a0:	000a      	movs	r2, r1
 80022a2:	0223      	lsls	r3, r4, #8
 80022a4:	d54b      	bpl.n	800233e <__aeabi_dmul+0x4ae>
 80022a6:	2201      	movs	r2, #1
 80022a8:	2400      	movs	r4, #0
 80022aa:	2500      	movs	r5, #0
 80022ac:	e660      	b.n	8001f70 <__aeabi_dmul+0xe0>
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	031b      	lsls	r3, r3, #12
 80022b2:	421c      	tst	r4, r3
 80022b4:	d009      	beq.n	80022ca <__aeabi_dmul+0x43a>
 80022b6:	421e      	tst	r6, r3
 80022b8:	d107      	bne.n	80022ca <__aeabi_dmul+0x43a>
 80022ba:	4333      	orrs	r3, r6
 80022bc:	031c      	lsls	r4, r3, #12
 80022be:	4643      	mov	r3, r8
 80022c0:	0015      	movs	r5, r2
 80022c2:	0b24      	lsrs	r4, r4, #12
 80022c4:	4a25      	ldr	r2, [pc, #148]	; (800235c <__aeabi_dmul+0x4cc>)
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	e652      	b.n	8001f70 <__aeabi_dmul+0xe0>
 80022ca:	2280      	movs	r2, #128	; 0x80
 80022cc:	0312      	lsls	r2, r2, #12
 80022ce:	4314      	orrs	r4, r2
 80022d0:	0324      	lsls	r4, r4, #12
 80022d2:	4a22      	ldr	r2, [pc, #136]	; (800235c <__aeabi_dmul+0x4cc>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	9701      	str	r7, [sp, #4]
 80022d8:	e64a      	b.n	8001f70 <__aeabi_dmul+0xe0>
 80022da:	f000 fcc9 	bl	8002c70 <__clzsi2>
 80022de:	0003      	movs	r3, r0
 80022e0:	001a      	movs	r2, r3
 80022e2:	3215      	adds	r2, #21
 80022e4:	3020      	adds	r0, #32
 80022e6:	2a1c      	cmp	r2, #28
 80022e8:	dc00      	bgt.n	80022ec <__aeabi_dmul+0x45c>
 80022ea:	e684      	b.n	8001ff6 <__aeabi_dmul+0x166>
 80022ec:	4656      	mov	r6, sl
 80022ee:	3b08      	subs	r3, #8
 80022f0:	2200      	movs	r2, #0
 80022f2:	409e      	lsls	r6, r3
 80022f4:	e689      	b.n	800200a <__aeabi_dmul+0x17a>
 80022f6:	f000 fcbb 	bl	8002c70 <__clzsi2>
 80022fa:	0001      	movs	r1, r0
 80022fc:	0002      	movs	r2, r0
 80022fe:	3115      	adds	r1, #21
 8002300:	3220      	adds	r2, #32
 8002302:	291c      	cmp	r1, #28
 8002304:	dc00      	bgt.n	8002308 <__aeabi_dmul+0x478>
 8002306:	e64e      	b.n	8001fa6 <__aeabi_dmul+0x116>
 8002308:	0034      	movs	r4, r6
 800230a:	3808      	subs	r0, #8
 800230c:	2500      	movs	r5, #0
 800230e:	4084      	lsls	r4, r0
 8002310:	e653      	b.n	8001fba <__aeabi_dmul+0x12a>
 8002312:	9b00      	ldr	r3, [sp, #0]
 8002314:	469c      	mov	ip, r3
 8002316:	e741      	b.n	800219c <__aeabi_dmul+0x30c>
 8002318:	4912      	ldr	r1, [pc, #72]	; (8002364 <__aeabi_dmul+0x4d4>)
 800231a:	0022      	movs	r2, r4
 800231c:	4461      	add	r1, ip
 800231e:	002e      	movs	r6, r5
 8002320:	408d      	lsls	r5, r1
 8002322:	408a      	lsls	r2, r1
 8002324:	40c6      	lsrs	r6, r0
 8002326:	1e69      	subs	r1, r5, #1
 8002328:	418d      	sbcs	r5, r1
 800232a:	4332      	orrs	r2, r6
 800232c:	432a      	orrs	r2, r5
 800232e:	40c4      	lsrs	r4, r0
 8002330:	0753      	lsls	r3, r2, #29
 8002332:	d0b6      	beq.n	80022a2 <__aeabi_dmul+0x412>
 8002334:	210f      	movs	r1, #15
 8002336:	4011      	ands	r1, r2
 8002338:	2904      	cmp	r1, #4
 800233a:	d1ac      	bne.n	8002296 <__aeabi_dmul+0x406>
 800233c:	e7b1      	b.n	80022a2 <__aeabi_dmul+0x412>
 800233e:	0765      	lsls	r5, r4, #29
 8002340:	0264      	lsls	r4, r4, #9
 8002342:	0b24      	lsrs	r4, r4, #12
 8002344:	08d2      	lsrs	r2, r2, #3
 8002346:	4315      	orrs	r5, r2
 8002348:	2200      	movs	r2, #0
 800234a:	e611      	b.n	8001f70 <__aeabi_dmul+0xe0>
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	0312      	lsls	r2, r2, #12
 8002350:	4314      	orrs	r4, r2
 8002352:	0324      	lsls	r4, r4, #12
 8002354:	4a01      	ldr	r2, [pc, #4]	; (800235c <__aeabi_dmul+0x4cc>)
 8002356:	0b24      	lsrs	r4, r4, #12
 8002358:	e60a      	b.n	8001f70 <__aeabi_dmul+0xe0>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	0000043e 	.word	0x0000043e
 8002364:	0000041e 	.word	0x0000041e

08002368 <__aeabi_dsub>:
 8002368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236a:	4657      	mov	r7, sl
 800236c:	464e      	mov	r6, r9
 800236e:	4645      	mov	r5, r8
 8002370:	46de      	mov	lr, fp
 8002372:	0004      	movs	r4, r0
 8002374:	b5e0      	push	{r5, r6, r7, lr}
 8002376:	001f      	movs	r7, r3
 8002378:	0010      	movs	r0, r2
 800237a:	030b      	lsls	r3, r1, #12
 800237c:	0f62      	lsrs	r2, r4, #29
 800237e:	004e      	lsls	r6, r1, #1
 8002380:	0fcd      	lsrs	r5, r1, #31
 8002382:	0a5b      	lsrs	r3, r3, #9
 8002384:	0339      	lsls	r1, r7, #12
 8002386:	4313      	orrs	r3, r2
 8002388:	0a49      	lsrs	r1, r1, #9
 800238a:	00e2      	lsls	r2, r4, #3
 800238c:	0f44      	lsrs	r4, r0, #29
 800238e:	4321      	orrs	r1, r4
 8002390:	4cc2      	ldr	r4, [pc, #776]	; (800269c <__aeabi_dsub+0x334>)
 8002392:	4691      	mov	r9, r2
 8002394:	4692      	mov	sl, r2
 8002396:	00c0      	lsls	r0, r0, #3
 8002398:	007a      	lsls	r2, r7, #1
 800239a:	4680      	mov	r8, r0
 800239c:	0d76      	lsrs	r6, r6, #21
 800239e:	0d52      	lsrs	r2, r2, #21
 80023a0:	0fff      	lsrs	r7, r7, #31
 80023a2:	42a2      	cmp	r2, r4
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x40>
 80023a6:	e0b4      	b.n	8002512 <__aeabi_dsub+0x1aa>
 80023a8:	2401      	movs	r4, #1
 80023aa:	4067      	eors	r7, r4
 80023ac:	46bb      	mov	fp, r7
 80023ae:	42bd      	cmp	r5, r7
 80023b0:	d100      	bne.n	80023b4 <__aeabi_dsub+0x4c>
 80023b2:	e088      	b.n	80024c6 <__aeabi_dsub+0x15e>
 80023b4:	1ab4      	subs	r4, r6, r2
 80023b6:	46a4      	mov	ip, r4
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	dc00      	bgt.n	80023be <__aeabi_dsub+0x56>
 80023bc:	e0b2      	b.n	8002524 <__aeabi_dsub+0x1bc>
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d100      	bne.n	80023c4 <__aeabi_dsub+0x5c>
 80023c2:	e0c5      	b.n	8002550 <__aeabi_dsub+0x1e8>
 80023c4:	4ab5      	ldr	r2, [pc, #724]	; (800269c <__aeabi_dsub+0x334>)
 80023c6:	4296      	cmp	r6, r2
 80023c8:	d100      	bne.n	80023cc <__aeabi_dsub+0x64>
 80023ca:	e28b      	b.n	80028e4 <__aeabi_dsub+0x57c>
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	0412      	lsls	r2, r2, #16
 80023d0:	4311      	orrs	r1, r2
 80023d2:	4662      	mov	r2, ip
 80023d4:	2a38      	cmp	r2, #56	; 0x38
 80023d6:	dd00      	ble.n	80023da <__aeabi_dsub+0x72>
 80023d8:	e1a1      	b.n	800271e <__aeabi_dsub+0x3b6>
 80023da:	2a1f      	cmp	r2, #31
 80023dc:	dd00      	ble.n	80023e0 <__aeabi_dsub+0x78>
 80023de:	e216      	b.n	800280e <__aeabi_dsub+0x4a6>
 80023e0:	2720      	movs	r7, #32
 80023e2:	000c      	movs	r4, r1
 80023e4:	1abf      	subs	r7, r7, r2
 80023e6:	40bc      	lsls	r4, r7
 80023e8:	0002      	movs	r2, r0
 80023ea:	46a0      	mov	r8, r4
 80023ec:	4664      	mov	r4, ip
 80023ee:	40b8      	lsls	r0, r7
 80023f0:	40e2      	lsrs	r2, r4
 80023f2:	4644      	mov	r4, r8
 80023f4:	4314      	orrs	r4, r2
 80023f6:	0002      	movs	r2, r0
 80023f8:	1e50      	subs	r0, r2, #1
 80023fa:	4182      	sbcs	r2, r0
 80023fc:	4660      	mov	r0, ip
 80023fe:	40c1      	lsrs	r1, r0
 8002400:	4322      	orrs	r2, r4
 8002402:	1a5b      	subs	r3, r3, r1
 8002404:	4649      	mov	r1, r9
 8002406:	1a8c      	subs	r4, r1, r2
 8002408:	45a1      	cmp	r9, r4
 800240a:	4192      	sbcs	r2, r2
 800240c:	4252      	negs	r2, r2
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	4698      	mov	r8, r3
 8002412:	4643      	mov	r3, r8
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	d400      	bmi.n	800241a <__aeabi_dsub+0xb2>
 8002418:	e117      	b.n	800264a <__aeabi_dsub+0x2e2>
 800241a:	4643      	mov	r3, r8
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	4698      	mov	r8, r3
 8002422:	4643      	mov	r3, r8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0xc2>
 8002428:	e16c      	b.n	8002704 <__aeabi_dsub+0x39c>
 800242a:	4640      	mov	r0, r8
 800242c:	f000 fc20 	bl	8002c70 <__clzsi2>
 8002430:	0002      	movs	r2, r0
 8002432:	3a08      	subs	r2, #8
 8002434:	2120      	movs	r1, #32
 8002436:	0020      	movs	r0, r4
 8002438:	4643      	mov	r3, r8
 800243a:	1a89      	subs	r1, r1, r2
 800243c:	4093      	lsls	r3, r2
 800243e:	40c8      	lsrs	r0, r1
 8002440:	4094      	lsls	r4, r2
 8002442:	4303      	orrs	r3, r0
 8002444:	4296      	cmp	r6, r2
 8002446:	dd00      	ble.n	800244a <__aeabi_dsub+0xe2>
 8002448:	e157      	b.n	80026fa <__aeabi_dsub+0x392>
 800244a:	1b96      	subs	r6, r2, r6
 800244c:	1c71      	adds	r1, r6, #1
 800244e:	291f      	cmp	r1, #31
 8002450:	dd00      	ble.n	8002454 <__aeabi_dsub+0xec>
 8002452:	e1cb      	b.n	80027ec <__aeabi_dsub+0x484>
 8002454:	2220      	movs	r2, #32
 8002456:	0018      	movs	r0, r3
 8002458:	0026      	movs	r6, r4
 800245a:	1a52      	subs	r2, r2, r1
 800245c:	4094      	lsls	r4, r2
 800245e:	4090      	lsls	r0, r2
 8002460:	40ce      	lsrs	r6, r1
 8002462:	40cb      	lsrs	r3, r1
 8002464:	1e62      	subs	r2, r4, #1
 8002466:	4194      	sbcs	r4, r2
 8002468:	4330      	orrs	r0, r6
 800246a:	4698      	mov	r8, r3
 800246c:	2600      	movs	r6, #0
 800246e:	4304      	orrs	r4, r0
 8002470:	0763      	lsls	r3, r4, #29
 8002472:	d009      	beq.n	8002488 <__aeabi_dsub+0x120>
 8002474:	230f      	movs	r3, #15
 8002476:	4023      	ands	r3, r4
 8002478:	2b04      	cmp	r3, #4
 800247a:	d005      	beq.n	8002488 <__aeabi_dsub+0x120>
 800247c:	1d23      	adds	r3, r4, #4
 800247e:	42a3      	cmp	r3, r4
 8002480:	41a4      	sbcs	r4, r4
 8002482:	4264      	negs	r4, r4
 8002484:	44a0      	add	r8, r4
 8002486:	001c      	movs	r4, r3
 8002488:	4643      	mov	r3, r8
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	d400      	bmi.n	8002490 <__aeabi_dsub+0x128>
 800248e:	e0df      	b.n	8002650 <__aeabi_dsub+0x2e8>
 8002490:	4b82      	ldr	r3, [pc, #520]	; (800269c <__aeabi_dsub+0x334>)
 8002492:	3601      	adds	r6, #1
 8002494:	429e      	cmp	r6, r3
 8002496:	d100      	bne.n	800249a <__aeabi_dsub+0x132>
 8002498:	e0fb      	b.n	8002692 <__aeabi_dsub+0x32a>
 800249a:	4642      	mov	r2, r8
 800249c:	4b80      	ldr	r3, [pc, #512]	; (80026a0 <__aeabi_dsub+0x338>)
 800249e:	08e4      	lsrs	r4, r4, #3
 80024a0:	401a      	ands	r2, r3
 80024a2:	0013      	movs	r3, r2
 80024a4:	0571      	lsls	r1, r6, #21
 80024a6:	0752      	lsls	r2, r2, #29
 80024a8:	025b      	lsls	r3, r3, #9
 80024aa:	4322      	orrs	r2, r4
 80024ac:	0b1b      	lsrs	r3, r3, #12
 80024ae:	0d49      	lsrs	r1, r1, #21
 80024b0:	0509      	lsls	r1, r1, #20
 80024b2:	07ed      	lsls	r5, r5, #31
 80024b4:	4319      	orrs	r1, r3
 80024b6:	4329      	orrs	r1, r5
 80024b8:	0010      	movs	r0, r2
 80024ba:	bcf0      	pop	{r4, r5, r6, r7}
 80024bc:	46bb      	mov	fp, r7
 80024be:	46b2      	mov	sl, r6
 80024c0:	46a9      	mov	r9, r5
 80024c2:	46a0      	mov	r8, r4
 80024c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024c6:	1ab4      	subs	r4, r6, r2
 80024c8:	46a4      	mov	ip, r4
 80024ca:	2c00      	cmp	r4, #0
 80024cc:	dd58      	ble.n	8002580 <__aeabi_dsub+0x218>
 80024ce:	2a00      	cmp	r2, #0
 80024d0:	d100      	bne.n	80024d4 <__aeabi_dsub+0x16c>
 80024d2:	e09e      	b.n	8002612 <__aeabi_dsub+0x2aa>
 80024d4:	4a71      	ldr	r2, [pc, #452]	; (800269c <__aeabi_dsub+0x334>)
 80024d6:	4296      	cmp	r6, r2
 80024d8:	d100      	bne.n	80024dc <__aeabi_dsub+0x174>
 80024da:	e13b      	b.n	8002754 <__aeabi_dsub+0x3ec>
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	0412      	lsls	r2, r2, #16
 80024e0:	4311      	orrs	r1, r2
 80024e2:	4662      	mov	r2, ip
 80024e4:	2a38      	cmp	r2, #56	; 0x38
 80024e6:	dd00      	ble.n	80024ea <__aeabi_dsub+0x182>
 80024e8:	e0c1      	b.n	800266e <__aeabi_dsub+0x306>
 80024ea:	2a1f      	cmp	r2, #31
 80024ec:	dc00      	bgt.n	80024f0 <__aeabi_dsub+0x188>
 80024ee:	e1bb      	b.n	8002868 <__aeabi_dsub+0x500>
 80024f0:	000c      	movs	r4, r1
 80024f2:	3a20      	subs	r2, #32
 80024f4:	40d4      	lsrs	r4, r2
 80024f6:	0022      	movs	r2, r4
 80024f8:	4664      	mov	r4, ip
 80024fa:	2c20      	cmp	r4, #32
 80024fc:	d004      	beq.n	8002508 <__aeabi_dsub+0x1a0>
 80024fe:	2740      	movs	r7, #64	; 0x40
 8002500:	1b3f      	subs	r7, r7, r4
 8002502:	40b9      	lsls	r1, r7
 8002504:	4308      	orrs	r0, r1
 8002506:	4680      	mov	r8, r0
 8002508:	4644      	mov	r4, r8
 800250a:	1e61      	subs	r1, r4, #1
 800250c:	418c      	sbcs	r4, r1
 800250e:	4314      	orrs	r4, r2
 8002510:	e0b1      	b.n	8002676 <__aeabi_dsub+0x30e>
 8002512:	000c      	movs	r4, r1
 8002514:	4304      	orrs	r4, r0
 8002516:	d02a      	beq.n	800256e <__aeabi_dsub+0x206>
 8002518:	46bb      	mov	fp, r7
 800251a:	42bd      	cmp	r5, r7
 800251c:	d02d      	beq.n	800257a <__aeabi_dsub+0x212>
 800251e:	4c61      	ldr	r4, [pc, #388]	; (80026a4 <__aeabi_dsub+0x33c>)
 8002520:	46a4      	mov	ip, r4
 8002522:	44b4      	add	ip, r6
 8002524:	4664      	mov	r4, ip
 8002526:	2c00      	cmp	r4, #0
 8002528:	d05c      	beq.n	80025e4 <__aeabi_dsub+0x27c>
 800252a:	1b94      	subs	r4, r2, r6
 800252c:	46a4      	mov	ip, r4
 800252e:	2e00      	cmp	r6, #0
 8002530:	d000      	beq.n	8002534 <__aeabi_dsub+0x1cc>
 8002532:	e115      	b.n	8002760 <__aeabi_dsub+0x3f8>
 8002534:	464d      	mov	r5, r9
 8002536:	431d      	orrs	r5, r3
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x1d4>
 800253a:	e1c3      	b.n	80028c4 <__aeabi_dsub+0x55c>
 800253c:	1e65      	subs	r5, r4, #1
 800253e:	2c01      	cmp	r4, #1
 8002540:	d100      	bne.n	8002544 <__aeabi_dsub+0x1dc>
 8002542:	e20c      	b.n	800295e <__aeabi_dsub+0x5f6>
 8002544:	4e55      	ldr	r6, [pc, #340]	; (800269c <__aeabi_dsub+0x334>)
 8002546:	42b4      	cmp	r4, r6
 8002548:	d100      	bne.n	800254c <__aeabi_dsub+0x1e4>
 800254a:	e1f8      	b.n	800293e <__aeabi_dsub+0x5d6>
 800254c:	46ac      	mov	ip, r5
 800254e:	e10e      	b.n	800276e <__aeabi_dsub+0x406>
 8002550:	000a      	movs	r2, r1
 8002552:	4302      	orrs	r2, r0
 8002554:	d100      	bne.n	8002558 <__aeabi_dsub+0x1f0>
 8002556:	e136      	b.n	80027c6 <__aeabi_dsub+0x45e>
 8002558:	0022      	movs	r2, r4
 800255a:	3a01      	subs	r2, #1
 800255c:	2c01      	cmp	r4, #1
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x1fa>
 8002560:	e1c6      	b.n	80028f0 <__aeabi_dsub+0x588>
 8002562:	4c4e      	ldr	r4, [pc, #312]	; (800269c <__aeabi_dsub+0x334>)
 8002564:	45a4      	cmp	ip, r4
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x202>
 8002568:	e0f4      	b.n	8002754 <__aeabi_dsub+0x3ec>
 800256a:	4694      	mov	ip, r2
 800256c:	e731      	b.n	80023d2 <__aeabi_dsub+0x6a>
 800256e:	2401      	movs	r4, #1
 8002570:	4067      	eors	r7, r4
 8002572:	46bb      	mov	fp, r7
 8002574:	42bd      	cmp	r5, r7
 8002576:	d000      	beq.n	800257a <__aeabi_dsub+0x212>
 8002578:	e71c      	b.n	80023b4 <__aeabi_dsub+0x4c>
 800257a:	4c4a      	ldr	r4, [pc, #296]	; (80026a4 <__aeabi_dsub+0x33c>)
 800257c:	46a4      	mov	ip, r4
 800257e:	44b4      	add	ip, r6
 8002580:	4664      	mov	r4, ip
 8002582:	2c00      	cmp	r4, #0
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x220>
 8002586:	e0cf      	b.n	8002728 <__aeabi_dsub+0x3c0>
 8002588:	1b94      	subs	r4, r2, r6
 800258a:	46a4      	mov	ip, r4
 800258c:	2e00      	cmp	r6, #0
 800258e:	d100      	bne.n	8002592 <__aeabi_dsub+0x22a>
 8002590:	e15c      	b.n	800284c <__aeabi_dsub+0x4e4>
 8002592:	4e42      	ldr	r6, [pc, #264]	; (800269c <__aeabi_dsub+0x334>)
 8002594:	42b2      	cmp	r2, r6
 8002596:	d100      	bne.n	800259a <__aeabi_dsub+0x232>
 8002598:	e1ec      	b.n	8002974 <__aeabi_dsub+0x60c>
 800259a:	2680      	movs	r6, #128	; 0x80
 800259c:	0436      	lsls	r6, r6, #16
 800259e:	4333      	orrs	r3, r6
 80025a0:	4664      	mov	r4, ip
 80025a2:	2c38      	cmp	r4, #56	; 0x38
 80025a4:	dd00      	ble.n	80025a8 <__aeabi_dsub+0x240>
 80025a6:	e1b3      	b.n	8002910 <__aeabi_dsub+0x5a8>
 80025a8:	2c1f      	cmp	r4, #31
 80025aa:	dd00      	ble.n	80025ae <__aeabi_dsub+0x246>
 80025ac:	e238      	b.n	8002a20 <__aeabi_dsub+0x6b8>
 80025ae:	2620      	movs	r6, #32
 80025b0:	1b36      	subs	r6, r6, r4
 80025b2:	001c      	movs	r4, r3
 80025b4:	40b4      	lsls	r4, r6
 80025b6:	464f      	mov	r7, r9
 80025b8:	46a0      	mov	r8, r4
 80025ba:	4664      	mov	r4, ip
 80025bc:	40e7      	lsrs	r7, r4
 80025be:	4644      	mov	r4, r8
 80025c0:	433c      	orrs	r4, r7
 80025c2:	464f      	mov	r7, r9
 80025c4:	40b7      	lsls	r7, r6
 80025c6:	003e      	movs	r6, r7
 80025c8:	1e77      	subs	r7, r6, #1
 80025ca:	41be      	sbcs	r6, r7
 80025cc:	4334      	orrs	r4, r6
 80025ce:	4666      	mov	r6, ip
 80025d0:	40f3      	lsrs	r3, r6
 80025d2:	18c9      	adds	r1, r1, r3
 80025d4:	1824      	adds	r4, r4, r0
 80025d6:	4284      	cmp	r4, r0
 80025d8:	419b      	sbcs	r3, r3
 80025da:	425b      	negs	r3, r3
 80025dc:	4698      	mov	r8, r3
 80025de:	0016      	movs	r6, r2
 80025e0:	4488      	add	r8, r1
 80025e2:	e04e      	b.n	8002682 <__aeabi_dsub+0x31a>
 80025e4:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <__aeabi_dsub+0x340>)
 80025e6:	1c74      	adds	r4, r6, #1
 80025e8:	4214      	tst	r4, r2
 80025ea:	d000      	beq.n	80025ee <__aeabi_dsub+0x286>
 80025ec:	e0d6      	b.n	800279c <__aeabi_dsub+0x434>
 80025ee:	464a      	mov	r2, r9
 80025f0:	431a      	orrs	r2, r3
 80025f2:	2e00      	cmp	r6, #0
 80025f4:	d000      	beq.n	80025f8 <__aeabi_dsub+0x290>
 80025f6:	e15b      	b.n	80028b0 <__aeabi_dsub+0x548>
 80025f8:	2a00      	cmp	r2, #0
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x296>
 80025fc:	e1a5      	b.n	800294a <__aeabi_dsub+0x5e2>
 80025fe:	000a      	movs	r2, r1
 8002600:	4302      	orrs	r2, r0
 8002602:	d000      	beq.n	8002606 <__aeabi_dsub+0x29e>
 8002604:	e1bb      	b.n	800297e <__aeabi_dsub+0x616>
 8002606:	464a      	mov	r2, r9
 8002608:	0759      	lsls	r1, r3, #29
 800260a:	08d2      	lsrs	r2, r2, #3
 800260c:	430a      	orrs	r2, r1
 800260e:	08db      	lsrs	r3, r3, #3
 8002610:	e027      	b.n	8002662 <__aeabi_dsub+0x2fa>
 8002612:	000a      	movs	r2, r1
 8002614:	4302      	orrs	r2, r0
 8002616:	d100      	bne.n	800261a <__aeabi_dsub+0x2b2>
 8002618:	e174      	b.n	8002904 <__aeabi_dsub+0x59c>
 800261a:	0022      	movs	r2, r4
 800261c:	3a01      	subs	r2, #1
 800261e:	2c01      	cmp	r4, #1
 8002620:	d005      	beq.n	800262e <__aeabi_dsub+0x2c6>
 8002622:	4c1e      	ldr	r4, [pc, #120]	; (800269c <__aeabi_dsub+0x334>)
 8002624:	45a4      	cmp	ip, r4
 8002626:	d100      	bne.n	800262a <__aeabi_dsub+0x2c2>
 8002628:	e094      	b.n	8002754 <__aeabi_dsub+0x3ec>
 800262a:	4694      	mov	ip, r2
 800262c:	e759      	b.n	80024e2 <__aeabi_dsub+0x17a>
 800262e:	4448      	add	r0, r9
 8002630:	4548      	cmp	r0, r9
 8002632:	4192      	sbcs	r2, r2
 8002634:	185b      	adds	r3, r3, r1
 8002636:	4698      	mov	r8, r3
 8002638:	0004      	movs	r4, r0
 800263a:	4252      	negs	r2, r2
 800263c:	4490      	add	r8, r2
 800263e:	4643      	mov	r3, r8
 8002640:	2602      	movs	r6, #2
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	d500      	bpl.n	8002648 <__aeabi_dsub+0x2e0>
 8002646:	e0c4      	b.n	80027d2 <__aeabi_dsub+0x46a>
 8002648:	3e01      	subs	r6, #1
 800264a:	0763      	lsls	r3, r4, #29
 800264c:	d000      	beq.n	8002650 <__aeabi_dsub+0x2e8>
 800264e:	e711      	b.n	8002474 <__aeabi_dsub+0x10c>
 8002650:	4643      	mov	r3, r8
 8002652:	46b4      	mov	ip, r6
 8002654:	0759      	lsls	r1, r3, #29
 8002656:	08e2      	lsrs	r2, r4, #3
 8002658:	430a      	orrs	r2, r1
 800265a:	08db      	lsrs	r3, r3, #3
 800265c:	490f      	ldr	r1, [pc, #60]	; (800269c <__aeabi_dsub+0x334>)
 800265e:	458c      	cmp	ip, r1
 8002660:	d040      	beq.n	80026e4 <__aeabi_dsub+0x37c>
 8002662:	4661      	mov	r1, ip
 8002664:	031b      	lsls	r3, r3, #12
 8002666:	0549      	lsls	r1, r1, #21
 8002668:	0b1b      	lsrs	r3, r3, #12
 800266a:	0d49      	lsrs	r1, r1, #21
 800266c:	e720      	b.n	80024b0 <__aeabi_dsub+0x148>
 800266e:	4301      	orrs	r1, r0
 8002670:	000c      	movs	r4, r1
 8002672:	1e61      	subs	r1, r4, #1
 8002674:	418c      	sbcs	r4, r1
 8002676:	444c      	add	r4, r9
 8002678:	454c      	cmp	r4, r9
 800267a:	4192      	sbcs	r2, r2
 800267c:	4252      	negs	r2, r2
 800267e:	4690      	mov	r8, r2
 8002680:	4498      	add	r8, r3
 8002682:	4643      	mov	r3, r8
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	d5e0      	bpl.n	800264a <__aeabi_dsub+0x2e2>
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <__aeabi_dsub+0x334>)
 800268a:	3601      	adds	r6, #1
 800268c:	429e      	cmp	r6, r3
 800268e:	d000      	beq.n	8002692 <__aeabi_dsub+0x32a>
 8002690:	e09f      	b.n	80027d2 <__aeabi_dsub+0x46a>
 8002692:	0031      	movs	r1, r6
 8002694:	2300      	movs	r3, #0
 8002696:	2200      	movs	r2, #0
 8002698:	e70a      	b.n	80024b0 <__aeabi_dsub+0x148>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	000007ff 	.word	0x000007ff
 80026a0:	ff7fffff 	.word	0xff7fffff
 80026a4:	fffff801 	.word	0xfffff801
 80026a8:	000007fe 	.word	0x000007fe
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d100      	bne.n	80026b2 <__aeabi_dsub+0x34a>
 80026b0:	e160      	b.n	8002974 <__aeabi_dsub+0x60c>
 80026b2:	000a      	movs	r2, r1
 80026b4:	4302      	orrs	r2, r0
 80026b6:	d04d      	beq.n	8002754 <__aeabi_dsub+0x3ec>
 80026b8:	464a      	mov	r2, r9
 80026ba:	075c      	lsls	r4, r3, #29
 80026bc:	08d2      	lsrs	r2, r2, #3
 80026be:	4322      	orrs	r2, r4
 80026c0:	2480      	movs	r4, #128	; 0x80
 80026c2:	08db      	lsrs	r3, r3, #3
 80026c4:	0324      	lsls	r4, r4, #12
 80026c6:	4223      	tst	r3, r4
 80026c8:	d007      	beq.n	80026da <__aeabi_dsub+0x372>
 80026ca:	08ce      	lsrs	r6, r1, #3
 80026cc:	4226      	tst	r6, r4
 80026ce:	d104      	bne.n	80026da <__aeabi_dsub+0x372>
 80026d0:	465d      	mov	r5, fp
 80026d2:	0033      	movs	r3, r6
 80026d4:	08c2      	lsrs	r2, r0, #3
 80026d6:	0749      	lsls	r1, r1, #29
 80026d8:	430a      	orrs	r2, r1
 80026da:	0f51      	lsrs	r1, r2, #29
 80026dc:	00d2      	lsls	r2, r2, #3
 80026de:	08d2      	lsrs	r2, r2, #3
 80026e0:	0749      	lsls	r1, r1, #29
 80026e2:	430a      	orrs	r2, r1
 80026e4:	0011      	movs	r1, r2
 80026e6:	4319      	orrs	r1, r3
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x384>
 80026ea:	e1c8      	b.n	8002a7e <__aeabi_dsub+0x716>
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	0309      	lsls	r1, r1, #12
 80026f0:	430b      	orrs	r3, r1
 80026f2:	031b      	lsls	r3, r3, #12
 80026f4:	49d5      	ldr	r1, [pc, #852]	; (8002a4c <__aeabi_dsub+0x6e4>)
 80026f6:	0b1b      	lsrs	r3, r3, #12
 80026f8:	e6da      	b.n	80024b0 <__aeabi_dsub+0x148>
 80026fa:	49d5      	ldr	r1, [pc, #852]	; (8002a50 <__aeabi_dsub+0x6e8>)
 80026fc:	1ab6      	subs	r6, r6, r2
 80026fe:	400b      	ands	r3, r1
 8002700:	4698      	mov	r8, r3
 8002702:	e6b5      	b.n	8002470 <__aeabi_dsub+0x108>
 8002704:	0020      	movs	r0, r4
 8002706:	f000 fab3 	bl	8002c70 <__clzsi2>
 800270a:	0002      	movs	r2, r0
 800270c:	3218      	adds	r2, #24
 800270e:	2a1f      	cmp	r2, #31
 8002710:	dc00      	bgt.n	8002714 <__aeabi_dsub+0x3ac>
 8002712:	e68f      	b.n	8002434 <__aeabi_dsub+0xcc>
 8002714:	0023      	movs	r3, r4
 8002716:	3808      	subs	r0, #8
 8002718:	4083      	lsls	r3, r0
 800271a:	2400      	movs	r4, #0
 800271c:	e692      	b.n	8002444 <__aeabi_dsub+0xdc>
 800271e:	4308      	orrs	r0, r1
 8002720:	0002      	movs	r2, r0
 8002722:	1e50      	subs	r0, r2, #1
 8002724:	4182      	sbcs	r2, r0
 8002726:	e66d      	b.n	8002404 <__aeabi_dsub+0x9c>
 8002728:	4cca      	ldr	r4, [pc, #808]	; (8002a54 <__aeabi_dsub+0x6ec>)
 800272a:	1c72      	adds	r2, r6, #1
 800272c:	4222      	tst	r2, r4
 800272e:	d000      	beq.n	8002732 <__aeabi_dsub+0x3ca>
 8002730:	e0ad      	b.n	800288e <__aeabi_dsub+0x526>
 8002732:	464a      	mov	r2, r9
 8002734:	431a      	orrs	r2, r3
 8002736:	2e00      	cmp	r6, #0
 8002738:	d1b8      	bne.n	80026ac <__aeabi_dsub+0x344>
 800273a:	2a00      	cmp	r2, #0
 800273c:	d100      	bne.n	8002740 <__aeabi_dsub+0x3d8>
 800273e:	e158      	b.n	80029f2 <__aeabi_dsub+0x68a>
 8002740:	000a      	movs	r2, r1
 8002742:	4302      	orrs	r2, r0
 8002744:	d000      	beq.n	8002748 <__aeabi_dsub+0x3e0>
 8002746:	e159      	b.n	80029fc <__aeabi_dsub+0x694>
 8002748:	464a      	mov	r2, r9
 800274a:	0759      	lsls	r1, r3, #29
 800274c:	08d2      	lsrs	r2, r2, #3
 800274e:	430a      	orrs	r2, r1
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	e786      	b.n	8002662 <__aeabi_dsub+0x2fa>
 8002754:	464a      	mov	r2, r9
 8002756:	0759      	lsls	r1, r3, #29
 8002758:	08d2      	lsrs	r2, r2, #3
 800275a:	430a      	orrs	r2, r1
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	e7c1      	b.n	80026e4 <__aeabi_dsub+0x37c>
 8002760:	4dba      	ldr	r5, [pc, #744]	; (8002a4c <__aeabi_dsub+0x6e4>)
 8002762:	42aa      	cmp	r2, r5
 8002764:	d100      	bne.n	8002768 <__aeabi_dsub+0x400>
 8002766:	e11e      	b.n	80029a6 <__aeabi_dsub+0x63e>
 8002768:	2580      	movs	r5, #128	; 0x80
 800276a:	042d      	lsls	r5, r5, #16
 800276c:	432b      	orrs	r3, r5
 800276e:	4664      	mov	r4, ip
 8002770:	2c38      	cmp	r4, #56	; 0x38
 8002772:	dc5d      	bgt.n	8002830 <__aeabi_dsub+0x4c8>
 8002774:	2c1f      	cmp	r4, #31
 8002776:	dd00      	ble.n	800277a <__aeabi_dsub+0x412>
 8002778:	e0d0      	b.n	800291c <__aeabi_dsub+0x5b4>
 800277a:	2520      	movs	r5, #32
 800277c:	4667      	mov	r7, ip
 800277e:	1b2d      	subs	r5, r5, r4
 8002780:	464e      	mov	r6, r9
 8002782:	001c      	movs	r4, r3
 8002784:	40fe      	lsrs	r6, r7
 8002786:	40ac      	lsls	r4, r5
 8002788:	4334      	orrs	r4, r6
 800278a:	464e      	mov	r6, r9
 800278c:	40ae      	lsls	r6, r5
 800278e:	0035      	movs	r5, r6
 8002790:	40fb      	lsrs	r3, r7
 8002792:	1e6e      	subs	r6, r5, #1
 8002794:	41b5      	sbcs	r5, r6
 8002796:	1ac9      	subs	r1, r1, r3
 8002798:	432c      	orrs	r4, r5
 800279a:	e04e      	b.n	800283a <__aeabi_dsub+0x4d2>
 800279c:	464a      	mov	r2, r9
 800279e:	1a14      	subs	r4, r2, r0
 80027a0:	45a1      	cmp	r9, r4
 80027a2:	4192      	sbcs	r2, r2
 80027a4:	4252      	negs	r2, r2
 80027a6:	4690      	mov	r8, r2
 80027a8:	1a5f      	subs	r7, r3, r1
 80027aa:	003a      	movs	r2, r7
 80027ac:	4647      	mov	r7, r8
 80027ae:	1bd2      	subs	r2, r2, r7
 80027b0:	4690      	mov	r8, r2
 80027b2:	0212      	lsls	r2, r2, #8
 80027b4:	d500      	bpl.n	80027b8 <__aeabi_dsub+0x450>
 80027b6:	e08b      	b.n	80028d0 <__aeabi_dsub+0x568>
 80027b8:	4642      	mov	r2, r8
 80027ba:	4322      	orrs	r2, r4
 80027bc:	d000      	beq.n	80027c0 <__aeabi_dsub+0x458>
 80027be:	e630      	b.n	8002422 <__aeabi_dsub+0xba>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2500      	movs	r5, #0
 80027c4:	e74d      	b.n	8002662 <__aeabi_dsub+0x2fa>
 80027c6:	464a      	mov	r2, r9
 80027c8:	0759      	lsls	r1, r3, #29
 80027ca:	08d2      	lsrs	r2, r2, #3
 80027cc:	430a      	orrs	r2, r1
 80027ce:	08db      	lsrs	r3, r3, #3
 80027d0:	e744      	b.n	800265c <__aeabi_dsub+0x2f4>
 80027d2:	4642      	mov	r2, r8
 80027d4:	4b9e      	ldr	r3, [pc, #632]	; (8002a50 <__aeabi_dsub+0x6e8>)
 80027d6:	0861      	lsrs	r1, r4, #1
 80027d8:	401a      	ands	r2, r3
 80027da:	0013      	movs	r3, r2
 80027dc:	2201      	movs	r2, #1
 80027de:	4014      	ands	r4, r2
 80027e0:	430c      	orrs	r4, r1
 80027e2:	07da      	lsls	r2, r3, #31
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	4698      	mov	r8, r3
 80027e8:	4314      	orrs	r4, r2
 80027ea:	e641      	b.n	8002470 <__aeabi_dsub+0x108>
 80027ec:	001a      	movs	r2, r3
 80027ee:	3e1f      	subs	r6, #31
 80027f0:	40f2      	lsrs	r2, r6
 80027f2:	0016      	movs	r6, r2
 80027f4:	2920      	cmp	r1, #32
 80027f6:	d003      	beq.n	8002800 <__aeabi_dsub+0x498>
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	1a51      	subs	r1, r2, r1
 80027fc:	408b      	lsls	r3, r1
 80027fe:	431c      	orrs	r4, r3
 8002800:	1e62      	subs	r2, r4, #1
 8002802:	4194      	sbcs	r4, r2
 8002804:	2300      	movs	r3, #0
 8002806:	4334      	orrs	r4, r6
 8002808:	4698      	mov	r8, r3
 800280a:	2600      	movs	r6, #0
 800280c:	e71d      	b.n	800264a <__aeabi_dsub+0x2e2>
 800280e:	000c      	movs	r4, r1
 8002810:	3a20      	subs	r2, #32
 8002812:	40d4      	lsrs	r4, r2
 8002814:	0022      	movs	r2, r4
 8002816:	4664      	mov	r4, ip
 8002818:	2c20      	cmp	r4, #32
 800281a:	d004      	beq.n	8002826 <__aeabi_dsub+0x4be>
 800281c:	2740      	movs	r7, #64	; 0x40
 800281e:	1b3f      	subs	r7, r7, r4
 8002820:	40b9      	lsls	r1, r7
 8002822:	4308      	orrs	r0, r1
 8002824:	4680      	mov	r8, r0
 8002826:	4644      	mov	r4, r8
 8002828:	1e61      	subs	r1, r4, #1
 800282a:	418c      	sbcs	r4, r1
 800282c:	4322      	orrs	r2, r4
 800282e:	e5e9      	b.n	8002404 <__aeabi_dsub+0x9c>
 8002830:	464c      	mov	r4, r9
 8002832:	4323      	orrs	r3, r4
 8002834:	001c      	movs	r4, r3
 8002836:	1e63      	subs	r3, r4, #1
 8002838:	419c      	sbcs	r4, r3
 800283a:	1b04      	subs	r4, r0, r4
 800283c:	42a0      	cmp	r0, r4
 800283e:	419b      	sbcs	r3, r3
 8002840:	425b      	negs	r3, r3
 8002842:	1acb      	subs	r3, r1, r3
 8002844:	4698      	mov	r8, r3
 8002846:	465d      	mov	r5, fp
 8002848:	0016      	movs	r6, r2
 800284a:	e5e2      	b.n	8002412 <__aeabi_dsub+0xaa>
 800284c:	464e      	mov	r6, r9
 800284e:	431e      	orrs	r6, r3
 8002850:	d100      	bne.n	8002854 <__aeabi_dsub+0x4ec>
 8002852:	e0ae      	b.n	80029b2 <__aeabi_dsub+0x64a>
 8002854:	1e66      	subs	r6, r4, #1
 8002856:	2c01      	cmp	r4, #1
 8002858:	d100      	bne.n	800285c <__aeabi_dsub+0x4f4>
 800285a:	e0fd      	b.n	8002a58 <__aeabi_dsub+0x6f0>
 800285c:	4f7b      	ldr	r7, [pc, #492]	; (8002a4c <__aeabi_dsub+0x6e4>)
 800285e:	42bc      	cmp	r4, r7
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x4fc>
 8002862:	e107      	b.n	8002a74 <__aeabi_dsub+0x70c>
 8002864:	46b4      	mov	ip, r6
 8002866:	e69b      	b.n	80025a0 <__aeabi_dsub+0x238>
 8002868:	4664      	mov	r4, ip
 800286a:	2220      	movs	r2, #32
 800286c:	1b12      	subs	r2, r2, r4
 800286e:	000c      	movs	r4, r1
 8002870:	4094      	lsls	r4, r2
 8002872:	0007      	movs	r7, r0
 8002874:	4090      	lsls	r0, r2
 8002876:	46a0      	mov	r8, r4
 8002878:	4664      	mov	r4, ip
 800287a:	1e42      	subs	r2, r0, #1
 800287c:	4190      	sbcs	r0, r2
 800287e:	4662      	mov	r2, ip
 8002880:	40e7      	lsrs	r7, r4
 8002882:	4644      	mov	r4, r8
 8002884:	40d1      	lsrs	r1, r2
 8002886:	433c      	orrs	r4, r7
 8002888:	4304      	orrs	r4, r0
 800288a:	185b      	adds	r3, r3, r1
 800288c:	e6f3      	b.n	8002676 <__aeabi_dsub+0x30e>
 800288e:	4c6f      	ldr	r4, [pc, #444]	; (8002a4c <__aeabi_dsub+0x6e4>)
 8002890:	42a2      	cmp	r2, r4
 8002892:	d100      	bne.n	8002896 <__aeabi_dsub+0x52e>
 8002894:	e0d5      	b.n	8002a42 <__aeabi_dsub+0x6da>
 8002896:	4448      	add	r0, r9
 8002898:	185b      	adds	r3, r3, r1
 800289a:	4548      	cmp	r0, r9
 800289c:	4189      	sbcs	r1, r1
 800289e:	4249      	negs	r1, r1
 80028a0:	185b      	adds	r3, r3, r1
 80028a2:	07dc      	lsls	r4, r3, #31
 80028a4:	0840      	lsrs	r0, r0, #1
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	4698      	mov	r8, r3
 80028aa:	0016      	movs	r6, r2
 80028ac:	4304      	orrs	r4, r0
 80028ae:	e6cc      	b.n	800264a <__aeabi_dsub+0x2e2>
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d000      	beq.n	80028b6 <__aeabi_dsub+0x54e>
 80028b4:	e082      	b.n	80029bc <__aeabi_dsub+0x654>
 80028b6:	000a      	movs	r2, r1
 80028b8:	4302      	orrs	r2, r0
 80028ba:	d140      	bne.n	800293e <__aeabi_dsub+0x5d6>
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	2500      	movs	r5, #0
 80028c0:	031b      	lsls	r3, r3, #12
 80028c2:	e713      	b.n	80026ec <__aeabi_dsub+0x384>
 80028c4:	074b      	lsls	r3, r1, #29
 80028c6:	08c2      	lsrs	r2, r0, #3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	465d      	mov	r5, fp
 80028cc:	08cb      	lsrs	r3, r1, #3
 80028ce:	e6c5      	b.n	800265c <__aeabi_dsub+0x2f4>
 80028d0:	464a      	mov	r2, r9
 80028d2:	1a84      	subs	r4, r0, r2
 80028d4:	42a0      	cmp	r0, r4
 80028d6:	4192      	sbcs	r2, r2
 80028d8:	1acb      	subs	r3, r1, r3
 80028da:	4252      	negs	r2, r2
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	4698      	mov	r8, r3
 80028e0:	465d      	mov	r5, fp
 80028e2:	e59e      	b.n	8002422 <__aeabi_dsub+0xba>
 80028e4:	464a      	mov	r2, r9
 80028e6:	0759      	lsls	r1, r3, #29
 80028e8:	08d2      	lsrs	r2, r2, #3
 80028ea:	430a      	orrs	r2, r1
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	e6f9      	b.n	80026e4 <__aeabi_dsub+0x37c>
 80028f0:	464a      	mov	r2, r9
 80028f2:	1a14      	subs	r4, r2, r0
 80028f4:	45a1      	cmp	r9, r4
 80028f6:	4192      	sbcs	r2, r2
 80028f8:	1a5b      	subs	r3, r3, r1
 80028fa:	4252      	negs	r2, r2
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	4698      	mov	r8, r3
 8002900:	2601      	movs	r6, #1
 8002902:	e586      	b.n	8002412 <__aeabi_dsub+0xaa>
 8002904:	464a      	mov	r2, r9
 8002906:	0759      	lsls	r1, r3, #29
 8002908:	08d2      	lsrs	r2, r2, #3
 800290a:	430a      	orrs	r2, r1
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	e6a5      	b.n	800265c <__aeabi_dsub+0x2f4>
 8002910:	464c      	mov	r4, r9
 8002912:	4323      	orrs	r3, r4
 8002914:	001c      	movs	r4, r3
 8002916:	1e63      	subs	r3, r4, #1
 8002918:	419c      	sbcs	r4, r3
 800291a:	e65b      	b.n	80025d4 <__aeabi_dsub+0x26c>
 800291c:	4665      	mov	r5, ip
 800291e:	001e      	movs	r6, r3
 8002920:	3d20      	subs	r5, #32
 8002922:	40ee      	lsrs	r6, r5
 8002924:	2c20      	cmp	r4, #32
 8002926:	d005      	beq.n	8002934 <__aeabi_dsub+0x5cc>
 8002928:	2540      	movs	r5, #64	; 0x40
 800292a:	1b2d      	subs	r5, r5, r4
 800292c:	40ab      	lsls	r3, r5
 800292e:	464c      	mov	r4, r9
 8002930:	431c      	orrs	r4, r3
 8002932:	46a2      	mov	sl, r4
 8002934:	4654      	mov	r4, sl
 8002936:	1e63      	subs	r3, r4, #1
 8002938:	419c      	sbcs	r4, r3
 800293a:	4334      	orrs	r4, r6
 800293c:	e77d      	b.n	800283a <__aeabi_dsub+0x4d2>
 800293e:	074b      	lsls	r3, r1, #29
 8002940:	08c2      	lsrs	r2, r0, #3
 8002942:	431a      	orrs	r2, r3
 8002944:	465d      	mov	r5, fp
 8002946:	08cb      	lsrs	r3, r1, #3
 8002948:	e6cc      	b.n	80026e4 <__aeabi_dsub+0x37c>
 800294a:	000a      	movs	r2, r1
 800294c:	4302      	orrs	r2, r0
 800294e:	d100      	bne.n	8002952 <__aeabi_dsub+0x5ea>
 8002950:	e736      	b.n	80027c0 <__aeabi_dsub+0x458>
 8002952:	074b      	lsls	r3, r1, #29
 8002954:	08c2      	lsrs	r2, r0, #3
 8002956:	431a      	orrs	r2, r3
 8002958:	465d      	mov	r5, fp
 800295a:	08cb      	lsrs	r3, r1, #3
 800295c:	e681      	b.n	8002662 <__aeabi_dsub+0x2fa>
 800295e:	464a      	mov	r2, r9
 8002960:	1a84      	subs	r4, r0, r2
 8002962:	42a0      	cmp	r0, r4
 8002964:	4192      	sbcs	r2, r2
 8002966:	1acb      	subs	r3, r1, r3
 8002968:	4252      	negs	r2, r2
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	4698      	mov	r8, r3
 800296e:	465d      	mov	r5, fp
 8002970:	2601      	movs	r6, #1
 8002972:	e54e      	b.n	8002412 <__aeabi_dsub+0xaa>
 8002974:	074b      	lsls	r3, r1, #29
 8002976:	08c2      	lsrs	r2, r0, #3
 8002978:	431a      	orrs	r2, r3
 800297a:	08cb      	lsrs	r3, r1, #3
 800297c:	e6b2      	b.n	80026e4 <__aeabi_dsub+0x37c>
 800297e:	464a      	mov	r2, r9
 8002980:	1a14      	subs	r4, r2, r0
 8002982:	45a1      	cmp	r9, r4
 8002984:	4192      	sbcs	r2, r2
 8002986:	1a5f      	subs	r7, r3, r1
 8002988:	4252      	negs	r2, r2
 800298a:	1aba      	subs	r2, r7, r2
 800298c:	4690      	mov	r8, r2
 800298e:	0212      	lsls	r2, r2, #8
 8002990:	d56b      	bpl.n	8002a6a <__aeabi_dsub+0x702>
 8002992:	464a      	mov	r2, r9
 8002994:	1a84      	subs	r4, r0, r2
 8002996:	42a0      	cmp	r0, r4
 8002998:	4192      	sbcs	r2, r2
 800299a:	1acb      	subs	r3, r1, r3
 800299c:	4252      	negs	r2, r2
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	4698      	mov	r8, r3
 80029a2:	465d      	mov	r5, fp
 80029a4:	e564      	b.n	8002470 <__aeabi_dsub+0x108>
 80029a6:	074b      	lsls	r3, r1, #29
 80029a8:	08c2      	lsrs	r2, r0, #3
 80029aa:	431a      	orrs	r2, r3
 80029ac:	465d      	mov	r5, fp
 80029ae:	08cb      	lsrs	r3, r1, #3
 80029b0:	e698      	b.n	80026e4 <__aeabi_dsub+0x37c>
 80029b2:	074b      	lsls	r3, r1, #29
 80029b4:	08c2      	lsrs	r2, r0, #3
 80029b6:	431a      	orrs	r2, r3
 80029b8:	08cb      	lsrs	r3, r1, #3
 80029ba:	e64f      	b.n	800265c <__aeabi_dsub+0x2f4>
 80029bc:	000a      	movs	r2, r1
 80029be:	4302      	orrs	r2, r0
 80029c0:	d090      	beq.n	80028e4 <__aeabi_dsub+0x57c>
 80029c2:	464a      	mov	r2, r9
 80029c4:	075c      	lsls	r4, r3, #29
 80029c6:	08d2      	lsrs	r2, r2, #3
 80029c8:	4314      	orrs	r4, r2
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	08db      	lsrs	r3, r3, #3
 80029ce:	0312      	lsls	r2, r2, #12
 80029d0:	4213      	tst	r3, r2
 80029d2:	d008      	beq.n	80029e6 <__aeabi_dsub+0x67e>
 80029d4:	08ce      	lsrs	r6, r1, #3
 80029d6:	4216      	tst	r6, r2
 80029d8:	d105      	bne.n	80029e6 <__aeabi_dsub+0x67e>
 80029da:	08c0      	lsrs	r0, r0, #3
 80029dc:	0749      	lsls	r1, r1, #29
 80029de:	4308      	orrs	r0, r1
 80029e0:	0004      	movs	r4, r0
 80029e2:	465d      	mov	r5, fp
 80029e4:	0033      	movs	r3, r6
 80029e6:	0f61      	lsrs	r1, r4, #29
 80029e8:	00e2      	lsls	r2, r4, #3
 80029ea:	0749      	lsls	r1, r1, #29
 80029ec:	08d2      	lsrs	r2, r2, #3
 80029ee:	430a      	orrs	r2, r1
 80029f0:	e678      	b.n	80026e4 <__aeabi_dsub+0x37c>
 80029f2:	074b      	lsls	r3, r1, #29
 80029f4:	08c2      	lsrs	r2, r0, #3
 80029f6:	431a      	orrs	r2, r3
 80029f8:	08cb      	lsrs	r3, r1, #3
 80029fa:	e632      	b.n	8002662 <__aeabi_dsub+0x2fa>
 80029fc:	4448      	add	r0, r9
 80029fe:	185b      	adds	r3, r3, r1
 8002a00:	4548      	cmp	r0, r9
 8002a02:	4192      	sbcs	r2, r2
 8002a04:	4698      	mov	r8, r3
 8002a06:	4252      	negs	r2, r2
 8002a08:	4490      	add	r8, r2
 8002a0a:	4643      	mov	r3, r8
 8002a0c:	0004      	movs	r4, r0
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	d400      	bmi.n	8002a14 <__aeabi_dsub+0x6ac>
 8002a12:	e61a      	b.n	800264a <__aeabi_dsub+0x2e2>
 8002a14:	4642      	mov	r2, r8
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <__aeabi_dsub+0x6e8>)
 8002a18:	2601      	movs	r6, #1
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	4690      	mov	r8, r2
 8002a1e:	e614      	b.n	800264a <__aeabi_dsub+0x2e2>
 8002a20:	4666      	mov	r6, ip
 8002a22:	001f      	movs	r7, r3
 8002a24:	3e20      	subs	r6, #32
 8002a26:	40f7      	lsrs	r7, r6
 8002a28:	2c20      	cmp	r4, #32
 8002a2a:	d005      	beq.n	8002a38 <__aeabi_dsub+0x6d0>
 8002a2c:	2640      	movs	r6, #64	; 0x40
 8002a2e:	1b36      	subs	r6, r6, r4
 8002a30:	40b3      	lsls	r3, r6
 8002a32:	464c      	mov	r4, r9
 8002a34:	431c      	orrs	r4, r3
 8002a36:	46a2      	mov	sl, r4
 8002a38:	4654      	mov	r4, sl
 8002a3a:	1e63      	subs	r3, r4, #1
 8002a3c:	419c      	sbcs	r4, r3
 8002a3e:	433c      	orrs	r4, r7
 8002a40:	e5c8      	b.n	80025d4 <__aeabi_dsub+0x26c>
 8002a42:	0011      	movs	r1, r2
 8002a44:	2300      	movs	r3, #0
 8002a46:	2200      	movs	r2, #0
 8002a48:	e532      	b.n	80024b0 <__aeabi_dsub+0x148>
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	000007ff 	.word	0x000007ff
 8002a50:	ff7fffff 	.word	0xff7fffff
 8002a54:	000007fe 	.word	0x000007fe
 8002a58:	464a      	mov	r2, r9
 8002a5a:	1814      	adds	r4, r2, r0
 8002a5c:	4284      	cmp	r4, r0
 8002a5e:	4192      	sbcs	r2, r2
 8002a60:	185b      	adds	r3, r3, r1
 8002a62:	4698      	mov	r8, r3
 8002a64:	4252      	negs	r2, r2
 8002a66:	4490      	add	r8, r2
 8002a68:	e5e9      	b.n	800263e <__aeabi_dsub+0x2d6>
 8002a6a:	4642      	mov	r2, r8
 8002a6c:	4322      	orrs	r2, r4
 8002a6e:	d100      	bne.n	8002a72 <__aeabi_dsub+0x70a>
 8002a70:	e6a6      	b.n	80027c0 <__aeabi_dsub+0x458>
 8002a72:	e5ea      	b.n	800264a <__aeabi_dsub+0x2e2>
 8002a74:	074b      	lsls	r3, r1, #29
 8002a76:	08c2      	lsrs	r2, r0, #3
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	08cb      	lsrs	r3, r1, #3
 8002a7c:	e632      	b.n	80026e4 <__aeabi_dsub+0x37c>
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4901      	ldr	r1, [pc, #4]	; (8002a88 <__aeabi_dsub+0x720>)
 8002a82:	0013      	movs	r3, r2
 8002a84:	e514      	b.n	80024b0 <__aeabi_dsub+0x148>
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	000007ff 	.word	0x000007ff

08002a8c <__aeabi_dcmpun>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	0005      	movs	r5, r0
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <__aeabi_dcmpun+0x38>)
 8002a92:	030c      	lsls	r4, r1, #12
 8002a94:	0016      	movs	r6, r2
 8002a96:	0049      	lsls	r1, r1, #1
 8002a98:	031a      	lsls	r2, r3, #12
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	0b24      	lsrs	r4, r4, #12
 8002a9e:	0d49      	lsrs	r1, r1, #21
 8002aa0:	0b12      	lsrs	r2, r2, #12
 8002aa2:	0d5b      	lsrs	r3, r3, #21
 8002aa4:	4281      	cmp	r1, r0
 8002aa6:	d008      	beq.n	8002aba <__aeabi_dcmpun+0x2e>
 8002aa8:	4906      	ldr	r1, [pc, #24]	; (8002ac4 <__aeabi_dcmpun+0x38>)
 8002aaa:	2000      	movs	r0, #0
 8002aac:	428b      	cmp	r3, r1
 8002aae:	d103      	bne.n	8002ab8 <__aeabi_dcmpun+0x2c>
 8002ab0:	4332      	orrs	r2, r6
 8002ab2:	0010      	movs	r0, r2
 8002ab4:	1e42      	subs	r2, r0, #1
 8002ab6:	4190      	sbcs	r0, r2
 8002ab8:	bd70      	pop	{r4, r5, r6, pc}
 8002aba:	2001      	movs	r0, #1
 8002abc:	432c      	orrs	r4, r5
 8002abe:	d1fb      	bne.n	8002ab8 <__aeabi_dcmpun+0x2c>
 8002ac0:	e7f2      	b.n	8002aa8 <__aeabi_dcmpun+0x1c>
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	000007ff 	.word	0x000007ff

08002ac8 <__aeabi_d2iz>:
 8002ac8:	000a      	movs	r2, r1
 8002aca:	b530      	push	{r4, r5, lr}
 8002acc:	4c13      	ldr	r4, [pc, #76]	; (8002b1c <__aeabi_d2iz+0x54>)
 8002ace:	0053      	lsls	r3, r2, #1
 8002ad0:	0309      	lsls	r1, r1, #12
 8002ad2:	0005      	movs	r5, r0
 8002ad4:	0b09      	lsrs	r1, r1, #12
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	0d5b      	lsrs	r3, r3, #21
 8002ada:	0fd2      	lsrs	r2, r2, #31
 8002adc:	42a3      	cmp	r3, r4
 8002ade:	dd04      	ble.n	8002aea <__aeabi_d2iz+0x22>
 8002ae0:	480f      	ldr	r0, [pc, #60]	; (8002b20 <__aeabi_d2iz+0x58>)
 8002ae2:	4283      	cmp	r3, r0
 8002ae4:	dd02      	ble.n	8002aec <__aeabi_d2iz+0x24>
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <__aeabi_d2iz+0x5c>)
 8002ae8:	18d0      	adds	r0, r2, r3
 8002aea:	bd30      	pop	{r4, r5, pc}
 8002aec:	2080      	movs	r0, #128	; 0x80
 8002aee:	0340      	lsls	r0, r0, #13
 8002af0:	4301      	orrs	r1, r0
 8002af2:	480d      	ldr	r0, [pc, #52]	; (8002b28 <__aeabi_d2iz+0x60>)
 8002af4:	1ac0      	subs	r0, r0, r3
 8002af6:	281f      	cmp	r0, #31
 8002af8:	dd08      	ble.n	8002b0c <__aeabi_d2iz+0x44>
 8002afa:	480c      	ldr	r0, [pc, #48]	; (8002b2c <__aeabi_d2iz+0x64>)
 8002afc:	1ac3      	subs	r3, r0, r3
 8002afe:	40d9      	lsrs	r1, r3
 8002b00:	000b      	movs	r3, r1
 8002b02:	4258      	negs	r0, r3
 8002b04:	2a00      	cmp	r2, #0
 8002b06:	d1f0      	bne.n	8002aea <__aeabi_d2iz+0x22>
 8002b08:	0018      	movs	r0, r3
 8002b0a:	e7ee      	b.n	8002aea <__aeabi_d2iz+0x22>
 8002b0c:	4c08      	ldr	r4, [pc, #32]	; (8002b30 <__aeabi_d2iz+0x68>)
 8002b0e:	40c5      	lsrs	r5, r0
 8002b10:	46a4      	mov	ip, r4
 8002b12:	4463      	add	r3, ip
 8002b14:	4099      	lsls	r1, r3
 8002b16:	000b      	movs	r3, r1
 8002b18:	432b      	orrs	r3, r5
 8002b1a:	e7f2      	b.n	8002b02 <__aeabi_d2iz+0x3a>
 8002b1c:	000003fe 	.word	0x000003fe
 8002b20:	0000041d 	.word	0x0000041d
 8002b24:	7fffffff 	.word	0x7fffffff
 8002b28:	00000433 	.word	0x00000433
 8002b2c:	00000413 	.word	0x00000413
 8002b30:	fffffbed 	.word	0xfffffbed

08002b34 <__aeabi_i2d>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	2800      	cmp	r0, #0
 8002b38:	d016      	beq.n	8002b68 <__aeabi_i2d+0x34>
 8002b3a:	17c3      	asrs	r3, r0, #31
 8002b3c:	18c5      	adds	r5, r0, r3
 8002b3e:	405d      	eors	r5, r3
 8002b40:	0fc4      	lsrs	r4, r0, #31
 8002b42:	0028      	movs	r0, r5
 8002b44:	f000 f894 	bl	8002c70 <__clzsi2>
 8002b48:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <__aeabi_i2d+0x5c>)
 8002b4a:	1a12      	subs	r2, r2, r0
 8002b4c:	280a      	cmp	r0, #10
 8002b4e:	dc16      	bgt.n	8002b7e <__aeabi_i2d+0x4a>
 8002b50:	0003      	movs	r3, r0
 8002b52:	002e      	movs	r6, r5
 8002b54:	3315      	adds	r3, #21
 8002b56:	409e      	lsls	r6, r3
 8002b58:	230b      	movs	r3, #11
 8002b5a:	1a18      	subs	r0, r3, r0
 8002b5c:	40c5      	lsrs	r5, r0
 8002b5e:	0553      	lsls	r3, r2, #21
 8002b60:	032d      	lsls	r5, r5, #12
 8002b62:	0b2d      	lsrs	r5, r5, #12
 8002b64:	0d5b      	lsrs	r3, r3, #21
 8002b66:	e003      	b.n	8002b70 <__aeabi_i2d+0x3c>
 8002b68:	2400      	movs	r4, #0
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	2600      	movs	r6, #0
 8002b70:	051b      	lsls	r3, r3, #20
 8002b72:	432b      	orrs	r3, r5
 8002b74:	07e4      	lsls	r4, r4, #31
 8002b76:	4323      	orrs	r3, r4
 8002b78:	0030      	movs	r0, r6
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
 8002b7e:	380b      	subs	r0, #11
 8002b80:	4085      	lsls	r5, r0
 8002b82:	0553      	lsls	r3, r2, #21
 8002b84:	032d      	lsls	r5, r5, #12
 8002b86:	2600      	movs	r6, #0
 8002b88:	0b2d      	lsrs	r5, r5, #12
 8002b8a:	0d5b      	lsrs	r3, r3, #21
 8002b8c:	e7f0      	b.n	8002b70 <__aeabi_i2d+0x3c>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	0000041e 	.word	0x0000041e

08002b94 <__aeabi_ui2d>:
 8002b94:	b510      	push	{r4, lr}
 8002b96:	1e04      	subs	r4, r0, #0
 8002b98:	d010      	beq.n	8002bbc <__aeabi_ui2d+0x28>
 8002b9a:	f000 f869 	bl	8002c70 <__clzsi2>
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <__aeabi_ui2d+0x48>)
 8002ba0:	1a1b      	subs	r3, r3, r0
 8002ba2:	280a      	cmp	r0, #10
 8002ba4:	dc11      	bgt.n	8002bca <__aeabi_ui2d+0x36>
 8002ba6:	220b      	movs	r2, #11
 8002ba8:	0021      	movs	r1, r4
 8002baa:	1a12      	subs	r2, r2, r0
 8002bac:	40d1      	lsrs	r1, r2
 8002bae:	3015      	adds	r0, #21
 8002bb0:	030a      	lsls	r2, r1, #12
 8002bb2:	055b      	lsls	r3, r3, #21
 8002bb4:	4084      	lsls	r4, r0
 8002bb6:	0b12      	lsrs	r2, r2, #12
 8002bb8:	0d5b      	lsrs	r3, r3, #21
 8002bba:	e001      	b.n	8002bc0 <__aeabi_ui2d+0x2c>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	051b      	lsls	r3, r3, #20
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	0020      	movs	r0, r4
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	0022      	movs	r2, r4
 8002bcc:	380b      	subs	r0, #11
 8002bce:	4082      	lsls	r2, r0
 8002bd0:	055b      	lsls	r3, r3, #21
 8002bd2:	0312      	lsls	r2, r2, #12
 8002bd4:	2400      	movs	r4, #0
 8002bd6:	0b12      	lsrs	r2, r2, #12
 8002bd8:	0d5b      	lsrs	r3, r3, #21
 8002bda:	e7f1      	b.n	8002bc0 <__aeabi_ui2d+0x2c>
 8002bdc:	0000041e 	.word	0x0000041e

08002be0 <__aeabi_f2d>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	0043      	lsls	r3, r0, #1
 8002be4:	0246      	lsls	r6, r0, #9
 8002be6:	0fc4      	lsrs	r4, r0, #31
 8002be8:	20fe      	movs	r0, #254	; 0xfe
 8002bea:	0e1b      	lsrs	r3, r3, #24
 8002bec:	1c59      	adds	r1, r3, #1
 8002bee:	0a75      	lsrs	r5, r6, #9
 8002bf0:	4208      	tst	r0, r1
 8002bf2:	d00c      	beq.n	8002c0e <__aeabi_f2d+0x2e>
 8002bf4:	22e0      	movs	r2, #224	; 0xe0
 8002bf6:	0092      	lsls	r2, r2, #2
 8002bf8:	4694      	mov	ip, r2
 8002bfa:	076d      	lsls	r5, r5, #29
 8002bfc:	0b36      	lsrs	r6, r6, #12
 8002bfe:	4463      	add	r3, ip
 8002c00:	051b      	lsls	r3, r3, #20
 8002c02:	4333      	orrs	r3, r6
 8002c04:	07e4      	lsls	r4, r4, #31
 8002c06:	4323      	orrs	r3, r4
 8002c08:	0028      	movs	r0, r5
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	bd70      	pop	{r4, r5, r6, pc}
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d114      	bne.n	8002c3c <__aeabi_f2d+0x5c>
 8002c12:	2d00      	cmp	r5, #0
 8002c14:	d01b      	beq.n	8002c4e <__aeabi_f2d+0x6e>
 8002c16:	0028      	movs	r0, r5
 8002c18:	f000 f82a 	bl	8002c70 <__clzsi2>
 8002c1c:	280a      	cmp	r0, #10
 8002c1e:	dc1c      	bgt.n	8002c5a <__aeabi_f2d+0x7a>
 8002c20:	230b      	movs	r3, #11
 8002c22:	002a      	movs	r2, r5
 8002c24:	1a1b      	subs	r3, r3, r0
 8002c26:	40da      	lsrs	r2, r3
 8002c28:	0003      	movs	r3, r0
 8002c2a:	3315      	adds	r3, #21
 8002c2c:	409d      	lsls	r5, r3
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <__aeabi_f2d+0x88>)
 8002c30:	0312      	lsls	r2, r2, #12
 8002c32:	1a1b      	subs	r3, r3, r0
 8002c34:	055b      	lsls	r3, r3, #21
 8002c36:	0b16      	lsrs	r6, r2, #12
 8002c38:	0d5b      	lsrs	r3, r3, #21
 8002c3a:	e7e1      	b.n	8002c00 <__aeabi_f2d+0x20>
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	d009      	beq.n	8002c54 <__aeabi_f2d+0x74>
 8002c40:	0b32      	lsrs	r2, r6, #12
 8002c42:	2680      	movs	r6, #128	; 0x80
 8002c44:	0336      	lsls	r6, r6, #12
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <__aeabi_f2d+0x8c>)
 8002c48:	076d      	lsls	r5, r5, #29
 8002c4a:	4316      	orrs	r6, r2
 8002c4c:	e7d8      	b.n	8002c00 <__aeabi_f2d+0x20>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2600      	movs	r6, #0
 8002c52:	e7d5      	b.n	8002c00 <__aeabi_f2d+0x20>
 8002c54:	2600      	movs	r6, #0
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <__aeabi_f2d+0x8c>)
 8002c58:	e7d2      	b.n	8002c00 <__aeabi_f2d+0x20>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	002a      	movs	r2, r5
 8002c5e:	3b0b      	subs	r3, #11
 8002c60:	409a      	lsls	r2, r3
 8002c62:	2500      	movs	r5, #0
 8002c64:	e7e3      	b.n	8002c2e <__aeabi_f2d+0x4e>
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	00000389 	.word	0x00000389
 8002c6c:	000007ff 	.word	0x000007ff

08002c70 <__clzsi2>:
 8002c70:	211c      	movs	r1, #28
 8002c72:	2301      	movs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	4298      	cmp	r0, r3
 8002c78:	d301      	bcc.n	8002c7e <__clzsi2+0xe>
 8002c7a:	0c00      	lsrs	r0, r0, #16
 8002c7c:	3910      	subs	r1, #16
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	4298      	cmp	r0, r3
 8002c82:	d301      	bcc.n	8002c88 <__clzsi2+0x18>
 8002c84:	0a00      	lsrs	r0, r0, #8
 8002c86:	3908      	subs	r1, #8
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	4298      	cmp	r0, r3
 8002c8c:	d301      	bcc.n	8002c92 <__clzsi2+0x22>
 8002c8e:	0900      	lsrs	r0, r0, #4
 8002c90:	3904      	subs	r1, #4
 8002c92:	a202      	add	r2, pc, #8	; (adr r2, 8002c9c <__clzsi2+0x2c>)
 8002c94:	5c10      	ldrb	r0, [r2, r0]
 8002c96:	1840      	adds	r0, r0, r1
 8002c98:	4770      	bx	lr
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	02020304 	.word	0x02020304
 8002ca0:	01010101 	.word	0x01010101
	...

08002cac <__clzdi2>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	2900      	cmp	r1, #0
 8002cb0:	d103      	bne.n	8002cba <__clzdi2+0xe>
 8002cb2:	f7ff ffdd 	bl	8002c70 <__clzsi2>
 8002cb6:	3020      	adds	r0, #32
 8002cb8:	e002      	b.n	8002cc0 <__clzdi2+0x14>
 8002cba:	1c08      	adds	r0, r1, #0
 8002cbc:	f7ff ffd8 	bl	8002c70 <__clzsi2>
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)

08002cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cca:	f000 fd83 	bl	80037d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cce:	f000 f87f 	bl	8002dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cd2:	f000 f9bf 	bl	8003054 <MX_GPIO_Init>
  MX_ADC_Init();
 8002cd6:	f000 f8e9 	bl	8002eac <MX_ADC_Init>
  MX_I2C1_Init();
 8002cda:	f000 f94b 	bl	8002f74 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002cde:	f000 f989 	bl	8002ff4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int ledVal = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]

  //set up sht library
  sht3x_handle_t handle = {
 8002ce6:	2108      	movs	r1, #8
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <main+0xf4>)
 8002cec:	ca11      	ldmia	r2!, {r0, r4}
 8002cee:	c311      	stmia	r3!, {r0, r4}
      .i2c_handle = &hi2c1,
      .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
  };
  if (!sht3x_init(&handle)) {
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fa90 	bl	8003218 <sht3x_init>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	4053      	eors	r3, r2
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <main+0x4a>
      printf("SHT3x access failed.\n\r");
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <main+0xf8>)
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f004 fd95 	bl	8007838 <iprintf>
  }
  // Enable heater for two seconds.
  sht3x_set_header_enable(&handle, true);
 8002d0e:	2408      	movs	r4, #8
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2101      	movs	r1, #1
 8002d14:	0018      	movs	r0, r3
 8002d16:	f000 fb5d 	bl	80033d4 <sht3x_set_header_enable>
  HAL_Delay(2000);
 8002d1a:	23fa      	movs	r3, #250	; 0xfa
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 fdc8 	bl	80038b4 <HAL_Delay>
  sht3x_set_header_enable(&handle, false);
 8002d24:	193b      	adds	r3, r7, r4
 8002d26:	2100      	movs	r1, #0
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 fb53 	bl	80033d4 <sht3x_set_header_enable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, ledVal);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	4822      	ldr	r0, [pc, #136]	; (8002dc0 <main+0xfc>)
 8002d38:	0019      	movs	r1, r3
 8002d3a:	f001 fb8f 	bl	800445c <HAL_GPIO_WritePin>
	ledVal = !ledVal;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	425a      	negs	r2, r3
 8002d42:	4153      	adcs	r3, r2
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	617b      	str	r3, [r7, #20]
	HAL_Delay(100);
 8002d48:	2064      	movs	r0, #100	; 0x64
 8002d4a:	f000 fdb3 	bl	80038b4 <HAL_Delay>

	//read lightsensor adc
	HAL_ADC_Start(&hadc);
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <main+0x100>)
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 ff47 	bl	8003be4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <main+0x100>)
 8002d58:	210a      	movs	r1, #10
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 ff96 	bl	8003c8c <HAL_ADC_PollForConversion>
	uint16_t adcResult = HAL_ADC_GetValue(&hadc);
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <main+0x100>)
 8002d62:	0018      	movs	r0, r3
 8002d64:	f001 f82e 	bl	8003dc4 <HAL_ADC_GetValue>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	2412      	movs	r4, #18
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	801a      	strh	r2, [r3, #0]

	//read temp/hum sensor
	float temp, hum;
	sht3x_read_temperature_and_humidity(&handle, &temp, &hum);
 8002d70:	003a      	movs	r2, r7
 8002d72:	1d39      	adds	r1, r7, #4
 8002d74:	2308      	movs	r3, #8
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fa91 	bl	80032a0 <sht3x_read_temperature_and_humidity>

	printf("Light adc : %d \n\r", adcResult);
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <main+0x104>)
 8002d84:	0011      	movs	r1, r2
 8002d86:	0018      	movs	r0, r3
 8002d88:	f004 fd56 	bl	8007838 <iprintf>
	printf("Temp %.2f, humidity %.2f \% \n\r", temp, hum);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1c18      	adds	r0, r3, #0
 8002d90:	f7ff ff26 	bl	8002be0 <__aeabi_f2d>
 8002d94:	0004      	movs	r4, r0
 8002d96:	000d      	movs	r5, r1
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	1c18      	adds	r0, r3, #0
 8002d9c:	f7ff ff20 	bl	8002be0 <__aeabi_f2d>
 8002da0:	0002      	movs	r2, r0
 8002da2:	000b      	movs	r3, r1
 8002da4:	4909      	ldr	r1, [pc, #36]	; (8002dcc <main+0x108>)
 8002da6:	9200      	str	r2, [sp, #0]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	0022      	movs	r2, r4
 8002dac:	002b      	movs	r3, r5
 8002dae:	0008      	movs	r0, r1
 8002db0:	f004 fd42 	bl	8007838 <iprintf>
  {
 8002db4:	e7bb      	b.n	8002d2e <main+0x6a>
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	080097cc 	.word	0x080097cc
 8002dbc:	08009780 	.word	0x08009780
 8002dc0:	50000400 	.word	0x50000400
 8002dc4:	200002d4 	.word	0x200002d4
 8002dc8:	08009798 	.word	0x08009798
 8002dcc:	080097ac 	.word	0x080097ac

08002dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b09d      	sub	sp, #116	; 0x74
 8002dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dd6:	2438      	movs	r4, #56	; 0x38
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	0018      	movs	r0, r3
 8002ddc:	2338      	movs	r3, #56	; 0x38
 8002dde:	001a      	movs	r2, r3
 8002de0:	2100      	movs	r1, #0
 8002de2:	f003 ff45 	bl	8006c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002de6:	2324      	movs	r3, #36	; 0x24
 8002de8:	18fb      	adds	r3, r7, r3
 8002dea:	0018      	movs	r0, r3
 8002dec:	2314      	movs	r3, #20
 8002dee:	001a      	movs	r2, r3
 8002df0:	2100      	movs	r1, #0
 8002df2:	f003 ff3d 	bl	8006c70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002df6:	003b      	movs	r3, r7
 8002df8:	0018      	movs	r0, r3
 8002dfa:	2324      	movs	r3, #36	; 0x24
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f003 ff36 	bl	8006c70 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <SystemClock_Config+0xd4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <SystemClock_Config+0xd8>)
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <SystemClock_Config+0xd4>)
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	0109      	lsls	r1, r1, #4
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002e16:	0021      	movs	r1, r4
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	2201      	movs	r2, #1
 8002e22:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	22a0      	movs	r2, #160	; 0xa0
 8002e2e:	0212      	lsls	r2, r2, #8
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f002 f9f8 	bl	8005230 <HAL_RCC_OscConfig>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002e44:	f000 f960 	bl	8003108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e48:	2124      	movs	r1, #36	; 0x24
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e5c:	187b      	adds	r3, r7, r1
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f002 fdb3 	bl	80059d8 <HAL_RCC_ClockConfig>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d001      	beq.n	8002e7a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002e76:	f000 f947 	bl	8003108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002e7a:	003b      	movs	r3, r7
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e80:	003b      	movs	r3, r7
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e86:	003b      	movs	r3, r7
 8002e88:	2200      	movs	r2, #0
 8002e8a:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e8c:	003b      	movs	r3, r7
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f002 ffc6 	bl	8005e20 <HAL_RCCEx_PeriphCLKConfig>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d001      	beq.n	8002e9c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002e98:	f000 f936 	bl	8003108 <Error_Handler>
  }
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b01d      	add	sp, #116	; 0x74
 8002ea2:	bd90      	pop	{r4, r7, pc}
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	ffffe7ff 	.word	0xffffe7ff

08002eac <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002eb2:	003b      	movs	r3, r7
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	001a      	movs	r2, r3
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f003 fed8 	bl	8006c70 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002ec2:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <MX_ADC_Init+0xc4>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002ece:	22c0      	movs	r2, #192	; 0xc0
 8002ed0:	0612      	lsls	r2, r2, #24
 8002ed2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002ed4:	4b25      	ldr	r3, [pc, #148]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002edc:	2202      	movs	r2, #2
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002eee:	2220      	movs	r2, #32
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002ef6:	2221      	movs	r2, #33	; 0x21
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f04:	22c2      	movs	r2, #194	; 0xc2
 8002f06:	32ff      	adds	r2, #255	; 0xff
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f0c:	222c      	movs	r2, #44	; 0x2c
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f14:	2204      	movs	r2, #4
 8002f16:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fce2 	bl	80038fc <HAL_ADC_Init>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002f3c:	f000 f8e4 	bl	8003108 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f40:	003b      	movs	r3, r7
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002f46:	003b      	movs	r3, r7
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	0152      	lsls	r2, r2, #5
 8002f4c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f4e:	003a      	movs	r2, r7
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <MX_ADC_Init+0xc0>)
 8002f52:	0011      	movs	r1, r2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 ff41 	bl	8003ddc <HAL_ADC_ConfigChannel>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002f5e:	f000 f8d3 	bl	8003108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b002      	add	sp, #8
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	200002d4 	.word	0x200002d4
 8002f70:	40012400 	.word	0x40012400

08002f74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f78:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <MX_I2C1_Init+0x78>)
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <MX_I2C1_Init+0x7c>)
 8002f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <MX_I2C1_Init+0x78>)
 8002f80:	22e1      	movs	r2, #225	; 0xe1
 8002f82:	00d2      	lsls	r2, r2, #3
 8002f84:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f86:	4b19      	ldr	r3, [pc, #100]	; (8002fec <MX_I2C1_Init+0x78>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <MX_I2C1_Init+0x78>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <MX_I2C1_Init+0x78>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <MX_I2C1_Init+0x78>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <MX_I2C1_Init+0x78>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <MX_I2C1_Init+0x78>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <MX_I2C1_Init+0x78>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fb0:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <MX_I2C1_Init+0x78>)
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f001 fa70 	bl	8004498 <HAL_I2C_Init>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fbc:	f000 f8a4 	bl	8003108 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <MX_I2C1_Init+0x78>)
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f002 f89b 	bl	8005100 <HAL_I2CEx_ConfigAnalogFilter>
 8002fca:	1e03      	subs	r3, r0, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002fce:	f000 f89b 	bl	8003108 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <MX_I2C1_Init+0x78>)
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f002 f8de 	bl	8005198 <HAL_I2CEx_ConfigDigitalFilter>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002fe0:	f000 f892 	bl	8003108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000204 	.word	0x20000204
 8002ff0:	40005400 	.word	0x40005400

08002ff4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <MX_USART2_UART_Init+0x58>)
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <MX_USART2_UART_Init+0x5c>)
 8002ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003000:	22e1      	movs	r2, #225	; 0xe1
 8003002:	0252      	lsls	r2, r2, #9
 8003004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <MX_USART2_UART_Init+0x58>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <MX_USART2_UART_Init+0x58>)
 800301a:	220c      	movs	r2, #12
 800301c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <MX_USART2_UART_Init+0x58>)
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003032:	2200      	movs	r2, #0
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <MX_USART2_UART_Init+0x58>)
 8003038:	0018      	movs	r0, r3
 800303a:	f003 f847 	bl	80060cc <HAL_UART_Init>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d001      	beq.n	8003046 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003042:	f000 f861 	bl	8003108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000250 	.word	0x20000250
 8003050:	40004400 	.word	0x40004400

08003054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305a:	240c      	movs	r4, #12
 800305c:	193b      	adds	r3, r7, r4
 800305e:	0018      	movs	r0, r3
 8003060:	2314      	movs	r3, #20
 8003062:	001a      	movs	r2, r3
 8003064:	2100      	movs	r1, #0
 8003066:	f003 fe03 	bl	8006c70 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <MX_GPIO_Init+0x84>)
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_GPIO_Init+0x84>)
 8003070:	2102      	movs	r1, #2
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <MX_GPIO_Init+0x84>)
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	2202      	movs	r2, #2
 800307c:	4013      	ands	r3, r2
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <MX_GPIO_Init+0x84>)
 8003084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <MX_GPIO_Init+0x84>)
 8003088:	2101      	movs	r1, #1
 800308a:	430a      	orrs	r2, r1
 800308c:	62da      	str	r2, [r3, #44]	; 0x2c
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <MX_GPIO_Init+0x84>)
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	480f      	ldr	r0, [pc, #60]	; (80030dc <MX_GPIO_Init+0x88>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	0019      	movs	r1, r3
 80030a4:	f001 f9da 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	0192      	lsls	r2, r2, #6
 80030ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	2201      	movs	r2, #1
 80030b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	2200      	movs	r2, #0
 80030c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	4a05      	ldr	r2, [pc, #20]	; (80030dc <MX_GPIO_Init+0x88>)
 80030c6:	0019      	movs	r1, r3
 80030c8:	0010      	movs	r0, r2
 80030ca:	f001 f849 	bl	8004160 <HAL_GPIO_Init>

}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b009      	add	sp, #36	; 0x24
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40021000 	.word	0x40021000
 80030dc:	50000400 	.word	0x50000400

080030e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <__io_putchar+0x20>)
 80030ea:	1d39      	adds	r1, r7, #4
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <__io_putchar+0x24>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	f003 f840 	bl	8006174 <HAL_UART_Transmit>

  return ch;
 80030f4:	687b      	ldr	r3, [r7, #4]
}
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	0000ffff 	.word	0x0000ffff
 8003104:	20000250 	.word	0x20000250

08003108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800310c:	b672      	cpsid	i
}
 800310e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003110:	e7fe      	b.n	8003110 <Error_Handler+0x8>

08003112 <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 800311c:	2317      	movs	r3, #23
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	e02a      	b.n	8003180 <calculate_crc+0x6e>
		crc ^= data[i];
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	18d3      	adds	r3, r2, r3
 8003130:	7819      	ldrb	r1, [r3, #0]
 8003132:	2217      	movs	r2, #23
 8003134:	18bb      	adds	r3, r7, r2
 8003136:	18ba      	adds	r2, r7, r2
 8003138:	7812      	ldrb	r2, [r2, #0]
 800313a:	404a      	eors	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
		for (size_t j = 0; j < 8; j++) {
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e017      	b.n	8003174 <calculate_crc+0x62>
			if ((crc & 0x80u) != 0) {
 8003144:	2117      	movs	r1, #23
 8003146:	187b      	adds	r3, r7, r1
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b25b      	sxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	da08      	bge.n	8003162 <calculate_crc+0x50>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8003150:	187b      	adds	r3, r7, r1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	18db      	adds	r3, r3, r3
 8003156:	b2da      	uxtb	r2, r3
 8003158:	187b      	adds	r3, r7, r1
 800315a:	2131      	movs	r1, #49	; 0x31
 800315c:	404a      	eors	r2, r1
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e005      	b.n	800316e <calculate_crc+0x5c>
			} else {
				crc <<= 1u;
 8003162:	2317      	movs	r3, #23
 8003164:	18fa      	adds	r2, r7, r3
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	18db      	adds	r3, r3, r3
 800316c:	7013      	strb	r3, [r2, #0]
		for (size_t j = 0; j < 8; j++) {
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3301      	adds	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b07      	cmp	r3, #7
 8003178:	d9e4      	bls.n	8003144 <calculate_crc+0x32>
	for (size_t i = 0; i < length; i++) {
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	3301      	adds	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d3d0      	bcc.n	800312a <calculate_crc+0x18>
			}
		}
	}
	return crc;
 8003188:	2317      	movs	r3, #23
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	781b      	ldrb	r3, [r3, #0]
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b006      	add	sp, #24
 8003194:	bd80      	pop	{r7, pc}

08003196 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8003196:	b590      	push	{r4, r7, lr}
 8003198:	b087      	sub	sp, #28
 800319a:	af02      	add	r7, sp, #8
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	000a      	movs	r2, r1
 80031a0:	1cbb      	adds	r3, r7, #2
 80031a2:	801a      	strh	r2, [r3, #0]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 80031a4:	1cbb      	adds	r3, r7, #2
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	0a1b      	lsrs	r3, r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	240c      	movs	r4, #12
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	701a      	strb	r2, [r3, #0]
 80031b4:	1cbb      	adds	r3, r7, #2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	889b      	ldrh	r3, [r3, #4]
 80031c6:	18db      	adds	r3, r3, r3
 80031c8:	b299      	uxth	r1, r3
 80031ca:	193a      	adds	r2, r7, r4
 80031cc:	231e      	movs	r3, #30
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2302      	movs	r3, #2
 80031d2:	f001 f9f7 	bl	80045c4 <HAL_I2C_Master_Transmit>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d001      	beq.n	80031de <sht3x_send_command+0x48>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <sht3x_send_command+0x4a>
	}

	return true;
 80031de:	2301      	movs	r3, #1
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b005      	add	sp, #20
 80031e6:	bd90      	pop	{r4, r7, pc}

080031e8 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	0002      	movs	r2, r0
 80031f0:	1dfb      	adds	r3, r7, #7
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	1dbb      	adds	r3, r7, #6
 80031f6:	1c0a      	adds	r2, r1, #0
 80031f8:	701a      	strb	r2, [r3, #0]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b29a      	uxth	r2, r3
 8003204:	1dbb      	adds	r3, r7, #6
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	b29b      	uxth	r3, r3
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af04      	add	r7, sp, #16
 800321e:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <sht3x_init+0x1e>
 800322a:	4b19      	ldr	r3, [pc, #100]	; (8003290 <sht3x_init+0x78>)
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <sht3x_init+0x7c>)
 800322e:	481a      	ldr	r0, [pc, #104]	; (8003298 <sht3x_init+0x80>)
 8003230:	2138      	movs	r1, #56	; 0x38
 8003232:	f003 fcc5 	bl	8006bc0 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	889b      	ldrh	r3, [r3, #4]
 800323e:	18db      	adds	r3, r3, r3
 8003240:	b299      	uxth	r1, r3
 8003242:	4a16      	ldr	r2, [pc, #88]	; (800329c <sht3x_init+0x84>)
 8003244:	231e      	movs	r3, #30
 8003246:	9302      	str	r3, [sp, #8]
 8003248:	2303      	movs	r3, #3
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	230c      	movs	r3, #12
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2302      	movs	r3, #2
 8003254:	f001 fbc6 	bl	80049e4 <HAL_I2C_Mem_Read>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d001      	beq.n	8003260 <sht3x_init+0x48>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 800325c:	2300      	movs	r3, #0
 800325e:	e012      	b.n	8003286 <sht3x_init+0x6e>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8003260:	250f      	movs	r5, #15
 8003262:	197c      	adds	r4, r7, r5
 8003264:	260c      	movs	r6, #12
 8003266:	19bb      	adds	r3, r7, r6
 8003268:	2102      	movs	r1, #2
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff ff51 	bl	8003112 <calculate_crc>
 8003270:	0003      	movs	r3, r0
 8003272:	7023      	strb	r3, [r4, #0]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8003274:	19bb      	adds	r3, r7, r6
 8003276:	789b      	ldrb	r3, [r3, #2]
 8003278:	197a      	adds	r2, r7, r5
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <sht3x_init+0x6c>
		return false;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <sht3x_init+0x6e>
	}

	return true;
 8003284:	2301      	movs	r3, #1
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b005      	add	sp, #20
 800328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	080097d4 	.word	0x080097d4
 8003294:	08009968 	.word	0x08009968
 8003298:	08009814 	.word	0x08009814
 800329c:	0000f32d 	.word	0x0000f32d

080032a0 <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	b08b      	sub	sp, #44	; 0x2c
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 80032ac:	4a44      	ldr	r2, [pc, #272]	; (80033c0 <sht3x_read_temperature_and_humidity+0x120>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	0011      	movs	r1, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7ff ff6f 	bl	8003196 <sht3x_send_command>

	HAL_Delay(1);
 80032b8:	2001      	movs	r0, #1
 80032ba:	f000 fafb 	bl	80038b4 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	889b      	ldrh	r3, [r3, #4]
 80032c6:	18db      	adds	r3, r3, r3
 80032c8:	b299      	uxth	r1, r3
 80032ca:	2314      	movs	r3, #20
 80032cc:	18fa      	adds	r2, r7, r3
 80032ce:	231e      	movs	r3, #30
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	2306      	movs	r3, #6
 80032d4:	f001 fa7e 	bl	80047d4 <HAL_I2C_Master_Receive>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d001      	beq.n	80032e0 <sht3x_read_temperature_and_humidity+0x40>
		return false;
 80032dc:	2300      	movs	r3, #0
 80032de:	e06a      	b.n	80033b6 <sht3x_read_temperature_and_humidity+0x116>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 80032e0:	261f      	movs	r6, #31
 80032e2:	19bc      	adds	r4, r7, r6
 80032e4:	2514      	movs	r5, #20
 80032e6:	197b      	adds	r3, r7, r5
 80032e8:	2102      	movs	r1, #2
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff ff11 	bl	8003112 <calculate_crc>
 80032f0:	0003      	movs	r3, r0
 80032f2:	7023      	strb	r3, [r4, #0]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 80032f4:	197b      	adds	r3, r7, r5
 80032f6:	3303      	adds	r3, #3
 80032f8:	221e      	movs	r2, #30
 80032fa:	18bc      	adds	r4, r7, r2
 80032fc:	2102      	movs	r1, #2
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff ff07 	bl	8003112 <calculate_crc>
 8003304:	0003      	movs	r3, r0
 8003306:	7023      	strb	r3, [r4, #0]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8003308:	0029      	movs	r1, r5
 800330a:	187b      	adds	r3, r7, r1
 800330c:	789b      	ldrb	r3, [r3, #2]
 800330e:	19ba      	adds	r2, r7, r6
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d106      	bne.n	8003324 <sht3x_read_temperature_and_humidity+0x84>
 8003316:	187b      	adds	r3, r7, r1
 8003318:	795b      	ldrb	r3, [r3, #5]
 800331a:	221e      	movs	r2, #30
 800331c:	18ba      	adds	r2, r7, r2
 800331e:	7812      	ldrb	r2, [r2, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <sht3x_read_temperature_and_humidity+0x88>
		return false;
 8003324:	2300      	movs	r3, #0
 8003326:	e046      	b.n	80033b6 <sht3x_read_temperature_and_humidity+0x116>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 8003328:	2414      	movs	r4, #20
 800332a:	193b      	adds	r3, r7, r4
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	193b      	adds	r3, r7, r4
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	0019      	movs	r1, r3
 8003334:	0010      	movs	r0, r2
 8003336:	f7ff ff57 	bl	80031e8 <uint8_to_uint16>
 800333a:	0003      	movs	r3, r0
 800333c:	001a      	movs	r2, r3
 800333e:	251c      	movs	r5, #28
 8003340:	197b      	adds	r3, r7, r5
 8003342:	801a      	strh	r2, [r3, #0]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 8003344:	193b      	adds	r3, r7, r4
 8003346:	78da      	ldrb	r2, [r3, #3]
 8003348:	193b      	adds	r3, r7, r4
 800334a:	791b      	ldrb	r3, [r3, #4]
 800334c:	261a      	movs	r6, #26
 800334e:	19bc      	adds	r4, r7, r6
 8003350:	0019      	movs	r1, r3
 8003352:	0010      	movs	r0, r2
 8003354:	f7ff ff48 	bl	80031e8 <uint8_to_uint16>
 8003358:	0003      	movs	r3, r0
 800335a:	8023      	strh	r3, [r4, #0]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 800335c:	197b      	adds	r3, r7, r5
 800335e:	2200      	movs	r2, #0
 8003360:	5e9b      	ldrsh	r3, [r3, r2]
 8003362:	0018      	movs	r0, r3
 8003364:	f7fd fda2 	bl	8000eac <__aeabi_i2f>
 8003368:	1c03      	adds	r3, r0, #0
 800336a:	4916      	ldr	r1, [pc, #88]	; (80033c4 <sht3x_read_temperature_and_humidity+0x124>)
 800336c:	1c18      	adds	r0, r3, #0
 800336e:	f7fd fabb 	bl	80008e8 <__aeabi_fmul>
 8003372:	1c03      	adds	r3, r0, #0
 8003374:	4914      	ldr	r1, [pc, #80]	; (80033c8 <sht3x_read_temperature_and_humidity+0x128>)
 8003376:	1c18      	adds	r0, r3, #0
 8003378:	f7fd f9aa 	bl	80006d0 <__aeabi_fdiv>
 800337c:	1c03      	adds	r3, r0, #0
 800337e:	4913      	ldr	r1, [pc, #76]	; (80033cc <sht3x_read_temperature_and_humidity+0x12c>)
 8003380:	1c18      	adds	r0, r3, #0
 8003382:	f7fd fbcb 	bl	8000b1c <__aeabi_fsub>
 8003386:	1c03      	adds	r3, r0, #0
 8003388:	1c1a      	adds	r2, r3, #0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	601a      	str	r2, [r3, #0]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800338e:	19bb      	adds	r3, r7, r6
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	0018      	movs	r0, r3
 8003394:	f7fd fdd0 	bl	8000f38 <__aeabi_ui2f>
 8003398:	1c03      	adds	r3, r0, #0
 800339a:	490d      	ldr	r1, [pc, #52]	; (80033d0 <sht3x_read_temperature_and_humidity+0x130>)
 800339c:	1c18      	adds	r0, r3, #0
 800339e:	f7fd faa3 	bl	80008e8 <__aeabi_fmul>
 80033a2:	1c03      	adds	r3, r0, #0
 80033a4:	4908      	ldr	r1, [pc, #32]	; (80033c8 <sht3x_read_temperature_and_humidity+0x128>)
 80033a6:	1c18      	adds	r0, r3, #0
 80033a8:	f7fd f992 	bl	80006d0 <__aeabi_fdiv>
 80033ac:	1c03      	adds	r3, r0, #0
 80033ae:	1c1a      	adds	r2, r3, #0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]

	return true;
 80033b4:	2301      	movs	r3, #1
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b009      	add	sp, #36	; 0x24
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	00002c06 	.word	0x00002c06
 80033c4:	432f0000 	.word	0x432f0000
 80033c8:	477fff00 	.word	0x477fff00
 80033cc:	42340000 	.word	0x42340000
 80033d0:	42c80000 	.word	0x42c80000

080033d4 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	000a      	movs	r2, r1
 80033de:	1cfb      	adds	r3, r7, #3
 80033e0:	701a      	strb	r2, [r3, #0]
	if (enable) {
 80033e2:	1cfb      	adds	r3, r7, #3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d007      	beq.n	80033fa <sht3x_set_header_enable+0x26>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <sht3x_set_header_enable+0x3c>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0011      	movs	r1, r2
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff fed0 	bl	8003196 <sht3x_send_command>
 80033f6:	0003      	movs	r3, r0
 80033f8:	e006      	b.n	8003408 <sht3x_set_header_enable+0x34>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 80033fa:	4a06      	ldr	r2, [pc, #24]	; (8003414 <sht3x_set_header_enable+0x40>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0011      	movs	r1, r2
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff fec8 	bl	8003196 <sht3x_send_command>
 8003406:	0003      	movs	r3, r0
	}
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}
 8003410:	0000306d 	.word	0x0000306d
 8003414:	00003066 	.word	0x00003066

08003418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <HAL_MspInit+0x24>)
 800341e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_MspInit+0x24>)
 8003422:	2101      	movs	r1, #1
 8003424:	430a      	orrs	r2, r1
 8003426:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_MspInit+0x24>)
 800342a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_MspInit+0x24>)
 800342e:	2180      	movs	r1, #128	; 0x80
 8003430:	0549      	lsls	r1, r1, #21
 8003432:	430a      	orrs	r2, r1
 8003434:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40021000 	.word	0x40021000

08003440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	240c      	movs	r4, #12
 800344a:	193b      	adds	r3, r7, r4
 800344c:	0018      	movs	r0, r3
 800344e:	2314      	movs	r3, #20
 8003450:	001a      	movs	r2, r3
 8003452:	2100      	movs	r1, #0
 8003454:	f003 fc0c 	bl	8006c70 <memset>
  if(hadc->Instance==ADC1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <HAL_ADC_MspInit+0x70>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d122      	bne.n	80034a8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <HAL_ADC_MspInit+0x74>)
 8003464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_ADC_MspInit+0x74>)
 8003468:	2180      	movs	r1, #128	; 0x80
 800346a:	0089      	lsls	r1, r1, #2
 800346c:	430a      	orrs	r2, r1
 800346e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_ADC_MspInit+0x74>)
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_ADC_MspInit+0x74>)
 8003476:	2101      	movs	r1, #1
 8003478:	430a      	orrs	r2, r1
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_ADC_MspInit+0x74>)
 800347e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003480:	2201      	movs	r2, #1
 8003482:	4013      	ands	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003488:	193b      	adds	r3, r7, r4
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800348e:	193b      	adds	r3, r7, r4
 8003490:	2203      	movs	r2, #3
 8003492:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	193b      	adds	r3, r7, r4
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	193a      	adds	r2, r7, r4
 800349c:	23a0      	movs	r3, #160	; 0xa0
 800349e:	05db      	lsls	r3, r3, #23
 80034a0:	0011      	movs	r1, r2
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 fe5c 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b009      	add	sp, #36	; 0x24
 80034ae:	bd90      	pop	{r4, r7, pc}
 80034b0:	40012400 	.word	0x40012400
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	240c      	movs	r4, #12
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	0018      	movs	r0, r3
 80034c6:	2314      	movs	r3, #20
 80034c8:	001a      	movs	r2, r3
 80034ca:	2100      	movs	r1, #0
 80034cc:	f003 fbd0 	bl	8006c70 <memset>
  if(hi2c->Instance==I2C1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_I2C_MspInit+0x80>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d129      	bne.n	800352e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <HAL_I2C_MspInit+0x84>)
 80034dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_I2C_MspInit+0x84>)
 80034e0:	2102      	movs	r1, #2
 80034e2:	430a      	orrs	r2, r1
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_I2C_MspInit+0x84>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	2202      	movs	r2, #2
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	22c0      	movs	r2, #192	; 0xc0
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034fa:	0021      	movs	r1, r4
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	2212      	movs	r2, #18
 8003500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003502:	187b      	adds	r3, r7, r1
 8003504:	2201      	movs	r2, #1
 8003506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003508:	187b      	adds	r3, r7, r1
 800350a:	2203      	movs	r2, #3
 800350c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800350e:	187b      	adds	r3, r7, r1
 8003510:	2204      	movs	r2, #4
 8003512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003514:	187b      	adds	r3, r7, r1
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_I2C_MspInit+0x88>)
 8003518:	0019      	movs	r1, r3
 800351a:	0010      	movs	r0, r2
 800351c:	f000 fe20 	bl	8004160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <HAL_I2C_MspInit+0x84>)
 8003522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_I2C_MspInit+0x84>)
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	0389      	lsls	r1, r1, #14
 800352a:	430a      	orrs	r2, r1
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b009      	add	sp, #36	; 0x24
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	40005400 	.word	0x40005400
 800353c:	40021000 	.word	0x40021000
 8003540:	50000400 	.word	0x50000400

08003544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	240c      	movs	r4, #12
 800354e:	193b      	adds	r3, r7, r4
 8003550:	0018      	movs	r0, r3
 8003552:	2314      	movs	r3, #20
 8003554:	001a      	movs	r2, r3
 8003556:	2100      	movs	r1, #0
 8003558:	f003 fb8a 	bl	8006c70 <memset>
  if(huart->Instance==USART2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_UART_MspInit+0x80>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d129      	bne.n	80035ba <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_UART_MspInit+0x84>)
 8003568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_UART_MspInit+0x84>)
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0289      	lsls	r1, r1, #10
 8003570:	430a      	orrs	r2, r1
 8003572:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_UART_MspInit+0x84>)
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_UART_MspInit+0x84>)
 800357a:	2101      	movs	r1, #1
 800357c:	430a      	orrs	r2, r1
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_UART_MspInit+0x84>)
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800358c:	0021      	movs	r1, r4
 800358e:	187b      	adds	r3, r7, r1
 8003590:	220c      	movs	r2, #12
 8003592:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	187b      	adds	r3, r7, r1
 8003596:	2202      	movs	r2, #2
 8003598:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	187b      	adds	r3, r7, r1
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	2203      	movs	r2, #3
 80035a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	2204      	movs	r2, #4
 80035aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ac:	187a      	adds	r2, r7, r1
 80035ae:	23a0      	movs	r3, #160	; 0xa0
 80035b0:	05db      	lsls	r3, r3, #23
 80035b2:	0011      	movs	r1, r2
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fdd3 	bl	8004160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b009      	add	sp, #36	; 0x24
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	40004400 	.word	0x40004400
 80035c8:	40021000 	.word	0x40021000

080035cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d0:	e7fe      	b.n	80035d0 <NMI_Handler+0x4>

080035d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035d6:	e7fe      	b.n	80035d6 <HardFault_Handler+0x4>

080035d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f0:	f000 f944 	bl	800387c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	af00      	add	r7, sp, #0
	return 1;
 80035fe:	2301      	movs	r3, #1
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_kill>:

int _kill(int pid, int sig)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003610:	f003 faf4 	bl	8006bfc <__errno>
 8003614:	0003      	movs	r3, r0
 8003616:	2216      	movs	r2, #22
 8003618:	601a      	str	r2, [r3, #0]
	return -1;
 800361a:	2301      	movs	r3, #1
 800361c:	425b      	negs	r3, r3
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	b002      	add	sp, #8
 8003624:	bd80      	pop	{r7, pc}

08003626 <_exit>:

void _exit (int status)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800362e:	2301      	movs	r3, #1
 8003630:	425a      	negs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0011      	movs	r1, r2
 8003636:	0018      	movs	r0, r3
 8003638:	f7ff ffe5 	bl	8003606 <_kill>
	while (1) {}		/* Make sure we hang here */
 800363c:	e7fe      	b.n	800363c <_exit+0x16>

0800363e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e00a      	b.n	8003666 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003650:	e000      	b.n	8003654 <_read+0x16>
 8003652:	bf00      	nop
 8003654:	0001      	movs	r1, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	b2ca      	uxtb	r2, r1
 800365e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3301      	adds	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	dbf0      	blt.n	8003650 <_read+0x12>
	}

return len;
 800366e:	687b      	ldr	r3, [r7, #4]
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b006      	add	sp, #24
 8003676:	bd80      	pop	{r7, pc}

08003678 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e009      	b.n	800369e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	60ba      	str	r2, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	0018      	movs	r0, r3
 8003694:	f7ff fd24 	bl	80030e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	3301      	adds	r3, #1
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	dbf1      	blt.n	800368a <_write+0x12>
	}
	return len;
 80036a6:	687b      	ldr	r3, [r7, #4]
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b006      	add	sp, #24
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_close>:

int _close(int file)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	return -1;
 80036b8:	2301      	movs	r3, #1
 80036ba:	425b      	negs	r3, r3
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	0192      	lsls	r2, r2, #6
 80036d4:	605a      	str	r2, [r3, #4]
	return 0;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_isatty>:

int _isatty(int file)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	return 1;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
	return 0;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b004      	add	sp, #16
 8003706:	bd80      	pop	{r7, pc}

08003708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003710:	4a14      	ldr	r2, [pc, #80]	; (8003764 <_sbrk+0x5c>)
 8003712:	4b15      	ldr	r3, [pc, #84]	; (8003768 <_sbrk+0x60>)
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800371c:	4b13      	ldr	r3, [pc, #76]	; (800376c <_sbrk+0x64>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d102      	bne.n	800372a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <_sbrk+0x64>)
 8003726:	4a12      	ldr	r2, [pc, #72]	; (8003770 <_sbrk+0x68>)
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800372a:	4b10      	ldr	r3, [pc, #64]	; (800376c <_sbrk+0x64>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	18d3      	adds	r3, r2, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	429a      	cmp	r2, r3
 8003736:	d207      	bcs.n	8003748 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003738:	f003 fa60 	bl	8006bfc <__errno>
 800373c:	0003      	movs	r3, r0
 800373e:	220c      	movs	r2, #12
 8003740:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003742:	2301      	movs	r3, #1
 8003744:	425b      	negs	r3, r3
 8003746:	e009      	b.n	800375c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <_sbrk+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <_sbrk+0x64>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	18d2      	adds	r2, r2, r3
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <_sbrk+0x64>)
 8003758:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b006      	add	sp, #24
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20005000 	.word	0x20005000
 8003768:	00000400 	.word	0x00000400
 800376c:	200001f8 	.word	0x200001f8
 8003770:	20000348 	.word	0x20000348

08003774 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003780:	480d      	ldr	r0, [pc, #52]	; (80037b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003782:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003784:	480d      	ldr	r0, [pc, #52]	; (80037bc <LoopForever+0x6>)
  ldr r1, =_edata
 8003786:	490e      	ldr	r1, [pc, #56]	; (80037c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003788:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <LoopForever+0xe>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800378c:	e002      	b.n	8003794 <LoopCopyDataInit>

0800378e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003792:	3304      	adds	r3, #4

08003794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003798:	d3f9      	bcc.n	800378e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379a:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800379c:	4c0b      	ldr	r4, [pc, #44]	; (80037cc <LoopForever+0x16>)
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a0:	e001      	b.n	80037a6 <LoopFillZerobss>

080037a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a4:	3204      	adds	r2, #4

080037a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a8:	d3fb      	bcc.n	80037a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037aa:	f7ff ffe3 	bl	8003774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037ae:	f003 fa3b 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b2:	f7ff fa87 	bl	8002cc4 <main>

080037b6 <LoopForever>:

LoopForever:
    b LoopForever
 80037b6:	e7fe      	b.n	80037b6 <LoopForever>
   ldr   r0, =_estack
 80037b8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80037bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80037c4:	08009dd8 	.word	0x08009dd8
  ldr r2, =_sbss
 80037c8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80037cc:	20000344 	.word	0x20000344

080037d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d0:	e7fe      	b.n	80037d0 <ADC1_COMP_IRQHandler>
	...

080037d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_Init+0x3c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_Init+0x3c>)
 80037e6:	2140      	movs	r1, #64	; 0x40
 80037e8:	430a      	orrs	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ec:	2000      	movs	r0, #0
 80037ee:	f000 f811 	bl	8003814 <HAL_InitTick>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d003      	beq.n	80037fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e001      	b.n	8003802 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037fe:	f7ff fe0b 	bl	8003418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	781b      	ldrb	r3, [r3, #0]
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	40022000 	.word	0x40022000

08003814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_InitTick+0x5c>)
 800381e:	681c      	ldr	r4, [r3, #0]
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_InitTick+0x60>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	0019      	movs	r1, r3
 8003826:	23fa      	movs	r3, #250	; 0xfa
 8003828:	0098      	lsls	r0, r3, #2
 800382a:	f7fc fc89 	bl	8000140 <__udivsi3>
 800382e:	0003      	movs	r3, r0
 8003830:	0019      	movs	r1, r3
 8003832:	0020      	movs	r0, r4
 8003834:	f7fc fc84 	bl	8000140 <__udivsi3>
 8003838:	0003      	movs	r3, r0
 800383a:	0018      	movs	r0, r3
 800383c:	f000 fc83 	bl	8004146 <HAL_SYSTICK_Config>
 8003840:	1e03      	subs	r3, r0, #0
 8003842:	d001      	beq.n	8003848 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e00f      	b.n	8003868 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d80b      	bhi.n	8003866 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	2301      	movs	r3, #1
 8003852:	425b      	negs	r3, r3
 8003854:	2200      	movs	r2, #0
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fc60 	bl	800411c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_InitTick+0x64>)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b003      	add	sp, #12
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	20000000 	.word	0x20000000
 8003874:	20000008 	.word	0x20000008
 8003878:	20000004 	.word	0x20000004

0800387c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_IncTick+0x1c>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	001a      	movs	r2, r3
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_IncTick+0x20>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	18d2      	adds	r2, r2, r3
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_IncTick+0x20>)
 800388e:	601a      	str	r2, [r3, #0]
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	20000008 	.word	0x20000008
 800389c:	20000330 	.word	0x20000330

080038a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  return uwTick;
 80038a4:	4b02      	ldr	r3, [pc, #8]	; (80038b0 <HAL_GetTick+0x10>)
 80038a6:	681b      	ldr	r3, [r3, #0]
}
 80038a8:	0018      	movs	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	20000330 	.word	0x20000330

080038b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038bc:	f7ff fff0 	bl	80038a0 <HAL_GetTick>
 80038c0:	0003      	movs	r3, r0
 80038c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3301      	adds	r3, #1
 80038cc:	d005      	beq.n	80038da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ce:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_Delay+0x44>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	001a      	movs	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	f7ff ffe0 	bl	80038a0 <HAL_GetTick>
 80038e0:	0002      	movs	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d8f7      	bhi.n	80038dc <HAL_Delay+0x28>
  {
  }
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	20000008 	.word	0x20000008

080038fc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e159      	b.n	8003bc2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2250      	movs	r2, #80	; 0x50
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff fd8a 	bl	8003440 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	2210      	movs	r2, #16
 8003932:	4013      	ands	r3, r2
 8003934:	2b10      	cmp	r3, #16
 8003936:	d005      	beq.n	8003944 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2204      	movs	r2, #4
 8003940:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003942:	d00b      	beq.n	800395c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	2210      	movs	r2, #16
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2250      	movs	r2, #80	; 0x50
 8003954:	2100      	movs	r1, #0
 8003956:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e132      	b.n	8003bc2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	4a9a      	ldr	r2, [pc, #616]	; (8003bcc <HAL_ADC_Init+0x2d0>)
 8003962:	4013      	ands	r3, r2
 8003964:	2202      	movs	r2, #2
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2203      	movs	r2, #3
 8003974:	4013      	ands	r3, r2
 8003976:	2b01      	cmp	r3, #1
 8003978:	d108      	bne.n	800398c <HAL_ADC_Init+0x90>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	2b01      	cmp	r3, #1
 8003986:	d101      	bne.n	800398c <HAL_ADC_Init+0x90>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_ADC_Init+0x92>
 800398c:	2300      	movs	r3, #0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d149      	bne.n	8003a26 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	23c0      	movs	r3, #192	; 0xc0
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	429a      	cmp	r2, r3
 800399c:	d00b      	beq.n	80039b6 <HAL_ADC_Init+0xba>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	05db      	lsls	r3, r3, #23
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d005      	beq.n	80039b6 <HAL_ADC_Init+0xba>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d111      	bne.n	80039da <HAL_ADC_Init+0xde>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0092      	lsls	r2, r2, #2
 80039c2:	0892      	lsrs	r2, r2, #2
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6919      	ldr	r1, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	611a      	str	r2, [r3, #16]
 80039d8:	e014      	b.n	8003a04 <HAL_ADC_Init+0x108>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	0892      	lsrs	r2, r2, #2
 80039e8:	611a      	str	r2, [r3, #16]
 80039ea:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 80039f0:	4978      	ldr	r1, [pc, #480]	; (8003bd4 <HAL_ADC_Init+0x2d8>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 80039f8:	6819      	ldr	r1, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4b74      	ldr	r3, [pc, #464]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2118      	movs	r1, #24
 8003a10:	438a      	bics	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68d9      	ldr	r1, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003a26:	4b6a      	ldr	r3, [pc, #424]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b69      	ldr	r3, [pc, #420]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 8003a2c:	496a      	ldr	r1, [pc, #424]	; (8003bd8 <HAL_ADC_Init+0x2dc>)
 8003a2e:	400a      	ands	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003a32:	4b67      	ldr	r3, [pc, #412]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	065a      	lsls	r2, r3, #25
 8003a3c:	4b64      	ldr	r3, [pc, #400]	; (8003bd0 <HAL_ADC_Init+0x2d4>)
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	055b      	lsls	r3, r3, #21
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0549      	lsls	r1, r1, #21
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	495b      	ldr	r1, [pc, #364]	; (8003bdc <HAL_ADC_Init+0x2e0>)
 8003a6e:	400a      	ands	r2, r1
 8003a70:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68d9      	ldr	r1, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_Init+0x18c>
 8003a84:	2304      	movs	r3, #4
 8003a86:	e000      	b.n	8003a8a <HAL_ADC_Init+0x18e>
 8003a88:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003a8a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2020      	movs	r0, #32
 8003a90:	5c1b      	ldrb	r3, [r3, r0]
 8003a92:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003a94:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	202c      	movs	r0, #44	; 0x2c
 8003a9a:	5c1b      	ldrb	r3, [r3, r0]
 8003a9c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a9e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003aa4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003aac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003ab4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac2:	23c2      	movs	r3, #194	; 0xc2
 8003ac4:	33ff      	adds	r3, #255	; 0xff
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d00b      	beq.n	8003ae2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68d9      	ldr	r1, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2221      	movs	r2, #33	; 0x21
 8003ae6:	5c9b      	ldrb	r3, [r3, r2]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d11a      	bne.n	8003b22 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	5c9b      	ldrb	r3, [r3, r2]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	0249      	lsls	r1, r1, #9
 8003b04:	430a      	orrs	r2, r1
 8003b06:	60da      	str	r2, [r3, #12]
 8003b08:	e00b      	b.n	8003b22 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0e:	2220      	movs	r2, #32
 8003b10:	431a      	orrs	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d11f      	bne.n	8003b6a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	492a      	ldr	r1, [pc, #168]	; (8003be0 <HAL_ADC_Init+0x2e4>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6919      	ldr	r1, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b48:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003b4e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2101      	movs	r1, #1
 8003b64:	430a      	orrs	r2, r1
 8003b66:	611a      	str	r2, [r3, #16]
 8003b68:	e00e      	b.n	8003b88 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	2201      	movs	r2, #1
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2101      	movs	r1, #1
 8003b84:	438a      	bics	r2, r1
 8003b86:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2107      	movs	r1, #7
 8003b94:	438a      	bics	r2, r1
 8003b96:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6959      	ldr	r1, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	4393      	bics	r3, r2
 8003bb8:	2201      	movs	r2, #1
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	fffffefd 	.word	0xfffffefd
 8003bd0:	40012708 	.word	0x40012708
 8003bd4:	ffc3ffff 	.word	0xffc3ffff
 8003bd8:	fdffffff 	.word	0xfdffffff
 8003bdc:	fffe0219 	.word	0xfffe0219
 8003be0:	fffffc03 	.word	0xfffffc03

08003be4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bec:	230f      	movs	r3, #15
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d138      	bne.n	8003c72 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2250      	movs	r2, #80	; 0x50
 8003c04:	5c9b      	ldrb	r3, [r3, r2]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_Start+0x2a>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e038      	b.n	8003c80 <HAL_ADC_Start+0x9c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2250      	movs	r2, #80	; 0x50
 8003c12:	2101      	movs	r1, #1
 8003c14:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d007      	beq.n	8003c2e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003c1e:	230f      	movs	r3, #15
 8003c20:	18fc      	adds	r4, r7, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f000 f95f 	bl	8003ee8 <ADC_Enable>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c2e:	230f      	movs	r3, #15
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d120      	bne.n	8003c7a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <HAL_ADC_Start+0xa4>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	0052      	lsls	r2, r2, #1
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2250      	movs	r2, #80	; 0x50
 8003c54:	2100      	movs	r1, #0
 8003c56:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	221c      	movs	r2, #28
 8003c5e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c72:	230f      	movs	r3, #15
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b005      	add	sp, #20
 8003c86:	bd90      	pop	{r4, r7, pc}
 8003c88:	fffff0fe 	.word	0xfffff0fe

08003c8c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d102      	bne.n	8003cac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e014      	b.n	8003cd6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10b      	bne.n	8003cd2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2250      	movs	r2, #80	; 0x50
 8003cca:	2100      	movs	r1, #0
 8003ccc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e072      	b.n	8003db8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cd6:	f7ff fde3 	bl	80038a0 <HAL_GetTick>
 8003cda:	0003      	movs	r3, r0
 8003cdc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003cde:	e01f      	b.n	8003d20 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	d01c      	beq.n	8003d20 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_ADC_PollForConversion+0x70>
 8003cec:	f7ff fdd8 	bl	80038a0 <HAL_GetTick>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d211      	bcs.n	8003d20 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4013      	ands	r3, r2
 8003d06:	d10b      	bne.n	8003d20 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2250      	movs	r2, #80	; 0x50
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e04b      	b.n	8003db8 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d0d9      	beq.n	8003ce0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	0092      	lsls	r2, r2, #2
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	23c0      	movs	r3, #192	; 0xc0
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	4013      	ands	r3, r2
 8003d46:	d12e      	bne.n	8003da6 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d129      	bne.n	8003da6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d122      	bne.n	8003da6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2204      	movs	r2, #4
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d110      	bne.n	8003d8e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	210c      	movs	r1, #12
 8003d78:	438a      	bics	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	4a0f      	ldr	r2, [pc, #60]	; (8003dc0 <HAL_ADC_PollForConversion+0x134>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	2201      	movs	r2, #1
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
 8003d8c:	e00b      	b.n	8003da6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	2220      	movs	r2, #32
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	2201      	movs	r2, #1
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	220c      	movs	r2, #12
 8003db4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b004      	add	sp, #16
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	fffffefe 	.word	0xfffffefe

08003dc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b002      	add	sp, #8
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2250      	movs	r2, #80	; 0x50
 8003dea:	5c9b      	ldrb	r3, [r3, r2]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e06c      	b.n	8003ece <HAL_ADC_ConfigChannel+0xf2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2250      	movs	r2, #80	; 0x50
 8003df8:	2101      	movs	r1, #1
 8003dfa:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	2204      	movs	r2, #4
 8003e04:	4013      	ands	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2250      	movs	r2, #80	; 0x50
 8003e18:	2100      	movs	r1, #0
 8003e1a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e056      	b.n	8003ece <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a2c      	ldr	r2, [pc, #176]	; (8003ed8 <HAL_ADC_ConfigChannel+0xfc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d028      	beq.n	8003e7c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	035b      	lsls	r3, r3, #13
 8003e36:	0b5a      	lsrs	r2, r3, #13
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	02db      	lsls	r3, r3, #11
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003e52:	2180      	movs	r1, #128	; 0x80
 8003e54:	0409      	lsls	r1, r1, #16
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003e5a:	200a      	movs	r0, #10
 8003e5c:	f000 f8ac 	bl	8003fb8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	029b      	lsls	r3, r3, #10
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d02b      	beq.n	8003ec4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b1a      	ldr	r3, [pc, #104]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003e72:	2180      	movs	r1, #128	; 0x80
 8003e74:	03c9      	lsls	r1, r1, #15
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e023      	b.n	8003ec4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	035b      	lsls	r3, r3, #13
 8003e88:	0b5b      	lsrs	r3, r3, #13
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	400a      	ands	r2, r1
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	02db      	lsls	r3, r3, #11
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d005      	beq.n	8003eac <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003ea6:	490e      	ldr	r1, [pc, #56]	; (8003ee0 <HAL_ADC_ConfigChannel+0x104>)
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	; 0x80
 8003eb2:	029b      	lsls	r3, r3, #10
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d005      	beq.n	8003ec4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <HAL_ADC_ConfigChannel+0x100>)
 8003ebe:	4909      	ldr	r1, [pc, #36]	; (8003ee4 <HAL_ADC_ConfigChannel+0x108>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2250      	movs	r2, #80	; 0x50
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	00001001 	.word	0x00001001
 8003edc:	40012708 	.word	0x40012708
 8003ee0:	ff7fffff 	.word	0xff7fffff
 8003ee4:	ffbfffff 	.word	0xffbfffff

08003ee8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2203      	movs	r2, #3
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <ADC_Enable+0x2c>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <ADC_Enable+0x2c>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <ADC_Enable+0x2e>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d146      	bne.n	8003fa8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a24      	ldr	r2, [pc, #144]	; (8003fb4 <ADC_Enable+0xcc>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	2201      	movs	r2, #1
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e033      	b.n	8003faa <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003f52:	2001      	movs	r0, #1
 8003f54:	f000 f830 	bl	8003fb8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f58:	f7ff fca2 	bl	80038a0 <HAL_GetTick>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f60:	e01b      	b.n	8003f9a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f62:	f7ff fc9d 	bl	80038a0 <HAL_GetTick>
 8003f66:	0002      	movs	r2, r0
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b0a      	cmp	r3, #10
 8003f6e:	d914      	bls.n	8003f9a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2201      	movs	r2, #1
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d00d      	beq.n	8003f9a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	2210      	movs	r2, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	2201      	movs	r2, #1
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e007      	b.n	8003faa <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d1dc      	bne.n	8003f62 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	80000017 	.word	0x80000017

08003fb8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <ADC_DelayMicroSecond+0x38>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	490b      	ldr	r1, [pc, #44]	; (8003ff4 <ADC_DelayMicroSecond+0x3c>)
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fc f8ba 	bl	8000140 <__udivsi3>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	001a      	movs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4353      	muls	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003fd6:	e002      	b.n	8003fde <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f9      	bne.n	8003fd8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b004      	add	sp, #16
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	20000000 	.word	0x20000000
 8003ff4:	000f4240 	.word	0x000f4240

08003ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	0002      	movs	r2, r0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	1dfb      	adds	r3, r7, #7
 8004004:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004006:	1dfb      	adds	r3, r7, #7
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b7f      	cmp	r3, #127	; 0x7f
 800400c:	d828      	bhi.n	8004060 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <__NVIC_SetPriority+0xd4>)
 8004010:	1dfb      	adds	r3, r7, #7
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b25b      	sxtb	r3, r3
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	33c0      	adds	r3, #192	; 0xc0
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	589b      	ldr	r3, [r3, r2]
 800401e:	1dfa      	adds	r2, r7, #7
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	0011      	movs	r1, r2
 8004024:	2203      	movs	r2, #3
 8004026:	400a      	ands	r2, r1
 8004028:	00d2      	lsls	r2, r2, #3
 800402a:	21ff      	movs	r1, #255	; 0xff
 800402c:	4091      	lsls	r1, r2
 800402e:	000a      	movs	r2, r1
 8004030:	43d2      	mvns	r2, r2
 8004032:	401a      	ands	r2, r3
 8004034:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	019b      	lsls	r3, r3, #6
 800403a:	22ff      	movs	r2, #255	; 0xff
 800403c:	401a      	ands	r2, r3
 800403e:	1dfb      	adds	r3, r7, #7
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	0018      	movs	r0, r3
 8004044:	2303      	movs	r3, #3
 8004046:	4003      	ands	r3, r0
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800404c:	481f      	ldr	r0, [pc, #124]	; (80040cc <__NVIC_SetPriority+0xd4>)
 800404e:	1dfb      	adds	r3, r7, #7
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b25b      	sxtb	r3, r3
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	430a      	orrs	r2, r1
 8004058:	33c0      	adds	r3, #192	; 0xc0
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800405e:	e031      	b.n	80040c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004060:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <__NVIC_SetPriority+0xd8>)
 8004062:	1dfb      	adds	r3, r7, #7
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	0019      	movs	r1, r3
 8004068:	230f      	movs	r3, #15
 800406a:	400b      	ands	r3, r1
 800406c:	3b08      	subs	r3, #8
 800406e:	089b      	lsrs	r3, r3, #2
 8004070:	3306      	adds	r3, #6
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	18d3      	adds	r3, r2, r3
 8004076:	3304      	adds	r3, #4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	1dfa      	adds	r2, r7, #7
 800407c:	7812      	ldrb	r2, [r2, #0]
 800407e:	0011      	movs	r1, r2
 8004080:	2203      	movs	r2, #3
 8004082:	400a      	ands	r2, r1
 8004084:	00d2      	lsls	r2, r2, #3
 8004086:	21ff      	movs	r1, #255	; 0xff
 8004088:	4091      	lsls	r1, r2
 800408a:	000a      	movs	r2, r1
 800408c:	43d2      	mvns	r2, r2
 800408e:	401a      	ands	r2, r3
 8004090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	22ff      	movs	r2, #255	; 0xff
 8004098:	401a      	ands	r2, r3
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	0018      	movs	r0, r3
 80040a0:	2303      	movs	r3, #3
 80040a2:	4003      	ands	r3, r0
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040a8:	4809      	ldr	r0, [pc, #36]	; (80040d0 <__NVIC_SetPriority+0xd8>)
 80040aa:	1dfb      	adds	r3, r7, #7
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	001c      	movs	r4, r3
 80040b0:	230f      	movs	r3, #15
 80040b2:	4023      	ands	r3, r4
 80040b4:	3b08      	subs	r3, #8
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	430a      	orrs	r2, r1
 80040ba:	3306      	adds	r3, #6
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	18c3      	adds	r3, r0, r3
 80040c0:	3304      	adds	r3, #4
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b003      	add	sp, #12
 80040ca:	bd90      	pop	{r4, r7, pc}
 80040cc:	e000e100 	.word	0xe000e100
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	1e5a      	subs	r2, r3, #1
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	045b      	lsls	r3, r3, #17
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d301      	bcc.n	80040ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040e8:	2301      	movs	r3, #1
 80040ea:	e010      	b.n	800410e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <SysTick_Config+0x44>)
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	3a01      	subs	r2, #1
 80040f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040f4:	2301      	movs	r3, #1
 80040f6:	425b      	negs	r3, r3
 80040f8:	2103      	movs	r1, #3
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff ff7c 	bl	8003ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <SysTick_Config+0x44>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004106:	4b04      	ldr	r3, [pc, #16]	; (8004118 <SysTick_Config+0x44>)
 8004108:	2207      	movs	r2, #7
 800410a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800410c:	2300      	movs	r3, #0
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b002      	add	sp, #8
 8004114:	bd80      	pop	{r7, pc}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	e000e010 	.word	0xe000e010

0800411c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	210f      	movs	r1, #15
 8004128:	187b      	adds	r3, r7, r1
 800412a:	1c02      	adds	r2, r0, #0
 800412c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	187b      	adds	r3, r7, r1
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b25b      	sxtb	r3, r3
 8004136:	0011      	movs	r1, r2
 8004138:	0018      	movs	r0, r3
 800413a:	f7ff ff5d 	bl	8003ff8 <__NVIC_SetPriority>
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b004      	add	sp, #16
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f7ff ffbf 	bl	80040d4 <SysTick_Config>
 8004156:	0003      	movs	r3, r0
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b002      	add	sp, #8
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004176:	e155      	b.n	8004424 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4091      	lsls	r1, r2
 8004182:	000a      	movs	r2, r1
 8004184:	4013      	ands	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d100      	bne.n	8004190 <HAL_GPIO_Init+0x30>
 800418e:	e146      	b.n	800441e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	4013      	ands	r3, r2
 8004198:	2b01      	cmp	r3, #1
 800419a:	d005      	beq.n	80041a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d130      	bne.n	800420a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	2203      	movs	r2, #3
 80041b4:	409a      	lsls	r2, r3
 80041b6:	0013      	movs	r3, r2
 80041b8:	43da      	mvns	r2, r3
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	409a      	lsls	r2, r3
 80041ca:	0013      	movs	r3, r2
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041de:	2201      	movs	r2, #1
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
 80041e4:	0013      	movs	r3, r2
 80041e6:	43da      	mvns	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	2201      	movs	r2, #1
 80041f6:	401a      	ands	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	4013      	ands	r3, r2
 8004212:	2b03      	cmp	r3, #3
 8004214:	d017      	beq.n	8004246 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	409a      	lsls	r2, r3
 8004224:	0013      	movs	r3, r2
 8004226:	43da      	mvns	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	409a      	lsls	r2, r3
 8004238:	0013      	movs	r3, r2
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2203      	movs	r2, #3
 800424c:	4013      	ands	r3, r2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d123      	bne.n	800429a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	08da      	lsrs	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3208      	adds	r2, #8
 800425a:	0092      	lsls	r2, r2, #2
 800425c:	58d3      	ldr	r3, [r2, r3]
 800425e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2207      	movs	r2, #7
 8004264:	4013      	ands	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	220f      	movs	r2, #15
 800426a:	409a      	lsls	r2, r3
 800426c:	0013      	movs	r3, r2
 800426e:	43da      	mvns	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2107      	movs	r1, #7
 800427e:	400b      	ands	r3, r1
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	409a      	lsls	r2, r3
 8004284:	0013      	movs	r3, r2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	08da      	lsrs	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3208      	adds	r2, #8
 8004294:	0092      	lsls	r2, r2, #2
 8004296:	6939      	ldr	r1, [r7, #16]
 8004298:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	2203      	movs	r2, #3
 80042a6:	409a      	lsls	r2, r3
 80042a8:	0013      	movs	r3, r2
 80042aa:	43da      	mvns	r2, r3
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2203      	movs	r2, #3
 80042b8:	401a      	ands	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	0013      	movs	r3, r2
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	23c0      	movs	r3, #192	; 0xc0
 80042d4:	029b      	lsls	r3, r3, #10
 80042d6:	4013      	ands	r3, r2
 80042d8:	d100      	bne.n	80042dc <HAL_GPIO_Init+0x17c>
 80042da:	e0a0      	b.n	800441e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042dc:	4b57      	ldr	r3, [pc, #348]	; (800443c <HAL_GPIO_Init+0x2dc>)
 80042de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e0:	4b56      	ldr	r3, [pc, #344]	; (800443c <HAL_GPIO_Init+0x2dc>)
 80042e2:	2101      	movs	r1, #1
 80042e4:	430a      	orrs	r2, r1
 80042e6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80042e8:	4a55      	ldr	r2, [pc, #340]	; (8004440 <HAL_GPIO_Init+0x2e0>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3302      	adds	r3, #2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	589b      	ldr	r3, [r3, r2]
 80042f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2203      	movs	r2, #3
 80042fa:	4013      	ands	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	409a      	lsls	r2, r3
 8004302:	0013      	movs	r3, r2
 8004304:	43da      	mvns	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	23a0      	movs	r3, #160	; 0xa0
 8004310:	05db      	lsls	r3, r3, #23
 8004312:	429a      	cmp	r2, r3
 8004314:	d01f      	beq.n	8004356 <HAL_GPIO_Init+0x1f6>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a4a      	ldr	r2, [pc, #296]	; (8004444 <HAL_GPIO_Init+0x2e4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d019      	beq.n	8004352 <HAL_GPIO_Init+0x1f2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a49      	ldr	r2, [pc, #292]	; (8004448 <HAL_GPIO_Init+0x2e8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <HAL_GPIO_Init+0x1ee>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a48      	ldr	r2, [pc, #288]	; (800444c <HAL_GPIO_Init+0x2ec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00d      	beq.n	800434a <HAL_GPIO_Init+0x1ea>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a47      	ldr	r2, [pc, #284]	; (8004450 <HAL_GPIO_Init+0x2f0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <HAL_GPIO_Init+0x1e6>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a46      	ldr	r2, [pc, #280]	; (8004454 <HAL_GPIO_Init+0x2f4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <HAL_GPIO_Init+0x1e2>
 800433e:	2305      	movs	r3, #5
 8004340:	e00a      	b.n	8004358 <HAL_GPIO_Init+0x1f8>
 8004342:	2306      	movs	r3, #6
 8004344:	e008      	b.n	8004358 <HAL_GPIO_Init+0x1f8>
 8004346:	2304      	movs	r3, #4
 8004348:	e006      	b.n	8004358 <HAL_GPIO_Init+0x1f8>
 800434a:	2303      	movs	r3, #3
 800434c:	e004      	b.n	8004358 <HAL_GPIO_Init+0x1f8>
 800434e:	2302      	movs	r3, #2
 8004350:	e002      	b.n	8004358 <HAL_GPIO_Init+0x1f8>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_GPIO_Init+0x1f8>
 8004356:	2300      	movs	r3, #0
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	2103      	movs	r1, #3
 800435c:	400a      	ands	r2, r1
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	4093      	lsls	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004368:	4935      	ldr	r1, [pc, #212]	; (8004440 <HAL_GPIO_Init+0x2e0>)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	3302      	adds	r3, #2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004376:	4b38      	ldr	r3, [pc, #224]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	43da      	mvns	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4013      	ands	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	025b      	lsls	r3, r3, #9
 800438e:	4013      	ands	r3, r2
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	43da      	mvns	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	029b      	lsls	r3, r3, #10
 80043b8:	4013      	ands	r3, r2
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	43da      	mvns	r2, r3
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	035b      	lsls	r3, r3, #13
 80043e2:	4013      	ands	r3, r2
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80043f4:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	039b      	lsls	r3, r3, #14
 800440c:	4013      	ands	r3, r2
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <HAL_GPIO_Init+0x2f8>)
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	40da      	lsrs	r2, r3
 800442c:	1e13      	subs	r3, r2, #0
 800442e:	d000      	beq.n	8004432 <HAL_GPIO_Init+0x2d2>
 8004430:	e6a2      	b.n	8004178 <HAL_GPIO_Init+0x18>
  }
}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b006      	add	sp, #24
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40021000 	.word	0x40021000
 8004440:	40010000 	.word	0x40010000
 8004444:	50000400 	.word	0x50000400
 8004448:	50000800 	.word	0x50000800
 800444c:	50000c00 	.word	0x50000c00
 8004450:	50001000 	.word	0x50001000
 8004454:	50001c00 	.word	0x50001c00
 8004458:	40010400 	.word	0x40010400

0800445c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	0008      	movs	r0, r1
 8004466:	0011      	movs	r1, r2
 8004468:	1cbb      	adds	r3, r7, #2
 800446a:	1c02      	adds	r2, r0, #0
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	1c7b      	adds	r3, r7, #1
 8004470:	1c0a      	adds	r2, r1, #0
 8004472:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004474:	1c7b      	adds	r3, r7, #1
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800447c:	1cbb      	adds	r3, r7, #2
 800447e:	881a      	ldrh	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004484:	e003      	b.n	800448e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004486:	1cbb      	adds	r3, r7, #2
 8004488:	881a      	ldrh	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e082      	b.n	80045b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2241      	movs	r2, #65	; 0x41
 80044ae:	5c9b      	ldrb	r3, [r3, r2]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2240      	movs	r2, #64	; 0x40
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fe fff9 	bl	80034b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2241      	movs	r2, #65	; 0x41
 80044ca:	2124      	movs	r1, #36	; 0x24
 80044cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	438a      	bics	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4934      	ldr	r1, [pc, #208]	; (80045b8 <HAL_I2C_Init+0x120>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4931      	ldr	r1, [pc, #196]	; (80045bc <HAL_I2C_Init+0x124>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d108      	bne.n	8004516 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	0209      	lsls	r1, r1, #8
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	e007      	b.n	8004526 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2184      	movs	r1, #132	; 0x84
 8004520:	0209      	lsls	r1, r1, #8
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d104      	bne.n	8004538 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	0112      	lsls	r2, r2, #4
 8004536:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	491f      	ldr	r1, [pc, #124]	; (80045c0 <HAL_I2C_Init+0x128>)
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	491a      	ldr	r1, [pc, #104]	; (80045bc <HAL_I2C_Init+0x124>)
 8004554:	400a      	ands	r2, r1
 8004556:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	431a      	orrs	r2, r3
 8004562:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69d9      	ldr	r1, [r3, #28]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1a      	ldr	r2, [r3, #32]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2101      	movs	r1, #1
 800458e:	430a      	orrs	r2, r1
 8004590:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2241      	movs	r2, #65	; 0x41
 800459c:	2120      	movs	r1, #32
 800459e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2242      	movs	r2, #66	; 0x42
 80045aa:	2100      	movs	r1, #0
 80045ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	f0ffffff 	.word	0xf0ffffff
 80045bc:	ffff7fff 	.word	0xffff7fff
 80045c0:	02008000 	.word	0x02008000

080045c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	0008      	movs	r0, r1
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	0019      	movs	r1, r3
 80045d2:	230a      	movs	r3, #10
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	1c02      	adds	r2, r0, #0
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	2308      	movs	r3, #8
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	1c0a      	adds	r2, r1, #0
 80045e0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2241      	movs	r2, #65	; 0x41
 80045e6:	5c9b      	ldrb	r3, [r3, r2]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d000      	beq.n	80045f0 <HAL_I2C_Master_Transmit+0x2c>
 80045ee:	e0e7      	b.n	80047c0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	5c9b      	ldrb	r3, [r3, r2]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_I2C_Master_Transmit+0x3a>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e0e1      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x1fe>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2240      	movs	r2, #64	; 0x40
 8004602:	2101      	movs	r1, #1
 8004604:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004606:	f7ff f94b 	bl	80038a0 <HAL_GetTick>
 800460a:	0003      	movs	r3, r0
 800460c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	0219      	lsls	r1, r3, #8
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	2319      	movs	r3, #25
 800461a:	2201      	movs	r2, #1
 800461c:	f000 fb9a 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	d001      	beq.n	8004628 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0cc      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2241      	movs	r2, #65	; 0x41
 800462c:	2121      	movs	r1, #33	; 0x21
 800462e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2242      	movs	r2, #66	; 0x42
 8004634:	2110      	movs	r1, #16
 8004636:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2208      	movs	r2, #8
 8004648:	18ba      	adds	r2, r7, r2
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2bff      	cmp	r3, #255	; 0xff
 800465c:	d911      	bls.n	8004682 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	22ff      	movs	r2, #255	; 0xff
 8004662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	b2da      	uxtb	r2, r3
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	045c      	lsls	r4, r3, #17
 800466e:	230a      	movs	r3, #10
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	8819      	ldrh	r1, [r3, #0]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_I2C_Master_Transmit+0x208>)
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	0023      	movs	r3, r4
 800467c:	f000 fd0a 	bl	8005094 <I2C_TransferConfig>
 8004680:	e075      	b.n	800476e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	b2da      	uxtb	r2, r3
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	049c      	lsls	r4, r3, #18
 8004696:	230a      	movs	r3, #10
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	8819      	ldrh	r1, [r3, #0]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	4b4b      	ldr	r3, [pc, #300]	; (80047cc <HAL_I2C_Master_Transmit+0x208>)
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	f000 fcf6 	bl	8005094 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046a8:	e061      	b.n	800476e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 fb8e 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80046b6:	1e03      	subs	r3, r0, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e081      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d03a      	beq.n	800476e <HAL_I2C_Master_Transmit+0x1aa>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d136      	bne.n	800476e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	0013      	movs	r3, r2
 800470a:	2200      	movs	r2, #0
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	f000 fb21 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e053      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	2bff      	cmp	r3, #255	; 0xff
 8004722:	d911      	bls.n	8004748 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	22ff      	movs	r2, #255	; 0xff
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	b2da      	uxtb	r2, r3
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	045c      	lsls	r4, r3, #17
 8004734:	230a      	movs	r3, #10
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	8819      	ldrh	r1, [r3, #0]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	2300      	movs	r3, #0
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	0023      	movs	r3, r4
 8004742:	f000 fca7 	bl	8005094 <I2C_TransferConfig>
 8004746:	e012      	b.n	800476e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	b2da      	uxtb	r2, r3
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	049c      	lsls	r4, r3, #18
 800475c:	230a      	movs	r3, #10
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	8819      	ldrh	r1, [r3, #0]
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	0023      	movs	r3, r4
 800476a:	f000 fc93 	bl	8005094 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d198      	bne.n	80046aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	0018      	movs	r0, r3
 8004780:	f000 fb66 	bl	8004e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e01a      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2220      	movs	r2, #32
 8004792:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	490c      	ldr	r1, [pc, #48]	; (80047d0 <HAL_I2C_Master_Transmit+0x20c>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2241      	movs	r2, #65	; 0x41
 80047a8:	2120      	movs	r1, #32
 80047aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2242      	movs	r2, #66	; 0x42
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2240      	movs	r2, #64	; 0x40
 80047b8:	2100      	movs	r1, #0
 80047ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b007      	add	sp, #28
 80047c8:	bd90      	pop	{r4, r7, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	80002000 	.word	0x80002000
 80047d0:	fe00e800 	.word	0xfe00e800

080047d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80047d4:	b590      	push	{r4, r7, lr}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	0008      	movs	r0, r1
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	0019      	movs	r1, r3
 80047e2:	230a      	movs	r3, #10
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	1c02      	adds	r2, r0, #0
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	2308      	movs	r3, #8
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	1c0a      	adds	r2, r1, #0
 80047f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2241      	movs	r2, #65	; 0x41
 80047f6:	5c9b      	ldrb	r3, [r3, r2]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d000      	beq.n	8004800 <HAL_I2C_Master_Receive+0x2c>
 80047fe:	e0e8      	b.n	80049d2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	5c9b      	ldrb	r3, [r3, r2]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_I2C_Master_Receive+0x3a>
 800480a:	2302      	movs	r3, #2
 800480c:	e0e2      	b.n	80049d4 <HAL_I2C_Master_Receive+0x200>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2240      	movs	r2, #64	; 0x40
 8004812:	2101      	movs	r1, #1
 8004814:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004816:	f7ff f843 	bl	80038a0 <HAL_GetTick>
 800481a:	0003      	movs	r3, r0
 800481c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	0219      	lsls	r1, r3, #8
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2319      	movs	r3, #25
 800482a:	2201      	movs	r2, #1
 800482c:	f000 fa92 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004830:	1e03      	subs	r3, r0, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0cd      	b.n	80049d4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2241      	movs	r2, #65	; 0x41
 800483c:	2122      	movs	r1, #34	; 0x22
 800483e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2242      	movs	r2, #66	; 0x42
 8004844:	2110      	movs	r1, #16
 8004846:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2208      	movs	r2, #8
 8004858:	18ba      	adds	r2, r7, r2
 800485a:	8812      	ldrh	r2, [r2, #0]
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2bff      	cmp	r3, #255	; 0xff
 800486c:	d911      	bls.n	8004892 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	22ff      	movs	r2, #255	; 0xff
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	b2da      	uxtb	r2, r3
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	045c      	lsls	r4, r3, #17
 800487e:	230a      	movs	r3, #10
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	8819      	ldrh	r1, [r3, #0]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	4b55      	ldr	r3, [pc, #340]	; (80049dc <HAL_I2C_Master_Receive+0x208>)
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	0023      	movs	r3, r4
 800488c:	f000 fc02 	bl	8005094 <I2C_TransferConfig>
 8004890:	e076      	b.n	8004980 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	049c      	lsls	r4, r3, #18
 80048a6:	230a      	movs	r3, #10
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	8819      	ldrh	r1, [r3, #0]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	4b4b      	ldr	r3, [pc, #300]	; (80049dc <HAL_I2C_Master_Receive+0x208>)
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	0023      	movs	r3, r4
 80048b4:	f000 fbee 	bl	8005094 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80048b8:	e062      	b.n	8004980 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f000 fb01 	bl	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048c6:	1e03      	subs	r3, r0, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e082      	b.n	80049d4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d03a      	beq.n	8004980 <HAL_I2C_Master_Receive+0x1ac>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	d136      	bne.n	8004980 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	0013      	movs	r3, r2
 800491c:	2200      	movs	r2, #0
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	f000 fa18 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004924:	1e03      	subs	r3, r0, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e053      	b.n	80049d4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29b      	uxth	r3, r3
 8004932:	2bff      	cmp	r3, #255	; 0xff
 8004934:	d911      	bls.n	800495a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	b2da      	uxtb	r2, r3
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	045c      	lsls	r4, r3, #17
 8004946:	230a      	movs	r3, #10
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	8819      	ldrh	r1, [r3, #0]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	2300      	movs	r3, #0
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	0023      	movs	r3, r4
 8004954:	f000 fb9e 	bl	8005094 <I2C_TransferConfig>
 8004958:	e012      	b.n	8004980 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	b2da      	uxtb	r2, r3
 800496a:	2380      	movs	r3, #128	; 0x80
 800496c:	049c      	lsls	r4, r3, #18
 800496e:	230a      	movs	r3, #10
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	8819      	ldrh	r1, [r3, #0]
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	2300      	movs	r3, #0
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	0023      	movs	r3, r4
 800497c:	f000 fb8a 	bl	8005094 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d197      	bne.n	80048ba <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 fa5d 	bl	8004e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004996:	1e03      	subs	r3, r0, #0
 8004998:	d001      	beq.n	800499e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e01a      	b.n	80049d4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2220      	movs	r2, #32
 80049a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	490b      	ldr	r1, [pc, #44]	; (80049e0 <HAL_I2C_Master_Receive+0x20c>)
 80049b2:	400a      	ands	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2241      	movs	r2, #65	; 0x41
 80049ba:	2120      	movs	r1, #32
 80049bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2242      	movs	r2, #66	; 0x42
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2240      	movs	r2, #64	; 0x40
 80049ca:	2100      	movs	r1, #0
 80049cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	e000      	b.n	80049d4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
  }
}
 80049d4:	0018      	movs	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	b007      	add	sp, #28
 80049da:	bd90      	pop	{r4, r7, pc}
 80049dc:	80002400 	.word	0x80002400
 80049e0:	fe00e800 	.word	0xfe00e800

080049e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	000c      	movs	r4, r1
 80049ee:	0010      	movs	r0, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	230a      	movs	r3, #10
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	1c22      	adds	r2, r4, #0
 80049f8:	801a      	strh	r2, [r3, #0]
 80049fa:	2308      	movs	r3, #8
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	1c02      	adds	r2, r0, #0
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	1dbb      	adds	r3, r7, #6
 8004a04:	1c0a      	adds	r2, r1, #0
 8004a06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2241      	movs	r2, #65	; 0x41
 8004a0c:	5c9b      	ldrb	r3, [r3, r2]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d000      	beq.n	8004a16 <HAL_I2C_Mem_Read+0x32>
 8004a14:	e110      	b.n	8004c38 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <HAL_I2C_Mem_Read+0x42>
 8004a1c:	232c      	movs	r3, #44	; 0x2c
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d105      	bne.n	8004a32 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	0092      	lsls	r2, r2, #2
 8004a2c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e103      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2240      	movs	r2, #64	; 0x40
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2C_Mem_Read+0x5c>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e0fc      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2240      	movs	r2, #64	; 0x40
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a48:	f7fe ff2a 	bl	80038a0 <HAL_GetTick>
 8004a4c:	0003      	movs	r3, r0
 8004a4e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	0219      	lsls	r1, r3, #8
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	2319      	movs	r3, #25
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f000 f979 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e0e7      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2241      	movs	r2, #65	; 0x41
 8004a6e:	2122      	movs	r1, #34	; 0x22
 8004a70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2242      	movs	r2, #66	; 0x42
 8004a76:	2140      	movs	r1, #64	; 0x40
 8004a78:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	222c      	movs	r2, #44	; 0x2c
 8004a8a:	18ba      	adds	r2, r7, r2
 8004a8c:	8812      	ldrh	r2, [r2, #0]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a96:	1dbb      	adds	r3, r7, #6
 8004a98:	881c      	ldrh	r4, [r3, #0]
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	881a      	ldrh	r2, [r3, #0]
 8004aa0:	230a      	movs	r3, #10
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	8819      	ldrh	r1, [r3, #0]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	0023      	movs	r3, r4
 8004ab2:	f000 f8cb 	bl	8004c4c <I2C_RequestMemoryRead>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	2100      	movs	r1, #0
 8004ac0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0b9      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2bff      	cmp	r3, #255	; 0xff
 8004ace:	d911      	bls.n	8004af4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	22ff      	movs	r2, #255	; 0xff
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	045c      	lsls	r4, r3, #17
 8004ae0:	230a      	movs	r3, #10
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	8819      	ldrh	r1, [r3, #0]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	4b56      	ldr	r3, [pc, #344]	; (8004c44 <HAL_I2C_Mem_Read+0x260>)
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	0023      	movs	r3, r4
 8004aee:	f000 fad1 	bl	8005094 <I2C_TransferConfig>
 8004af2:	e012      	b.n	8004b1a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	049c      	lsls	r4, r3, #18
 8004b08:	230a      	movs	r3, #10
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	8819      	ldrh	r1, [r3, #0]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	4b4c      	ldr	r3, [pc, #304]	; (8004c44 <HAL_I2C_Mem_Read+0x260>)
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	0023      	movs	r3, r4
 8004b16:	f000 fabd 	bl	8005094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	0013      	movs	r3, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	2104      	movs	r1, #4
 8004b28:	f000 f914 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004b2c:	1e03      	subs	r3, r0, #0
 8004b2e:	d001      	beq.n	8004b34 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e082      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d03a      	beq.n	8004be6 <HAL_I2C_Mem_Read+0x202>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d136      	bne.n	8004be6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	0013      	movs	r3, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	2180      	movs	r1, #128	; 0x80
 8004b86:	f000 f8e5 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	1e03      	subs	r3, r0, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e053      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2bff      	cmp	r3, #255	; 0xff
 8004b9a:	d911      	bls.n	8004bc0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	22ff      	movs	r2, #255	; 0xff
 8004ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	045c      	lsls	r4, r3, #17
 8004bac:	230a      	movs	r3, #10
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	8819      	ldrh	r1, [r3, #0]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	0023      	movs	r3, r4
 8004bba:	f000 fa6b 	bl	8005094 <I2C_TransferConfig>
 8004bbe:	e012      	b.n	8004be6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	049c      	lsls	r4, r3, #18
 8004bd4:	230a      	movs	r3, #10
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	8819      	ldrh	r1, [r3, #0]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	0023      	movs	r3, r4
 8004be2:	f000 fa57 	bl	8005094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d194      	bne.n	8004b1a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 f92a 	bl	8004e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e01a      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	490c      	ldr	r1, [pc, #48]	; (8004c48 <HAL_I2C_Mem_Read+0x264>)
 8004c18:	400a      	ands	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2241      	movs	r2, #65	; 0x41
 8004c20:	2120      	movs	r1, #32
 8004c22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2242      	movs	r2, #66	; 0x42
 8004c28:	2100      	movs	r1, #0
 8004c2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2240      	movs	r2, #64	; 0x40
 8004c30:	2100      	movs	r1, #0
 8004c32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e000      	b.n	8004c3a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
  }
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b007      	add	sp, #28
 8004c40:	bd90      	pop	{r4, r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	80002400 	.word	0x80002400
 8004c48:	fe00e800 	.word	0xfe00e800

08004c4c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c4c:	b5b0      	push	{r4, r5, r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	000c      	movs	r4, r1
 8004c56:	0010      	movs	r0, r2
 8004c58:	0019      	movs	r1, r3
 8004c5a:	250a      	movs	r5, #10
 8004c5c:	197b      	adds	r3, r7, r5
 8004c5e:	1c22      	adds	r2, r4, #0
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	2308      	movs	r3, #8
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	1c02      	adds	r2, r0, #0
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	1dbb      	adds	r3, r7, #6
 8004c6c:	1c0a      	adds	r2, r1, #0
 8004c6e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c70:	1dbb      	adds	r3, r7, #6
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	197b      	adds	r3, r7, r5
 8004c78:	8819      	ldrh	r1, [r3, #0]
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <I2C_RequestMemoryRead+0xc0>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	2300      	movs	r3, #0
 8004c82:	f000 fa07 	bl	8005094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c88:	6a39      	ldr	r1, [r7, #32]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 f8a0 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d001      	beq.n	8004c9a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e033      	b.n	8004d02 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c9a:	1dbb      	adds	r3, r7, #6
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d107      	bne.n	8004cb2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca2:	2308      	movs	r3, #8
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	629a      	str	r2, [r3, #40]	; 0x28
 8004cb0:	e019      	b.n	8004ce6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc6:	6a39      	ldr	r1, [r7, #32]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 f881 	bl	8004dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cd0:	1e03      	subs	r3, r0, #0
 8004cd2:	d001      	beq.n	8004cd8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e014      	b.n	8004d02 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd8:	2308      	movs	r3, #8
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce6:	6a3a      	ldr	r2, [r7, #32]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	0013      	movs	r3, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	2140      	movs	r1, #64	; 0x40
 8004cf4:	f000 f82e 	bl	8004d54 <I2C_WaitOnFlagUntilTimeout>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d001      	beq.n	8004d00 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bdb0      	pop	{r4, r5, r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	80002000 	.word	0x80002000

08004d10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	4013      	ands	r3, r2
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d103      	bne.n	8004d2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2201      	movs	r2, #1
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d007      	beq.n	8004d4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2101      	movs	r1, #1
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	619a      	str	r2, [r3, #24]
  }
}
 8004d4c:	46c0      	nop			; (mov r8, r8)
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	b002      	add	sp, #8
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	1dfb      	adds	r3, r7, #7
 8004d62:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d64:	e021      	b.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	d01e      	beq.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6c:	f7fe fd98 	bl	80038a0 <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d302      	bcc.n	8004d82 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d113      	bne.n	8004daa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	2220      	movs	r2, #32
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2241      	movs	r2, #65	; 0x41
 8004d92:	2120      	movs	r1, #32
 8004d94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2242      	movs	r2, #66	; 0x42
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2240      	movs	r2, #64	; 0x40
 8004da2:	2100      	movs	r1, #0
 8004da4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e00f      	b.n	8004dca <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	4013      	ands	r3, r2
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	425a      	negs	r2, r3
 8004dba:	4153      	adcs	r3, r2
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	001a      	movs	r2, r3
 8004dc0:	1dfb      	adds	r3, r7, #7
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d0ce      	beq.n	8004d66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	60f8      	str	r0, [r7, #12]
 8004dda:	60b9      	str	r1, [r7, #8]
 8004ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dde:	e02b      	b.n	8004e38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 f8da 	bl	8004fa0 <I2C_IsAcknowledgeFailed>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d001      	beq.n	8004df4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e029      	b.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3301      	adds	r3, #1
 8004df8:	d01e      	beq.n	8004e38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fe fd51 	bl	80038a0 <HAL_GetTick>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d113      	bne.n	8004e38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	2220      	movs	r2, #32
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2241      	movs	r2, #65	; 0x41
 8004e20:	2120      	movs	r1, #32
 8004e22:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2242      	movs	r2, #66	; 0x42
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	2100      	movs	r1, #0
 8004e32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e007      	b.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d1cc      	bne.n	8004de0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	0018      	movs	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b004      	add	sp, #16
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e5c:	e028      	b.n	8004eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 f89b 	bl	8004fa0 <I2C_IsAcknowledgeFailed>
 8004e6a:	1e03      	subs	r3, r0, #0
 8004e6c:	d001      	beq.n	8004e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e026      	b.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e72:	f7fe fd15 	bl	80038a0 <HAL_GetTick>
 8004e76:	0002      	movs	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d113      	bne.n	8004eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2241      	movs	r2, #65	; 0x41
 8004e98:	2120      	movs	r1, #32
 8004e9a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2242      	movs	r2, #66	; 0x42
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2240      	movs	r2, #64	; 0x40
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e007      	b.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d1cf      	bne.n	8004e5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b004      	add	sp, #16
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ed4:	e055      	b.n	8004f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 f85f 	bl	8004fa0 <I2C_IsAcknowledgeFailed>
 8004ee2:	1e03      	subs	r3, r0, #0
 8004ee4:	d001      	beq.n	8004eea <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e053      	b.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b20      	cmp	r3, #32
 8004ef6:	d129      	bne.n	8004f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2204      	movs	r2, #4
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d105      	bne.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e03f      	b.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2220      	movs	r2, #32
 8004f18:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	491d      	ldr	r1, [pc, #116]	; (8004f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004f26:	400a      	ands	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2241      	movs	r2, #65	; 0x41
 8004f34:	2120      	movs	r1, #32
 8004f36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2242      	movs	r2, #66	; 0x42
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2240      	movs	r2, #64	; 0x40
 8004f44:	2100      	movs	r1, #0
 8004f46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e022      	b.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4c:	f7fe fca8 	bl	80038a0 <HAL_GetTick>
 8004f50:	0002      	movs	r2, r0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d302      	bcc.n	8004f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10f      	bne.n	8004f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	2220      	movs	r2, #32
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2241      	movs	r2, #65	; 0x41
 8004f72:	2120      	movs	r1, #32
 8004f74:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2240      	movs	r2, #64	; 0x40
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e007      	b.n	8004f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2204      	movs	r2, #4
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d1a2      	bne.n	8004ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b004      	add	sp, #16
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			; (mov r8, r8)
 8004f9c:	fe00e800 	.word	0xfe00e800

08004fa0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d164      	bne.n	8005084 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	049b      	lsls	r3, r3, #18
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	2380      	movs	r3, #128	; 0x80
 8004fc8:	049b      	lsls	r3, r3, #18
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d02b      	beq.n	8005026 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2180      	movs	r1, #128	; 0x80
 8004fda:	01c9      	lsls	r1, r1, #7
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fe0:	e021      	b.n	8005026 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	d01e      	beq.n	8005026 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fe fc5a 	bl	80038a0 <HAL_GetTick>
 8004fec:	0002      	movs	r2, r0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_IsAcknowledgeFailed+0x5e>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d113      	bne.n	8005026 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	2220      	movs	r2, #32
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2241      	movs	r2, #65	; 0x41
 800500e:	2120      	movs	r1, #32
 8005010:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2242      	movs	r2, #66	; 0x42
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2240      	movs	r2, #64	; 0x40
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e02f      	b.n	8005086 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2220      	movs	r2, #32
 800502e:	4013      	ands	r3, r2
 8005030:	2b20      	cmp	r3, #32
 8005032:	d1d6      	bne.n	8004fe2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2210      	movs	r2, #16
 800503a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2220      	movs	r2, #32
 8005042:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	0018      	movs	r0, r3
 8005048:	f7ff fe62 	bl	8004d10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	490e      	ldr	r1, [pc, #56]	; (8005090 <I2C_IsAcknowledgeFailed+0xf0>)
 8005058:	400a      	ands	r2, r1
 800505a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	2204      	movs	r2, #4
 8005062:	431a      	orrs	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2241      	movs	r2, #65	; 0x41
 800506c:	2120      	movs	r1, #32
 800506e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2242      	movs	r2, #66	; 0x42
 8005074:	2100      	movs	r1, #0
 8005076:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2240      	movs	r2, #64	; 0x40
 800507c:	2100      	movs	r1, #0
 800507e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b004      	add	sp, #16
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	fe00e800 	.word	0xfe00e800

08005094 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005094:	b590      	push	{r4, r7, lr}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	0008      	movs	r0, r1
 800509e:	0011      	movs	r1, r2
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	240a      	movs	r4, #10
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	1c02      	adds	r2, r0, #0
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	2009      	movs	r0, #9
 80050ac:	183b      	adds	r3, r7, r0
 80050ae:	1c0a      	adds	r2, r1, #0
 80050b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	0d51      	lsrs	r1, r2, #21
 80050bc:	2280      	movs	r2, #128	; 0x80
 80050be:	00d2      	lsls	r2, r2, #3
 80050c0:	400a      	ands	r2, r1
 80050c2:	490e      	ldr	r1, [pc, #56]	; (80050fc <I2C_TransferConfig+0x68>)
 80050c4:	430a      	orrs	r2, r1
 80050c6:	43d2      	mvns	r2, r2
 80050c8:	401a      	ands	r2, r3
 80050ca:	0011      	movs	r1, r2
 80050cc:	193b      	adds	r3, r7, r4
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	059b      	lsls	r3, r3, #22
 80050d2:	0d9a      	lsrs	r2, r3, #22
 80050d4:	183b      	adds	r3, r7, r0
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	0418      	lsls	r0, r3, #16
 80050da:	23ff      	movs	r3, #255	; 0xff
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	4003      	ands	r3, r0
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	431a      	orrs	r2, r3
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	431a      	orrs	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b005      	add	sp, #20
 80050f8:	bd90      	pop	{r4, r7, pc}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	03ff63ff 	.word	0x03ff63ff

08005100 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2241      	movs	r2, #65	; 0x41
 800510e:	5c9b      	ldrb	r3, [r3, r2]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b20      	cmp	r3, #32
 8005114:	d138      	bne.n	8005188 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2240      	movs	r2, #64	; 0x40
 800511a:	5c9b      	ldrb	r3, [r3, r2]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005120:	2302      	movs	r3, #2
 8005122:	e032      	b.n	800518a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2240      	movs	r2, #64	; 0x40
 8005128:	2101      	movs	r1, #1
 800512a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2241      	movs	r2, #65	; 0x41
 8005130:	2124      	movs	r1, #36	; 0x24
 8005132:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2101      	movs	r1, #1
 8005140:	438a      	bics	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4911      	ldr	r1, [pc, #68]	; (8005194 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005150:	400a      	ands	r2, r1
 8005152:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2101      	movs	r1, #1
 8005170:	430a      	orrs	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2241      	movs	r2, #65	; 0x41
 8005178:	2120      	movs	r1, #32
 800517a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2240      	movs	r2, #64	; 0x40
 8005180:	2100      	movs	r1, #0
 8005182:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	0018      	movs	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	ffffefff 	.word	0xffffefff

08005198 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2241      	movs	r2, #65	; 0x41
 80051a6:	5c9b      	ldrb	r3, [r3, r2]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d139      	bne.n	8005222 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2240      	movs	r2, #64	; 0x40
 80051b2:	5c9b      	ldrb	r3, [r3, r2]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e033      	b.n	8005224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	2101      	movs	r1, #1
 80051c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2241      	movs	r2, #65	; 0x41
 80051c8:	2124      	movs	r1, #36	; 0x24
 80051ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2101      	movs	r1, #1
 80051d8:	438a      	bics	r2, r1
 80051da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a11      	ldr	r2, [pc, #68]	; (800522c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	021b      	lsls	r3, r3, #8
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2101      	movs	r1, #1
 800520a:	430a      	orrs	r2, r1
 800520c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2241      	movs	r2, #65	; 0x41
 8005212:	2120      	movs	r1, #32
 8005214:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2240      	movs	r2, #64	; 0x40
 800521a:	2100      	movs	r1, #0
 800521c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e000      	b.n	8005224 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005222:	2302      	movs	r3, #2
  }
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b004      	add	sp, #16
 800522a:	bd80      	pop	{r7, pc}
 800522c:	fffff0ff 	.word	0xfffff0ff

08005230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005230:	b5b0      	push	{r4, r5, r7, lr}
 8005232:	b08a      	sub	sp, #40	; 0x28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f000 fbbf 	bl	80059c2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005244:	4bc9      	ldr	r3, [pc, #804]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	220c      	movs	r2, #12
 800524a:	4013      	ands	r3, r2
 800524c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800524e:	4bc7      	ldr	r3, [pc, #796]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	025b      	lsls	r3, r3, #9
 8005256:	4013      	ands	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2201      	movs	r2, #1
 8005260:	4013      	ands	r3, r2
 8005262:	d100      	bne.n	8005266 <HAL_RCC_OscConfig+0x36>
 8005264:	e07e      	b.n	8005364 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d007      	beq.n	800527c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d112      	bne.n	8005298 <HAL_RCC_OscConfig+0x68>
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	025b      	lsls	r3, r3, #9
 8005278:	429a      	cmp	r2, r3
 800527a:	d10d      	bne.n	8005298 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527c:	4bbb      	ldr	r3, [pc, #748]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	029b      	lsls	r3, r3, #10
 8005284:	4013      	ands	r3, r2
 8005286:	d100      	bne.n	800528a <HAL_RCC_OscConfig+0x5a>
 8005288:	e06b      	b.n	8005362 <HAL_RCC_OscConfig+0x132>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d167      	bne.n	8005362 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f000 fb95 	bl	80059c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	2380      	movs	r3, #128	; 0x80
 800529e:	025b      	lsls	r3, r3, #9
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_OscConfig+0x84>
 80052a4:	4bb1      	ldr	r3, [pc, #708]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4bb0      	ldr	r3, [pc, #704]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	0249      	lsls	r1, r1, #9
 80052ae:	430a      	orrs	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e027      	b.n	8005304 <HAL_RCC_OscConfig+0xd4>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	23a0      	movs	r3, #160	; 0xa0
 80052ba:	02db      	lsls	r3, r3, #11
 80052bc:	429a      	cmp	r2, r3
 80052be:	d10e      	bne.n	80052de <HAL_RCC_OscConfig+0xae>
 80052c0:	4baa      	ldr	r3, [pc, #680]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4ba9      	ldr	r3, [pc, #676]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052c6:	2180      	movs	r1, #128	; 0x80
 80052c8:	02c9      	lsls	r1, r1, #11
 80052ca:	430a      	orrs	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	4ba7      	ldr	r3, [pc, #668]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	4ba6      	ldr	r3, [pc, #664]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052d4:	2180      	movs	r1, #128	; 0x80
 80052d6:	0249      	lsls	r1, r1, #9
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	e012      	b.n	8005304 <HAL_RCC_OscConfig+0xd4>
 80052de:	4ba3      	ldr	r3, [pc, #652]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	4ba2      	ldr	r3, [pc, #648]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052e4:	49a2      	ldr	r1, [pc, #648]	; (8005570 <HAL_RCC_OscConfig+0x340>)
 80052e6:	400a      	ands	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	4ba0      	ldr	r3, [pc, #640]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	025b      	lsls	r3, r3, #9
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4b9c      	ldr	r3, [pc, #624]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4b9b      	ldr	r3, [pc, #620]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80052fe:	499d      	ldr	r1, [pc, #628]	; (8005574 <HAL_RCC_OscConfig+0x344>)
 8005300:	400a      	ands	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d015      	beq.n	8005338 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fe fac8 	bl	80038a0 <HAL_GetTick>
 8005310:	0003      	movs	r3, r0
 8005312:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005314:	e009      	b.n	800532a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005316:	f7fe fac3 	bl	80038a0 <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b64      	cmp	r3, #100	; 0x64
 8005322:	d902      	bls.n	800532a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	f000 fb4c 	bl	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800532a:	4b90      	ldr	r3, [pc, #576]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	029b      	lsls	r3, r3, #10
 8005332:	4013      	ands	r3, r2
 8005334:	d0ef      	beq.n	8005316 <HAL_RCC_OscConfig+0xe6>
 8005336:	e015      	b.n	8005364 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fe fab2 	bl	80038a0 <HAL_GetTick>
 800533c:	0003      	movs	r3, r0
 800533e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005342:	f7fe faad 	bl	80038a0 <HAL_GetTick>
 8005346:	0002      	movs	r2, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b64      	cmp	r3, #100	; 0x64
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e336      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005354:	4b85      	ldr	r3, [pc, #532]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	4013      	ands	r3, r2
 800535e:	d1f0      	bne.n	8005342 <HAL_RCC_OscConfig+0x112>
 8005360:	e000      	b.n	8005364 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005362:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2202      	movs	r2, #2
 800536a:	4013      	ands	r3, r2
 800536c:	d100      	bne.n	8005370 <HAL_RCC_OscConfig+0x140>
 800536e:	e099      	b.n	80054a4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	2220      	movs	r2, #32
 800537a:	4013      	ands	r3, r2
 800537c:	d009      	beq.n	8005392 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800537e:	4b7b      	ldr	r3, [pc, #492]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4b7a      	ldr	r3, [pc, #488]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005384:	2120      	movs	r1, #32
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	2220      	movs	r2, #32
 800538e:	4393      	bics	r3, r2
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b0c      	cmp	r3, #12
 800539c:	d13e      	bne.n	800541c <HAL_RCC_OscConfig+0x1ec>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d13b      	bne.n	800541c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80053a4:	4b71      	ldr	r3, [pc, #452]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2204      	movs	r2, #4
 80053aa:	4013      	ands	r3, r2
 80053ac:	d004      	beq.n	80053b8 <HAL_RCC_OscConfig+0x188>
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e304      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b8:	4b6c      	ldr	r3, [pc, #432]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4a6e      	ldr	r2, [pc, #440]	; (8005578 <HAL_RCC_OscConfig+0x348>)
 80053be:	4013      	ands	r3, r2
 80053c0:	0019      	movs	r1, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	021a      	lsls	r2, r3, #8
 80053c8:	4b68      	ldr	r3, [pc, #416]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053ce:	4b67      	ldr	r3, [pc, #412]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2209      	movs	r2, #9
 80053d4:	4393      	bics	r3, r2
 80053d6:	0019      	movs	r1, r3
 80053d8:	4b64      	ldr	r3, [pc, #400]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053e0:	f000 fc42 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 80053e4:	0001      	movs	r1, r0
 80053e6:	4b61      	ldr	r3, [pc, #388]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	091b      	lsrs	r3, r3, #4
 80053ec:	220f      	movs	r2, #15
 80053ee:	4013      	ands	r3, r2
 80053f0:	4a62      	ldr	r2, [pc, #392]	; (800557c <HAL_RCC_OscConfig+0x34c>)
 80053f2:	5cd3      	ldrb	r3, [r2, r3]
 80053f4:	000a      	movs	r2, r1
 80053f6:	40da      	lsrs	r2, r3
 80053f8:	4b61      	ldr	r3, [pc, #388]	; (8005580 <HAL_RCC_OscConfig+0x350>)
 80053fa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80053fc:	4b61      	ldr	r3, [pc, #388]	; (8005584 <HAL_RCC_OscConfig+0x354>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2513      	movs	r5, #19
 8005402:	197c      	adds	r4, r7, r5
 8005404:	0018      	movs	r0, r3
 8005406:	f7fe fa05 	bl	8003814 <HAL_InitTick>
 800540a:	0003      	movs	r3, r0
 800540c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800540e:	197b      	adds	r3, r7, r5
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d046      	beq.n	80054a4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005416:	197b      	adds	r3, r7, r5
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	e2d2      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	2b00      	cmp	r3, #0
 8005420:	d027      	beq.n	8005472 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005422:	4b52      	ldr	r3, [pc, #328]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2209      	movs	r2, #9
 8005428:	4393      	bics	r3, r2
 800542a:	0019      	movs	r1, r3
 800542c:	4b4f      	ldr	r3, [pc, #316]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 800542e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005434:	f7fe fa34 	bl	80038a0 <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543e:	f7fe fa2f 	bl	80038a0 <HAL_GetTick>
 8005442:	0002      	movs	r2, r0
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e2b8      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005450:	4b46      	ldr	r3, [pc, #280]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2204      	movs	r2, #4
 8005456:	4013      	ands	r3, r2
 8005458:	d0f1      	beq.n	800543e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545a:	4b44      	ldr	r3, [pc, #272]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4a46      	ldr	r2, [pc, #280]	; (8005578 <HAL_RCC_OscConfig+0x348>)
 8005460:	4013      	ands	r3, r2
 8005462:	0019      	movs	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	021a      	lsls	r2, r3, #8
 800546a:	4b40      	ldr	r3, [pc, #256]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 800546c:	430a      	orrs	r2, r1
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	e018      	b.n	80054a4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005472:	4b3e      	ldr	r3, [pc, #248]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	4b3d      	ldr	r3, [pc, #244]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005478:	2101      	movs	r1, #1
 800547a:	438a      	bics	r2, r1
 800547c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547e:	f7fe fa0f 	bl	80038a0 <HAL_GetTick>
 8005482:	0003      	movs	r3, r0
 8005484:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005488:	f7fe fa0a 	bl	80038a0 <HAL_GetTick>
 800548c:	0002      	movs	r2, r0
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e293      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800549a:	4b34      	ldr	r3, [pc, #208]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2204      	movs	r2, #4
 80054a0:	4013      	ands	r3, r2
 80054a2:	d1f1      	bne.n	8005488 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2210      	movs	r2, #16
 80054aa:	4013      	ands	r3, r2
 80054ac:	d100      	bne.n	80054b0 <HAL_RCC_OscConfig+0x280>
 80054ae:	e0a2      	b.n	80055f6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d140      	bne.n	8005538 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054b6:	4b2d      	ldr	r3, [pc, #180]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4013      	ands	r3, r2
 80054c0:	d005      	beq.n	80054ce <HAL_RCC_OscConfig+0x29e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e279      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ce:	4b27      	ldr	r3, [pc, #156]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4a2d      	ldr	r2, [pc, #180]	; (8005588 <HAL_RCC_OscConfig+0x358>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	0019      	movs	r1, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054dc:	4b23      	ldr	r3, [pc, #140]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e2:	4b22      	ldr	r3, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	0a19      	lsrs	r1, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	061a      	lsls	r2, r3, #24
 80054f0:	4b1e      	ldr	r3, [pc, #120]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	0b5b      	lsrs	r3, r3, #13
 80054fc:	3301      	adds	r3, #1
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	0212      	lsls	r2, r2, #8
 8005502:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005504:	4b19      	ldr	r3, [pc, #100]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	210f      	movs	r1, #15
 800550c:	400b      	ands	r3, r1
 800550e:	491b      	ldr	r1, [pc, #108]	; (800557c <HAL_RCC_OscConfig+0x34c>)
 8005510:	5ccb      	ldrb	r3, [r1, r3]
 8005512:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005514:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_RCC_OscConfig+0x350>)
 8005516:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <HAL_RCC_OscConfig+0x354>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2513      	movs	r5, #19
 800551e:	197c      	adds	r4, r7, r5
 8005520:	0018      	movs	r0, r3
 8005522:	f7fe f977 	bl	8003814 <HAL_InitTick>
 8005526:	0003      	movs	r3, r0
 8005528:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800552a:	197b      	adds	r3, r7, r5
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d061      	beq.n	80055f6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005532:	197b      	adds	r3, r7, r5
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	e244      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d040      	beq.n	80055c2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <HAL_RCC_OscConfig+0x33c>)
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	0049      	lsls	r1, r1, #1
 800554a:	430a      	orrs	r2, r1
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7fe f9a7 	bl	80038a0 <HAL_GetTick>
 8005552:	0003      	movs	r3, r0
 8005554:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005556:	e019      	b.n	800558c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005558:	f7fe f9a2 	bl	80038a0 <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d912      	bls.n	800558c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e22b      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	40021000 	.word	0x40021000
 8005570:	fffeffff 	.word	0xfffeffff
 8005574:	fffbffff 	.word	0xfffbffff
 8005578:	ffffe0ff 	.word	0xffffe0ff
 800557c:	08009974 	.word	0x08009974
 8005580:	20000000 	.word	0x20000000
 8005584:	20000004 	.word	0x20000004
 8005588:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800558c:	4bca      	ldr	r3, [pc, #808]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4013      	ands	r3, r2
 8005596:	d0df      	beq.n	8005558 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005598:	4bc7      	ldr	r3, [pc, #796]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	4ac7      	ldr	r2, [pc, #796]	; (80058bc <HAL_RCC_OscConfig+0x68c>)
 800559e:	4013      	ands	r3, r2
 80055a0:	0019      	movs	r1, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055a6:	4bc4      	ldr	r3, [pc, #784]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ac:	4bc2      	ldr	r3, [pc, #776]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	0a19      	lsrs	r1, r3, #8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	061a      	lsls	r2, r3, #24
 80055ba:	4bbf      	ldr	r3, [pc, #764]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
 80055c0:	e019      	b.n	80055f6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055c2:	4bbd      	ldr	r3, [pc, #756]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4bbc      	ldr	r3, [pc, #752]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80055c8:	49bd      	ldr	r1, [pc, #756]	; (80058c0 <HAL_RCC_OscConfig+0x690>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ce:	f7fe f967 	bl	80038a0 <HAL_GetTick>
 80055d2:	0003      	movs	r3, r0
 80055d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055d8:	f7fe f962 	bl	80038a0 <HAL_GetTick>
 80055dc:	0002      	movs	r2, r0
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e1eb      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80055ea:	4bb3      	ldr	r3, [pc, #716]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4013      	ands	r3, r2
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2208      	movs	r2, #8
 80055fc:	4013      	ands	r3, r2
 80055fe:	d036      	beq.n	800566e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d019      	beq.n	800563c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005608:	4bab      	ldr	r3, [pc, #684]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800560a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800560c:	4baa      	ldr	r3, [pc, #680]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800560e:	2101      	movs	r1, #1
 8005610:	430a      	orrs	r2, r1
 8005612:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005614:	f7fe f944 	bl	80038a0 <HAL_GetTick>
 8005618:	0003      	movs	r3, r0
 800561a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800561e:	f7fe f93f 	bl	80038a0 <HAL_GetTick>
 8005622:	0002      	movs	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e1c8      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005630:	4ba1      	ldr	r3, [pc, #644]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005634:	2202      	movs	r2, #2
 8005636:	4013      	ands	r3, r2
 8005638:	d0f1      	beq.n	800561e <HAL_RCC_OscConfig+0x3ee>
 800563a:	e018      	b.n	800566e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800563c:	4b9e      	ldr	r3, [pc, #632]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800563e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005640:	4b9d      	ldr	r3, [pc, #628]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005642:	2101      	movs	r1, #1
 8005644:	438a      	bics	r2, r1
 8005646:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005648:	f7fe f92a 	bl	80038a0 <HAL_GetTick>
 800564c:	0003      	movs	r3, r0
 800564e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005652:	f7fe f925 	bl	80038a0 <HAL_GetTick>
 8005656:	0002      	movs	r2, r0
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e1ae      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005664:	4b94      	ldr	r3, [pc, #592]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	2202      	movs	r2, #2
 800566a:	4013      	ands	r3, r2
 800566c:	d1f1      	bne.n	8005652 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2204      	movs	r2, #4
 8005674:	4013      	ands	r3, r2
 8005676:	d100      	bne.n	800567a <HAL_RCC_OscConfig+0x44a>
 8005678:	e0ae      	b.n	80057d8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567a:	2023      	movs	r0, #35	; 0x23
 800567c:	183b      	adds	r3, r7, r0
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005682:	4b8d      	ldr	r3, [pc, #564]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	055b      	lsls	r3, r3, #21
 800568a:	4013      	ands	r3, r2
 800568c:	d109      	bne.n	80056a2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	4b8a      	ldr	r3, [pc, #552]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005692:	4b89      	ldr	r3, [pc, #548]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005694:	2180      	movs	r1, #128	; 0x80
 8005696:	0549      	lsls	r1, r1, #21
 8005698:	430a      	orrs	r2, r1
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800569c:	183b      	adds	r3, r7, r0
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a2:	4b88      	ldr	r3, [pc, #544]	; (80058c4 <HAL_RCC_OscConfig+0x694>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	2380      	movs	r3, #128	; 0x80
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	4013      	ands	r3, r2
 80056ac:	d11a      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ae:	4b85      	ldr	r3, [pc, #532]	; (80058c4 <HAL_RCC_OscConfig+0x694>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b84      	ldr	r3, [pc, #528]	; (80058c4 <HAL_RCC_OscConfig+0x694>)
 80056b4:	2180      	movs	r1, #128	; 0x80
 80056b6:	0049      	lsls	r1, r1, #1
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056bc:	f7fe f8f0 	bl	80038a0 <HAL_GetTick>
 80056c0:	0003      	movs	r3, r0
 80056c2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c6:	f7fe f8eb 	bl	80038a0 <HAL_GetTick>
 80056ca:	0002      	movs	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b64      	cmp	r3, #100	; 0x64
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e174      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	4b7a      	ldr	r3, [pc, #488]	; (80058c4 <HAL_RCC_OscConfig+0x694>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4013      	ands	r3, r2
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_OscConfig+0x4d0>
 80056f0:	4b71      	ldr	r3, [pc, #452]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80056f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056f4:	4b70      	ldr	r3, [pc, #448]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	0049      	lsls	r1, r1, #1
 80056fa:	430a      	orrs	r2, r1
 80056fc:	651a      	str	r2, [r3, #80]	; 0x50
 80056fe:	e031      	b.n	8005764 <HAL_RCC_OscConfig+0x534>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10c      	bne.n	8005722 <HAL_RCC_OscConfig+0x4f2>
 8005708:	4b6b      	ldr	r3, [pc, #428]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800570a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800570c:	4b6a      	ldr	r3, [pc, #424]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800570e:	496c      	ldr	r1, [pc, #432]	; (80058c0 <HAL_RCC_OscConfig+0x690>)
 8005710:	400a      	ands	r2, r1
 8005712:	651a      	str	r2, [r3, #80]	; 0x50
 8005714:	4b68      	ldr	r3, [pc, #416]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005718:	4b67      	ldr	r3, [pc, #412]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800571a:	496b      	ldr	r1, [pc, #428]	; (80058c8 <HAL_RCC_OscConfig+0x698>)
 800571c:	400a      	ands	r2, r1
 800571e:	651a      	str	r2, [r3, #80]	; 0x50
 8005720:	e020      	b.n	8005764 <HAL_RCC_OscConfig+0x534>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	23a0      	movs	r3, #160	; 0xa0
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	429a      	cmp	r2, r3
 800572c:	d10e      	bne.n	800574c <HAL_RCC_OscConfig+0x51c>
 800572e:	4b62      	ldr	r3, [pc, #392]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005732:	4b61      	ldr	r3, [pc, #388]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005734:	2180      	movs	r1, #128	; 0x80
 8005736:	00c9      	lsls	r1, r1, #3
 8005738:	430a      	orrs	r2, r1
 800573a:	651a      	str	r2, [r3, #80]	; 0x50
 800573c:	4b5e      	ldr	r3, [pc, #376]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800573e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005740:	4b5d      	ldr	r3, [pc, #372]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005742:	2180      	movs	r1, #128	; 0x80
 8005744:	0049      	lsls	r1, r1, #1
 8005746:	430a      	orrs	r2, r1
 8005748:	651a      	str	r2, [r3, #80]	; 0x50
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0x534>
 800574c:	4b5a      	ldr	r3, [pc, #360]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800574e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005750:	4b59      	ldr	r3, [pc, #356]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005752:	495b      	ldr	r1, [pc, #364]	; (80058c0 <HAL_RCC_OscConfig+0x690>)
 8005754:	400a      	ands	r2, r1
 8005756:	651a      	str	r2, [r3, #80]	; 0x50
 8005758:	4b57      	ldr	r3, [pc, #348]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800575a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800575c:	4b56      	ldr	r3, [pc, #344]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800575e:	495a      	ldr	r1, [pc, #360]	; (80058c8 <HAL_RCC_OscConfig+0x698>)
 8005760:	400a      	ands	r2, r1
 8005762:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d015      	beq.n	8005798 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576c:	f7fe f898 	bl	80038a0 <HAL_GetTick>
 8005770:	0003      	movs	r3, r0
 8005772:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005774:	e009      	b.n	800578a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fe f893 	bl	80038a0 <HAL_GetTick>
 800577a:	0002      	movs	r2, r0
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	4a52      	ldr	r2, [pc, #328]	; (80058cc <HAL_RCC_OscConfig+0x69c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e11b      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800578a:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800578c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4013      	ands	r3, r2
 8005794:	d0ef      	beq.n	8005776 <HAL_RCC_OscConfig+0x546>
 8005796:	e014      	b.n	80057c2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005798:	f7fe f882 	bl	80038a0 <HAL_GetTick>
 800579c:	0003      	movs	r3, r0
 800579e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057a0:	e009      	b.n	80057b6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fe f87d 	bl	80038a0 <HAL_GetTick>
 80057a6:	0002      	movs	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	4a47      	ldr	r2, [pc, #284]	; (80058cc <HAL_RCC_OscConfig+0x69c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e105      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80057b6:	4b40      	ldr	r3, [pc, #256]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	d1ef      	bne.n	80057a2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057c2:	2323      	movs	r3, #35	; 0x23
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d105      	bne.n	80057d8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057cc:	4b3a      	ldr	r3, [pc, #232]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d0:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057d2:	493f      	ldr	r1, [pc, #252]	; (80058d0 <HAL_RCC_OscConfig+0x6a0>)
 80057d4:	400a      	ands	r2, r1
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2220      	movs	r2, #32
 80057de:	4013      	ands	r3, r2
 80057e0:	d049      	beq.n	8005876 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d026      	beq.n	8005838 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80057ea:	4b33      	ldr	r3, [pc, #204]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057f0:	2101      	movs	r1, #1
 80057f2:	430a      	orrs	r2, r1
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057fa:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 80057fc:	2101      	movs	r1, #1
 80057fe:	430a      	orrs	r2, r1
 8005800:	635a      	str	r2, [r3, #52]	; 0x34
 8005802:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <HAL_RCC_OscConfig+0x6a4>)
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	4b33      	ldr	r3, [pc, #204]	; (80058d4 <HAL_RCC_OscConfig+0x6a4>)
 8005808:	2180      	movs	r1, #128	; 0x80
 800580a:	0189      	lsls	r1, r1, #6
 800580c:	430a      	orrs	r2, r1
 800580e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fe f846 	bl	80038a0 <HAL_GetTick>
 8005814:	0003      	movs	r3, r0
 8005816:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800581a:	f7fe f841 	bl	80038a0 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0ca      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800582c:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2202      	movs	r2, #2
 8005832:	4013      	ands	r3, r2
 8005834:	d0f1      	beq.n	800581a <HAL_RCC_OscConfig+0x5ea>
 8005836:	e01e      	b.n	8005876 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005838:	4b1f      	ldr	r3, [pc, #124]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800583e:	2101      	movs	r1, #1
 8005840:	438a      	bics	r2, r1
 8005842:	609a      	str	r2, [r3, #8]
 8005844:	4b23      	ldr	r3, [pc, #140]	; (80058d4 <HAL_RCC_OscConfig+0x6a4>)
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	4b22      	ldr	r3, [pc, #136]	; (80058d4 <HAL_RCC_OscConfig+0x6a4>)
 800584a:	4923      	ldr	r1, [pc, #140]	; (80058d8 <HAL_RCC_OscConfig+0x6a8>)
 800584c:	400a      	ands	r2, r1
 800584e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005850:	f7fe f826 	bl	80038a0 <HAL_GetTick>
 8005854:	0003      	movs	r3, r0
 8005856:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800585a:	f7fe f821 	bl	80038a0 <HAL_GetTick>
 800585e:	0002      	movs	r2, r0
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e0aa      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800586c:	4b12      	ldr	r3, [pc, #72]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2202      	movs	r2, #2
 8005872:	4013      	ands	r3, r2
 8005874:	d1f1      	bne.n	800585a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d100      	bne.n	8005880 <HAL_RCC_OscConfig+0x650>
 800587e:	e09f      	b.n	80059c0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b0c      	cmp	r3, #12
 8005884:	d100      	bne.n	8005888 <HAL_RCC_OscConfig+0x658>
 8005886:	e078      	b.n	800597a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	2b02      	cmp	r3, #2
 800588e:	d159      	bne.n	8005944 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005890:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <HAL_RCC_OscConfig+0x688>)
 8005896:	4911      	ldr	r1, [pc, #68]	; (80058dc <HAL_RCC_OscConfig+0x6ac>)
 8005898:	400a      	ands	r2, r1
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589c:	f7fe f800 	bl	80038a0 <HAL_GetTick>
 80058a0:	0003      	movs	r3, r0
 80058a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058a4:	e01c      	b.n	80058e0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fd fffb 	bl	80038a0 <HAL_GetTick>
 80058aa:	0002      	movs	r2, r0
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d915      	bls.n	80058e0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e084      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
 80058b8:	40021000 	.word	0x40021000
 80058bc:	ffff1fff 	.word	0xffff1fff
 80058c0:	fffffeff 	.word	0xfffffeff
 80058c4:	40007000 	.word	0x40007000
 80058c8:	fffffbff 	.word	0xfffffbff
 80058cc:	00001388 	.word	0x00001388
 80058d0:	efffffff 	.word	0xefffffff
 80058d4:	40010000 	.word	0x40010000
 80058d8:	ffffdfff 	.word	0xffffdfff
 80058dc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058e0:	4b3a      	ldr	r3, [pc, #232]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	049b      	lsls	r3, r3, #18
 80058e8:	4013      	ands	r3, r2
 80058ea:	d1dc      	bne.n	80058a6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058ec:	4b37      	ldr	r3, [pc, #220]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a37      	ldr	r2, [pc, #220]	; (80059d0 <HAL_RCC_OscConfig+0x7a0>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	0019      	movs	r1, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	431a      	orrs	r2, r3
 8005906:	4b31      	ldr	r3, [pc, #196]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 8005908:	430a      	orrs	r2, r1
 800590a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800590c:	4b2f      	ldr	r3, [pc, #188]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	4b2e      	ldr	r3, [pc, #184]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	0449      	lsls	r1, r1, #17
 8005916:	430a      	orrs	r2, r1
 8005918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591a:	f7fd ffc1 	bl	80038a0 <HAL_GetTick>
 800591e:	0003      	movs	r3, r0
 8005920:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005924:	f7fd ffbc 	bl	80038a0 <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e045      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005936:	4b25      	ldr	r3, [pc, #148]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	2380      	movs	r3, #128	; 0x80
 800593c:	049b      	lsls	r3, r3, #18
 800593e:	4013      	ands	r3, r2
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x6f4>
 8005942:	e03d      	b.n	80059c0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005944:	4b21      	ldr	r3, [pc, #132]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b20      	ldr	r3, [pc, #128]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 800594a:	4922      	ldr	r1, [pc, #136]	; (80059d4 <HAL_RCC_OscConfig+0x7a4>)
 800594c:	400a      	ands	r2, r1
 800594e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005950:	f7fd ffa6 	bl	80038a0 <HAL_GetTick>
 8005954:	0003      	movs	r3, r0
 8005956:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595a:	f7fd ffa1 	bl	80038a0 <HAL_GetTick>
 800595e:	0002      	movs	r2, r0
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e02a      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800596c:	4b17      	ldr	r3, [pc, #92]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	2380      	movs	r3, #128	; 0x80
 8005972:	049b      	lsls	r3, r3, #18
 8005974:	4013      	ands	r3, r2
 8005976:	d1f0      	bne.n	800595a <HAL_RCC_OscConfig+0x72a>
 8005978:	e022      	b.n	80059c0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e01d      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005986:	4b11      	ldr	r3, [pc, #68]	; (80059cc <HAL_RCC_OscConfig+0x79c>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	2380      	movs	r3, #128	; 0x80
 8005990:	025b      	lsls	r3, r3, #9
 8005992:	401a      	ands	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	429a      	cmp	r2, r3
 800599a:	d10f      	bne.n	80059bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	23f0      	movs	r3, #240	; 0xf0
 80059a0:	039b      	lsls	r3, r3, #14
 80059a2:	401a      	ands	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d107      	bne.n	80059bc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	23c0      	movs	r3, #192	; 0xc0
 80059b0:	041b      	lsls	r3, r3, #16
 80059b2:	401a      	ands	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	0018      	movs	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b00a      	add	sp, #40	; 0x28
 80059c8:	bdb0      	pop	{r4, r5, r7, pc}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	40021000 	.word	0x40021000
 80059d0:	ff02ffff 	.word	0xff02ffff
 80059d4:	feffffff 	.word	0xfeffffff

080059d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d8:	b5b0      	push	{r4, r5, r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e128      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059ec:	4b96      	ldr	r3, [pc, #600]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2201      	movs	r2, #1
 80059f2:	4013      	ands	r3, r2
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d91e      	bls.n	8005a38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b93      	ldr	r3, [pc, #588]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	4393      	bics	r3, r2
 8005a02:	0019      	movs	r1, r3
 8005a04:	4b90      	ldr	r3, [pc, #576]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a0c:	f7fd ff48 	bl	80038a0 <HAL_GetTick>
 8005a10:	0003      	movs	r3, r0
 8005a12:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a14:	e009      	b.n	8005a2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a16:	f7fd ff43 	bl	80038a0 <HAL_GetTick>
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	4a8a      	ldr	r2, [pc, #552]	; (8005c4c <HAL_RCC_ClockConfig+0x274>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e109      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2a:	4b87      	ldr	r3, [pc, #540]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4013      	ands	r3, r2
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d1ee      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d009      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a42:	4b83      	ldr	r3, [pc, #524]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	22f0      	movs	r2, #240	; 0xf0
 8005a48:	4393      	bics	r3, r2
 8005a4a:	0019      	movs	r1, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	4b7f      	ldr	r3, [pc, #508]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005a52:	430a      	orrs	r2, r1
 8005a54:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d100      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x8a>
 8005a60:	e089      	b.n	8005b76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d107      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a6a:	4b79      	ldr	r3, [pc, #484]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	2380      	movs	r3, #128	; 0x80
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	4013      	ands	r3, r2
 8005a74:	d120      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e0e1      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a82:	4b73      	ldr	r3, [pc, #460]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	2380      	movs	r3, #128	; 0x80
 8005a88:	049b      	lsls	r3, r3, #18
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d114      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0d5      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d106      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a9a:	4b6d      	ldr	r3, [pc, #436]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d109      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0ca      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005aa8:	4b69      	ldr	r3, [pc, #420]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	2380      	movs	r3, #128	; 0x80
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0c2      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab8:	4b65      	ldr	r3, [pc, #404]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2203      	movs	r2, #3
 8005abe:	4393      	bics	r3, r2
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	4b62      	ldr	r3, [pc, #392]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005acc:	f7fd fee8 	bl	80038a0 <HAL_GetTick>
 8005ad0:	0003      	movs	r3, r0
 8005ad2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d111      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005adc:	e009      	b.n	8005af2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ade:	f7fd fedf 	bl	80038a0 <HAL_GetTick>
 8005ae2:	0002      	movs	r2, r0
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <HAL_RCC_ClockConfig+0x274>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0a5      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005af2:	4b57      	ldr	r3, [pc, #348]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	220c      	movs	r2, #12
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	d1ef      	bne.n	8005ade <HAL_RCC_ClockConfig+0x106>
 8005afe:	e03a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d111      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b08:	e009      	b.n	8005b1e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b0a:	f7fd fec9 	bl	80038a0 <HAL_GetTick>
 8005b0e:	0002      	movs	r2, r0
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	4a4d      	ldr	r2, [pc, #308]	; (8005c4c <HAL_RCC_ClockConfig+0x274>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e08f      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b1e:	4b4c      	ldr	r3, [pc, #304]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	220c      	movs	r2, #12
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b0c      	cmp	r3, #12
 8005b28:	d1ef      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x132>
 8005b2a:	e024      	b.n	8005b76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d11b      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b34:	e009      	b.n	8005b4a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b36:	f7fd feb3 	bl	80038a0 <HAL_GetTick>
 8005b3a:	0002      	movs	r2, r0
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	4a42      	ldr	r2, [pc, #264]	; (8005c4c <HAL_RCC_ClockConfig+0x274>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e079      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b4a:	4b41      	ldr	r3, [pc, #260]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	220c      	movs	r2, #12
 8005b50:	4013      	ands	r3, r2
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d1ef      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x15e>
 8005b56:	e00e      	b.n	8005b76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b58:	f7fd fea2 	bl	80038a0 <HAL_GetTick>
 8005b5c:	0002      	movs	r2, r0
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	4a3a      	ldr	r2, [pc, #232]	; (8005c4c <HAL_RCC_ClockConfig+0x274>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e068      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b6c:	4b38      	ldr	r3, [pc, #224]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	220c      	movs	r2, #12
 8005b72:	4013      	ands	r3, r2
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b76:	4b34      	ldr	r3, [pc, #208]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d21e      	bcs.n	8005bc2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b84:	4b30      	ldr	r3, [pc, #192]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	4393      	bics	r3, r2
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b96:	f7fd fe83 	bl	80038a0 <HAL_GetTick>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9e:	e009      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba0:	f7fd fe7e 	bl	80038a0 <HAL_GetTick>
 8005ba4:	0002      	movs	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <HAL_RCC_ClockConfig+0x274>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e044      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <HAL_RCC_ClockConfig+0x270>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4013      	ands	r3, r2
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d1ee      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bcc:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	4a20      	ldr	r2, [pc, #128]	; (8005c54 <HAL_RCC_ClockConfig+0x27c>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	0019      	movs	r1, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2208      	movs	r2, #8
 8005be6:	4013      	ands	r3, r2
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <HAL_RCC_ClockConfig+0x280>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	00da      	lsls	r2, r3, #3
 8005bfa:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c00:	f000 f832 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005c04:	0001      	movs	r1, r0
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <HAL_RCC_ClockConfig+0x278>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	220f      	movs	r2, #15
 8005c0e:	4013      	ands	r3, r2
 8005c10:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <HAL_RCC_ClockConfig+0x284>)
 8005c12:	5cd3      	ldrb	r3, [r2, r3]
 8005c14:	000a      	movs	r2, r1
 8005c16:	40da      	lsrs	r2, r3
 8005c18:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <HAL_RCC_ClockConfig+0x288>)
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c1c:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <HAL_RCC_ClockConfig+0x28c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	250b      	movs	r5, #11
 8005c22:	197c      	adds	r4, r7, r5
 8005c24:	0018      	movs	r0, r3
 8005c26:	f7fd fdf5 	bl	8003814 <HAL_InitTick>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005c2e:	197b      	adds	r3, r7, r5
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005c36:	197b      	adds	r3, r7, r5
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	e000      	b.n	8005c3e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	0018      	movs	r0, r3
 8005c40:	46bd      	mov	sp, r7
 8005c42:	b004      	add	sp, #16
 8005c44:	bdb0      	pop	{r4, r5, r7, pc}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	40022000 	.word	0x40022000
 8005c4c:	00001388 	.word	0x00001388
 8005c50:	40021000 	.word	0x40021000
 8005c54:	fffff8ff 	.word	0xfffff8ff
 8005c58:	ffffc7ff 	.word	0xffffc7ff
 8005c5c:	08009974 	.word	0x08009974
 8005c60:	20000000 	.word	0x20000000
 8005c64:	20000004 	.word	0x20000004

08005c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c68:	b5b0      	push	{r4, r5, r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005c6e:	4b4c      	ldr	r3, [pc, #304]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c76:	230c      	movs	r3, #12
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	d014      	beq.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8005c7e:	d900      	bls.n	8005c82 <HAL_RCC_GetSysClockFreq+0x1a>
 8005c80:	e07b      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x112>
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d002      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x24>
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d00b      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c8a:	e076      	b.n	8005d7a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c8c:	4b44      	ldr	r3, [pc, #272]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2210      	movs	r2, #16
 8005c92:	4013      	ands	r3, r2
 8005c94:	d002      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005c96:	4b43      	ldr	r3, [pc, #268]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c98:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005c9a:	e07c      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005c9c:	4b42      	ldr	r3, [pc, #264]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x140>)
 8005c9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ca0:	e079      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ca2:	4b42      	ldr	r3, [pc, #264]	; (8005dac <HAL_RCC_GetSysClockFreq+0x144>)
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ca6:	e076      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	0c9a      	lsrs	r2, r3, #18
 8005cac:	230f      	movs	r3, #15
 8005cae:	401a      	ands	r2, r3
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x148>)
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	0d9a      	lsrs	r2, r3, #22
 8005cba:	2303      	movs	r3, #3
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cc2:	4b37      	ldr	r3, [pc, #220]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	025b      	lsls	r3, r3, #9
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d01a      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	4a35      	ldr	r2, [pc, #212]	; (8005dac <HAL_RCC_GetSysClockFreq+0x144>)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	69b8      	ldr	r0, [r7, #24]
 8005cdc:	69f9      	ldr	r1, [r7, #28]
 8005cde:	f7fa fc03 	bl	80004e8 <__aeabi_lmul>
 8005ce2:	0002      	movs	r2, r0
 8005ce4:	000b      	movs	r3, r1
 8005ce6:	0010      	movs	r0, r2
 8005ce8:	0019      	movs	r1, r3
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f7fa fbd7 	bl	80004a8 <__aeabi_uldivmod>
 8005cfa:	0002      	movs	r2, r0
 8005cfc:	000b      	movs	r3, r1
 8005cfe:	0013      	movs	r3, r2
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
 8005d02:	e037      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005d04:	4b26      	ldr	r3, [pc, #152]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2210      	movs	r2, #16
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d01a      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	60bb      	str	r3, [r7, #8]
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	68b8      	ldr	r0, [r7, #8]
 8005d1c:	68f9      	ldr	r1, [r7, #12]
 8005d1e:	f7fa fbe3 	bl	80004e8 <__aeabi_lmul>
 8005d22:	0002      	movs	r2, r0
 8005d24:	000b      	movs	r3, r1
 8005d26:	0010      	movs	r0, r2
 8005d28:	0019      	movs	r1, r3
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	603b      	str	r3, [r7, #0]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f7fa fbb7 	bl	80004a8 <__aeabi_uldivmod>
 8005d3a:	0002      	movs	r2, r0
 8005d3c:	000b      	movs	r3, r1
 8005d3e:	0013      	movs	r3, r2
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
 8005d42:	e017      	b.n	8005d74 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	0018      	movs	r0, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x140>)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f7fa fbca 	bl	80004e8 <__aeabi_lmul>
 8005d54:	0002      	movs	r2, r0
 8005d56:	000b      	movs	r3, r1
 8005d58:	0010      	movs	r0, r2
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	001c      	movs	r4, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	001d      	movs	r5, r3
 8005d64:	0022      	movs	r2, r4
 8005d66:	002b      	movs	r3, r5
 8005d68:	f7fa fb9e 	bl	80004a8 <__aeabi_uldivmod>
 8005d6c:	0002      	movs	r2, r0
 8005d6e:	000b      	movs	r3, r1
 8005d70:	0013      	movs	r3, r2
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d78:	e00d      	b.n	8005d96 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	0b5b      	lsrs	r3, r3, #13
 8005d80:	2207      	movs	r2, #7
 8005d82:	4013      	ands	r3, r2
 8005d84:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	2280      	movs	r2, #128	; 0x80
 8005d8c:	0212      	lsls	r2, r2, #8
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	0013      	movs	r3, r2
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d94:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005d98:	0018      	movs	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b00e      	add	sp, #56	; 0x38
 8005d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005da0:	40021000 	.word	0x40021000
 8005da4:	003d0900 	.word	0x003d0900
 8005da8:	00f42400 	.word	0x00f42400
 8005dac:	007a1200 	.word	0x007a1200
 8005db0:	0800998c 	.word	0x0800998c

08005db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db8:	4b02      	ldr	r3, [pc, #8]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dba:	681b      	ldr	r3, [r3, #0]
}
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	20000000 	.word	0x20000000

08005dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dcc:	f7ff fff2 	bl	8005db4 <HAL_RCC_GetHCLKFreq>
 8005dd0:	0001      	movs	r1, r0
 8005dd2:	4b06      	ldr	r3, [pc, #24]	; (8005dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	2207      	movs	r2, #7
 8005dda:	4013      	ands	r3, r2
 8005ddc:	4a04      	ldr	r2, [pc, #16]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dde:	5cd3      	ldrb	r3, [r2, r3]
 8005de0:	40d9      	lsrs	r1, r3
 8005de2:	000b      	movs	r3, r1
}
 8005de4:	0018      	movs	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	40021000 	.word	0x40021000
 8005df0:	08009984 	.word	0x08009984

08005df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005df8:	f7ff ffdc 	bl	8005db4 <HAL_RCC_GetHCLKFreq>
 8005dfc:	0001      	movs	r1, r0
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	0adb      	lsrs	r3, r3, #11
 8005e04:	2207      	movs	r2, #7
 8005e06:	4013      	ands	r3, r2
 8005e08:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e0a:	5cd3      	ldrb	r3, [r2, r3]
 8005e0c:	40d9      	lsrs	r1, r3
 8005e0e:	000b      	movs	r3, r1
}
 8005e10:	0018      	movs	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	08009984 	.word	0x08009984

08005e20 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005e28:	2017      	movs	r0, #23
 8005e2a:	183b      	adds	r3, r7, r0
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2220      	movs	r2, #32
 8005e36:	4013      	ands	r3, r2
 8005e38:	d100      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005e3a:	e0c2      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e3c:	4b98      	ldr	r3, [pc, #608]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	055b      	lsls	r3, r3, #21
 8005e44:	4013      	ands	r3, r2
 8005e46:	d109      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e48:	4b95      	ldr	r3, [pc, #596]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4c:	4b94      	ldr	r3, [pc, #592]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	0549      	lsls	r1, r1, #21
 8005e52:	430a      	orrs	r2, r1
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e56:	183b      	adds	r3, r7, r0
 8005e58:	2201      	movs	r2, #1
 8005e5a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5c:	4b91      	ldr	r3, [pc, #580]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4013      	ands	r3, r2
 8005e66:	d11a      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e68:	4b8e      	ldr	r3, [pc, #568]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b8d      	ldr	r3, [pc, #564]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	0049      	lsls	r1, r1, #1
 8005e72:	430a      	orrs	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e76:	f7fd fd13 	bl	80038a0 <HAL_GetTick>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7e:	e008      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e80:	f7fd fd0e 	bl	80038a0 <HAL_GetTick>
 8005e84:	0002      	movs	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b64      	cmp	r3, #100	; 0x64
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e102      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e92:	4b84      	ldr	r3, [pc, #528]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005e9e:	4b80      	ldr	r3, [pc, #512]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	23c0      	movs	r3, #192	; 0xc0
 8005ea4:	039b      	lsls	r3, r3, #14
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	23c0      	movs	r3, #192	; 0xc0
 8005eb0:	039b      	lsls	r3, r3, #14
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d013      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	23c0      	movs	r3, #192	; 0xc0
 8005ec0:	029b      	lsls	r3, r3, #10
 8005ec2:	401a      	ands	r2, r3
 8005ec4:	23c0      	movs	r3, #192	; 0xc0
 8005ec6:	029b      	lsls	r3, r3, #10
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d10a      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ecc:	4b74      	ldr	r3, [pc, #464]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	029b      	lsls	r3, r3, #10
 8005ed4:	401a      	ands	r2, r3
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	029b      	lsls	r3, r3, #10
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e0da      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005ee2:	4b6f      	ldr	r3, [pc, #444]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ee6:	23c0      	movs	r3, #192	; 0xc0
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	4013      	ands	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d03b      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	23c0      	movs	r3, #192	; 0xc0
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	4013      	ands	r3, r2
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d033      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d02e      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005f0e:	4b64      	ldr	r3, [pc, #400]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f12:	4a65      	ldr	r2, [pc, #404]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f18:	4b61      	ldr	r3, [pc, #388]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f1c:	4b60      	ldr	r3, [pc, #384]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f1e:	2180      	movs	r1, #128	; 0x80
 8005f20:	0309      	lsls	r1, r1, #12
 8005f22:	430a      	orrs	r2, r1
 8005f24:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f26:	4b5e      	ldr	r3, [pc, #376]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f2a:	4b5d      	ldr	r3, [pc, #372]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2c:	495f      	ldr	r1, [pc, #380]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f2e:	400a      	ands	r2, r1
 8005f30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005f32:	4b5b      	ldr	r3, [pc, #364]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d014      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f42:	f7fd fcad 	bl	80038a0 <HAL_GetTick>
 8005f46:	0003      	movs	r3, r0
 8005f48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f4a:	e009      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f4c:	f7fd fca8 	bl	80038a0 <HAL_GetTick>
 8005f50:	0002      	movs	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	4a56      	ldr	r2, [pc, #344]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e09b      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f60:	4b4f      	ldr	r3, [pc, #316]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d0ef      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	23c0      	movs	r3, #192	; 0xc0
 8005f72:	029b      	lsls	r3, r3, #10
 8005f74:	401a      	ands	r2, r3
 8005f76:	23c0      	movs	r3, #192	; 0xc0
 8005f78:	029b      	lsls	r3, r3, #10
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005f7e:	4b48      	ldr	r3, [pc, #288]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a4c      	ldr	r2, [pc, #304]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	0019      	movs	r1, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	23c0      	movs	r3, #192	; 0xc0
 8005f8e:	039b      	lsls	r3, r3, #14
 8005f90:	401a      	ands	r2, r3
 8005f92:	4b43      	ldr	r3, [pc, #268]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f94:	430a      	orrs	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	4b41      	ldr	r3, [pc, #260]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f9a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	23c0      	movs	r3, #192	; 0xc0
 8005fa2:	029b      	lsls	r3, r3, #10
 8005fa4:	401a      	ands	r2, r3
 8005fa6:	4b3e      	ldr	r3, [pc, #248]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fac:	2317      	movs	r3, #23
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d105      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb6:	4b3a      	ldr	r3, [pc, #232]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fbc:	493e      	ldr	r1, [pc, #248]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005fbe:	400a      	ands	r2, r1
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4013      	ands	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fcc:	4b34      	ldr	r3, [pc, #208]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	4393      	bics	r3, r2
 8005fd4:	0019      	movs	r1, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fea:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fee:	220c      	movs	r2, #12
 8005ff0:	4393      	bics	r3, r2
 8005ff2:	0019      	movs	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	4b29      	ldr	r3, [pc, #164]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2204      	movs	r2, #4
 8006004:	4013      	ands	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006008:	4b25      	ldr	r3, [pc, #148]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800600a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600c:	4a2b      	ldr	r2, [pc, #172]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800600e:	4013      	ands	r3, r2
 8006010:	0019      	movs	r1, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	4b22      	ldr	r3, [pc, #136]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006018:	430a      	orrs	r2, r1
 800601a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2208      	movs	r2, #8
 8006022:	4013      	ands	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006026:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602a:	4a25      	ldr	r2, [pc, #148]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800602c:	4013      	ands	r3, r2
 800602e:	0019      	movs	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	4b1a      	ldr	r3, [pc, #104]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006036:	430a      	orrs	r2, r1
 8006038:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	4013      	ands	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006046:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604a:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800604c:	4013      	ands	r3, r2
 800604e:	0019      	movs	r1, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006056:	430a      	orrs	r2, r1
 8006058:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2240      	movs	r2, #64	; 0x40
 8006060:	4013      	ands	r3, r2
 8006062:	d009      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006068:	4a16      	ldr	r2, [pc, #88]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800606a:	4013      	ands	r3, r2
 800606c:	0019      	movs	r1, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006074:	430a      	orrs	r2, r1
 8006076:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2280      	movs	r2, #128	; 0x80
 800607e:	4013      	ands	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006086:	4a10      	ldr	r2, [pc, #64]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8006088:	4013      	ands	r3, r2
 800608a:	0019      	movs	r1, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	69da      	ldr	r2, [r3, #28]
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006092:	430a      	orrs	r2, r1
 8006094:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	0018      	movs	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	b006      	add	sp, #24
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	40007000 	.word	0x40007000
 80060a8:	fffcffff 	.word	0xfffcffff
 80060ac:	fff7ffff 	.word	0xfff7ffff
 80060b0:	00001388 	.word	0x00001388
 80060b4:	ffcfffff 	.word	0xffcfffff
 80060b8:	efffffff 	.word	0xefffffff
 80060bc:	fffff3ff 	.word	0xfffff3ff
 80060c0:	ffffcfff 	.word	0xffffcfff
 80060c4:	fbffffff 	.word	0xfbffffff
 80060c8:	fff3ffff 	.word	0xfff3ffff

080060cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e044      	b.n	8006168 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d107      	bne.n	80060f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2274      	movs	r2, #116	; 0x74
 80060ea:	2100      	movs	r1, #0
 80060ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7fd fa27 	bl	8003544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2224      	movs	r2, #36	; 0x24
 80060fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2101      	movs	r1, #1
 8006108:	438a      	bics	r2, r1
 800610a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	0018      	movs	r0, r3
 8006110:	f000 f8d8 	bl	80062c4 <UART_SetConfig>
 8006114:	0003      	movs	r3, r0
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e024      	b.n	8006168 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f000 fb89 	bl	8006840 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	490d      	ldr	r1, [pc, #52]	; (8006170 <HAL_UART_Init+0xa4>)
 800613a:	400a      	ands	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	212a      	movs	r1, #42	; 0x2a
 800614a:	438a      	bics	r2, r1
 800614c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2101      	movs	r1, #1
 800615a:	430a      	orrs	r2, r1
 800615c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	0018      	movs	r0, r3
 8006162:	f000 fc21 	bl	80069a8 <UART_CheckIdleState>
 8006166:	0003      	movs	r3, r0
}
 8006168:	0018      	movs	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	b002      	add	sp, #8
 800616e:	bd80      	pop	{r7, pc}
 8006170:	ffffb7ff 	.word	0xffffb7ff

08006174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	1dbb      	adds	r3, r7, #6
 8006182:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006188:	2b20      	cmp	r3, #32
 800618a:	d000      	beq.n	800618e <HAL_UART_Transmit+0x1a>
 800618c:	e095      	b.n	80062ba <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_UART_Transmit+0x28>
 8006194:	1dbb      	adds	r3, r7, #6
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e08d      	b.n	80062bc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	015b      	lsls	r3, r3, #5
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d109      	bne.n	80061c0 <HAL_UART_Transmit+0x4c>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2201      	movs	r2, #1
 80061b8:	4013      	ands	r3, r2
 80061ba:	d001      	beq.n	80061c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e07d      	b.n	80062bc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2274      	movs	r2, #116	; 0x74
 80061c4:	5c9b      	ldrb	r3, [r3, r2]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_UART_Transmit+0x5a>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e076      	b.n	80062bc <HAL_UART_Transmit+0x148>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2274      	movs	r2, #116	; 0x74
 80061d2:	2101      	movs	r1, #1
 80061d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2280      	movs	r2, #128	; 0x80
 80061da:	2100      	movs	r1, #0
 80061dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2221      	movs	r2, #33	; 0x21
 80061e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e4:	f7fd fb5c 	bl	80038a0 <HAL_GetTick>
 80061e8:	0003      	movs	r3, r0
 80061ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	1dba      	adds	r2, r7, #6
 80061f0:	2150      	movs	r1, #80	; 0x50
 80061f2:	8812      	ldrh	r2, [r2, #0]
 80061f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	1dba      	adds	r2, r7, #6
 80061fa:	2152      	movs	r1, #82	; 0x52
 80061fc:	8812      	ldrh	r2, [r2, #0]
 80061fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	015b      	lsls	r3, r3, #5
 8006208:	429a      	cmp	r2, r3
 800620a:	d108      	bne.n	800621e <HAL_UART_Transmit+0xaa>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	e003      	b.n	8006226 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2274      	movs	r2, #116	; 0x74
 800622a:	2100      	movs	r1, #0
 800622c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800622e:	e02c      	b.n	800628a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	0013      	movs	r3, r2
 800623a:	2200      	movs	r2, #0
 800623c:	2180      	movs	r1, #128	; 0x80
 800623e:	f000 fbfb 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 8006242:	1e03      	subs	r3, r0, #0
 8006244:	d001      	beq.n	800624a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e038      	b.n	80062bc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	001a      	movs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	05d2      	lsls	r2, r2, #23
 800625c:	0dd2      	lsrs	r2, r2, #23
 800625e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	3302      	adds	r3, #2
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	e007      	b.n	8006278 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	781a      	ldrb	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	3301      	adds	r3, #1
 8006276:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2252      	movs	r2, #82	; 0x52
 800627c:	5a9b      	ldrh	r3, [r3, r2]
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b299      	uxth	r1, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2252      	movs	r2, #82	; 0x52
 8006288:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2252      	movs	r2, #82	; 0x52
 800628e:	5a9b      	ldrh	r3, [r3, r2]
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1cc      	bne.n	8006230 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	0013      	movs	r3, r2
 80062a0:	2200      	movs	r2, #0
 80062a2:	2140      	movs	r1, #64	; 0x40
 80062a4:	f000 fbc8 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 80062a8:	1e03      	subs	r3, r0, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e005      	b.n	80062bc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e000      	b.n	80062bc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80062ba:	2302      	movs	r3, #2
  }
}
 80062bc:	0018      	movs	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	b008      	add	sp, #32
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c4:	b5b0      	push	{r4, r5, r7, lr}
 80062c6:	b08e      	sub	sp, #56	; 0x38
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062cc:	231a      	movs	r3, #26
 80062ce:	2218      	movs	r2, #24
 80062d0:	4694      	mov	ip, r2
 80062d2:	44bc      	add	ip, r7
 80062d4:	4463      	add	r3, ip
 80062d6:	2200      	movs	r2, #0
 80062d8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4ab0      	ldr	r2, [pc, #704]	; (80065bc <UART_SetConfig+0x2f8>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	0019      	movs	r1, r3
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006304:	430a      	orrs	r2, r1
 8006306:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4aac      	ldr	r2, [pc, #688]	; (80065c0 <UART_SetConfig+0x2fc>)
 8006310:	4013      	ands	r3, r2
 8006312:	0019      	movs	r1, r3
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4aa6      	ldr	r2, [pc, #664]	; (80065c4 <UART_SetConfig+0x300>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d004      	beq.n	800633a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006336:	4313      	orrs	r3, r2
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4aa1      	ldr	r2, [pc, #644]	; (80065c8 <UART_SetConfig+0x304>)
 8006342:	4013      	ands	r3, r2
 8006344:	0019      	movs	r1, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800634c:	430a      	orrs	r2, r1
 800634e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a9d      	ldr	r2, [pc, #628]	; (80065cc <UART_SetConfig+0x308>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d136      	bne.n	80063c8 <UART_SetConfig+0x104>
 800635a:	4b9d      	ldr	r3, [pc, #628]	; (80065d0 <UART_SetConfig+0x30c>)
 800635c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635e:	2203      	movs	r2, #3
 8006360:	4013      	ands	r3, r2
 8006362:	2b03      	cmp	r3, #3
 8006364:	d020      	beq.n	80063a8 <UART_SetConfig+0xe4>
 8006366:	d827      	bhi.n	80063b8 <UART_SetConfig+0xf4>
 8006368:	2b02      	cmp	r3, #2
 800636a:	d00d      	beq.n	8006388 <UART_SetConfig+0xc4>
 800636c:	d824      	bhi.n	80063b8 <UART_SetConfig+0xf4>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <UART_SetConfig+0xb4>
 8006372:	2b01      	cmp	r3, #1
 8006374:	d010      	beq.n	8006398 <UART_SetConfig+0xd4>
 8006376:	e01f      	b.n	80063b8 <UART_SetConfig+0xf4>
 8006378:	231b      	movs	r3, #27
 800637a:	2218      	movs	r2, #24
 800637c:	4694      	mov	ip, r2
 800637e:	44bc      	add	ip, r7
 8006380:	4463      	add	r3, ip
 8006382:	2201      	movs	r2, #1
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	e0c5      	b.n	8006514 <UART_SetConfig+0x250>
 8006388:	231b      	movs	r3, #27
 800638a:	2218      	movs	r2, #24
 800638c:	4694      	mov	ip, r2
 800638e:	44bc      	add	ip, r7
 8006390:	4463      	add	r3, ip
 8006392:	2202      	movs	r2, #2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e0bd      	b.n	8006514 <UART_SetConfig+0x250>
 8006398:	231b      	movs	r3, #27
 800639a:	2218      	movs	r2, #24
 800639c:	4694      	mov	ip, r2
 800639e:	44bc      	add	ip, r7
 80063a0:	4463      	add	r3, ip
 80063a2:	2204      	movs	r2, #4
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e0b5      	b.n	8006514 <UART_SetConfig+0x250>
 80063a8:	231b      	movs	r3, #27
 80063aa:	2218      	movs	r2, #24
 80063ac:	4694      	mov	ip, r2
 80063ae:	44bc      	add	ip, r7
 80063b0:	4463      	add	r3, ip
 80063b2:	2208      	movs	r2, #8
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e0ad      	b.n	8006514 <UART_SetConfig+0x250>
 80063b8:	231b      	movs	r3, #27
 80063ba:	2218      	movs	r2, #24
 80063bc:	4694      	mov	ip, r2
 80063be:	44bc      	add	ip, r7
 80063c0:	4463      	add	r3, ip
 80063c2:	2210      	movs	r2, #16
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	e0a5      	b.n	8006514 <UART_SetConfig+0x250>
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a81      	ldr	r2, [pc, #516]	; (80065d4 <UART_SetConfig+0x310>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d136      	bne.n	8006440 <UART_SetConfig+0x17c>
 80063d2:	4b7f      	ldr	r3, [pc, #508]	; (80065d0 <UART_SetConfig+0x30c>)
 80063d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d6:	220c      	movs	r2, #12
 80063d8:	4013      	ands	r3, r2
 80063da:	2b0c      	cmp	r3, #12
 80063dc:	d020      	beq.n	8006420 <UART_SetConfig+0x15c>
 80063de:	d827      	bhi.n	8006430 <UART_SetConfig+0x16c>
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d00d      	beq.n	8006400 <UART_SetConfig+0x13c>
 80063e4:	d824      	bhi.n	8006430 <UART_SetConfig+0x16c>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <UART_SetConfig+0x12c>
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d010      	beq.n	8006410 <UART_SetConfig+0x14c>
 80063ee:	e01f      	b.n	8006430 <UART_SetConfig+0x16c>
 80063f0:	231b      	movs	r3, #27
 80063f2:	2218      	movs	r2, #24
 80063f4:	4694      	mov	ip, r2
 80063f6:	44bc      	add	ip, r7
 80063f8:	4463      	add	r3, ip
 80063fa:	2200      	movs	r2, #0
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	e089      	b.n	8006514 <UART_SetConfig+0x250>
 8006400:	231b      	movs	r3, #27
 8006402:	2218      	movs	r2, #24
 8006404:	4694      	mov	ip, r2
 8006406:	44bc      	add	ip, r7
 8006408:	4463      	add	r3, ip
 800640a:	2202      	movs	r2, #2
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e081      	b.n	8006514 <UART_SetConfig+0x250>
 8006410:	231b      	movs	r3, #27
 8006412:	2218      	movs	r2, #24
 8006414:	4694      	mov	ip, r2
 8006416:	44bc      	add	ip, r7
 8006418:	4463      	add	r3, ip
 800641a:	2204      	movs	r2, #4
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e079      	b.n	8006514 <UART_SetConfig+0x250>
 8006420:	231b      	movs	r3, #27
 8006422:	2218      	movs	r2, #24
 8006424:	4694      	mov	ip, r2
 8006426:	44bc      	add	ip, r7
 8006428:	4463      	add	r3, ip
 800642a:	2208      	movs	r2, #8
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e071      	b.n	8006514 <UART_SetConfig+0x250>
 8006430:	231b      	movs	r3, #27
 8006432:	2218      	movs	r2, #24
 8006434:	4694      	mov	ip, r2
 8006436:	44bc      	add	ip, r7
 8006438:	4463      	add	r3, ip
 800643a:	2210      	movs	r2, #16
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	e069      	b.n	8006514 <UART_SetConfig+0x250>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a64      	ldr	r2, [pc, #400]	; (80065d8 <UART_SetConfig+0x314>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d107      	bne.n	800645a <UART_SetConfig+0x196>
 800644a:	231b      	movs	r3, #27
 800644c:	2218      	movs	r2, #24
 800644e:	4694      	mov	ip, r2
 8006450:	44bc      	add	ip, r7
 8006452:	4463      	add	r3, ip
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	e05c      	b.n	8006514 <UART_SetConfig+0x250>
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5f      	ldr	r2, [pc, #380]	; (80065dc <UART_SetConfig+0x318>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d107      	bne.n	8006474 <UART_SetConfig+0x1b0>
 8006464:	231b      	movs	r3, #27
 8006466:	2218      	movs	r2, #24
 8006468:	4694      	mov	ip, r2
 800646a:	44bc      	add	ip, r7
 800646c:	4463      	add	r3, ip
 800646e:	2200      	movs	r2, #0
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	e04f      	b.n	8006514 <UART_SetConfig+0x250>
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a52      	ldr	r2, [pc, #328]	; (80065c4 <UART_SetConfig+0x300>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d143      	bne.n	8006506 <UART_SetConfig+0x242>
 800647e:	4b54      	ldr	r3, [pc, #336]	; (80065d0 <UART_SetConfig+0x30c>)
 8006480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006482:	23c0      	movs	r3, #192	; 0xc0
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	4013      	ands	r3, r2
 8006488:	22c0      	movs	r2, #192	; 0xc0
 800648a:	0112      	lsls	r2, r2, #4
 800648c:	4293      	cmp	r3, r2
 800648e:	d02a      	beq.n	80064e6 <UART_SetConfig+0x222>
 8006490:	22c0      	movs	r2, #192	; 0xc0
 8006492:	0112      	lsls	r2, r2, #4
 8006494:	4293      	cmp	r3, r2
 8006496:	d82e      	bhi.n	80064f6 <UART_SetConfig+0x232>
 8006498:	2280      	movs	r2, #128	; 0x80
 800649a:	0112      	lsls	r2, r2, #4
 800649c:	4293      	cmp	r3, r2
 800649e:	d012      	beq.n	80064c6 <UART_SetConfig+0x202>
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	0112      	lsls	r2, r2, #4
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d826      	bhi.n	80064f6 <UART_SetConfig+0x232>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <UART_SetConfig+0x1f2>
 80064ac:	2280      	movs	r2, #128	; 0x80
 80064ae:	00d2      	lsls	r2, r2, #3
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d010      	beq.n	80064d6 <UART_SetConfig+0x212>
 80064b4:	e01f      	b.n	80064f6 <UART_SetConfig+0x232>
 80064b6:	231b      	movs	r3, #27
 80064b8:	2218      	movs	r2, #24
 80064ba:	4694      	mov	ip, r2
 80064bc:	44bc      	add	ip, r7
 80064be:	4463      	add	r3, ip
 80064c0:	2200      	movs	r2, #0
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	e026      	b.n	8006514 <UART_SetConfig+0x250>
 80064c6:	231b      	movs	r3, #27
 80064c8:	2218      	movs	r2, #24
 80064ca:	4694      	mov	ip, r2
 80064cc:	44bc      	add	ip, r7
 80064ce:	4463      	add	r3, ip
 80064d0:	2202      	movs	r2, #2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e01e      	b.n	8006514 <UART_SetConfig+0x250>
 80064d6:	231b      	movs	r3, #27
 80064d8:	2218      	movs	r2, #24
 80064da:	4694      	mov	ip, r2
 80064dc:	44bc      	add	ip, r7
 80064de:	4463      	add	r3, ip
 80064e0:	2204      	movs	r2, #4
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e016      	b.n	8006514 <UART_SetConfig+0x250>
 80064e6:	231b      	movs	r3, #27
 80064e8:	2218      	movs	r2, #24
 80064ea:	4694      	mov	ip, r2
 80064ec:	44bc      	add	ip, r7
 80064ee:	4463      	add	r3, ip
 80064f0:	2208      	movs	r2, #8
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e00e      	b.n	8006514 <UART_SetConfig+0x250>
 80064f6:	231b      	movs	r3, #27
 80064f8:	2218      	movs	r2, #24
 80064fa:	4694      	mov	ip, r2
 80064fc:	44bc      	add	ip, r7
 80064fe:	4463      	add	r3, ip
 8006500:	2210      	movs	r2, #16
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e006      	b.n	8006514 <UART_SetConfig+0x250>
 8006506:	231b      	movs	r3, #27
 8006508:	2218      	movs	r2, #24
 800650a:	4694      	mov	ip, r2
 800650c:	44bc      	add	ip, r7
 800650e:	4463      	add	r3, ip
 8006510:	2210      	movs	r2, #16
 8006512:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <UART_SetConfig+0x300>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d000      	beq.n	8006520 <UART_SetConfig+0x25c>
 800651e:	e09e      	b.n	800665e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006520:	231b      	movs	r3, #27
 8006522:	2218      	movs	r2, #24
 8006524:	4694      	mov	ip, r2
 8006526:	44bc      	add	ip, r7
 8006528:	4463      	add	r3, ip
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d01d      	beq.n	800656c <UART_SetConfig+0x2a8>
 8006530:	dc20      	bgt.n	8006574 <UART_SetConfig+0x2b0>
 8006532:	2b04      	cmp	r3, #4
 8006534:	d015      	beq.n	8006562 <UART_SetConfig+0x29e>
 8006536:	dc1d      	bgt.n	8006574 <UART_SetConfig+0x2b0>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <UART_SetConfig+0x27e>
 800653c:	2b02      	cmp	r3, #2
 800653e:	d005      	beq.n	800654c <UART_SetConfig+0x288>
 8006540:	e018      	b.n	8006574 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006542:	f7ff fc41 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8006546:	0003      	movs	r3, r0
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800654a:	e01d      	b.n	8006588 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800654c:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <UART_SetConfig+0x30c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2210      	movs	r2, #16
 8006552:	4013      	ands	r3, r2
 8006554:	d002      	beq.n	800655c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006556:	4b22      	ldr	r3, [pc, #136]	; (80065e0 <UART_SetConfig+0x31c>)
 8006558:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800655a:	e015      	b.n	8006588 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <UART_SetConfig+0x320>)
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006560:	e012      	b.n	8006588 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7ff fb81 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8006566:	0003      	movs	r3, r0
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800656a:	e00d      	b.n	8006588 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656c:	2380      	movs	r3, #128	; 0x80
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006572:	e009      	b.n	8006588 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006578:	231a      	movs	r3, #26
 800657a:	2218      	movs	r2, #24
 800657c:	4694      	mov	ip, r2
 800657e:	44bc      	add	ip, r7
 8006580:	4463      	add	r3, ip
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
        break;
 8006586:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d100      	bne.n	8006590 <UART_SetConfig+0x2cc>
 800658e:	e13c      	b.n	800680a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	0013      	movs	r3, r2
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	189b      	adds	r3, r3, r2
 800659a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659c:	429a      	cmp	r2, r3
 800659e:	d305      	bcc.n	80065ac <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d91d      	bls.n	80065e8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80065ac:	231a      	movs	r3, #26
 80065ae:	2218      	movs	r2, #24
 80065b0:	4694      	mov	ip, r2
 80065b2:	44bc      	add	ip, r7
 80065b4:	4463      	add	r3, ip
 80065b6:	2201      	movs	r2, #1
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e126      	b.n	800680a <UART_SetConfig+0x546>
 80065bc:	efff69f3 	.word	0xefff69f3
 80065c0:	ffffcfff 	.word	0xffffcfff
 80065c4:	40004800 	.word	0x40004800
 80065c8:	fffff4ff 	.word	0xfffff4ff
 80065cc:	40013800 	.word	0x40013800
 80065d0:	40021000 	.word	0x40021000
 80065d4:	40004400 	.word	0x40004400
 80065d8:	40004c00 	.word	0x40004c00
 80065dc:	40005000 	.word	0x40005000
 80065e0:	003d0900 	.word	0x003d0900
 80065e4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	6939      	ldr	r1, [r7, #16]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	000b      	movs	r3, r1
 80065f6:	0e1b      	lsrs	r3, r3, #24
 80065f8:	0010      	movs	r0, r2
 80065fa:	0205      	lsls	r5, r0, #8
 80065fc:	431d      	orrs	r5, r3
 80065fe:	000b      	movs	r3, r1
 8006600:	021c      	lsls	r4, r3, #8
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	68b8      	ldr	r0, [r7, #8]
 8006610:	68f9      	ldr	r1, [r7, #12]
 8006612:	1900      	adds	r0, r0, r4
 8006614:	4169      	adcs	r1, r5
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	2300      	movs	r3, #0
 800661e:	607b      	str	r3, [r7, #4]
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f7f9 ff40 	bl	80004a8 <__aeabi_uldivmod>
 8006628:	0002      	movs	r2, r0
 800662a:	000b      	movs	r3, r1
 800662c:	0013      	movs	r3, r2
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006632:	23c0      	movs	r3, #192	; 0xc0
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	429a      	cmp	r2, r3
 8006638:	d309      	bcc.n	800664e <UART_SetConfig+0x38a>
 800663a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800663c:	2380      	movs	r3, #128	; 0x80
 800663e:	035b      	lsls	r3, r3, #13
 8006640:	429a      	cmp	r2, r3
 8006642:	d204      	bcs.n	800664e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	e0dd      	b.n	800680a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800664e:	231a      	movs	r3, #26
 8006650:	2218      	movs	r2, #24
 8006652:	4694      	mov	ip, r2
 8006654:	44bc      	add	ip, r7
 8006656:	4463      	add	r3, ip
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	e0d5      	b.n	800680a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	2380      	movs	r3, #128	; 0x80
 8006664:	021b      	lsls	r3, r3, #8
 8006666:	429a      	cmp	r2, r3
 8006668:	d000      	beq.n	800666c <UART_SetConfig+0x3a8>
 800666a:	e074      	b.n	8006756 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800666c:	231b      	movs	r3, #27
 800666e:	2218      	movs	r2, #24
 8006670:	4694      	mov	ip, r2
 8006672:	44bc      	add	ip, r7
 8006674:	4463      	add	r3, ip
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d822      	bhi.n	80066c2 <UART_SetConfig+0x3fe>
 800667c:	009a      	lsls	r2, r3, #2
 800667e:	4b6b      	ldr	r3, [pc, #428]	; (800682c <UART_SetConfig+0x568>)
 8006680:	18d3      	adds	r3, r2, r3
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006686:	f7ff fb9f 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 800668a:	0003      	movs	r3, r0
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668e:	e022      	b.n	80066d6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006690:	f7ff fbb0 	bl	8005df4 <HAL_RCC_GetPCLK2Freq>
 8006694:	0003      	movs	r3, r0
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006698:	e01d      	b.n	80066d6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800669a:	4b65      	ldr	r3, [pc, #404]	; (8006830 <UART_SetConfig+0x56c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2210      	movs	r2, #16
 80066a0:	4013      	ands	r3, r2
 80066a2:	d002      	beq.n	80066aa <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80066a4:	4b63      	ldr	r3, [pc, #396]	; (8006834 <UART_SetConfig+0x570>)
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066a8:	e015      	b.n	80066d6 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80066aa:	4b63      	ldr	r3, [pc, #396]	; (8006838 <UART_SetConfig+0x574>)
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066ae:	e012      	b.n	80066d6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066b0:	f7ff fada 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 80066b4:	0003      	movs	r3, r0
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066b8:	e00d      	b.n	80066d6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066c0:	e009      	b.n	80066d6 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066c6:	231a      	movs	r3, #26
 80066c8:	2218      	movs	r2, #24
 80066ca:	4694      	mov	ip, r2
 80066cc:	44bc      	add	ip, r7
 80066ce:	4463      	add	r3, ip
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
        break;
 80066d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d100      	bne.n	80066de <UART_SetConfig+0x41a>
 80066dc:	e095      	b.n	800680a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	005a      	lsls	r2, r3, #1
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	085b      	lsrs	r3, r3, #1
 80066e8:	18d2      	adds	r2, r2, r3
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	0019      	movs	r1, r3
 80066f0:	0010      	movs	r0, r2
 80066f2:	f7f9 fd25 	bl	8000140 <__udivsi3>
 80066f6:	0003      	movs	r3, r0
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	2b0f      	cmp	r3, #15
 8006700:	d921      	bls.n	8006746 <UART_SetConfig+0x482>
 8006702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006704:	2380      	movs	r3, #128	; 0x80
 8006706:	025b      	lsls	r3, r3, #9
 8006708:	429a      	cmp	r2, r3
 800670a:	d21c      	bcs.n	8006746 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	b29a      	uxth	r2, r3
 8006710:	200e      	movs	r0, #14
 8006712:	2418      	movs	r4, #24
 8006714:	193b      	adds	r3, r7, r4
 8006716:	181b      	adds	r3, r3, r0
 8006718:	210f      	movs	r1, #15
 800671a:	438a      	bics	r2, r1
 800671c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	b29b      	uxth	r3, r3
 8006724:	2207      	movs	r2, #7
 8006726:	4013      	ands	r3, r2
 8006728:	b299      	uxth	r1, r3
 800672a:	193b      	adds	r3, r7, r4
 800672c:	181b      	adds	r3, r3, r0
 800672e:	193a      	adds	r2, r7, r4
 8006730:	1812      	adds	r2, r2, r0
 8006732:	8812      	ldrh	r2, [r2, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	193a      	adds	r2, r7, r4
 800673e:	1812      	adds	r2, r2, r0
 8006740:	8812      	ldrh	r2, [r2, #0]
 8006742:	60da      	str	r2, [r3, #12]
 8006744:	e061      	b.n	800680a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006746:	231a      	movs	r3, #26
 8006748:	2218      	movs	r2, #24
 800674a:	4694      	mov	ip, r2
 800674c:	44bc      	add	ip, r7
 800674e:	4463      	add	r3, ip
 8006750:	2201      	movs	r2, #1
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	e059      	b.n	800680a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006756:	231b      	movs	r3, #27
 8006758:	2218      	movs	r2, #24
 800675a:	4694      	mov	ip, r2
 800675c:	44bc      	add	ip, r7
 800675e:	4463      	add	r3, ip
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b08      	cmp	r3, #8
 8006764:	d822      	bhi.n	80067ac <UART_SetConfig+0x4e8>
 8006766:	009a      	lsls	r2, r3, #2
 8006768:	4b34      	ldr	r3, [pc, #208]	; (800683c <UART_SetConfig+0x578>)
 800676a:	18d3      	adds	r3, r2, r3
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006770:	f7ff fb2a 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8006774:	0003      	movs	r3, r0
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006778:	e022      	b.n	80067c0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800677a:	f7ff fb3b 	bl	8005df4 <HAL_RCC_GetPCLK2Freq>
 800677e:	0003      	movs	r3, r0
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006782:	e01d      	b.n	80067c0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006784:	4b2a      	ldr	r3, [pc, #168]	; (8006830 <UART_SetConfig+0x56c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2210      	movs	r2, #16
 800678a:	4013      	ands	r3, r2
 800678c:	d002      	beq.n	8006794 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <UART_SetConfig+0x570>)
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006792:	e015      	b.n	80067c0 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8006794:	4b28      	ldr	r3, [pc, #160]	; (8006838 <UART_SetConfig+0x574>)
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006798:	e012      	b.n	80067c0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800679a:	f7ff fa65 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 800679e:	0003      	movs	r3, r0
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a2:	e00d      	b.n	80067c0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a4:	2380      	movs	r3, #128	; 0x80
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067aa:	e009      	b.n	80067c0 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067b0:	231a      	movs	r3, #26
 80067b2:	2218      	movs	r2, #24
 80067b4:	4694      	mov	ip, r2
 80067b6:	44bc      	add	ip, r7
 80067b8:	4463      	add	r3, ip
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
        break;
 80067be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d021      	beq.n	800680a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	085a      	lsrs	r2, r3, #1
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	18d2      	adds	r2, r2, r3
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	0019      	movs	r1, r3
 80067d6:	0010      	movs	r0, r2
 80067d8:	f7f9 fcb2 	bl	8000140 <__udivsi3>
 80067dc:	0003      	movs	r3, r0
 80067de:	b29b      	uxth	r3, r3
 80067e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	2b0f      	cmp	r3, #15
 80067e6:	d909      	bls.n	80067fc <UART_SetConfig+0x538>
 80067e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	025b      	lsls	r3, r3, #9
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d204      	bcs.n	80067fc <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	e006      	b.n	800680a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80067fc:	231a      	movs	r3, #26
 80067fe:	2218      	movs	r2, #24
 8006800:	4694      	mov	ip, r2
 8006802:	44bc      	add	ip, r7
 8006804:	4463      	add	r3, ip
 8006806:	2201      	movs	r2, #1
 8006808:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	2200      	movs	r2, #0
 800680e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	2200      	movs	r2, #0
 8006814:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006816:	231a      	movs	r3, #26
 8006818:	2218      	movs	r2, #24
 800681a:	4694      	mov	ip, r2
 800681c:	44bc      	add	ip, r7
 800681e:	4463      	add	r3, ip
 8006820:	781b      	ldrb	r3, [r3, #0]
}
 8006822:	0018      	movs	r0, r3
 8006824:	46bd      	mov	sp, r7
 8006826:	b00e      	add	sp, #56	; 0x38
 8006828:	bdb0      	pop	{r4, r5, r7, pc}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	08009998 	.word	0x08009998
 8006830:	40021000 	.word	0x40021000
 8006834:	003d0900 	.word	0x003d0900
 8006838:	00f42400 	.word	0x00f42400
 800683c:	080099bc 	.word	0x080099bc

08006840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	2201      	movs	r2, #1
 800684e:	4013      	ands	r3, r2
 8006850:	d00b      	beq.n	800686a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <UART_AdvFeatureConfig+0x144>)
 800685a:	4013      	ands	r3, r2
 800685c:	0019      	movs	r1, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2202      	movs	r2, #2
 8006870:	4013      	ands	r3, r2
 8006872:	d00b      	beq.n	800688c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4a43      	ldr	r2, [pc, #268]	; (8006988 <UART_AdvFeatureConfig+0x148>)
 800687c:	4013      	ands	r3, r2
 800687e:	0019      	movs	r1, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2204      	movs	r2, #4
 8006892:	4013      	ands	r3, r2
 8006894:	d00b      	beq.n	80068ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	4a3b      	ldr	r2, [pc, #236]	; (800698c <UART_AdvFeatureConfig+0x14c>)
 800689e:	4013      	ands	r3, r2
 80068a0:	0019      	movs	r1, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	2208      	movs	r2, #8
 80068b4:	4013      	ands	r3, r2
 80068b6:	d00b      	beq.n	80068d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	4a34      	ldr	r2, [pc, #208]	; (8006990 <UART_AdvFeatureConfig+0x150>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	0019      	movs	r1, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	2210      	movs	r2, #16
 80068d6:	4013      	ands	r3, r2
 80068d8:	d00b      	beq.n	80068f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	4a2c      	ldr	r2, [pc, #176]	; (8006994 <UART_AdvFeatureConfig+0x154>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	0019      	movs	r1, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	2220      	movs	r2, #32
 80068f8:	4013      	ands	r3, r2
 80068fa:	d00b      	beq.n	8006914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	4a25      	ldr	r2, [pc, #148]	; (8006998 <UART_AdvFeatureConfig+0x158>)
 8006904:	4013      	ands	r3, r2
 8006906:	0019      	movs	r1, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	2240      	movs	r2, #64	; 0x40
 800691a:	4013      	ands	r3, r2
 800691c:	d01d      	beq.n	800695a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a1d      	ldr	r2, [pc, #116]	; (800699c <UART_AdvFeatureConfig+0x15c>)
 8006926:	4013      	ands	r3, r2
 8006928:	0019      	movs	r1, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800693a:	2380      	movs	r3, #128	; 0x80
 800693c:	035b      	lsls	r3, r3, #13
 800693e:	429a      	cmp	r2, r3
 8006940:	d10b      	bne.n	800695a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a15      	ldr	r2, [pc, #84]	; (80069a0 <UART_AdvFeatureConfig+0x160>)
 800694a:	4013      	ands	r3, r2
 800694c:	0019      	movs	r1, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	4013      	ands	r3, r2
 8006962:	d00b      	beq.n	800697c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <UART_AdvFeatureConfig+0x164>)
 800696c:	4013      	ands	r3, r2
 800696e:	0019      	movs	r1, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }
}
 800697c:	46c0      	nop			; (mov r8, r8)
 800697e:	46bd      	mov	sp, r7
 8006980:	b002      	add	sp, #8
 8006982:	bd80      	pop	{r7, pc}
 8006984:	fffdffff 	.word	0xfffdffff
 8006988:	fffeffff 	.word	0xfffeffff
 800698c:	fffbffff 	.word	0xfffbffff
 8006990:	ffff7fff 	.word	0xffff7fff
 8006994:	ffffefff 	.word	0xffffefff
 8006998:	ffffdfff 	.word	0xffffdfff
 800699c:	ffefffff 	.word	0xffefffff
 80069a0:	ff9fffff 	.word	0xff9fffff
 80069a4:	fff7ffff 	.word	0xfff7ffff

080069a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2280      	movs	r2, #128	; 0x80
 80069b4:	2100      	movs	r1, #0
 80069b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b8:	f7fc ff72 	bl	80038a0 <HAL_GetTick>
 80069bc:	0003      	movs	r3, r0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2208      	movs	r2, #8
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d10c      	bne.n	80069e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2280      	movs	r2, #128	; 0x80
 80069d2:	0391      	lsls	r1, r2, #14
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4a17      	ldr	r2, [pc, #92]	; (8006a34 <UART_CheckIdleState+0x8c>)
 80069d8:	9200      	str	r2, [sp, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	f000 f82c 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 80069e0:	1e03      	subs	r3, r0, #0
 80069e2:	d001      	beq.n	80069e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e021      	b.n	8006a2c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2204      	movs	r2, #4
 80069f0:	4013      	ands	r3, r2
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d10c      	bne.n	8006a10 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2280      	movs	r2, #128	; 0x80
 80069fa:	03d1      	lsls	r1, r2, #15
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4a0d      	ldr	r2, [pc, #52]	; (8006a34 <UART_CheckIdleState+0x8c>)
 8006a00:	9200      	str	r2, [sp, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f000 f818 	bl	8006a38 <UART_WaitOnFlagUntilTimeout>
 8006a08:	1e03      	subs	r3, r0, #0
 8006a0a:	d001      	beq.n	8006a10 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e00d      	b.n	8006a2c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2274      	movs	r2, #116	; 0x74
 8006a26:	2100      	movs	r1, #0
 8006a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b004      	add	sp, #16
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	01ffffff 	.word	0x01ffffff

08006a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b094      	sub	sp, #80	; 0x50
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	1dfb      	adds	r3, r7, #7
 8006a46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a48:	e0a3      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	d100      	bne.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006a50:	e09f      	b.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a52:	f7fc ff25 	bl	80038a0 <HAL_GetTick>
 8006a56:	0002      	movs	r2, r0
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d302      	bcc.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d13d      	bne.n	8006ae4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a68:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a70:	647b      	str	r3, [r7, #68]	; 0x44
 8006a72:	2301      	movs	r3, #1
 8006a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	f383 8810 	msr	PRIMASK, r3
}
 8006a7c:	46c0      	nop			; (mov r8, r8)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	494c      	ldr	r1, [pc, #304]	; (8006bbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006a8a:	400a      	ands	r2, r1
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a90:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	f383 8810 	msr	PRIMASK, r3
}
 8006a98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a9e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	f383 8810 	msr	PRIMASK, r3
}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2101      	movs	r1, #1
 8006abc:	438a      	bics	r2, r1
 8006abe:	609a      	str	r2, [r3, #8]
 8006ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac6:	f383 8810 	msr	PRIMASK, r3
}
 8006aca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2220      	movs	r2, #32
 8006ad6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2274      	movs	r2, #116	; 0x74
 8006adc:	2100      	movs	r1, #0
 8006ade:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e067      	b.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2204      	movs	r2, #4
 8006aec:	4013      	ands	r3, r2
 8006aee:	d050      	beq.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	2380      	movs	r3, #128	; 0x80
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	401a      	ands	r2, r3
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d146      	bne.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2280      	movs	r2, #128	; 0x80
 8006b0a:	0112      	lsls	r2, r2, #4
 8006b0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b12:	613b      	str	r3, [r7, #16]
  return(result);
 8006b14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b18:	2301      	movs	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f383 8810 	msr	PRIMASK, r3
}
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4923      	ldr	r1, [pc, #140]	; (8006bbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8006b30:	400a      	ands	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f383 8810 	msr	PRIMASK, r3
}
 8006b3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b40:	f3ef 8310 	mrs	r3, PRIMASK
 8006b44:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b46:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	f383 8810 	msr	PRIMASK, r3
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2101      	movs	r1, #1
 8006b62:	438a      	bics	r2, r1
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	f383 8810 	msr	PRIMASK, r3
}
 8006b70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	2120      	movs	r1, #32
 8006b84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2274      	movs	r2, #116	; 0x74
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e010      	b.n	8006bb4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	425a      	negs	r2, r3
 8006ba2:	4153      	adcs	r3, r2
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	1dfb      	adds	r3, r7, #7
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d100      	bne.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006bb0:	e74b      	b.n	8006a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b014      	add	sp, #80	; 0x50
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	fffffe5f 	.word	0xfffffe5f

08006bc0 <__assert_func>:
 8006bc0:	b530      	push	{r4, r5, lr}
 8006bc2:	0014      	movs	r4, r2
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <__assert_func+0x2c>)
 8006bc8:	0005      	movs	r5, r0
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	b085      	sub	sp, #20
 8006bce:	68d8      	ldr	r0, [r3, #12]
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <__assert_func+0x30>)
 8006bd2:	2c00      	cmp	r4, #0
 8006bd4:	d101      	bne.n	8006bda <__assert_func+0x1a>
 8006bd6:	4b07      	ldr	r3, [pc, #28]	; (8006bf4 <__assert_func+0x34>)
 8006bd8:	001c      	movs	r4, r3
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	9100      	str	r1, [sp, #0]
 8006bde:	002b      	movs	r3, r5
 8006be0:	4905      	ldr	r1, [pc, #20]	; (8006bf8 <__assert_func+0x38>)
 8006be2:	9402      	str	r4, [sp, #8]
 8006be4:	f000 f810 	bl	8006c08 <fiprintf>
 8006be8:	f000 ff0e 	bl	8007a08 <abort>
 8006bec:	2000000c 	.word	0x2000000c
 8006bf0:	080099e0 	.word	0x080099e0
 8006bf4:	08009a1b 	.word	0x08009a1b
 8006bf8:	080099ed 	.word	0x080099ed

08006bfc <__errno>:
 8006bfc:	4b01      	ldr	r3, [pc, #4]	; (8006c04 <__errno+0x8>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	4770      	bx	lr
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	2000000c 	.word	0x2000000c

08006c08 <fiprintf>:
 8006c08:	b40e      	push	{r1, r2, r3}
 8006c0a:	b503      	push	{r0, r1, lr}
 8006c0c:	0001      	movs	r1, r0
 8006c0e:	ab03      	add	r3, sp, #12
 8006c10:	4804      	ldr	r0, [pc, #16]	; (8006c24 <fiprintf+0x1c>)
 8006c12:	cb04      	ldmia	r3!, {r2}
 8006c14:	6800      	ldr	r0, [r0, #0]
 8006c16:	9301      	str	r3, [sp, #4]
 8006c18:	f000 f85a 	bl	8006cd0 <_vfiprintf_r>
 8006c1c:	b002      	add	sp, #8
 8006c1e:	bc08      	pop	{r3}
 8006c20:	b003      	add	sp, #12
 8006c22:	4718      	bx	r3
 8006c24:	2000000c 	.word	0x2000000c

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	4d0c      	ldr	r5, [pc, #48]	; (8006c60 <__libc_init_array+0x38>)
 8006c2e:	4c0d      	ldr	r4, [pc, #52]	; (8006c64 <__libc_init_array+0x3c>)
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	42a6      	cmp	r6, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	2600      	movs	r6, #0
 8006c3a:	f002 fd93 	bl	8009764 <_init>
 8006c3e:	4d0a      	ldr	r5, [pc, #40]	; (8006c68 <__libc_init_array+0x40>)
 8006c40:	4c0a      	ldr	r4, [pc, #40]	; (8006c6c <__libc_init_array+0x44>)
 8006c42:	1b64      	subs	r4, r4, r5
 8006c44:	10a4      	asrs	r4, r4, #2
 8006c46:	42a6      	cmp	r6, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	00b3      	lsls	r3, r6, #2
 8006c4e:	58eb      	ldr	r3, [r5, r3]
 8006c50:	4798      	blx	r3
 8006c52:	3601      	adds	r6, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	00b3      	lsls	r3, r6, #2
 8006c58:	58eb      	ldr	r3, [r5, r3]
 8006c5a:	4798      	blx	r3
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	08009dd0 	.word	0x08009dd0
 8006c64:	08009dd0 	.word	0x08009dd0
 8006c68:	08009dd0 	.word	0x08009dd0
 8006c6c:	08009dd4 	.word	0x08009dd4

08006c70 <memset>:
 8006c70:	0003      	movs	r3, r0
 8006c72:	1882      	adds	r2, r0, r2
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d100      	bne.n	8006c7a <memset+0xa>
 8006c78:	4770      	bx	lr
 8006c7a:	7019      	strb	r1, [r3, #0]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	e7f9      	b.n	8006c74 <memset+0x4>

08006c80 <__sfputc_r>:
 8006c80:	6893      	ldr	r3, [r2, #8]
 8006c82:	b510      	push	{r4, lr}
 8006c84:	3b01      	subs	r3, #1
 8006c86:	6093      	str	r3, [r2, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da04      	bge.n	8006c96 <__sfputc_r+0x16>
 8006c8c:	6994      	ldr	r4, [r2, #24]
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	db07      	blt.n	8006ca2 <__sfputc_r+0x22>
 8006c92:	290a      	cmp	r1, #10
 8006c94:	d005      	beq.n	8006ca2 <__sfputc_r+0x22>
 8006c96:	6813      	ldr	r3, [r2, #0]
 8006c98:	1c58      	adds	r0, r3, #1
 8006c9a:	6010      	str	r0, [r2, #0]
 8006c9c:	7019      	strb	r1, [r3, #0]
 8006c9e:	0008      	movs	r0, r1
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	f000 fde3 	bl	800786c <__swbuf_r>
 8006ca6:	0001      	movs	r1, r0
 8006ca8:	e7f9      	b.n	8006c9e <__sfputc_r+0x1e>

08006caa <__sfputs_r>:
 8006caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cac:	0006      	movs	r6, r0
 8006cae:	000f      	movs	r7, r1
 8006cb0:	0014      	movs	r4, r2
 8006cb2:	18d5      	adds	r5, r2, r3
 8006cb4:	42ac      	cmp	r4, r5
 8006cb6:	d101      	bne.n	8006cbc <__sfputs_r+0x12>
 8006cb8:	2000      	movs	r0, #0
 8006cba:	e007      	b.n	8006ccc <__sfputs_r+0x22>
 8006cbc:	7821      	ldrb	r1, [r4, #0]
 8006cbe:	003a      	movs	r2, r7
 8006cc0:	0030      	movs	r0, r6
 8006cc2:	f7ff ffdd 	bl	8006c80 <__sfputc_r>
 8006cc6:	3401      	adds	r4, #1
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d1f3      	bne.n	8006cb4 <__sfputs_r+0xa>
 8006ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cd0 <_vfiprintf_r>:
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	b0a1      	sub	sp, #132	; 0x84
 8006cd4:	0006      	movs	r6, r0
 8006cd6:	000c      	movs	r4, r1
 8006cd8:	001f      	movs	r7, r3
 8006cda:	9203      	str	r2, [sp, #12]
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d004      	beq.n	8006cea <_vfiprintf_r+0x1a>
 8006ce0:	6983      	ldr	r3, [r0, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <_vfiprintf_r+0x1a>
 8006ce6:	f001 fe6d 	bl	80089c4 <__sinit>
 8006cea:	4b8e      	ldr	r3, [pc, #568]	; (8006f24 <_vfiprintf_r+0x254>)
 8006cec:	429c      	cmp	r4, r3
 8006cee:	d11c      	bne.n	8006d2a <_vfiprintf_r+0x5a>
 8006cf0:	6874      	ldr	r4, [r6, #4]
 8006cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cf4:	07db      	lsls	r3, r3, #31
 8006cf6:	d405      	bmi.n	8006d04 <_vfiprintf_r+0x34>
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	059b      	lsls	r3, r3, #22
 8006cfc:	d402      	bmi.n	8006d04 <_vfiprintf_r+0x34>
 8006cfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d00:	f001 ff05 	bl	8008b0e <__retarget_lock_acquire_recursive>
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	071b      	lsls	r3, r3, #28
 8006d08:	d502      	bpl.n	8006d10 <_vfiprintf_r+0x40>
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d11d      	bne.n	8006d4c <_vfiprintf_r+0x7c>
 8006d10:	0021      	movs	r1, r4
 8006d12:	0030      	movs	r0, r6
 8006d14:	f000 fe00 	bl	8007918 <__swsetup_r>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d017      	beq.n	8006d4c <_vfiprintf_r+0x7c>
 8006d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d1e:	07db      	lsls	r3, r3, #31
 8006d20:	d50d      	bpl.n	8006d3e <_vfiprintf_r+0x6e>
 8006d22:	2001      	movs	r0, #1
 8006d24:	4240      	negs	r0, r0
 8006d26:	b021      	add	sp, #132	; 0x84
 8006d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d2a:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <_vfiprintf_r+0x258>)
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	d101      	bne.n	8006d34 <_vfiprintf_r+0x64>
 8006d30:	68b4      	ldr	r4, [r6, #8]
 8006d32:	e7de      	b.n	8006cf2 <_vfiprintf_r+0x22>
 8006d34:	4b7d      	ldr	r3, [pc, #500]	; (8006f2c <_vfiprintf_r+0x25c>)
 8006d36:	429c      	cmp	r4, r3
 8006d38:	d1db      	bne.n	8006cf2 <_vfiprintf_r+0x22>
 8006d3a:	68f4      	ldr	r4, [r6, #12]
 8006d3c:	e7d9      	b.n	8006cf2 <_vfiprintf_r+0x22>
 8006d3e:	89a3      	ldrh	r3, [r4, #12]
 8006d40:	059b      	lsls	r3, r3, #22
 8006d42:	d4ee      	bmi.n	8006d22 <_vfiprintf_r+0x52>
 8006d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d46:	f001 fee3 	bl	8008b10 <__retarget_lock_release_recursive>
 8006d4a:	e7ea      	b.n	8006d22 <_vfiprintf_r+0x52>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	ad08      	add	r5, sp, #32
 8006d50:	616b      	str	r3, [r5, #20]
 8006d52:	3320      	adds	r3, #32
 8006d54:	766b      	strb	r3, [r5, #25]
 8006d56:	3310      	adds	r3, #16
 8006d58:	76ab      	strb	r3, [r5, #26]
 8006d5a:	9707      	str	r7, [sp, #28]
 8006d5c:	9f03      	ldr	r7, [sp, #12]
 8006d5e:	783b      	ldrb	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <_vfiprintf_r+0x98>
 8006d64:	2b25      	cmp	r3, #37	; 0x25
 8006d66:	d14e      	bne.n	8006e06 <_vfiprintf_r+0x136>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	1afb      	subs	r3, r7, r3
 8006d6c:	9305      	str	r3, [sp, #20]
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	429f      	cmp	r7, r3
 8006d72:	d00d      	beq.n	8006d90 <_vfiprintf_r+0xc0>
 8006d74:	9b05      	ldr	r3, [sp, #20]
 8006d76:	0021      	movs	r1, r4
 8006d78:	0030      	movs	r0, r6
 8006d7a:	9a03      	ldr	r2, [sp, #12]
 8006d7c:	f7ff ff95 	bl	8006caa <__sfputs_r>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d100      	bne.n	8006d86 <_vfiprintf_r+0xb6>
 8006d84:	e0b5      	b.n	8006ef2 <_vfiprintf_r+0x222>
 8006d86:	696a      	ldr	r2, [r5, #20]
 8006d88:	9b05      	ldr	r3, [sp, #20]
 8006d8a:	4694      	mov	ip, r2
 8006d8c:	4463      	add	r3, ip
 8006d8e:	616b      	str	r3, [r5, #20]
 8006d90:	783b      	ldrb	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d100      	bne.n	8006d98 <_vfiprintf_r+0xc8>
 8006d96:	e0ac      	b.n	8006ef2 <_vfiprintf_r+0x222>
 8006d98:	2201      	movs	r2, #1
 8006d9a:	1c7b      	adds	r3, r7, #1
 8006d9c:	9303      	str	r3, [sp, #12]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	4252      	negs	r2, r2
 8006da2:	606a      	str	r2, [r5, #4]
 8006da4:	a904      	add	r1, sp, #16
 8006da6:	3254      	adds	r2, #84	; 0x54
 8006da8:	1852      	adds	r2, r2, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	60eb      	str	r3, [r5, #12]
 8006dae:	60ab      	str	r3, [r5, #8]
 8006db0:	7013      	strb	r3, [r2, #0]
 8006db2:	65ab      	str	r3, [r5, #88]	; 0x58
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	2205      	movs	r2, #5
 8006db8:	7819      	ldrb	r1, [r3, #0]
 8006dba:	485d      	ldr	r0, [pc, #372]	; (8006f30 <_vfiprintf_r+0x260>)
 8006dbc:	f001 ff20 	bl	8008c00 <memchr>
 8006dc0:	9b03      	ldr	r3, [sp, #12]
 8006dc2:	1c5f      	adds	r7, r3, #1
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d120      	bne.n	8006e0a <_vfiprintf_r+0x13a>
 8006dc8:	682a      	ldr	r2, [r5, #0]
 8006dca:	06d3      	lsls	r3, r2, #27
 8006dcc:	d504      	bpl.n	8006dd8 <_vfiprintf_r+0x108>
 8006dce:	2353      	movs	r3, #83	; 0x53
 8006dd0:	a904      	add	r1, sp, #16
 8006dd2:	185b      	adds	r3, r3, r1
 8006dd4:	2120      	movs	r1, #32
 8006dd6:	7019      	strb	r1, [r3, #0]
 8006dd8:	0713      	lsls	r3, r2, #28
 8006dda:	d504      	bpl.n	8006de6 <_vfiprintf_r+0x116>
 8006ddc:	2353      	movs	r3, #83	; 0x53
 8006dde:	a904      	add	r1, sp, #16
 8006de0:	185b      	adds	r3, r3, r1
 8006de2:	212b      	movs	r1, #43	; 0x2b
 8006de4:	7019      	strb	r1, [r3, #0]
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b2a      	cmp	r3, #42	; 0x2a
 8006dec:	d016      	beq.n	8006e1c <_vfiprintf_r+0x14c>
 8006dee:	2100      	movs	r1, #0
 8006df0:	68eb      	ldr	r3, [r5, #12]
 8006df2:	9f03      	ldr	r7, [sp, #12]
 8006df4:	783a      	ldrb	r2, [r7, #0]
 8006df6:	1c78      	adds	r0, r7, #1
 8006df8:	3a30      	subs	r2, #48	; 0x30
 8006dfa:	4684      	mov	ip, r0
 8006dfc:	2a09      	cmp	r2, #9
 8006dfe:	d94f      	bls.n	8006ea0 <_vfiprintf_r+0x1d0>
 8006e00:	2900      	cmp	r1, #0
 8006e02:	d111      	bne.n	8006e28 <_vfiprintf_r+0x158>
 8006e04:	e017      	b.n	8006e36 <_vfiprintf_r+0x166>
 8006e06:	3701      	adds	r7, #1
 8006e08:	e7a9      	b.n	8006d5e <_vfiprintf_r+0x8e>
 8006e0a:	4b49      	ldr	r3, [pc, #292]	; (8006f30 <_vfiprintf_r+0x260>)
 8006e0c:	682a      	ldr	r2, [r5, #0]
 8006e0e:	1ac0      	subs	r0, r0, r3
 8006e10:	2301      	movs	r3, #1
 8006e12:	4083      	lsls	r3, r0
 8006e14:	4313      	orrs	r3, r2
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	9703      	str	r7, [sp, #12]
 8006e1a:	e7cb      	b.n	8006db4 <_vfiprintf_r+0xe4>
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	1d19      	adds	r1, r3, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	9107      	str	r1, [sp, #28]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	db01      	blt.n	8006e2c <_vfiprintf_r+0x15c>
 8006e28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e2a:	e004      	b.n	8006e36 <_vfiprintf_r+0x166>
 8006e2c:	425b      	negs	r3, r3
 8006e2e:	60eb      	str	r3, [r5, #12]
 8006e30:	2302      	movs	r3, #2
 8006e32:	4313      	orrs	r3, r2
 8006e34:	602b      	str	r3, [r5, #0]
 8006e36:	783b      	ldrb	r3, [r7, #0]
 8006e38:	2b2e      	cmp	r3, #46	; 0x2e
 8006e3a:	d10a      	bne.n	8006e52 <_vfiprintf_r+0x182>
 8006e3c:	787b      	ldrb	r3, [r7, #1]
 8006e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e40:	d137      	bne.n	8006eb2 <_vfiprintf_r+0x1e2>
 8006e42:	9b07      	ldr	r3, [sp, #28]
 8006e44:	3702      	adds	r7, #2
 8006e46:	1d1a      	adds	r2, r3, #4
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	9207      	str	r2, [sp, #28]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	db2d      	blt.n	8006eac <_vfiprintf_r+0x1dc>
 8006e50:	9309      	str	r3, [sp, #36]	; 0x24
 8006e52:	2203      	movs	r2, #3
 8006e54:	7839      	ldrb	r1, [r7, #0]
 8006e56:	4837      	ldr	r0, [pc, #220]	; (8006f34 <_vfiprintf_r+0x264>)
 8006e58:	f001 fed2 	bl	8008c00 <memchr>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d007      	beq.n	8006e70 <_vfiprintf_r+0x1a0>
 8006e60:	4b34      	ldr	r3, [pc, #208]	; (8006f34 <_vfiprintf_r+0x264>)
 8006e62:	682a      	ldr	r2, [r5, #0]
 8006e64:	1ac0      	subs	r0, r0, r3
 8006e66:	2340      	movs	r3, #64	; 0x40
 8006e68:	4083      	lsls	r3, r0
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	3701      	adds	r7, #1
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	7839      	ldrb	r1, [r7, #0]
 8006e72:	1c7b      	adds	r3, r7, #1
 8006e74:	2206      	movs	r2, #6
 8006e76:	4830      	ldr	r0, [pc, #192]	; (8006f38 <_vfiprintf_r+0x268>)
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	7629      	strb	r1, [r5, #24]
 8006e7c:	f001 fec0 	bl	8008c00 <memchr>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d045      	beq.n	8006f10 <_vfiprintf_r+0x240>
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <_vfiprintf_r+0x26c>)
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d127      	bne.n	8006eda <_vfiprintf_r+0x20a>
 8006e8a:	2207      	movs	r2, #7
 8006e8c:	9b07      	ldr	r3, [sp, #28]
 8006e8e:	3307      	adds	r3, #7
 8006e90:	4393      	bics	r3, r2
 8006e92:	3308      	adds	r3, #8
 8006e94:	9307      	str	r3, [sp, #28]
 8006e96:	696b      	ldr	r3, [r5, #20]
 8006e98:	9a04      	ldr	r2, [sp, #16]
 8006e9a:	189b      	adds	r3, r3, r2
 8006e9c:	616b      	str	r3, [r5, #20]
 8006e9e:	e75d      	b.n	8006d5c <_vfiprintf_r+0x8c>
 8006ea0:	210a      	movs	r1, #10
 8006ea2:	434b      	muls	r3, r1
 8006ea4:	4667      	mov	r7, ip
 8006ea6:	189b      	adds	r3, r3, r2
 8006ea8:	3909      	subs	r1, #9
 8006eaa:	e7a3      	b.n	8006df4 <_vfiprintf_r+0x124>
 8006eac:	2301      	movs	r3, #1
 8006eae:	425b      	negs	r3, r3
 8006eb0:	e7ce      	b.n	8006e50 <_vfiprintf_r+0x180>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	001a      	movs	r2, r3
 8006eb6:	3701      	adds	r7, #1
 8006eb8:	606b      	str	r3, [r5, #4]
 8006eba:	7839      	ldrb	r1, [r7, #0]
 8006ebc:	1c78      	adds	r0, r7, #1
 8006ebe:	3930      	subs	r1, #48	; 0x30
 8006ec0:	4684      	mov	ip, r0
 8006ec2:	2909      	cmp	r1, #9
 8006ec4:	d903      	bls.n	8006ece <_vfiprintf_r+0x1fe>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0c3      	beq.n	8006e52 <_vfiprintf_r+0x182>
 8006eca:	9209      	str	r2, [sp, #36]	; 0x24
 8006ecc:	e7c1      	b.n	8006e52 <_vfiprintf_r+0x182>
 8006ece:	230a      	movs	r3, #10
 8006ed0:	435a      	muls	r2, r3
 8006ed2:	4667      	mov	r7, ip
 8006ed4:	1852      	adds	r2, r2, r1
 8006ed6:	3b09      	subs	r3, #9
 8006ed8:	e7ef      	b.n	8006eba <_vfiprintf_r+0x1ea>
 8006eda:	ab07      	add	r3, sp, #28
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	0022      	movs	r2, r4
 8006ee0:	0029      	movs	r1, r5
 8006ee2:	0030      	movs	r0, r6
 8006ee4:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <_vfiprintf_r+0x270>)
 8006ee6:	f000 f8d7 	bl	8007098 <_printf_float>
 8006eea:	9004      	str	r0, [sp, #16]
 8006eec:	9b04      	ldr	r3, [sp, #16]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	d1d1      	bne.n	8006e96 <_vfiprintf_r+0x1c6>
 8006ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ef4:	07db      	lsls	r3, r3, #31
 8006ef6:	d405      	bmi.n	8006f04 <_vfiprintf_r+0x234>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	059b      	lsls	r3, r3, #22
 8006efc:	d402      	bmi.n	8006f04 <_vfiprintf_r+0x234>
 8006efe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f00:	f001 fe06 	bl	8008b10 <__retarget_lock_release_recursive>
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	065b      	lsls	r3, r3, #25
 8006f08:	d500      	bpl.n	8006f0c <_vfiprintf_r+0x23c>
 8006f0a:	e70a      	b.n	8006d22 <_vfiprintf_r+0x52>
 8006f0c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f0e:	e70a      	b.n	8006d26 <_vfiprintf_r+0x56>
 8006f10:	ab07      	add	r3, sp, #28
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	0022      	movs	r2, r4
 8006f16:	0029      	movs	r1, r5
 8006f18:	0030      	movs	r0, r6
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <_vfiprintf_r+0x270>)
 8006f1c:	f000 fb7a 	bl	8007614 <_printf_i>
 8006f20:	e7e3      	b.n	8006eea <_vfiprintf_r+0x21a>
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	08009b1c 	.word	0x08009b1c
 8006f28:	08009b3c 	.word	0x08009b3c
 8006f2c:	08009afc 	.word	0x08009afc
 8006f30:	08009a20 	.word	0x08009a20
 8006f34:	08009a26 	.word	0x08009a26
 8006f38:	08009a2a 	.word	0x08009a2a
 8006f3c:	08007099 	.word	0x08007099
 8006f40:	08006cab 	.word	0x08006cab

08006f44 <__cvt>:
 8006f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f46:	001e      	movs	r6, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	0014      	movs	r4, r2
 8006f4c:	b08b      	sub	sp, #44	; 0x2c
 8006f4e:	429e      	cmp	r6, r3
 8006f50:	da04      	bge.n	8006f5c <__cvt+0x18>
 8006f52:	2180      	movs	r1, #128	; 0x80
 8006f54:	0609      	lsls	r1, r1, #24
 8006f56:	1873      	adds	r3, r6, r1
 8006f58:	001e      	movs	r6, r3
 8006f5a:	232d      	movs	r3, #45	; 0x2d
 8006f5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f5e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006f60:	7013      	strb	r3, [r2, #0]
 8006f62:	2320      	movs	r3, #32
 8006f64:	2203      	movs	r2, #3
 8006f66:	439f      	bics	r7, r3
 8006f68:	2f46      	cmp	r7, #70	; 0x46
 8006f6a:	d007      	beq.n	8006f7c <__cvt+0x38>
 8006f6c:	003b      	movs	r3, r7
 8006f6e:	3b45      	subs	r3, #69	; 0x45
 8006f70:	4259      	negs	r1, r3
 8006f72:	414b      	adcs	r3, r1
 8006f74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006f76:	3a01      	subs	r2, #1
 8006f78:	18cb      	adds	r3, r1, r3
 8006f7a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f7c:	ab09      	add	r3, sp, #36	; 0x24
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	ab08      	add	r3, sp, #32
 8006f82:	9303      	str	r3, [sp, #12]
 8006f84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f86:	9200      	str	r2, [sp, #0]
 8006f88:	9302      	str	r3, [sp, #8]
 8006f8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f8c:	0022      	movs	r2, r4
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	0033      	movs	r3, r6
 8006f92:	f000 fdcb 	bl	8007b2c <_dtoa_r>
 8006f96:	0005      	movs	r5, r0
 8006f98:	2f47      	cmp	r7, #71	; 0x47
 8006f9a:	d102      	bne.n	8006fa2 <__cvt+0x5e>
 8006f9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f9e:	07db      	lsls	r3, r3, #31
 8006fa0:	d528      	bpl.n	8006ff4 <__cvt+0xb0>
 8006fa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fa4:	18eb      	adds	r3, r5, r3
 8006fa6:	9307      	str	r3, [sp, #28]
 8006fa8:	2f46      	cmp	r7, #70	; 0x46
 8006faa:	d114      	bne.n	8006fd6 <__cvt+0x92>
 8006fac:	782b      	ldrb	r3, [r5, #0]
 8006fae:	2b30      	cmp	r3, #48	; 0x30
 8006fb0:	d10c      	bne.n	8006fcc <__cvt+0x88>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	0020      	movs	r0, r4
 8006fb8:	0031      	movs	r1, r6
 8006fba:	f7f9 fa47 	bl	800044c <__aeabi_dcmpeq>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d104      	bne.n	8006fcc <__cvt+0x88>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fc6:	1a9b      	subs	r3, r3, r2
 8006fc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fce:	9a07      	ldr	r2, [sp, #28]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	18d3      	adds	r3, r2, r3
 8006fd4:	9307      	str	r3, [sp, #28]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	0020      	movs	r0, r4
 8006fdc:	0031      	movs	r1, r6
 8006fde:	f7f9 fa35 	bl	800044c <__aeabi_dcmpeq>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d001      	beq.n	8006fea <__cvt+0xa6>
 8006fe6:	9b07      	ldr	r3, [sp, #28]
 8006fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fea:	2230      	movs	r2, #48	; 0x30
 8006fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fee:	9907      	ldr	r1, [sp, #28]
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	d306      	bcc.n	8007002 <__cvt+0xbe>
 8006ff4:	0028      	movs	r0, r5
 8006ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006ffa:	1b5b      	subs	r3, r3, r5
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	b00b      	add	sp, #44	; 0x2c
 8007000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007002:	1c59      	adds	r1, r3, #1
 8007004:	9109      	str	r1, [sp, #36]	; 0x24
 8007006:	701a      	strb	r2, [r3, #0]
 8007008:	e7f0      	b.n	8006fec <__cvt+0xa8>

0800700a <__exponent>:
 800700a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800700c:	1c83      	adds	r3, r0, #2
 800700e:	b087      	sub	sp, #28
 8007010:	9303      	str	r3, [sp, #12]
 8007012:	0005      	movs	r5, r0
 8007014:	000c      	movs	r4, r1
 8007016:	232b      	movs	r3, #43	; 0x2b
 8007018:	7002      	strb	r2, [r0, #0]
 800701a:	2900      	cmp	r1, #0
 800701c:	da01      	bge.n	8007022 <__exponent+0x18>
 800701e:	424c      	negs	r4, r1
 8007020:	3302      	adds	r3, #2
 8007022:	706b      	strb	r3, [r5, #1]
 8007024:	2c09      	cmp	r4, #9
 8007026:	dd31      	ble.n	800708c <__exponent+0x82>
 8007028:	270a      	movs	r7, #10
 800702a:	ab04      	add	r3, sp, #16
 800702c:	1dde      	adds	r6, r3, #7
 800702e:	0020      	movs	r0, r4
 8007030:	0039      	movs	r1, r7
 8007032:	9601      	str	r6, [sp, #4]
 8007034:	f7f9 f9f4 	bl	8000420 <__aeabi_idivmod>
 8007038:	3e01      	subs	r6, #1
 800703a:	3130      	adds	r1, #48	; 0x30
 800703c:	0020      	movs	r0, r4
 800703e:	7031      	strb	r1, [r6, #0]
 8007040:	0039      	movs	r1, r7
 8007042:	9402      	str	r4, [sp, #8]
 8007044:	f7f9 f906 	bl	8000254 <__divsi3>
 8007048:	9b02      	ldr	r3, [sp, #8]
 800704a:	0004      	movs	r4, r0
 800704c:	2b63      	cmp	r3, #99	; 0x63
 800704e:	dcee      	bgt.n	800702e <__exponent+0x24>
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	3430      	adds	r4, #48	; 0x30
 8007054:	1e9a      	subs	r2, r3, #2
 8007056:	0013      	movs	r3, r2
 8007058:	9903      	ldr	r1, [sp, #12]
 800705a:	7014      	strb	r4, [r2, #0]
 800705c:	a804      	add	r0, sp, #16
 800705e:	3007      	adds	r0, #7
 8007060:	4298      	cmp	r0, r3
 8007062:	d80e      	bhi.n	8007082 <__exponent+0x78>
 8007064:	ab04      	add	r3, sp, #16
 8007066:	3307      	adds	r3, #7
 8007068:	2000      	movs	r0, #0
 800706a:	429a      	cmp	r2, r3
 800706c:	d804      	bhi.n	8007078 <__exponent+0x6e>
 800706e:	ab04      	add	r3, sp, #16
 8007070:	3009      	adds	r0, #9
 8007072:	18c0      	adds	r0, r0, r3
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	1ac0      	subs	r0, r0, r3
 8007078:	9b03      	ldr	r3, [sp, #12]
 800707a:	1818      	adds	r0, r3, r0
 800707c:	1b40      	subs	r0, r0, r5
 800707e:	b007      	add	sp, #28
 8007080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007082:	7818      	ldrb	r0, [r3, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	7008      	strb	r0, [r1, #0]
 8007088:	3101      	adds	r1, #1
 800708a:	e7e7      	b.n	800705c <__exponent+0x52>
 800708c:	2330      	movs	r3, #48	; 0x30
 800708e:	18e4      	adds	r4, r4, r3
 8007090:	70ab      	strb	r3, [r5, #2]
 8007092:	1d28      	adds	r0, r5, #4
 8007094:	70ec      	strb	r4, [r5, #3]
 8007096:	e7f1      	b.n	800707c <__exponent+0x72>

08007098 <_printf_float>:
 8007098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709a:	b095      	sub	sp, #84	; 0x54
 800709c:	000c      	movs	r4, r1
 800709e:	9208      	str	r2, [sp, #32]
 80070a0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80070a2:	9309      	str	r3, [sp, #36]	; 0x24
 80070a4:	0007      	movs	r7, r0
 80070a6:	f001 fd2d 	bl	8008b04 <_localeconv_r>
 80070aa:	6803      	ldr	r3, [r0, #0]
 80070ac:	0018      	movs	r0, r3
 80070ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80070b0:	f7f9 f82a 	bl	8000108 <strlen>
 80070b4:	2300      	movs	r3, #0
 80070b6:	9312      	str	r3, [sp, #72]	; 0x48
 80070b8:	7e23      	ldrb	r3, [r4, #24]
 80070ba:	2207      	movs	r2, #7
 80070bc:	001e      	movs	r6, r3
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	900d      	str	r0, [sp, #52]	; 0x34
 80070c2:	930c      	str	r3, [sp, #48]	; 0x30
 80070c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070c6:	682b      	ldr	r3, [r5, #0]
 80070c8:	05c9      	lsls	r1, r1, #23
 80070ca:	d547      	bpl.n	800715c <_printf_float+0xc4>
 80070cc:	189b      	adds	r3, r3, r2
 80070ce:	4393      	bics	r3, r2
 80070d0:	001a      	movs	r2, r3
 80070d2:	3208      	adds	r2, #8
 80070d4:	602a      	str	r2, [r5, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	64a2      	str	r2, [r4, #72]	; 0x48
 80070dc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80070de:	2201      	movs	r2, #1
 80070e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80070e2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80070e4:	930a      	str	r3, [sp, #40]	; 0x28
 80070e6:	006b      	lsls	r3, r5, #1
 80070e8:	085b      	lsrs	r3, r3, #1
 80070ea:	930e      	str	r3, [sp, #56]	; 0x38
 80070ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070ee:	4ba8      	ldr	r3, [pc, #672]	; (8007390 <_printf_float+0x2f8>)
 80070f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80070f2:	4252      	negs	r2, r2
 80070f4:	f7fb fcca 	bl	8002a8c <__aeabi_dcmpun>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d131      	bne.n	8007160 <_printf_float+0xc8>
 80070fc:	2201      	movs	r2, #1
 80070fe:	4ba4      	ldr	r3, [pc, #656]	; (8007390 <_printf_float+0x2f8>)
 8007100:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007102:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007104:	4252      	negs	r2, r2
 8007106:	f7f9 f9b1 	bl	800046c <__aeabi_dcmple>
 800710a:	2800      	cmp	r0, #0
 800710c:	d128      	bne.n	8007160 <_printf_float+0xc8>
 800710e:	2200      	movs	r2, #0
 8007110:	2300      	movs	r3, #0
 8007112:	0029      	movs	r1, r5
 8007114:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007116:	f7f9 f99f 	bl	8000458 <__aeabi_dcmplt>
 800711a:	2800      	cmp	r0, #0
 800711c:	d003      	beq.n	8007126 <_printf_float+0x8e>
 800711e:	0023      	movs	r3, r4
 8007120:	222d      	movs	r2, #45	; 0x2d
 8007122:	3343      	adds	r3, #67	; 0x43
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	4d9b      	ldr	r5, [pc, #620]	; (8007394 <_printf_float+0x2fc>)
 8007128:	2e47      	cmp	r6, #71	; 0x47
 800712a:	d900      	bls.n	800712e <_printf_float+0x96>
 800712c:	4d9a      	ldr	r5, [pc, #616]	; (8007398 <_printf_float+0x300>)
 800712e:	2303      	movs	r3, #3
 8007130:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	3301      	adds	r3, #1
 8007136:	439a      	bics	r2, r3
 8007138:	2300      	movs	r3, #0
 800713a:	6022      	str	r2, [r4, #0]
 800713c:	930a      	str	r3, [sp, #40]	; 0x28
 800713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007140:	0021      	movs	r1, r4
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	0038      	movs	r0, r7
 8007146:	9b08      	ldr	r3, [sp, #32]
 8007148:	aa13      	add	r2, sp, #76	; 0x4c
 800714a:	f000 f9f3 	bl	8007534 <_printf_common>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d000      	beq.n	8007154 <_printf_float+0xbc>
 8007152:	e09e      	b.n	8007292 <_printf_float+0x1fa>
 8007154:	2001      	movs	r0, #1
 8007156:	4240      	negs	r0, r0
 8007158:	b015      	add	sp, #84	; 0x54
 800715a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715c:	3307      	adds	r3, #7
 800715e:	e7b6      	b.n	80070ce <_printf_float+0x36>
 8007160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007162:	002b      	movs	r3, r5
 8007164:	0010      	movs	r0, r2
 8007166:	0029      	movs	r1, r5
 8007168:	f7fb fc90 	bl	8002a8c <__aeabi_dcmpun>
 800716c:	2800      	cmp	r0, #0
 800716e:	d00a      	beq.n	8007186 <_printf_float+0xee>
 8007170:	2d00      	cmp	r5, #0
 8007172:	da03      	bge.n	800717c <_printf_float+0xe4>
 8007174:	0023      	movs	r3, r4
 8007176:	222d      	movs	r2, #45	; 0x2d
 8007178:	3343      	adds	r3, #67	; 0x43
 800717a:	701a      	strb	r2, [r3, #0]
 800717c:	4d87      	ldr	r5, [pc, #540]	; (800739c <_printf_float+0x304>)
 800717e:	2e47      	cmp	r6, #71	; 0x47
 8007180:	d9d5      	bls.n	800712e <_printf_float+0x96>
 8007182:	4d87      	ldr	r5, [pc, #540]	; (80073a0 <_printf_float+0x308>)
 8007184:	e7d3      	b.n	800712e <_printf_float+0x96>
 8007186:	2220      	movs	r2, #32
 8007188:	0031      	movs	r1, r6
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	4391      	bics	r1, r2
 800718e:	910e      	str	r1, [sp, #56]	; 0x38
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	d147      	bne.n	8007224 <_printf_float+0x18c>
 8007194:	3307      	adds	r3, #7
 8007196:	6063      	str	r3, [r4, #4]
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	4313      	orrs	r3, r2
 80071a0:	2200      	movs	r2, #0
 80071a2:	9206      	str	r2, [sp, #24]
 80071a4:	aa12      	add	r2, sp, #72	; 0x48
 80071a6:	9205      	str	r2, [sp, #20]
 80071a8:	aa11      	add	r2, sp, #68	; 0x44
 80071aa:	9203      	str	r2, [sp, #12]
 80071ac:	2223      	movs	r2, #35	; 0x23
 80071ae:	a908      	add	r1, sp, #32
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	6863      	ldr	r3, [r4, #4]
 80071b6:	1852      	adds	r2, r2, r1
 80071b8:	9202      	str	r2, [sp, #8]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	0038      	movs	r0, r7
 80071be:	002b      	movs	r3, r5
 80071c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071c2:	9604      	str	r6, [sp, #16]
 80071c4:	f7ff febe 	bl	8006f44 <__cvt>
 80071c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ca:	0005      	movs	r5, r0
 80071cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071ce:	2b47      	cmp	r3, #71	; 0x47
 80071d0:	d108      	bne.n	80071e4 <_printf_float+0x14c>
 80071d2:	1ccb      	adds	r3, r1, #3
 80071d4:	db02      	blt.n	80071dc <_printf_float+0x144>
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	4299      	cmp	r1, r3
 80071da:	dd46      	ble.n	800726a <_printf_float+0x1d2>
 80071dc:	0033      	movs	r3, r6
 80071de:	3b02      	subs	r3, #2
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	001e      	movs	r6, r3
 80071e4:	2e65      	cmp	r6, #101	; 0x65
 80071e6:	d824      	bhi.n	8007232 <_printf_float+0x19a>
 80071e8:	0020      	movs	r0, r4
 80071ea:	0032      	movs	r2, r6
 80071ec:	3901      	subs	r1, #1
 80071ee:	3050      	adds	r0, #80	; 0x50
 80071f0:	9111      	str	r1, [sp, #68]	; 0x44
 80071f2:	f7ff ff0a 	bl	800700a <__exponent>
 80071f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071f8:	900a      	str	r0, [sp, #40]	; 0x28
 80071fa:	1813      	adds	r3, r2, r0
 80071fc:	6123      	str	r3, [r4, #16]
 80071fe:	2a01      	cmp	r2, #1
 8007200:	dc02      	bgt.n	8007208 <_printf_float+0x170>
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	07d2      	lsls	r2, r2, #31
 8007206:	d501      	bpl.n	800720c <_printf_float+0x174>
 8007208:	3301      	adds	r3, #1
 800720a:	6123      	str	r3, [r4, #16]
 800720c:	2323      	movs	r3, #35	; 0x23
 800720e:	aa08      	add	r2, sp, #32
 8007210:	189b      	adds	r3, r3, r2
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d100      	bne.n	800721a <_printf_float+0x182>
 8007218:	e791      	b.n	800713e <_printf_float+0xa6>
 800721a:	0023      	movs	r3, r4
 800721c:	222d      	movs	r2, #45	; 0x2d
 800721e:	3343      	adds	r3, #67	; 0x43
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	e78c      	b.n	800713e <_printf_float+0xa6>
 8007224:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007226:	2a47      	cmp	r2, #71	; 0x47
 8007228:	d1b6      	bne.n	8007198 <_printf_float+0x100>
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1b4      	bne.n	8007198 <_printf_float+0x100>
 800722e:	3301      	adds	r3, #1
 8007230:	e7b1      	b.n	8007196 <_printf_float+0xfe>
 8007232:	2e66      	cmp	r6, #102	; 0x66
 8007234:	d11b      	bne.n	800726e <_printf_float+0x1d6>
 8007236:	6863      	ldr	r3, [r4, #4]
 8007238:	2900      	cmp	r1, #0
 800723a:	dd0d      	ble.n	8007258 <_printf_float+0x1c0>
 800723c:	6121      	str	r1, [r4, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <_printf_float+0x1b0>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	07d2      	lsls	r2, r2, #31
 8007246:	d502      	bpl.n	800724e <_printf_float+0x1b6>
 8007248:	3301      	adds	r3, #1
 800724a:	1859      	adds	r1, r3, r1
 800724c:	6121      	str	r1, [r4, #16]
 800724e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007250:	65a3      	str	r3, [r4, #88]	; 0x58
 8007252:	2300      	movs	r3, #0
 8007254:	930a      	str	r3, [sp, #40]	; 0x28
 8007256:	e7d9      	b.n	800720c <_printf_float+0x174>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <_printf_float+0x1cc>
 800725c:	2201      	movs	r2, #1
 800725e:	6821      	ldr	r1, [r4, #0]
 8007260:	4211      	tst	r1, r2
 8007262:	d000      	beq.n	8007266 <_printf_float+0x1ce>
 8007264:	1c9a      	adds	r2, r3, #2
 8007266:	6122      	str	r2, [r4, #16]
 8007268:	e7f1      	b.n	800724e <_printf_float+0x1b6>
 800726a:	2367      	movs	r3, #103	; 0x67
 800726c:	001e      	movs	r6, r3
 800726e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007272:	4293      	cmp	r3, r2
 8007274:	db06      	blt.n	8007284 <_printf_float+0x1ec>
 8007276:	6822      	ldr	r2, [r4, #0]
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	07d2      	lsls	r2, r2, #31
 800727c:	d5e7      	bpl.n	800724e <_printf_float+0x1b6>
 800727e:	3301      	adds	r3, #1
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	e7e4      	b.n	800724e <_printf_float+0x1b6>
 8007284:	2101      	movs	r1, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	dc01      	bgt.n	800728e <_printf_float+0x1f6>
 800728a:	1849      	adds	r1, r1, r1
 800728c:	1ac9      	subs	r1, r1, r3
 800728e:	1852      	adds	r2, r2, r1
 8007290:	e7e9      	b.n	8007266 <_printf_float+0x1ce>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	0553      	lsls	r3, r2, #21
 8007296:	d408      	bmi.n	80072aa <_printf_float+0x212>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	002a      	movs	r2, r5
 800729c:	0038      	movs	r0, r7
 800729e:	9908      	ldr	r1, [sp, #32]
 80072a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072a2:	47a8      	blx	r5
 80072a4:	1c43      	adds	r3, r0, #1
 80072a6:	d129      	bne.n	80072fc <_printf_float+0x264>
 80072a8:	e754      	b.n	8007154 <_printf_float+0xbc>
 80072aa:	2e65      	cmp	r6, #101	; 0x65
 80072ac:	d800      	bhi.n	80072b0 <_printf_float+0x218>
 80072ae:	e0ec      	b.n	800748a <_printf_float+0x3f2>
 80072b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80072b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80072b4:	2200      	movs	r2, #0
 80072b6:	2300      	movs	r3, #0
 80072b8:	f7f9 f8c8 	bl	800044c <__aeabi_dcmpeq>
 80072bc:	2800      	cmp	r0, #0
 80072be:	d034      	beq.n	800732a <_printf_float+0x292>
 80072c0:	2301      	movs	r3, #1
 80072c2:	0038      	movs	r0, r7
 80072c4:	4a37      	ldr	r2, [pc, #220]	; (80073a4 <_printf_float+0x30c>)
 80072c6:	9908      	ldr	r1, [sp, #32]
 80072c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072ca:	47a8      	blx	r5
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d100      	bne.n	80072d2 <_printf_float+0x23a>
 80072d0:	e740      	b.n	8007154 <_printf_float+0xbc>
 80072d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072d6:	4293      	cmp	r3, r2
 80072d8:	db02      	blt.n	80072e0 <_printf_float+0x248>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	07db      	lsls	r3, r3, #31
 80072de:	d50d      	bpl.n	80072fc <_printf_float+0x264>
 80072e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80072e2:	0038      	movs	r0, r7
 80072e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072e8:	9908      	ldr	r1, [sp, #32]
 80072ea:	47a8      	blx	r5
 80072ec:	2500      	movs	r5, #0
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d100      	bne.n	80072f4 <_printf_float+0x25c>
 80072f2:	e72f      	b.n	8007154 <_printf_float+0xbc>
 80072f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072f6:	3b01      	subs	r3, #1
 80072f8:	42ab      	cmp	r3, r5
 80072fa:	dc0a      	bgt.n	8007312 <_printf_float+0x27a>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	079b      	lsls	r3, r3, #30
 8007300:	d500      	bpl.n	8007304 <_printf_float+0x26c>
 8007302:	e114      	b.n	800752e <_printf_float+0x496>
 8007304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007306:	68e0      	ldr	r0, [r4, #12]
 8007308:	4298      	cmp	r0, r3
 800730a:	db00      	blt.n	800730e <_printf_float+0x276>
 800730c:	e724      	b.n	8007158 <_printf_float+0xc0>
 800730e:	0018      	movs	r0, r3
 8007310:	e722      	b.n	8007158 <_printf_float+0xc0>
 8007312:	0022      	movs	r2, r4
 8007314:	2301      	movs	r3, #1
 8007316:	0038      	movs	r0, r7
 8007318:	9908      	ldr	r1, [sp, #32]
 800731a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800731c:	321a      	adds	r2, #26
 800731e:	47b0      	blx	r6
 8007320:	1c43      	adds	r3, r0, #1
 8007322:	d100      	bne.n	8007326 <_printf_float+0x28e>
 8007324:	e716      	b.n	8007154 <_printf_float+0xbc>
 8007326:	3501      	adds	r5, #1
 8007328:	e7e4      	b.n	80072f4 <_printf_float+0x25c>
 800732a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800732c:	2b00      	cmp	r3, #0
 800732e:	dc3b      	bgt.n	80073a8 <_printf_float+0x310>
 8007330:	2301      	movs	r3, #1
 8007332:	0038      	movs	r0, r7
 8007334:	4a1b      	ldr	r2, [pc, #108]	; (80073a4 <_printf_float+0x30c>)
 8007336:	9908      	ldr	r1, [sp, #32]
 8007338:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800733a:	47b0      	blx	r6
 800733c:	1c43      	adds	r3, r0, #1
 800733e:	d100      	bne.n	8007342 <_printf_float+0x2aa>
 8007340:	e708      	b.n	8007154 <_printf_float+0xbc>
 8007342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007344:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007346:	4313      	orrs	r3, r2
 8007348:	d102      	bne.n	8007350 <_printf_float+0x2b8>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	07db      	lsls	r3, r3, #31
 800734e:	d5d5      	bpl.n	80072fc <_printf_float+0x264>
 8007350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007352:	0038      	movs	r0, r7
 8007354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007356:	9908      	ldr	r1, [sp, #32]
 8007358:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800735a:	47b0      	blx	r6
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d100      	bne.n	8007362 <_printf_float+0x2ca>
 8007360:	e6f8      	b.n	8007154 <_printf_float+0xbc>
 8007362:	2300      	movs	r3, #0
 8007364:	930a      	str	r3, [sp, #40]	; 0x28
 8007366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736a:	425b      	negs	r3, r3
 800736c:	4293      	cmp	r3, r2
 800736e:	dc01      	bgt.n	8007374 <_printf_float+0x2dc>
 8007370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007372:	e792      	b.n	800729a <_printf_float+0x202>
 8007374:	0022      	movs	r2, r4
 8007376:	2301      	movs	r3, #1
 8007378:	0038      	movs	r0, r7
 800737a:	9908      	ldr	r1, [sp, #32]
 800737c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800737e:	321a      	adds	r2, #26
 8007380:	47b0      	blx	r6
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d100      	bne.n	8007388 <_printf_float+0x2f0>
 8007386:	e6e5      	b.n	8007154 <_printf_float+0xbc>
 8007388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738a:	3301      	adds	r3, #1
 800738c:	e7ea      	b.n	8007364 <_printf_float+0x2cc>
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	7fefffff 	.word	0x7fefffff
 8007394:	08009a31 	.word	0x08009a31
 8007398:	08009a35 	.word	0x08009a35
 800739c:	08009a39 	.word	0x08009a39
 80073a0:	08009a3d 	.word	0x08009a3d
 80073a4:	08009a41 	.word	0x08009a41
 80073a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073ac:	920a      	str	r2, [sp, #40]	; 0x28
 80073ae:	429a      	cmp	r2, r3
 80073b0:	dd00      	ble.n	80073b4 <_printf_float+0x31c>
 80073b2:	930a      	str	r3, [sp, #40]	; 0x28
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dc3d      	bgt.n	8007436 <_printf_float+0x39e>
 80073ba:	2300      	movs	r3, #0
 80073bc:	930e      	str	r3, [sp, #56]	; 0x38
 80073be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073c0:	43db      	mvns	r3, r3
 80073c2:	17db      	asrs	r3, r3, #31
 80073c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073ca:	930c      	str	r3, [sp, #48]	; 0x30
 80073cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ce:	4013      	ands	r3, r2
 80073d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d6:	4293      	cmp	r3, r2
 80073d8:	dc36      	bgt.n	8007448 <_printf_float+0x3b0>
 80073da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073de:	4293      	cmp	r3, r2
 80073e0:	db40      	blt.n	8007464 <_printf_float+0x3cc>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	07db      	lsls	r3, r3, #31
 80073e6:	d43d      	bmi.n	8007464 <_printf_float+0x3cc>
 80073e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	1a52      	subs	r2, r2, r1
 80073f2:	920a      	str	r2, [sp, #40]	; 0x28
 80073f4:	429a      	cmp	r2, r3
 80073f6:	dd00      	ble.n	80073fa <_printf_float+0x362>
 80073f8:	930a      	str	r3, [sp, #40]	; 0x28
 80073fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc3a      	bgt.n	8007476 <_printf_float+0x3de>
 8007400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007402:	2500      	movs	r5, #0
 8007404:	43db      	mvns	r3, r3
 8007406:	17db      	asrs	r3, r3, #31
 8007408:	930b      	str	r3, [sp, #44]	; 0x2c
 800740a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800740c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800740e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007410:	1a9b      	subs	r3, r3, r2
 8007412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007414:	400a      	ands	r2, r1
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	42ab      	cmp	r3, r5
 800741a:	dc00      	bgt.n	800741e <_printf_float+0x386>
 800741c:	e76e      	b.n	80072fc <_printf_float+0x264>
 800741e:	0022      	movs	r2, r4
 8007420:	2301      	movs	r3, #1
 8007422:	0038      	movs	r0, r7
 8007424:	9908      	ldr	r1, [sp, #32]
 8007426:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007428:	321a      	adds	r2, #26
 800742a:	47b0      	blx	r6
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d100      	bne.n	8007432 <_printf_float+0x39a>
 8007430:	e690      	b.n	8007154 <_printf_float+0xbc>
 8007432:	3501      	adds	r5, #1
 8007434:	e7e9      	b.n	800740a <_printf_float+0x372>
 8007436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007438:	002a      	movs	r2, r5
 800743a:	0038      	movs	r0, r7
 800743c:	9908      	ldr	r1, [sp, #32]
 800743e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007440:	47b0      	blx	r6
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	d1b9      	bne.n	80073ba <_printf_float+0x322>
 8007446:	e685      	b.n	8007154 <_printf_float+0xbc>
 8007448:	0022      	movs	r2, r4
 800744a:	2301      	movs	r3, #1
 800744c:	0038      	movs	r0, r7
 800744e:	9908      	ldr	r1, [sp, #32]
 8007450:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007452:	321a      	adds	r2, #26
 8007454:	47b0      	blx	r6
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d100      	bne.n	800745c <_printf_float+0x3c4>
 800745a:	e67b      	b.n	8007154 <_printf_float+0xbc>
 800745c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800745e:	3301      	adds	r3, #1
 8007460:	930e      	str	r3, [sp, #56]	; 0x38
 8007462:	e7b0      	b.n	80073c6 <_printf_float+0x32e>
 8007464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007466:	0038      	movs	r0, r7
 8007468:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800746a:	9908      	ldr	r1, [sp, #32]
 800746c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800746e:	47b0      	blx	r6
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d1b9      	bne.n	80073e8 <_printf_float+0x350>
 8007474:	e66e      	b.n	8007154 <_printf_float+0xbc>
 8007476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007478:	0038      	movs	r0, r7
 800747a:	18ea      	adds	r2, r5, r3
 800747c:	9908      	ldr	r1, [sp, #32]
 800747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007480:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007482:	47a8      	blx	r5
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d1bb      	bne.n	8007400 <_printf_float+0x368>
 8007488:	e664      	b.n	8007154 <_printf_float+0xbc>
 800748a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800748c:	2b01      	cmp	r3, #1
 800748e:	dc02      	bgt.n	8007496 <_printf_float+0x3fe>
 8007490:	2301      	movs	r3, #1
 8007492:	421a      	tst	r2, r3
 8007494:	d038      	beq.n	8007508 <_printf_float+0x470>
 8007496:	2301      	movs	r3, #1
 8007498:	002a      	movs	r2, r5
 800749a:	0038      	movs	r0, r7
 800749c:	9908      	ldr	r1, [sp, #32]
 800749e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074a0:	47b0      	blx	r6
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	d100      	bne.n	80074a8 <_printf_float+0x410>
 80074a6:	e655      	b.n	8007154 <_printf_float+0xbc>
 80074a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074aa:	0038      	movs	r0, r7
 80074ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074ae:	9908      	ldr	r1, [sp, #32]
 80074b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074b2:	47b0      	blx	r6
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d100      	bne.n	80074ba <_printf_float+0x422>
 80074b8:	e64c      	b.n	8007154 <_printf_float+0xbc>
 80074ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80074bc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	f7f8 ffc3 	bl	800044c <__aeabi_dcmpeq>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d11c      	bne.n	8007504 <_printf_float+0x46c>
 80074ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074cc:	1c6a      	adds	r2, r5, #1
 80074ce:	3b01      	subs	r3, #1
 80074d0:	0038      	movs	r0, r7
 80074d2:	9908      	ldr	r1, [sp, #32]
 80074d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80074d6:	47a8      	blx	r5
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d10f      	bne.n	80074fc <_printf_float+0x464>
 80074dc:	e63a      	b.n	8007154 <_printf_float+0xbc>
 80074de:	0022      	movs	r2, r4
 80074e0:	2301      	movs	r3, #1
 80074e2:	0038      	movs	r0, r7
 80074e4:	9908      	ldr	r1, [sp, #32]
 80074e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80074e8:	321a      	adds	r2, #26
 80074ea:	47b0      	blx	r6
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d100      	bne.n	80074f2 <_printf_float+0x45a>
 80074f0:	e630      	b.n	8007154 <_printf_float+0xbc>
 80074f2:	3501      	adds	r5, #1
 80074f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074f6:	3b01      	subs	r3, #1
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dcf0      	bgt.n	80074de <_printf_float+0x446>
 80074fc:	0022      	movs	r2, r4
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	3250      	adds	r2, #80	; 0x50
 8007502:	e6cb      	b.n	800729c <_printf_float+0x204>
 8007504:	2500      	movs	r5, #0
 8007506:	e7f5      	b.n	80074f4 <_printf_float+0x45c>
 8007508:	002a      	movs	r2, r5
 800750a:	e7e1      	b.n	80074d0 <_printf_float+0x438>
 800750c:	0022      	movs	r2, r4
 800750e:	2301      	movs	r3, #1
 8007510:	0038      	movs	r0, r7
 8007512:	9908      	ldr	r1, [sp, #32]
 8007514:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007516:	3219      	adds	r2, #25
 8007518:	47b0      	blx	r6
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d100      	bne.n	8007520 <_printf_float+0x488>
 800751e:	e619      	b.n	8007154 <_printf_float+0xbc>
 8007520:	3501      	adds	r5, #1
 8007522:	68e3      	ldr	r3, [r4, #12]
 8007524:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	42ab      	cmp	r3, r5
 800752a:	dcef      	bgt.n	800750c <_printf_float+0x474>
 800752c:	e6ea      	b.n	8007304 <_printf_float+0x26c>
 800752e:	2500      	movs	r5, #0
 8007530:	e7f7      	b.n	8007522 <_printf_float+0x48a>
 8007532:	46c0      	nop			; (mov r8, r8)

08007534 <_printf_common>:
 8007534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007536:	0015      	movs	r5, r2
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	688a      	ldr	r2, [r1, #8]
 800753c:	690b      	ldr	r3, [r1, #16]
 800753e:	000c      	movs	r4, r1
 8007540:	9000      	str	r0, [sp, #0]
 8007542:	4293      	cmp	r3, r2
 8007544:	da00      	bge.n	8007548 <_printf_common+0x14>
 8007546:	0013      	movs	r3, r2
 8007548:	0022      	movs	r2, r4
 800754a:	602b      	str	r3, [r5, #0]
 800754c:	3243      	adds	r2, #67	; 0x43
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	2a00      	cmp	r2, #0
 8007552:	d001      	beq.n	8007558 <_printf_common+0x24>
 8007554:	3301      	adds	r3, #1
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	069b      	lsls	r3, r3, #26
 800755c:	d502      	bpl.n	8007564 <_printf_common+0x30>
 800755e:	682b      	ldr	r3, [r5, #0]
 8007560:	3302      	adds	r3, #2
 8007562:	602b      	str	r3, [r5, #0]
 8007564:	6822      	ldr	r2, [r4, #0]
 8007566:	2306      	movs	r3, #6
 8007568:	0017      	movs	r7, r2
 800756a:	401f      	ands	r7, r3
 800756c:	421a      	tst	r2, r3
 800756e:	d027      	beq.n	80075c0 <_printf_common+0x8c>
 8007570:	0023      	movs	r3, r4
 8007572:	3343      	adds	r3, #67	; 0x43
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	1e5a      	subs	r2, r3, #1
 8007578:	4193      	sbcs	r3, r2
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	0692      	lsls	r2, r2, #26
 800757e:	d430      	bmi.n	80075e2 <_printf_common+0xae>
 8007580:	0022      	movs	r2, r4
 8007582:	9901      	ldr	r1, [sp, #4]
 8007584:	9800      	ldr	r0, [sp, #0]
 8007586:	9e08      	ldr	r6, [sp, #32]
 8007588:	3243      	adds	r2, #67	; 0x43
 800758a:	47b0      	blx	r6
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d025      	beq.n	80075dc <_printf_common+0xa8>
 8007590:	2306      	movs	r3, #6
 8007592:	6820      	ldr	r0, [r4, #0]
 8007594:	682a      	ldr	r2, [r5, #0]
 8007596:	68e1      	ldr	r1, [r4, #12]
 8007598:	2500      	movs	r5, #0
 800759a:	4003      	ands	r3, r0
 800759c:	2b04      	cmp	r3, #4
 800759e:	d103      	bne.n	80075a8 <_printf_common+0x74>
 80075a0:	1a8d      	subs	r5, r1, r2
 80075a2:	43eb      	mvns	r3, r5
 80075a4:	17db      	asrs	r3, r3, #31
 80075a6:	401d      	ands	r5, r3
 80075a8:	68a3      	ldr	r3, [r4, #8]
 80075aa:	6922      	ldr	r2, [r4, #16]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	dd01      	ble.n	80075b4 <_printf_common+0x80>
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	18ed      	adds	r5, r5, r3
 80075b4:	2700      	movs	r7, #0
 80075b6:	42bd      	cmp	r5, r7
 80075b8:	d120      	bne.n	80075fc <_printf_common+0xc8>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e010      	b.n	80075e0 <_printf_common+0xac>
 80075be:	3701      	adds	r7, #1
 80075c0:	68e3      	ldr	r3, [r4, #12]
 80075c2:	682a      	ldr	r2, [r5, #0]
 80075c4:	1a9b      	subs	r3, r3, r2
 80075c6:	42bb      	cmp	r3, r7
 80075c8:	ddd2      	ble.n	8007570 <_printf_common+0x3c>
 80075ca:	0022      	movs	r2, r4
 80075cc:	2301      	movs	r3, #1
 80075ce:	9901      	ldr	r1, [sp, #4]
 80075d0:	9800      	ldr	r0, [sp, #0]
 80075d2:	9e08      	ldr	r6, [sp, #32]
 80075d4:	3219      	adds	r2, #25
 80075d6:	47b0      	blx	r6
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d1f0      	bne.n	80075be <_printf_common+0x8a>
 80075dc:	2001      	movs	r0, #1
 80075de:	4240      	negs	r0, r0
 80075e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075e2:	2030      	movs	r0, #48	; 0x30
 80075e4:	18e1      	adds	r1, r4, r3
 80075e6:	3143      	adds	r1, #67	; 0x43
 80075e8:	7008      	strb	r0, [r1, #0]
 80075ea:	0021      	movs	r1, r4
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	3145      	adds	r1, #69	; 0x45
 80075f0:	7809      	ldrb	r1, [r1, #0]
 80075f2:	18a2      	adds	r2, r4, r2
 80075f4:	3243      	adds	r2, #67	; 0x43
 80075f6:	3302      	adds	r3, #2
 80075f8:	7011      	strb	r1, [r2, #0]
 80075fa:	e7c1      	b.n	8007580 <_printf_common+0x4c>
 80075fc:	0022      	movs	r2, r4
 80075fe:	2301      	movs	r3, #1
 8007600:	9901      	ldr	r1, [sp, #4]
 8007602:	9800      	ldr	r0, [sp, #0]
 8007604:	9e08      	ldr	r6, [sp, #32]
 8007606:	321a      	adds	r2, #26
 8007608:	47b0      	blx	r6
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d0e6      	beq.n	80075dc <_printf_common+0xa8>
 800760e:	3701      	adds	r7, #1
 8007610:	e7d1      	b.n	80075b6 <_printf_common+0x82>
	...

08007614 <_printf_i>:
 8007614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007616:	b08b      	sub	sp, #44	; 0x2c
 8007618:	9206      	str	r2, [sp, #24]
 800761a:	000a      	movs	r2, r1
 800761c:	3243      	adds	r2, #67	; 0x43
 800761e:	9307      	str	r3, [sp, #28]
 8007620:	9005      	str	r0, [sp, #20]
 8007622:	9204      	str	r2, [sp, #16]
 8007624:	7e0a      	ldrb	r2, [r1, #24]
 8007626:	000c      	movs	r4, r1
 8007628:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800762a:	2a78      	cmp	r2, #120	; 0x78
 800762c:	d806      	bhi.n	800763c <_printf_i+0x28>
 800762e:	2a62      	cmp	r2, #98	; 0x62
 8007630:	d808      	bhi.n	8007644 <_printf_i+0x30>
 8007632:	2a00      	cmp	r2, #0
 8007634:	d100      	bne.n	8007638 <_printf_i+0x24>
 8007636:	e0c0      	b.n	80077ba <_printf_i+0x1a6>
 8007638:	2a58      	cmp	r2, #88	; 0x58
 800763a:	d052      	beq.n	80076e2 <_printf_i+0xce>
 800763c:	0026      	movs	r6, r4
 800763e:	3642      	adds	r6, #66	; 0x42
 8007640:	7032      	strb	r2, [r6, #0]
 8007642:	e022      	b.n	800768a <_printf_i+0x76>
 8007644:	0010      	movs	r0, r2
 8007646:	3863      	subs	r0, #99	; 0x63
 8007648:	2815      	cmp	r0, #21
 800764a:	d8f7      	bhi.n	800763c <_printf_i+0x28>
 800764c:	f7f8 fd6e 	bl	800012c <__gnu_thumb1_case_shi>
 8007650:	001f0016 	.word	0x001f0016
 8007654:	fff6fff6 	.word	0xfff6fff6
 8007658:	fff6fff6 	.word	0xfff6fff6
 800765c:	fff6001f 	.word	0xfff6001f
 8007660:	fff6fff6 	.word	0xfff6fff6
 8007664:	00a8fff6 	.word	0x00a8fff6
 8007668:	009a0036 	.word	0x009a0036
 800766c:	fff6fff6 	.word	0xfff6fff6
 8007670:	fff600b9 	.word	0xfff600b9
 8007674:	fff60036 	.word	0xfff60036
 8007678:	009efff6 	.word	0x009efff6
 800767c:	0026      	movs	r6, r4
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	3642      	adds	r6, #66	; 0x42
 8007682:	1d11      	adds	r1, r2, #4
 8007684:	6019      	str	r1, [r3, #0]
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	7033      	strb	r3, [r6, #0]
 800768a:	2301      	movs	r3, #1
 800768c:	e0a7      	b.n	80077de <_printf_i+0x1ca>
 800768e:	6808      	ldr	r0, [r1, #0]
 8007690:	6819      	ldr	r1, [r3, #0]
 8007692:	1d0a      	adds	r2, r1, #4
 8007694:	0605      	lsls	r5, r0, #24
 8007696:	d50b      	bpl.n	80076b0 <_printf_i+0x9c>
 8007698:	680d      	ldr	r5, [r1, #0]
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	2d00      	cmp	r5, #0
 800769e:	da03      	bge.n	80076a8 <_printf_i+0x94>
 80076a0:	232d      	movs	r3, #45	; 0x2d
 80076a2:	9a04      	ldr	r2, [sp, #16]
 80076a4:	426d      	negs	r5, r5
 80076a6:	7013      	strb	r3, [r2, #0]
 80076a8:	4b61      	ldr	r3, [pc, #388]	; (8007830 <_printf_i+0x21c>)
 80076aa:	270a      	movs	r7, #10
 80076ac:	9303      	str	r3, [sp, #12]
 80076ae:	e032      	b.n	8007716 <_printf_i+0x102>
 80076b0:	680d      	ldr	r5, [r1, #0]
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	0641      	lsls	r1, r0, #25
 80076b6:	d5f1      	bpl.n	800769c <_printf_i+0x88>
 80076b8:	b22d      	sxth	r5, r5
 80076ba:	e7ef      	b.n	800769c <_printf_i+0x88>
 80076bc:	680d      	ldr	r5, [r1, #0]
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	1d08      	adds	r0, r1, #4
 80076c2:	6018      	str	r0, [r3, #0]
 80076c4:	062e      	lsls	r6, r5, #24
 80076c6:	d501      	bpl.n	80076cc <_printf_i+0xb8>
 80076c8:	680d      	ldr	r5, [r1, #0]
 80076ca:	e003      	b.n	80076d4 <_printf_i+0xc0>
 80076cc:	066d      	lsls	r5, r5, #25
 80076ce:	d5fb      	bpl.n	80076c8 <_printf_i+0xb4>
 80076d0:	680d      	ldr	r5, [r1, #0]
 80076d2:	b2ad      	uxth	r5, r5
 80076d4:	4b56      	ldr	r3, [pc, #344]	; (8007830 <_printf_i+0x21c>)
 80076d6:	270a      	movs	r7, #10
 80076d8:	9303      	str	r3, [sp, #12]
 80076da:	2a6f      	cmp	r2, #111	; 0x6f
 80076dc:	d117      	bne.n	800770e <_printf_i+0xfa>
 80076de:	2708      	movs	r7, #8
 80076e0:	e015      	b.n	800770e <_printf_i+0xfa>
 80076e2:	3145      	adds	r1, #69	; 0x45
 80076e4:	700a      	strb	r2, [r1, #0]
 80076e6:	4a52      	ldr	r2, [pc, #328]	; (8007830 <_printf_i+0x21c>)
 80076e8:	9203      	str	r2, [sp, #12]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	6821      	ldr	r1, [r4, #0]
 80076ee:	ca20      	ldmia	r2!, {r5}
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	0608      	lsls	r0, r1, #24
 80076f4:	d550      	bpl.n	8007798 <_printf_i+0x184>
 80076f6:	07cb      	lsls	r3, r1, #31
 80076f8:	d502      	bpl.n	8007700 <_printf_i+0xec>
 80076fa:	2320      	movs	r3, #32
 80076fc:	4319      	orrs	r1, r3
 80076fe:	6021      	str	r1, [r4, #0]
 8007700:	2710      	movs	r7, #16
 8007702:	2d00      	cmp	r5, #0
 8007704:	d103      	bne.n	800770e <_printf_i+0xfa>
 8007706:	2320      	movs	r3, #32
 8007708:	6822      	ldr	r2, [r4, #0]
 800770a:	439a      	bics	r2, r3
 800770c:	6022      	str	r2, [r4, #0]
 800770e:	0023      	movs	r3, r4
 8007710:	2200      	movs	r2, #0
 8007712:	3343      	adds	r3, #67	; 0x43
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	6863      	ldr	r3, [r4, #4]
 8007718:	60a3      	str	r3, [r4, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	db03      	blt.n	8007726 <_printf_i+0x112>
 800771e:	2204      	movs	r2, #4
 8007720:	6821      	ldr	r1, [r4, #0]
 8007722:	4391      	bics	r1, r2
 8007724:	6021      	str	r1, [r4, #0]
 8007726:	2d00      	cmp	r5, #0
 8007728:	d102      	bne.n	8007730 <_printf_i+0x11c>
 800772a:	9e04      	ldr	r6, [sp, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00c      	beq.n	800774a <_printf_i+0x136>
 8007730:	9e04      	ldr	r6, [sp, #16]
 8007732:	0028      	movs	r0, r5
 8007734:	0039      	movs	r1, r7
 8007736:	f7f8 fd89 	bl	800024c <__aeabi_uidivmod>
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	3e01      	subs	r6, #1
 800773e:	5c5b      	ldrb	r3, [r3, r1]
 8007740:	7033      	strb	r3, [r6, #0]
 8007742:	002b      	movs	r3, r5
 8007744:	0005      	movs	r5, r0
 8007746:	429f      	cmp	r7, r3
 8007748:	d9f3      	bls.n	8007732 <_printf_i+0x11e>
 800774a:	2f08      	cmp	r7, #8
 800774c:	d109      	bne.n	8007762 <_printf_i+0x14e>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	07db      	lsls	r3, r3, #31
 8007752:	d506      	bpl.n	8007762 <_printf_i+0x14e>
 8007754:	6863      	ldr	r3, [r4, #4]
 8007756:	6922      	ldr	r2, [r4, #16]
 8007758:	4293      	cmp	r3, r2
 800775a:	dc02      	bgt.n	8007762 <_printf_i+0x14e>
 800775c:	2330      	movs	r3, #48	; 0x30
 800775e:	3e01      	subs	r6, #1
 8007760:	7033      	strb	r3, [r6, #0]
 8007762:	9b04      	ldr	r3, [sp, #16]
 8007764:	1b9b      	subs	r3, r3, r6
 8007766:	6123      	str	r3, [r4, #16]
 8007768:	9b07      	ldr	r3, [sp, #28]
 800776a:	0021      	movs	r1, r4
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	9805      	ldr	r0, [sp, #20]
 8007770:	9b06      	ldr	r3, [sp, #24]
 8007772:	aa09      	add	r2, sp, #36	; 0x24
 8007774:	f7ff fede 	bl	8007534 <_printf_common>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d135      	bne.n	80077e8 <_printf_i+0x1d4>
 800777c:	2001      	movs	r0, #1
 800777e:	4240      	negs	r0, r0
 8007780:	b00b      	add	sp, #44	; 0x2c
 8007782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007784:	2220      	movs	r2, #32
 8007786:	6809      	ldr	r1, [r1, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	6022      	str	r2, [r4, #0]
 800778c:	0022      	movs	r2, r4
 800778e:	2178      	movs	r1, #120	; 0x78
 8007790:	3245      	adds	r2, #69	; 0x45
 8007792:	7011      	strb	r1, [r2, #0]
 8007794:	4a27      	ldr	r2, [pc, #156]	; (8007834 <_printf_i+0x220>)
 8007796:	e7a7      	b.n	80076e8 <_printf_i+0xd4>
 8007798:	0648      	lsls	r0, r1, #25
 800779a:	d5ac      	bpl.n	80076f6 <_printf_i+0xe2>
 800779c:	b2ad      	uxth	r5, r5
 800779e:	e7aa      	b.n	80076f6 <_printf_i+0xe2>
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	680d      	ldr	r5, [r1, #0]
 80077a4:	1d10      	adds	r0, r2, #4
 80077a6:	6949      	ldr	r1, [r1, #20]
 80077a8:	6018      	str	r0, [r3, #0]
 80077aa:	6813      	ldr	r3, [r2, #0]
 80077ac:	062e      	lsls	r6, r5, #24
 80077ae:	d501      	bpl.n	80077b4 <_printf_i+0x1a0>
 80077b0:	6019      	str	r1, [r3, #0]
 80077b2:	e002      	b.n	80077ba <_printf_i+0x1a6>
 80077b4:	066d      	lsls	r5, r5, #25
 80077b6:	d5fb      	bpl.n	80077b0 <_printf_i+0x19c>
 80077b8:	8019      	strh	r1, [r3, #0]
 80077ba:	2300      	movs	r3, #0
 80077bc:	9e04      	ldr	r6, [sp, #16]
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	e7d2      	b.n	8007768 <_printf_i+0x154>
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	1d11      	adds	r1, r2, #4
 80077c6:	6019      	str	r1, [r3, #0]
 80077c8:	6816      	ldr	r6, [r2, #0]
 80077ca:	2100      	movs	r1, #0
 80077cc:	0030      	movs	r0, r6
 80077ce:	6862      	ldr	r2, [r4, #4]
 80077d0:	f001 fa16 	bl	8008c00 <memchr>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d001      	beq.n	80077dc <_printf_i+0x1c8>
 80077d8:	1b80      	subs	r0, r0, r6
 80077da:	6060      	str	r0, [r4, #4]
 80077dc:	6863      	ldr	r3, [r4, #4]
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	2300      	movs	r3, #0
 80077e2:	9a04      	ldr	r2, [sp, #16]
 80077e4:	7013      	strb	r3, [r2, #0]
 80077e6:	e7bf      	b.n	8007768 <_printf_i+0x154>
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	0032      	movs	r2, r6
 80077ec:	9906      	ldr	r1, [sp, #24]
 80077ee:	9805      	ldr	r0, [sp, #20]
 80077f0:	9d07      	ldr	r5, [sp, #28]
 80077f2:	47a8      	blx	r5
 80077f4:	1c43      	adds	r3, r0, #1
 80077f6:	d0c1      	beq.n	800777c <_printf_i+0x168>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	079b      	lsls	r3, r3, #30
 80077fc:	d415      	bmi.n	800782a <_printf_i+0x216>
 80077fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007800:	68e0      	ldr	r0, [r4, #12]
 8007802:	4298      	cmp	r0, r3
 8007804:	dabc      	bge.n	8007780 <_printf_i+0x16c>
 8007806:	0018      	movs	r0, r3
 8007808:	e7ba      	b.n	8007780 <_printf_i+0x16c>
 800780a:	0022      	movs	r2, r4
 800780c:	2301      	movs	r3, #1
 800780e:	9906      	ldr	r1, [sp, #24]
 8007810:	9805      	ldr	r0, [sp, #20]
 8007812:	9e07      	ldr	r6, [sp, #28]
 8007814:	3219      	adds	r2, #25
 8007816:	47b0      	blx	r6
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d0af      	beq.n	800777c <_printf_i+0x168>
 800781c:	3501      	adds	r5, #1
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007822:	1a9b      	subs	r3, r3, r2
 8007824:	42ab      	cmp	r3, r5
 8007826:	dcf0      	bgt.n	800780a <_printf_i+0x1f6>
 8007828:	e7e9      	b.n	80077fe <_printf_i+0x1ea>
 800782a:	2500      	movs	r5, #0
 800782c:	e7f7      	b.n	800781e <_printf_i+0x20a>
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	08009a43 	.word	0x08009a43
 8007834:	08009a54 	.word	0x08009a54

08007838 <iprintf>:
 8007838:	b40f      	push	{r0, r1, r2, r3}
 800783a:	4b0b      	ldr	r3, [pc, #44]	; (8007868 <iprintf+0x30>)
 800783c:	b513      	push	{r0, r1, r4, lr}
 800783e:	681c      	ldr	r4, [r3, #0]
 8007840:	2c00      	cmp	r4, #0
 8007842:	d005      	beq.n	8007850 <iprintf+0x18>
 8007844:	69a3      	ldr	r3, [r4, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <iprintf+0x18>
 800784a:	0020      	movs	r0, r4
 800784c:	f001 f8ba 	bl	80089c4 <__sinit>
 8007850:	ab05      	add	r3, sp, #20
 8007852:	0020      	movs	r0, r4
 8007854:	9a04      	ldr	r2, [sp, #16]
 8007856:	68a1      	ldr	r1, [r4, #8]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	f7ff fa39 	bl	8006cd0 <_vfiprintf_r>
 800785e:	bc16      	pop	{r1, r2, r4}
 8007860:	bc08      	pop	{r3}
 8007862:	b004      	add	sp, #16
 8007864:	4718      	bx	r3
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	2000000c 	.word	0x2000000c

0800786c <__swbuf_r>:
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786e:	0005      	movs	r5, r0
 8007870:	000e      	movs	r6, r1
 8007872:	0014      	movs	r4, r2
 8007874:	2800      	cmp	r0, #0
 8007876:	d004      	beq.n	8007882 <__swbuf_r+0x16>
 8007878:	6983      	ldr	r3, [r0, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <__swbuf_r+0x16>
 800787e:	f001 f8a1 	bl	80089c4 <__sinit>
 8007882:	4b22      	ldr	r3, [pc, #136]	; (800790c <__swbuf_r+0xa0>)
 8007884:	429c      	cmp	r4, r3
 8007886:	d12e      	bne.n	80078e6 <__swbuf_r+0x7a>
 8007888:	686c      	ldr	r4, [r5, #4]
 800788a:	69a3      	ldr	r3, [r4, #24]
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	071b      	lsls	r3, r3, #28
 8007892:	d532      	bpl.n	80078fa <__swbuf_r+0x8e>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d02f      	beq.n	80078fa <__swbuf_r+0x8e>
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	b2f7      	uxtb	r7, r6
 80078a0:	1a98      	subs	r0, r3, r2
 80078a2:	6963      	ldr	r3, [r4, #20]
 80078a4:	b2f6      	uxtb	r6, r6
 80078a6:	4283      	cmp	r3, r0
 80078a8:	dc05      	bgt.n	80078b6 <__swbuf_r+0x4a>
 80078aa:	0021      	movs	r1, r4
 80078ac:	0028      	movs	r0, r5
 80078ae:	f000 ffe7 	bl	8008880 <_fflush_r>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d127      	bne.n	8007906 <__swbuf_r+0x9a>
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	3001      	adds	r0, #1
 80078ba:	3b01      	subs	r3, #1
 80078bc:	60a3      	str	r3, [r4, #8]
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	1c5a      	adds	r2, r3, #1
 80078c2:	6022      	str	r2, [r4, #0]
 80078c4:	701f      	strb	r7, [r3, #0]
 80078c6:	6963      	ldr	r3, [r4, #20]
 80078c8:	4283      	cmp	r3, r0
 80078ca:	d004      	beq.n	80078d6 <__swbuf_r+0x6a>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	07db      	lsls	r3, r3, #31
 80078d0:	d507      	bpl.n	80078e2 <__swbuf_r+0x76>
 80078d2:	2e0a      	cmp	r6, #10
 80078d4:	d105      	bne.n	80078e2 <__swbuf_r+0x76>
 80078d6:	0021      	movs	r1, r4
 80078d8:	0028      	movs	r0, r5
 80078da:	f000 ffd1 	bl	8008880 <_fflush_r>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d111      	bne.n	8007906 <__swbuf_r+0x9a>
 80078e2:	0030      	movs	r0, r6
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078e6:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <__swbuf_r+0xa4>)
 80078e8:	429c      	cmp	r4, r3
 80078ea:	d101      	bne.n	80078f0 <__swbuf_r+0x84>
 80078ec:	68ac      	ldr	r4, [r5, #8]
 80078ee:	e7cc      	b.n	800788a <__swbuf_r+0x1e>
 80078f0:	4b08      	ldr	r3, [pc, #32]	; (8007914 <__swbuf_r+0xa8>)
 80078f2:	429c      	cmp	r4, r3
 80078f4:	d1c9      	bne.n	800788a <__swbuf_r+0x1e>
 80078f6:	68ec      	ldr	r4, [r5, #12]
 80078f8:	e7c7      	b.n	800788a <__swbuf_r+0x1e>
 80078fa:	0021      	movs	r1, r4
 80078fc:	0028      	movs	r0, r5
 80078fe:	f000 f80b 	bl	8007918 <__swsetup_r>
 8007902:	2800      	cmp	r0, #0
 8007904:	d0c9      	beq.n	800789a <__swbuf_r+0x2e>
 8007906:	2601      	movs	r6, #1
 8007908:	4276      	negs	r6, r6
 800790a:	e7ea      	b.n	80078e2 <__swbuf_r+0x76>
 800790c:	08009b1c 	.word	0x08009b1c
 8007910:	08009b3c 	.word	0x08009b3c
 8007914:	08009afc 	.word	0x08009afc

08007918 <__swsetup_r>:
 8007918:	4b37      	ldr	r3, [pc, #220]	; (80079f8 <__swsetup_r+0xe0>)
 800791a:	b570      	push	{r4, r5, r6, lr}
 800791c:	681d      	ldr	r5, [r3, #0]
 800791e:	0006      	movs	r6, r0
 8007920:	000c      	movs	r4, r1
 8007922:	2d00      	cmp	r5, #0
 8007924:	d005      	beq.n	8007932 <__swsetup_r+0x1a>
 8007926:	69ab      	ldr	r3, [r5, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d102      	bne.n	8007932 <__swsetup_r+0x1a>
 800792c:	0028      	movs	r0, r5
 800792e:	f001 f849 	bl	80089c4 <__sinit>
 8007932:	4b32      	ldr	r3, [pc, #200]	; (80079fc <__swsetup_r+0xe4>)
 8007934:	429c      	cmp	r4, r3
 8007936:	d10f      	bne.n	8007958 <__swsetup_r+0x40>
 8007938:	686c      	ldr	r4, [r5, #4]
 800793a:	230c      	movs	r3, #12
 800793c:	5ee2      	ldrsh	r2, [r4, r3]
 800793e:	b293      	uxth	r3, r2
 8007940:	0711      	lsls	r1, r2, #28
 8007942:	d42d      	bmi.n	80079a0 <__swsetup_r+0x88>
 8007944:	06d9      	lsls	r1, r3, #27
 8007946:	d411      	bmi.n	800796c <__swsetup_r+0x54>
 8007948:	2309      	movs	r3, #9
 800794a:	2001      	movs	r0, #1
 800794c:	6033      	str	r3, [r6, #0]
 800794e:	3337      	adds	r3, #55	; 0x37
 8007950:	4313      	orrs	r3, r2
 8007952:	81a3      	strh	r3, [r4, #12]
 8007954:	4240      	negs	r0, r0
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	4b29      	ldr	r3, [pc, #164]	; (8007a00 <__swsetup_r+0xe8>)
 800795a:	429c      	cmp	r4, r3
 800795c:	d101      	bne.n	8007962 <__swsetup_r+0x4a>
 800795e:	68ac      	ldr	r4, [r5, #8]
 8007960:	e7eb      	b.n	800793a <__swsetup_r+0x22>
 8007962:	4b28      	ldr	r3, [pc, #160]	; (8007a04 <__swsetup_r+0xec>)
 8007964:	429c      	cmp	r4, r3
 8007966:	d1e8      	bne.n	800793a <__swsetup_r+0x22>
 8007968:	68ec      	ldr	r4, [r5, #12]
 800796a:	e7e6      	b.n	800793a <__swsetup_r+0x22>
 800796c:	075b      	lsls	r3, r3, #29
 800796e:	d513      	bpl.n	8007998 <__swsetup_r+0x80>
 8007970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007972:	2900      	cmp	r1, #0
 8007974:	d008      	beq.n	8007988 <__swsetup_r+0x70>
 8007976:	0023      	movs	r3, r4
 8007978:	3344      	adds	r3, #68	; 0x44
 800797a:	4299      	cmp	r1, r3
 800797c:	d002      	beq.n	8007984 <__swsetup_r+0x6c>
 800797e:	0030      	movs	r0, r6
 8007980:	f001 fcfe 	bl	8009380 <_free_r>
 8007984:	2300      	movs	r3, #0
 8007986:	6363      	str	r3, [r4, #52]	; 0x34
 8007988:	2224      	movs	r2, #36	; 0x24
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	4393      	bics	r3, r2
 800798e:	81a3      	strh	r3, [r4, #12]
 8007990:	2300      	movs	r3, #0
 8007992:	6063      	str	r3, [r4, #4]
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	6023      	str	r3, [r4, #0]
 8007998:	2308      	movs	r3, #8
 800799a:	89a2      	ldrh	r2, [r4, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10b      	bne.n	80079be <__swsetup_r+0xa6>
 80079a6:	21a0      	movs	r1, #160	; 0xa0
 80079a8:	2280      	movs	r2, #128	; 0x80
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	0089      	lsls	r1, r1, #2
 80079ae:	0092      	lsls	r2, r2, #2
 80079b0:	400b      	ands	r3, r1
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d003      	beq.n	80079be <__swsetup_r+0xa6>
 80079b6:	0021      	movs	r1, r4
 80079b8:	0030      	movs	r0, r6
 80079ba:	f001 f8d3 	bl	8008b64 <__smakebuf_r>
 80079be:	220c      	movs	r2, #12
 80079c0:	5ea3      	ldrsh	r3, [r4, r2]
 80079c2:	2001      	movs	r0, #1
 80079c4:	001a      	movs	r2, r3
 80079c6:	b299      	uxth	r1, r3
 80079c8:	4002      	ands	r2, r0
 80079ca:	4203      	tst	r3, r0
 80079cc:	d00f      	beq.n	80079ee <__swsetup_r+0xd6>
 80079ce:	2200      	movs	r2, #0
 80079d0:	60a2      	str	r2, [r4, #8]
 80079d2:	6962      	ldr	r2, [r4, #20]
 80079d4:	4252      	negs	r2, r2
 80079d6:	61a2      	str	r2, [r4, #24]
 80079d8:	2000      	movs	r0, #0
 80079da:	6922      	ldr	r2, [r4, #16]
 80079dc:	4282      	cmp	r2, r0
 80079de:	d1ba      	bne.n	8007956 <__swsetup_r+0x3e>
 80079e0:	060a      	lsls	r2, r1, #24
 80079e2:	d5b8      	bpl.n	8007956 <__swsetup_r+0x3e>
 80079e4:	2240      	movs	r2, #64	; 0x40
 80079e6:	4313      	orrs	r3, r2
 80079e8:	81a3      	strh	r3, [r4, #12]
 80079ea:	3801      	subs	r0, #1
 80079ec:	e7b3      	b.n	8007956 <__swsetup_r+0x3e>
 80079ee:	0788      	lsls	r0, r1, #30
 80079f0:	d400      	bmi.n	80079f4 <__swsetup_r+0xdc>
 80079f2:	6962      	ldr	r2, [r4, #20]
 80079f4:	60a2      	str	r2, [r4, #8]
 80079f6:	e7ef      	b.n	80079d8 <__swsetup_r+0xc0>
 80079f8:	2000000c 	.word	0x2000000c
 80079fc:	08009b1c 	.word	0x08009b1c
 8007a00:	08009b3c 	.word	0x08009b3c
 8007a04:	08009afc 	.word	0x08009afc

08007a08 <abort>:
 8007a08:	2006      	movs	r0, #6
 8007a0a:	b510      	push	{r4, lr}
 8007a0c:	f001 fd9c 	bl	8009548 <raise>
 8007a10:	2001      	movs	r0, #1
 8007a12:	f7fb fe08 	bl	8003626 <_exit>

08007a16 <quorem>:
 8007a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a18:	0006      	movs	r6, r0
 8007a1a:	690d      	ldr	r5, [r1, #16]
 8007a1c:	6933      	ldr	r3, [r6, #16]
 8007a1e:	b087      	sub	sp, #28
 8007a20:	2000      	movs	r0, #0
 8007a22:	9102      	str	r1, [sp, #8]
 8007a24:	42ab      	cmp	r3, r5
 8007a26:	db6b      	blt.n	8007b00 <quorem+0xea>
 8007a28:	000b      	movs	r3, r1
 8007a2a:	3d01      	subs	r5, #1
 8007a2c:	00ac      	lsls	r4, r5, #2
 8007a2e:	3314      	adds	r3, #20
 8007a30:	9305      	str	r3, [sp, #20]
 8007a32:	191b      	adds	r3, r3, r4
 8007a34:	9303      	str	r3, [sp, #12]
 8007a36:	0033      	movs	r3, r6
 8007a38:	3314      	adds	r3, #20
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	191c      	adds	r4, r3, r4
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	6827      	ldr	r7, [r4, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	0038      	movs	r0, r7
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	9304      	str	r3, [sp, #16]
 8007a4e:	f7f8 fb77 	bl	8000140 <__udivsi3>
 8007a52:	9b04      	ldr	r3, [sp, #16]
 8007a54:	9000      	str	r0, [sp, #0]
 8007a56:	429f      	cmp	r7, r3
 8007a58:	d329      	bcc.n	8007aae <quorem+0x98>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	469c      	mov	ip, r3
 8007a5e:	9801      	ldr	r0, [sp, #4]
 8007a60:	9f05      	ldr	r7, [sp, #20]
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	cf08      	ldmia	r7!, {r3}
 8007a66:	9a00      	ldr	r2, [sp, #0]
 8007a68:	b299      	uxth	r1, r3
 8007a6a:	4351      	muls	r1, r2
 8007a6c:	0c1b      	lsrs	r3, r3, #16
 8007a6e:	4353      	muls	r3, r2
 8007a70:	4461      	add	r1, ip
 8007a72:	0c0a      	lsrs	r2, r1, #16
 8007a74:	189b      	adds	r3, r3, r2
 8007a76:	0c1a      	lsrs	r2, r3, #16
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	6803      	ldr	r3, [r0, #0]
 8007a7c:	4694      	mov	ip, r2
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	9b04      	ldr	r3, [sp, #16]
 8007a82:	b289      	uxth	r1, r1
 8007a84:	18d2      	adds	r2, r2, r3
 8007a86:	6803      	ldr	r3, [r0, #0]
 8007a88:	1a52      	subs	r2, r2, r1
 8007a8a:	0c19      	lsrs	r1, r3, #16
 8007a8c:	466b      	mov	r3, sp
 8007a8e:	8a9b      	ldrh	r3, [r3, #20]
 8007a90:	1acb      	subs	r3, r1, r3
 8007a92:	1411      	asrs	r1, r2, #16
 8007a94:	185b      	adds	r3, r3, r1
 8007a96:	1419      	asrs	r1, r3, #16
 8007a98:	b292      	uxth	r2, r2
 8007a9a:	041b      	lsls	r3, r3, #16
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	9104      	str	r1, [sp, #16]
 8007aa2:	c004      	stmia	r0!, {r2}
 8007aa4:	42bb      	cmp	r3, r7
 8007aa6:	d2dd      	bcs.n	8007a64 <quorem+0x4e>
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d02e      	beq.n	8007b0c <quorem+0xf6>
 8007aae:	0030      	movs	r0, r6
 8007ab0:	9902      	ldr	r1, [sp, #8]
 8007ab2:	f001 fb3f 	bl	8009134 <__mcmp>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	db21      	blt.n	8007afe <quorem+0xe8>
 8007aba:	0030      	movs	r0, r6
 8007abc:	2400      	movs	r4, #0
 8007abe:	9b00      	ldr	r3, [sp, #0]
 8007ac0:	9902      	ldr	r1, [sp, #8]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	3014      	adds	r0, #20
 8007ac8:	3114      	adds	r1, #20
 8007aca:	6802      	ldr	r2, [r0, #0]
 8007acc:	c908      	ldmia	r1!, {r3}
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	1914      	adds	r4, r2, r4
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	1aa2      	subs	r2, r4, r2
 8007ad6:	6804      	ldr	r4, [r0, #0]
 8007ad8:	0c1b      	lsrs	r3, r3, #16
 8007ada:	0c24      	lsrs	r4, r4, #16
 8007adc:	1ae3      	subs	r3, r4, r3
 8007ade:	1414      	asrs	r4, r2, #16
 8007ae0:	191b      	adds	r3, r3, r4
 8007ae2:	141c      	asrs	r4, r3, #16
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	041b      	lsls	r3, r3, #16
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	c008      	stmia	r0!, {r3}
 8007aec:	9b03      	ldr	r3, [sp, #12]
 8007aee:	428b      	cmp	r3, r1
 8007af0:	d2eb      	bcs.n	8007aca <quorem+0xb4>
 8007af2:	9a01      	ldr	r2, [sp, #4]
 8007af4:	00ab      	lsls	r3, r5, #2
 8007af6:	18d3      	adds	r3, r2, r3
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	2a00      	cmp	r2, #0
 8007afc:	d010      	beq.n	8007b20 <quorem+0x10a>
 8007afe:	9800      	ldr	r0, [sp, #0]
 8007b00:	b007      	add	sp, #28
 8007b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d104      	bne.n	8007b14 <quorem+0xfe>
 8007b0a:	3d01      	subs	r5, #1
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	3c04      	subs	r4, #4
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	d3f7      	bcc.n	8007b04 <quorem+0xee>
 8007b14:	6135      	str	r5, [r6, #16]
 8007b16:	e7ca      	b.n	8007aae <quorem+0x98>
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	d104      	bne.n	8007b28 <quorem+0x112>
 8007b1e:	3d01      	subs	r5, #1
 8007b20:	9a01      	ldr	r2, [sp, #4]
 8007b22:	3b04      	subs	r3, #4
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d3f7      	bcc.n	8007b18 <quorem+0x102>
 8007b28:	6135      	str	r5, [r6, #16]
 8007b2a:	e7e8      	b.n	8007afe <quorem+0xe8>

08007b2c <_dtoa_r>:
 8007b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b2e:	b09d      	sub	sp, #116	; 0x74
 8007b30:	9202      	str	r2, [sp, #8]
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	9b02      	ldr	r3, [sp, #8]
 8007b36:	9c03      	ldr	r4, [sp, #12]
 8007b38:	930a      	str	r3, [sp, #40]	; 0x28
 8007b3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8007b3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b3e:	0007      	movs	r7, r0
 8007b40:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007b42:	2c00      	cmp	r4, #0
 8007b44:	d10e      	bne.n	8007b64 <_dtoa_r+0x38>
 8007b46:	2010      	movs	r0, #16
 8007b48:	f001 f850 	bl	8008bec <malloc>
 8007b4c:	1e02      	subs	r2, r0, #0
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24
 8007b50:	d104      	bne.n	8007b5c <_dtoa_r+0x30>
 8007b52:	21ea      	movs	r1, #234	; 0xea
 8007b54:	4bc0      	ldr	r3, [pc, #768]	; (8007e58 <_dtoa_r+0x32c>)
 8007b56:	48c1      	ldr	r0, [pc, #772]	; (8007e5c <_dtoa_r+0x330>)
 8007b58:	f7ff f832 	bl	8006bc0 <__assert_func>
 8007b5c:	6044      	str	r4, [r0, #4]
 8007b5e:	6084      	str	r4, [r0, #8]
 8007b60:	6004      	str	r4, [r0, #0]
 8007b62:	60c4      	str	r4, [r0, #12]
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	6819      	ldr	r1, [r3, #0]
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	d00a      	beq.n	8007b82 <_dtoa_r+0x56>
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4093      	lsls	r3, r2
 8007b72:	604a      	str	r2, [r1, #4]
 8007b74:	608b      	str	r3, [r1, #8]
 8007b76:	0038      	movs	r0, r7
 8007b78:	f001 f89a 	bl	8008cb0 <_Bfree>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	da21      	bge.n	8007bcc <_dtoa_r+0xa0>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	9b03      	ldr	r3, [sp, #12]
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	085b      	lsrs	r3, r3, #1
 8007b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007b96:	4bb2      	ldr	r3, [pc, #712]	; (8007e60 <_dtoa_r+0x334>)
 8007b98:	002a      	movs	r2, r5
 8007b9a:	9318      	str	r3, [sp, #96]	; 0x60
 8007b9c:	401a      	ands	r2, r3
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d117      	bne.n	8007bd2 <_dtoa_r+0xa6>
 8007ba2:	4bb0      	ldr	r3, [pc, #704]	; (8007e64 <_dtoa_r+0x338>)
 8007ba4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ba6:	0328      	lsls	r0, r5, #12
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	9b02      	ldr	r3, [sp, #8]
 8007bac:	0b00      	lsrs	r0, r0, #12
 8007bae:	4318      	orrs	r0, r3
 8007bb0:	d101      	bne.n	8007bb6 <_dtoa_r+0x8a>
 8007bb2:	f000 fdc3 	bl	800873c <_dtoa_r+0xc10>
 8007bb6:	48ac      	ldr	r0, [pc, #688]	; (8007e68 <_dtoa_r+0x33c>)
 8007bb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bba:	9005      	str	r0, [sp, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <_dtoa_r+0x9a>
 8007bc0:	4baa      	ldr	r3, [pc, #680]	; (8007e6c <_dtoa_r+0x340>)
 8007bc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	9805      	ldr	r0, [sp, #20]
 8007bc8:	b01d      	add	sp, #116	; 0x74
 8007bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bcc:	2300      	movs	r3, #0
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	e7e0      	b.n	8007b94 <_dtoa_r+0x68>
 8007bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007bd6:	9312      	str	r3, [sp, #72]	; 0x48
 8007bd8:	9413      	str	r4, [sp, #76]	; 0x4c
 8007bda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007bdc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007bde:	2200      	movs	r2, #0
 8007be0:	2300      	movs	r3, #0
 8007be2:	f7f8 fc33 	bl	800044c <__aeabi_dcmpeq>
 8007be6:	1e04      	subs	r4, r0, #0
 8007be8:	d00b      	beq.n	8007c02 <_dtoa_r+0xd6>
 8007bea:	2301      	movs	r3, #1
 8007bec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	4b9f      	ldr	r3, [pc, #636]	; (8007e70 <_dtoa_r+0x344>)
 8007bf2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	d0e5      	beq.n	8007bc6 <_dtoa_r+0x9a>
 8007bfa:	4a9e      	ldr	r2, [pc, #632]	; (8007e74 <_dtoa_r+0x348>)
 8007bfc:	9926      	ldr	r1, [sp, #152]	; 0x98
 8007bfe:	600a      	str	r2, [r1, #0]
 8007c00:	e7e1      	b.n	8007bc6 <_dtoa_r+0x9a>
 8007c02:	ab1a      	add	r3, sp, #104	; 0x68
 8007c04:	9301      	str	r3, [sp, #4]
 8007c06:	ab1b      	add	r3, sp, #108	; 0x6c
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	0038      	movs	r0, r7
 8007c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c10:	f001 fb44 	bl	800929c <__d2b>
 8007c14:	006e      	lsls	r6, r5, #1
 8007c16:	9004      	str	r0, [sp, #16]
 8007c18:	0d76      	lsrs	r6, r6, #21
 8007c1a:	d100      	bne.n	8007c1e <_dtoa_r+0xf2>
 8007c1c:	e07c      	b.n	8007d18 <_dtoa_r+0x1ec>
 8007c1e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c20:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007c22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c24:	4a94      	ldr	r2, [pc, #592]	; (8007e78 <_dtoa_r+0x34c>)
 8007c26:	031b      	lsls	r3, r3, #12
 8007c28:	0b1b      	lsrs	r3, r3, #12
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	0011      	movs	r1, r2
 8007c2e:	4b93      	ldr	r3, [pc, #588]	; (8007e7c <_dtoa_r+0x350>)
 8007c30:	9416      	str	r4, [sp, #88]	; 0x58
 8007c32:	18f6      	adds	r6, r6, r3
 8007c34:	2200      	movs	r2, #0
 8007c36:	4b92      	ldr	r3, [pc, #584]	; (8007e80 <_dtoa_r+0x354>)
 8007c38:	f7fa fb96 	bl	8002368 <__aeabi_dsub>
 8007c3c:	4a91      	ldr	r2, [pc, #580]	; (8007e84 <_dtoa_r+0x358>)
 8007c3e:	4b92      	ldr	r3, [pc, #584]	; (8007e88 <_dtoa_r+0x35c>)
 8007c40:	f7fa f926 	bl	8001e90 <__aeabi_dmul>
 8007c44:	4a91      	ldr	r2, [pc, #580]	; (8007e8c <_dtoa_r+0x360>)
 8007c46:	4b92      	ldr	r3, [pc, #584]	; (8007e90 <_dtoa_r+0x364>)
 8007c48:	f7f9 f9b2 	bl	8000fb0 <__aeabi_dadd>
 8007c4c:	0004      	movs	r4, r0
 8007c4e:	0030      	movs	r0, r6
 8007c50:	000d      	movs	r5, r1
 8007c52:	f7fa ff6f 	bl	8002b34 <__aeabi_i2d>
 8007c56:	4a8f      	ldr	r2, [pc, #572]	; (8007e94 <_dtoa_r+0x368>)
 8007c58:	4b8f      	ldr	r3, [pc, #572]	; (8007e98 <_dtoa_r+0x36c>)
 8007c5a:	f7fa f919 	bl	8001e90 <__aeabi_dmul>
 8007c5e:	0002      	movs	r2, r0
 8007c60:	000b      	movs	r3, r1
 8007c62:	0020      	movs	r0, r4
 8007c64:	0029      	movs	r1, r5
 8007c66:	f7f9 f9a3 	bl	8000fb0 <__aeabi_dadd>
 8007c6a:	0004      	movs	r4, r0
 8007c6c:	000d      	movs	r5, r1
 8007c6e:	f7fa ff2b 	bl	8002ac8 <__aeabi_d2iz>
 8007c72:	2200      	movs	r2, #0
 8007c74:	9002      	str	r0, [sp, #8]
 8007c76:	2300      	movs	r3, #0
 8007c78:	0020      	movs	r0, r4
 8007c7a:	0029      	movs	r1, r5
 8007c7c:	f7f8 fbec 	bl	8000458 <__aeabi_dcmplt>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d00b      	beq.n	8007c9c <_dtoa_r+0x170>
 8007c84:	9802      	ldr	r0, [sp, #8]
 8007c86:	f7fa ff55 	bl	8002b34 <__aeabi_i2d>
 8007c8a:	002b      	movs	r3, r5
 8007c8c:	0022      	movs	r2, r4
 8007c8e:	f7f8 fbdd 	bl	800044c <__aeabi_dcmpeq>
 8007c92:	4243      	negs	r3, r0
 8007c94:	4158      	adcs	r0, r3
 8007c96:	9b02      	ldr	r3, [sp, #8]
 8007c98:	1a1b      	subs	r3, r3, r0
 8007c9a:	9302      	str	r3, [sp, #8]
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	9315      	str	r3, [sp, #84]	; 0x54
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	2b16      	cmp	r3, #22
 8007ca4:	d80f      	bhi.n	8007cc6 <_dtoa_r+0x19a>
 8007ca6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ca8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007caa:	00da      	lsls	r2, r3, #3
 8007cac:	4b7b      	ldr	r3, [pc, #492]	; (8007e9c <_dtoa_r+0x370>)
 8007cae:	189b      	adds	r3, r3, r2
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f7f8 fbd0 	bl	8000458 <__aeabi_dcmplt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d049      	beq.n	8007d50 <_dtoa_r+0x224>
 8007cbc:	9b02      	ldr	r3, [sp, #8]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	9302      	str	r3, [sp, #8]
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9315      	str	r3, [sp, #84]	; 0x54
 8007cc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007cc8:	1b9e      	subs	r6, r3, r6
 8007cca:	2300      	movs	r3, #0
 8007ccc:	9308      	str	r3, [sp, #32]
 8007cce:	0033      	movs	r3, r6
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8007cd4:	d504      	bpl.n	8007ce0 <_dtoa_r+0x1b4>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	1b9b      	subs	r3, r3, r6
 8007cda:	9308      	str	r3, [sp, #32]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	930d      	str	r3, [sp, #52]	; 0x34
 8007ce0:	9b02      	ldr	r3, [sp, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	db36      	blt.n	8007d54 <_dtoa_r+0x228>
 8007ce6:	9a02      	ldr	r2, [sp, #8]
 8007ce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cea:	4694      	mov	ip, r2
 8007cec:	4463      	add	r3, ip
 8007cee:	930d      	str	r3, [sp, #52]	; 0x34
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9214      	str	r2, [sp, #80]	; 0x50
 8007cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8007cf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cf8:	2401      	movs	r4, #1
 8007cfa:	2b09      	cmp	r3, #9
 8007cfc:	d862      	bhi.n	8007dc4 <_dtoa_r+0x298>
 8007cfe:	2b05      	cmp	r3, #5
 8007d00:	dd02      	ble.n	8007d08 <_dtoa_r+0x1dc>
 8007d02:	2400      	movs	r4, #0
 8007d04:	3b04      	subs	r3, #4
 8007d06:	9322      	str	r3, [sp, #136]	; 0x88
 8007d08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d0a:	1e98      	subs	r0, r3, #2
 8007d0c:	2803      	cmp	r0, #3
 8007d0e:	d862      	bhi.n	8007dd6 <_dtoa_r+0x2aa>
 8007d10:	f7f8 fa02 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007d14:	56343629 	.word	0x56343629
 8007d18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007d1a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007d1c:	189e      	adds	r6, r3, r2
 8007d1e:	4b60      	ldr	r3, [pc, #384]	; (8007ea0 <_dtoa_r+0x374>)
 8007d20:	18f2      	adds	r2, r6, r3
 8007d22:	2a20      	cmp	r2, #32
 8007d24:	dd0f      	ble.n	8007d46 <_dtoa_r+0x21a>
 8007d26:	2340      	movs	r3, #64	; 0x40
 8007d28:	1a9b      	subs	r3, r3, r2
 8007d2a:	409d      	lsls	r5, r3
 8007d2c:	4b5d      	ldr	r3, [pc, #372]	; (8007ea4 <_dtoa_r+0x378>)
 8007d2e:	9802      	ldr	r0, [sp, #8]
 8007d30:	18f3      	adds	r3, r6, r3
 8007d32:	40d8      	lsrs	r0, r3
 8007d34:	4328      	orrs	r0, r5
 8007d36:	f7fa ff2d 	bl	8002b94 <__aeabi_ui2d>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4c5a      	ldr	r4, [pc, #360]	; (8007ea8 <_dtoa_r+0x37c>)
 8007d3e:	3e01      	subs	r6, #1
 8007d40:	1909      	adds	r1, r1, r4
 8007d42:	9316      	str	r3, [sp, #88]	; 0x58
 8007d44:	e776      	b.n	8007c34 <_dtoa_r+0x108>
 8007d46:	2320      	movs	r3, #32
 8007d48:	9802      	ldr	r0, [sp, #8]
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	4098      	lsls	r0, r3
 8007d4e:	e7f2      	b.n	8007d36 <_dtoa_r+0x20a>
 8007d50:	9015      	str	r0, [sp, #84]	; 0x54
 8007d52:	e7b8      	b.n	8007cc6 <_dtoa_r+0x19a>
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	9a02      	ldr	r2, [sp, #8]
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	9308      	str	r3, [sp, #32]
 8007d5c:	4253      	negs	r3, r2
 8007d5e:	930e      	str	r3, [sp, #56]	; 0x38
 8007d60:	2300      	movs	r3, #0
 8007d62:	9314      	str	r3, [sp, #80]	; 0x50
 8007d64:	e7c7      	b.n	8007cf6 <_dtoa_r+0x1ca>
 8007d66:	2300      	movs	r3, #0
 8007d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	dc36      	bgt.n	8007dde <_dtoa_r+0x2b2>
 8007d70:	2301      	movs	r3, #1
 8007d72:	001a      	movs	r2, r3
 8007d74:	930c      	str	r3, [sp, #48]	; 0x30
 8007d76:	9306      	str	r3, [sp, #24]
 8007d78:	9223      	str	r2, [sp, #140]	; 0x8c
 8007d7a:	e00d      	b.n	8007d98 <_dtoa_r+0x26c>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e7f3      	b.n	8007d68 <_dtoa_r+0x23c>
 8007d80:	2300      	movs	r3, #0
 8007d82:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d86:	4694      	mov	ip, r2
 8007d88:	9b02      	ldr	r3, [sp, #8]
 8007d8a:	4463      	add	r3, ip
 8007d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d8e:	3301      	adds	r3, #1
 8007d90:	9306      	str	r3, [sp, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dc00      	bgt.n	8007d98 <_dtoa_r+0x26c>
 8007d96:	2301      	movs	r3, #1
 8007d98:	2200      	movs	r2, #0
 8007d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d9c:	6042      	str	r2, [r0, #4]
 8007d9e:	3204      	adds	r2, #4
 8007da0:	0015      	movs	r5, r2
 8007da2:	3514      	adds	r5, #20
 8007da4:	6841      	ldr	r1, [r0, #4]
 8007da6:	429d      	cmp	r5, r3
 8007da8:	d91d      	bls.n	8007de6 <_dtoa_r+0x2ba>
 8007daa:	0038      	movs	r0, r7
 8007dac:	f000 ff3c 	bl	8008c28 <_Balloc>
 8007db0:	9005      	str	r0, [sp, #20]
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d11b      	bne.n	8007dee <_dtoa_r+0x2c2>
 8007db6:	21d5      	movs	r1, #213	; 0xd5
 8007db8:	0002      	movs	r2, r0
 8007dba:	4b3c      	ldr	r3, [pc, #240]	; (8007eac <_dtoa_r+0x380>)
 8007dbc:	0049      	lsls	r1, r1, #1
 8007dbe:	e6ca      	b.n	8007b56 <_dtoa_r+0x2a>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7de      	b.n	8007d82 <_dtoa_r+0x256>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	940f      	str	r4, [sp, #60]	; 0x3c
 8007dc8:	9322      	str	r3, [sp, #136]	; 0x88
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	930c      	str	r3, [sp, #48]	; 0x30
 8007dce:	9306      	str	r3, [sp, #24]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	3313      	adds	r3, #19
 8007dd4:	e7d0      	b.n	8007d78 <_dtoa_r+0x24c>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dda:	3b02      	subs	r3, #2
 8007ddc:	e7f6      	b.n	8007dcc <_dtoa_r+0x2a0>
 8007dde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007de0:	930c      	str	r3, [sp, #48]	; 0x30
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	e7d8      	b.n	8007d98 <_dtoa_r+0x26c>
 8007de6:	3101      	adds	r1, #1
 8007de8:	6041      	str	r1, [r0, #4]
 8007dea:	0052      	lsls	r2, r2, #1
 8007dec:	e7d8      	b.n	8007da0 <_dtoa_r+0x274>
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	9a05      	ldr	r2, [sp, #20]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	9b06      	ldr	r3, [sp, #24]
 8007df6:	2b0e      	cmp	r3, #14
 8007df8:	d900      	bls.n	8007dfc <_dtoa_r+0x2d0>
 8007dfa:	e0eb      	b.n	8007fd4 <_dtoa_r+0x4a8>
 8007dfc:	2c00      	cmp	r4, #0
 8007dfe:	d100      	bne.n	8007e02 <_dtoa_r+0x2d6>
 8007e00:	e0e8      	b.n	8007fd4 <_dtoa_r+0x4a8>
 8007e02:	9b02      	ldr	r3, [sp, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd68      	ble.n	8007eda <_dtoa_r+0x3ae>
 8007e08:	001a      	movs	r2, r3
 8007e0a:	210f      	movs	r1, #15
 8007e0c:	4b23      	ldr	r3, [pc, #140]	; (8007e9c <_dtoa_r+0x370>)
 8007e0e:	400a      	ands	r2, r1
 8007e10:	00d2      	lsls	r2, r2, #3
 8007e12:	189b      	adds	r3, r3, r2
 8007e14:	681d      	ldr	r5, [r3, #0]
 8007e16:	685e      	ldr	r6, [r3, #4]
 8007e18:	9b02      	ldr	r3, [sp, #8]
 8007e1a:	111c      	asrs	r4, r3, #4
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	9310      	str	r3, [sp, #64]	; 0x40
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	05db      	lsls	r3, r3, #23
 8007e24:	d50b      	bpl.n	8007e3e <_dtoa_r+0x312>
 8007e26:	4b22      	ldr	r3, [pc, #136]	; (8007eb0 <_dtoa_r+0x384>)
 8007e28:	400c      	ands	r4, r1
 8007e2a:	6a1a      	ldr	r2, [r3, #32]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007e30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007e32:	f7f9 fc27 	bl	8001684 <__aeabi_ddiv>
 8007e36:	2303      	movs	r3, #3
 8007e38:	900a      	str	r0, [sp, #40]	; 0x28
 8007e3a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e3c:	9310      	str	r3, [sp, #64]	; 0x40
 8007e3e:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <_dtoa_r+0x384>)
 8007e40:	9307      	str	r3, [sp, #28]
 8007e42:	2c00      	cmp	r4, #0
 8007e44:	d136      	bne.n	8007eb4 <_dtoa_r+0x388>
 8007e46:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e4a:	002a      	movs	r2, r5
 8007e4c:	0033      	movs	r3, r6
 8007e4e:	f7f9 fc19 	bl	8001684 <__aeabi_ddiv>
 8007e52:	900a      	str	r0, [sp, #40]	; 0x28
 8007e54:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e56:	e05c      	b.n	8007f12 <_dtoa_r+0x3e6>
 8007e58:	08009a72 	.word	0x08009a72
 8007e5c:	08009a89 	.word	0x08009a89
 8007e60:	7ff00000 	.word	0x7ff00000
 8007e64:	0000270f 	.word	0x0000270f
 8007e68:	08009a6e 	.word	0x08009a6e
 8007e6c:	08009a71 	.word	0x08009a71
 8007e70:	08009a41 	.word	0x08009a41
 8007e74:	08009a42 	.word	0x08009a42
 8007e78:	3ff00000 	.word	0x3ff00000
 8007e7c:	fffffc01 	.word	0xfffffc01
 8007e80:	3ff80000 	.word	0x3ff80000
 8007e84:	636f4361 	.word	0x636f4361
 8007e88:	3fd287a7 	.word	0x3fd287a7
 8007e8c:	8b60c8b3 	.word	0x8b60c8b3
 8007e90:	3fc68a28 	.word	0x3fc68a28
 8007e94:	509f79fb 	.word	0x509f79fb
 8007e98:	3fd34413 	.word	0x3fd34413
 8007e9c:	08009be8 	.word	0x08009be8
 8007ea0:	00000432 	.word	0x00000432
 8007ea4:	00000412 	.word	0x00000412
 8007ea8:	fe100000 	.word	0xfe100000
 8007eac:	08009ae8 	.word	0x08009ae8
 8007eb0:	08009bc0 	.word	0x08009bc0
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	421c      	tst	r4, r3
 8007eb8:	d00b      	beq.n	8007ed2 <_dtoa_r+0x3a6>
 8007eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ebc:	0028      	movs	r0, r5
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8007ec2:	9b07      	ldr	r3, [sp, #28]
 8007ec4:	0031      	movs	r1, r6
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f7f9 ffe1 	bl	8001e90 <__aeabi_dmul>
 8007ece:	0005      	movs	r5, r0
 8007ed0:	000e      	movs	r6, r1
 8007ed2:	9b07      	ldr	r3, [sp, #28]
 8007ed4:	1064      	asrs	r4, r4, #1
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	e7b2      	b.n	8007e40 <_dtoa_r+0x314>
 8007eda:	2302      	movs	r3, #2
 8007edc:	9310      	str	r3, [sp, #64]	; 0x40
 8007ede:	9b02      	ldr	r3, [sp, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d016      	beq.n	8007f12 <_dtoa_r+0x3e6>
 8007ee4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ee6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ee8:	425c      	negs	r4, r3
 8007eea:	230f      	movs	r3, #15
 8007eec:	4ab5      	ldr	r2, [pc, #724]	; (80081c4 <_dtoa_r+0x698>)
 8007eee:	4023      	ands	r3, r4
 8007ef0:	00db      	lsls	r3, r3, #3
 8007ef2:	18d3      	adds	r3, r2, r3
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f7f9 ffca 	bl	8001e90 <__aeabi_dmul>
 8007efc:	2601      	movs	r6, #1
 8007efe:	2300      	movs	r3, #0
 8007f00:	900a      	str	r0, [sp, #40]	; 0x28
 8007f02:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f04:	4db0      	ldr	r5, [pc, #704]	; (80081c8 <_dtoa_r+0x69c>)
 8007f06:	1124      	asrs	r4, r4, #4
 8007f08:	2c00      	cmp	r4, #0
 8007f0a:	d000      	beq.n	8007f0e <_dtoa_r+0x3e2>
 8007f0c:	e094      	b.n	8008038 <_dtoa_r+0x50c>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d19f      	bne.n	8007e52 <_dtoa_r+0x326>
 8007f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d100      	bne.n	8007f1a <_dtoa_r+0x3ee>
 8007f18:	e09b      	b.n	8008052 <_dtoa_r+0x526>
 8007f1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f1c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007f1e:	2200      	movs	r2, #0
 8007f20:	0020      	movs	r0, r4
 8007f22:	0029      	movs	r1, r5
 8007f24:	4ba9      	ldr	r3, [pc, #676]	; (80081cc <_dtoa_r+0x6a0>)
 8007f26:	f7f8 fa97 	bl	8000458 <__aeabi_dcmplt>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d100      	bne.n	8007f30 <_dtoa_r+0x404>
 8007f2e:	e090      	b.n	8008052 <_dtoa_r+0x526>
 8007f30:	9b06      	ldr	r3, [sp, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d100      	bne.n	8007f38 <_dtoa_r+0x40c>
 8007f36:	e08c      	b.n	8008052 <_dtoa_r+0x526>
 8007f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dd46      	ble.n	8007fcc <_dtoa_r+0x4a0>
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	0020      	movs	r0, r4
 8007f44:	0029      	movs	r1, r5
 8007f46:	1e5e      	subs	r6, r3, #1
 8007f48:	4ba1      	ldr	r3, [pc, #644]	; (80081d0 <_dtoa_r+0x6a4>)
 8007f4a:	f7f9 ffa1 	bl	8001e90 <__aeabi_dmul>
 8007f4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f50:	900a      	str	r0, [sp, #40]	; 0x28
 8007f52:	910b      	str	r1, [sp, #44]	; 0x2c
 8007f54:	3301      	adds	r3, #1
 8007f56:	9310      	str	r3, [sp, #64]	; 0x40
 8007f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f5a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007f5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f5e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007f60:	9307      	str	r3, [sp, #28]
 8007f62:	f7fa fde7 	bl	8002b34 <__aeabi_i2d>
 8007f66:	0022      	movs	r2, r4
 8007f68:	002b      	movs	r3, r5
 8007f6a:	f7f9 ff91 	bl	8001e90 <__aeabi_dmul>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4b98      	ldr	r3, [pc, #608]	; (80081d4 <_dtoa_r+0x6a8>)
 8007f72:	f7f9 f81d 	bl	8000fb0 <__aeabi_dadd>
 8007f76:	9010      	str	r0, [sp, #64]	; 0x40
 8007f78:	9111      	str	r1, [sp, #68]	; 0x44
 8007f7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f7e:	920a      	str	r2, [sp, #40]	; 0x28
 8007f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f82:	4a95      	ldr	r2, [pc, #596]	; (80081d8 <_dtoa_r+0x6ac>)
 8007f84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f86:	4694      	mov	ip, r2
 8007f88:	4463      	add	r3, ip
 8007f8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f8e:	9b07      	ldr	r3, [sp, #28]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d161      	bne.n	8008058 <_dtoa_r+0x52c>
 8007f94:	2200      	movs	r2, #0
 8007f96:	0020      	movs	r0, r4
 8007f98:	0029      	movs	r1, r5
 8007f9a:	4b90      	ldr	r3, [pc, #576]	; (80081dc <_dtoa_r+0x6b0>)
 8007f9c:	f7fa f9e4 	bl	8002368 <__aeabi_dsub>
 8007fa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fa4:	0004      	movs	r4, r0
 8007fa6:	000d      	movs	r5, r1
 8007fa8:	f7f8 fa6a 	bl	8000480 <__aeabi_dcmpgt>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d000      	beq.n	8007fb2 <_dtoa_r+0x486>
 8007fb0:	e2b5      	b.n	800851e <_dtoa_r+0x9f2>
 8007fb2:	488b      	ldr	r0, [pc, #556]	; (80081e0 <_dtoa_r+0x6b4>)
 8007fb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007fb6:	4684      	mov	ip, r0
 8007fb8:	4461      	add	r1, ip
 8007fba:	000b      	movs	r3, r1
 8007fbc:	0020      	movs	r0, r4
 8007fbe:	0029      	movs	r1, r5
 8007fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fc2:	f7f8 fa49 	bl	8000458 <__aeabi_dcmplt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d000      	beq.n	8007fcc <_dtoa_r+0x4a0>
 8007fca:	e2a5      	b.n	8008518 <_dtoa_r+0x9ec>
 8007fcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8007fd2:	940b      	str	r4, [sp, #44]	; 0x2c
 8007fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	da00      	bge.n	8007fdc <_dtoa_r+0x4b0>
 8007fda:	e171      	b.n	80082c0 <_dtoa_r+0x794>
 8007fdc:	9a02      	ldr	r2, [sp, #8]
 8007fde:	2a0e      	cmp	r2, #14
 8007fe0:	dd00      	ble.n	8007fe4 <_dtoa_r+0x4b8>
 8007fe2:	e16d      	b.n	80082c0 <_dtoa_r+0x794>
 8007fe4:	4b77      	ldr	r3, [pc, #476]	; (80081c4 <_dtoa_r+0x698>)
 8007fe6:	00d2      	lsls	r2, r2, #3
 8007fe8:	189b      	adds	r3, r3, r2
 8007fea:	685c      	ldr	r4, [r3, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	9308      	str	r3, [sp, #32]
 8007ff0:	9409      	str	r4, [sp, #36]	; 0x24
 8007ff2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	db00      	blt.n	8007ffa <_dtoa_r+0x4ce>
 8007ff8:	e0f6      	b.n	80081e8 <_dtoa_r+0x6bc>
 8007ffa:	9b06      	ldr	r3, [sp, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dd00      	ble.n	8008002 <_dtoa_r+0x4d6>
 8008000:	e0f2      	b.n	80081e8 <_dtoa_r+0x6bc>
 8008002:	d000      	beq.n	8008006 <_dtoa_r+0x4da>
 8008004:	e288      	b.n	8008518 <_dtoa_r+0x9ec>
 8008006:	9808      	ldr	r0, [sp, #32]
 8008008:	9909      	ldr	r1, [sp, #36]	; 0x24
 800800a:	2200      	movs	r2, #0
 800800c:	4b73      	ldr	r3, [pc, #460]	; (80081dc <_dtoa_r+0x6b0>)
 800800e:	f7f9 ff3f 	bl	8001e90 <__aeabi_dmul>
 8008012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008016:	f7f8 fa3d 	bl	8000494 <__aeabi_dcmpge>
 800801a:	9e06      	ldr	r6, [sp, #24]
 800801c:	0035      	movs	r5, r6
 800801e:	2800      	cmp	r0, #0
 8008020:	d000      	beq.n	8008024 <_dtoa_r+0x4f8>
 8008022:	e25f      	b.n	80084e4 <_dtoa_r+0x9b8>
 8008024:	9b05      	ldr	r3, [sp, #20]
 8008026:	9a05      	ldr	r2, [sp, #20]
 8008028:	3301      	adds	r3, #1
 800802a:	9307      	str	r3, [sp, #28]
 800802c:	2331      	movs	r3, #49	; 0x31
 800802e:	7013      	strb	r3, [r2, #0]
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	3301      	adds	r3, #1
 8008034:	9302      	str	r3, [sp, #8]
 8008036:	e25a      	b.n	80084ee <_dtoa_r+0x9c2>
 8008038:	4234      	tst	r4, r6
 800803a:	d007      	beq.n	800804c <_dtoa_r+0x520>
 800803c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800803e:	3301      	adds	r3, #1
 8008040:	9310      	str	r3, [sp, #64]	; 0x40
 8008042:	682a      	ldr	r2, [r5, #0]
 8008044:	686b      	ldr	r3, [r5, #4]
 8008046:	f7f9 ff23 	bl	8001e90 <__aeabi_dmul>
 800804a:	0033      	movs	r3, r6
 800804c:	1064      	asrs	r4, r4, #1
 800804e:	3508      	adds	r5, #8
 8008050:	e75a      	b.n	8007f08 <_dtoa_r+0x3dc>
 8008052:	9e02      	ldr	r6, [sp, #8]
 8008054:	9b06      	ldr	r3, [sp, #24]
 8008056:	e780      	b.n	8007f5a <_dtoa_r+0x42e>
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	4b59      	ldr	r3, [pc, #356]	; (80081c4 <_dtoa_r+0x698>)
 8008060:	00d2      	lsls	r2, r2, #3
 8008062:	189b      	adds	r3, r3, r2
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	2900      	cmp	r1, #0
 800806a:	d051      	beq.n	8008110 <_dtoa_r+0x5e4>
 800806c:	2000      	movs	r0, #0
 800806e:	495d      	ldr	r1, [pc, #372]	; (80081e4 <_dtoa_r+0x6b8>)
 8008070:	f7f9 fb08 	bl	8001684 <__aeabi_ddiv>
 8008074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008078:	f7fa f976 	bl	8002368 <__aeabi_dsub>
 800807c:	9a05      	ldr	r2, [sp, #20]
 800807e:	9b05      	ldr	r3, [sp, #20]
 8008080:	4694      	mov	ip, r2
 8008082:	9310      	str	r3, [sp, #64]	; 0x40
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	900a      	str	r0, [sp, #40]	; 0x28
 8008088:	910b      	str	r1, [sp, #44]	; 0x2c
 800808a:	4463      	add	r3, ip
 800808c:	9319      	str	r3, [sp, #100]	; 0x64
 800808e:	0029      	movs	r1, r5
 8008090:	0020      	movs	r0, r4
 8008092:	f7fa fd19 	bl	8002ac8 <__aeabi_d2iz>
 8008096:	9017      	str	r0, [sp, #92]	; 0x5c
 8008098:	f7fa fd4c 	bl	8002b34 <__aeabi_i2d>
 800809c:	0002      	movs	r2, r0
 800809e:	000b      	movs	r3, r1
 80080a0:	0020      	movs	r0, r4
 80080a2:	0029      	movs	r1, r5
 80080a4:	f7fa f960 	bl	8002368 <__aeabi_dsub>
 80080a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080ac:	3301      	adds	r3, #1
 80080ae:	9307      	str	r3, [sp, #28]
 80080b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080b2:	0004      	movs	r4, r0
 80080b4:	3330      	adds	r3, #48	; 0x30
 80080b6:	7013      	strb	r3, [r2, #0]
 80080b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080bc:	000d      	movs	r5, r1
 80080be:	f7f8 f9cb 	bl	8000458 <__aeabi_dcmplt>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d175      	bne.n	80081b2 <_dtoa_r+0x686>
 80080c6:	0022      	movs	r2, r4
 80080c8:	002b      	movs	r3, r5
 80080ca:	2000      	movs	r0, #0
 80080cc:	493f      	ldr	r1, [pc, #252]	; (80081cc <_dtoa_r+0x6a0>)
 80080ce:	f7fa f94b 	bl	8002368 <__aeabi_dsub>
 80080d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d6:	f7f8 f9bf 	bl	8000458 <__aeabi_dcmplt>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d000      	beq.n	80080e0 <_dtoa_r+0x5b4>
 80080de:	e0d1      	b.n	8008284 <_dtoa_r+0x758>
 80080e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d100      	bne.n	80080ea <_dtoa_r+0x5be>
 80080e8:	e770      	b.n	8007fcc <_dtoa_r+0x4a0>
 80080ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80080ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ee:	2200      	movs	r2, #0
 80080f0:	4b37      	ldr	r3, [pc, #220]	; (80081d0 <_dtoa_r+0x6a4>)
 80080f2:	f7f9 fecd 	bl	8001e90 <__aeabi_dmul>
 80080f6:	4b36      	ldr	r3, [pc, #216]	; (80081d0 <_dtoa_r+0x6a4>)
 80080f8:	900a      	str	r0, [sp, #40]	; 0x28
 80080fa:	910b      	str	r1, [sp, #44]	; 0x2c
 80080fc:	2200      	movs	r2, #0
 80080fe:	0020      	movs	r0, r4
 8008100:	0029      	movs	r1, r5
 8008102:	f7f9 fec5 	bl	8001e90 <__aeabi_dmul>
 8008106:	9b07      	ldr	r3, [sp, #28]
 8008108:	0004      	movs	r4, r0
 800810a:	000d      	movs	r5, r1
 800810c:	9310      	str	r3, [sp, #64]	; 0x40
 800810e:	e7be      	b.n	800808e <_dtoa_r+0x562>
 8008110:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008114:	f7f9 febc 	bl	8001e90 <__aeabi_dmul>
 8008118:	9a05      	ldr	r2, [sp, #20]
 800811a:	9b05      	ldr	r3, [sp, #20]
 800811c:	4694      	mov	ip, r2
 800811e:	930a      	str	r3, [sp, #40]	; 0x28
 8008120:	9b07      	ldr	r3, [sp, #28]
 8008122:	9010      	str	r0, [sp, #64]	; 0x40
 8008124:	9111      	str	r1, [sp, #68]	; 0x44
 8008126:	4463      	add	r3, ip
 8008128:	9319      	str	r3, [sp, #100]	; 0x64
 800812a:	0029      	movs	r1, r5
 800812c:	0020      	movs	r0, r4
 800812e:	f7fa fccb 	bl	8002ac8 <__aeabi_d2iz>
 8008132:	9017      	str	r0, [sp, #92]	; 0x5c
 8008134:	f7fa fcfe 	bl	8002b34 <__aeabi_i2d>
 8008138:	0002      	movs	r2, r0
 800813a:	000b      	movs	r3, r1
 800813c:	0020      	movs	r0, r4
 800813e:	0029      	movs	r1, r5
 8008140:	f7fa f912 	bl	8002368 <__aeabi_dsub>
 8008144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008148:	3330      	adds	r3, #48	; 0x30
 800814a:	7013      	strb	r3, [r2, #0]
 800814c:	0013      	movs	r3, r2
 800814e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008150:	3301      	adds	r3, #1
 8008152:	0004      	movs	r4, r0
 8008154:	000d      	movs	r5, r1
 8008156:	930a      	str	r3, [sp, #40]	; 0x28
 8008158:	4293      	cmp	r3, r2
 800815a:	d12c      	bne.n	80081b6 <_dtoa_r+0x68a>
 800815c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800815e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008160:	9a05      	ldr	r2, [sp, #20]
 8008162:	9b07      	ldr	r3, [sp, #28]
 8008164:	4694      	mov	ip, r2
 8008166:	4463      	add	r3, ip
 8008168:	2200      	movs	r2, #0
 800816a:	9307      	str	r3, [sp, #28]
 800816c:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <_dtoa_r+0x6b8>)
 800816e:	f7f8 ff1f 	bl	8000fb0 <__aeabi_dadd>
 8008172:	0002      	movs	r2, r0
 8008174:	000b      	movs	r3, r1
 8008176:	0020      	movs	r0, r4
 8008178:	0029      	movs	r1, r5
 800817a:	f7f8 f981 	bl	8000480 <__aeabi_dcmpgt>
 800817e:	2800      	cmp	r0, #0
 8008180:	d000      	beq.n	8008184 <_dtoa_r+0x658>
 8008182:	e07f      	b.n	8008284 <_dtoa_r+0x758>
 8008184:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008188:	2000      	movs	r0, #0
 800818a:	4916      	ldr	r1, [pc, #88]	; (80081e4 <_dtoa_r+0x6b8>)
 800818c:	f7fa f8ec 	bl	8002368 <__aeabi_dsub>
 8008190:	0002      	movs	r2, r0
 8008192:	000b      	movs	r3, r1
 8008194:	0020      	movs	r0, r4
 8008196:	0029      	movs	r1, r5
 8008198:	f7f8 f95e 	bl	8000458 <__aeabi_dcmplt>
 800819c:	2800      	cmp	r0, #0
 800819e:	d100      	bne.n	80081a2 <_dtoa_r+0x676>
 80081a0:	e714      	b.n	8007fcc <_dtoa_r+0x4a0>
 80081a2:	9b07      	ldr	r3, [sp, #28]
 80081a4:	001a      	movs	r2, r3
 80081a6:	3a01      	subs	r2, #1
 80081a8:	9207      	str	r2, [sp, #28]
 80081aa:	7812      	ldrb	r2, [r2, #0]
 80081ac:	2a30      	cmp	r2, #48	; 0x30
 80081ae:	d0f8      	beq.n	80081a2 <_dtoa_r+0x676>
 80081b0:	9307      	str	r3, [sp, #28]
 80081b2:	9602      	str	r6, [sp, #8]
 80081b4:	e054      	b.n	8008260 <_dtoa_r+0x734>
 80081b6:	2200      	movs	r2, #0
 80081b8:	4b05      	ldr	r3, [pc, #20]	; (80081d0 <_dtoa_r+0x6a4>)
 80081ba:	f7f9 fe69 	bl	8001e90 <__aeabi_dmul>
 80081be:	0004      	movs	r4, r0
 80081c0:	000d      	movs	r5, r1
 80081c2:	e7b2      	b.n	800812a <_dtoa_r+0x5fe>
 80081c4:	08009be8 	.word	0x08009be8
 80081c8:	08009bc0 	.word	0x08009bc0
 80081cc:	3ff00000 	.word	0x3ff00000
 80081d0:	40240000 	.word	0x40240000
 80081d4:	401c0000 	.word	0x401c0000
 80081d8:	fcc00000 	.word	0xfcc00000
 80081dc:	40140000 	.word	0x40140000
 80081e0:	7cc00000 	.word	0x7cc00000
 80081e4:	3fe00000 	.word	0x3fe00000
 80081e8:	9b06      	ldr	r3, [sp, #24]
 80081ea:	9e05      	ldr	r6, [sp, #20]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	199b      	adds	r3, r3, r6
 80081f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081f2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80081f4:	930a      	str	r3, [sp, #40]	; 0x28
 80081f6:	9a08      	ldr	r2, [sp, #32]
 80081f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fa:	0020      	movs	r0, r4
 80081fc:	0029      	movs	r1, r5
 80081fe:	f7f9 fa41 	bl	8001684 <__aeabi_ddiv>
 8008202:	f7fa fc61 	bl	8002ac8 <__aeabi_d2iz>
 8008206:	9006      	str	r0, [sp, #24]
 8008208:	f7fa fc94 	bl	8002b34 <__aeabi_i2d>
 800820c:	9a08      	ldr	r2, [sp, #32]
 800820e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008210:	f7f9 fe3e 	bl	8001e90 <__aeabi_dmul>
 8008214:	0002      	movs	r2, r0
 8008216:	000b      	movs	r3, r1
 8008218:	0020      	movs	r0, r4
 800821a:	0029      	movs	r1, r5
 800821c:	f7fa f8a4 	bl	8002368 <__aeabi_dsub>
 8008220:	0033      	movs	r3, r6
 8008222:	9a06      	ldr	r2, [sp, #24]
 8008224:	3601      	adds	r6, #1
 8008226:	3230      	adds	r2, #48	; 0x30
 8008228:	701a      	strb	r2, [r3, #0]
 800822a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800822c:	9607      	str	r6, [sp, #28]
 800822e:	429a      	cmp	r2, r3
 8008230:	d139      	bne.n	80082a6 <_dtoa_r+0x77a>
 8008232:	0002      	movs	r2, r0
 8008234:	000b      	movs	r3, r1
 8008236:	f7f8 febb 	bl	8000fb0 <__aeabi_dadd>
 800823a:	9a08      	ldr	r2, [sp, #32]
 800823c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823e:	0004      	movs	r4, r0
 8008240:	000d      	movs	r5, r1
 8008242:	f7f8 f91d 	bl	8000480 <__aeabi_dcmpgt>
 8008246:	2800      	cmp	r0, #0
 8008248:	d11b      	bne.n	8008282 <_dtoa_r+0x756>
 800824a:	9a08      	ldr	r2, [sp, #32]
 800824c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800824e:	0020      	movs	r0, r4
 8008250:	0029      	movs	r1, r5
 8008252:	f7f8 f8fb 	bl	800044c <__aeabi_dcmpeq>
 8008256:	2800      	cmp	r0, #0
 8008258:	d002      	beq.n	8008260 <_dtoa_r+0x734>
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	07db      	lsls	r3, r3, #31
 800825e:	d410      	bmi.n	8008282 <_dtoa_r+0x756>
 8008260:	0038      	movs	r0, r7
 8008262:	9904      	ldr	r1, [sp, #16]
 8008264:	f000 fd24 	bl	8008cb0 <_Bfree>
 8008268:	2300      	movs	r3, #0
 800826a:	9a07      	ldr	r2, [sp, #28]
 800826c:	9802      	ldr	r0, [sp, #8]
 800826e:	7013      	strb	r3, [r2, #0]
 8008270:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008272:	3001      	adds	r0, #1
 8008274:	6018      	str	r0, [r3, #0]
 8008276:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008278:	2b00      	cmp	r3, #0
 800827a:	d100      	bne.n	800827e <_dtoa_r+0x752>
 800827c:	e4a3      	b.n	8007bc6 <_dtoa_r+0x9a>
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	e4a1      	b.n	8007bc6 <_dtoa_r+0x9a>
 8008282:	9e02      	ldr	r6, [sp, #8]
 8008284:	9b07      	ldr	r3, [sp, #28]
 8008286:	9307      	str	r3, [sp, #28]
 8008288:	3b01      	subs	r3, #1
 800828a:	781a      	ldrb	r2, [r3, #0]
 800828c:	2a39      	cmp	r2, #57	; 0x39
 800828e:	d106      	bne.n	800829e <_dtoa_r+0x772>
 8008290:	9a05      	ldr	r2, [sp, #20]
 8008292:	429a      	cmp	r2, r3
 8008294:	d1f7      	bne.n	8008286 <_dtoa_r+0x75a>
 8008296:	2230      	movs	r2, #48	; 0x30
 8008298:	9905      	ldr	r1, [sp, #20]
 800829a:	3601      	adds	r6, #1
 800829c:	700a      	strb	r2, [r1, #0]
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	3201      	adds	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e785      	b.n	80081b2 <_dtoa_r+0x686>
 80082a6:	2200      	movs	r2, #0
 80082a8:	4bad      	ldr	r3, [pc, #692]	; (8008560 <_dtoa_r+0xa34>)
 80082aa:	f7f9 fdf1 	bl	8001e90 <__aeabi_dmul>
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	0004      	movs	r4, r0
 80082b4:	000d      	movs	r5, r1
 80082b6:	f7f8 f8c9 	bl	800044c <__aeabi_dcmpeq>
 80082ba:	2800      	cmp	r0, #0
 80082bc:	d09b      	beq.n	80081f6 <_dtoa_r+0x6ca>
 80082be:	e7cf      	b.n	8008260 <_dtoa_r+0x734>
 80082c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	d100      	bne.n	80082c8 <_dtoa_r+0x79c>
 80082c6:	e082      	b.n	80083ce <_dtoa_r+0x8a2>
 80082c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80082ca:	2a01      	cmp	r2, #1
 80082cc:	dc66      	bgt.n	800839c <_dtoa_r+0x870>
 80082ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082d0:	2a00      	cmp	r2, #0
 80082d2:	d05f      	beq.n	8008394 <_dtoa_r+0x868>
 80082d4:	4aa3      	ldr	r2, [pc, #652]	; (8008564 <_dtoa_r+0xa38>)
 80082d6:	189b      	adds	r3, r3, r2
 80082d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80082da:	9c08      	ldr	r4, [sp, #32]
 80082dc:	9a08      	ldr	r2, [sp, #32]
 80082de:	2101      	movs	r1, #1
 80082e0:	18d2      	adds	r2, r2, r3
 80082e2:	9208      	str	r2, [sp, #32]
 80082e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082e6:	0038      	movs	r0, r7
 80082e8:	18d3      	adds	r3, r2, r3
 80082ea:	930d      	str	r3, [sp, #52]	; 0x34
 80082ec:	f000 fd90 	bl	8008e10 <__i2b>
 80082f0:	0005      	movs	r5, r0
 80082f2:	2c00      	cmp	r4, #0
 80082f4:	dd0e      	ble.n	8008314 <_dtoa_r+0x7e8>
 80082f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	dd0b      	ble.n	8008314 <_dtoa_r+0x7e8>
 80082fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082fe:	0023      	movs	r3, r4
 8008300:	4294      	cmp	r4, r2
 8008302:	dd00      	ble.n	8008306 <_dtoa_r+0x7da>
 8008304:	0013      	movs	r3, r2
 8008306:	9a08      	ldr	r2, [sp, #32]
 8008308:	1ae4      	subs	r4, r4, r3
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	9208      	str	r2, [sp, #32]
 800830e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	930d      	str	r3, [sp, #52]	; 0x34
 8008314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01f      	beq.n	800835a <_dtoa_r+0x82e>
 800831a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05a      	beq.n	80083d6 <_dtoa_r+0x8aa>
 8008320:	2e00      	cmp	r6, #0
 8008322:	dd11      	ble.n	8008348 <_dtoa_r+0x81c>
 8008324:	0029      	movs	r1, r5
 8008326:	0032      	movs	r2, r6
 8008328:	0038      	movs	r0, r7
 800832a:	f000 fe37 	bl	8008f9c <__pow5mult>
 800832e:	9a04      	ldr	r2, [sp, #16]
 8008330:	0001      	movs	r1, r0
 8008332:	0005      	movs	r5, r0
 8008334:	0038      	movs	r0, r7
 8008336:	f000 fd81 	bl	8008e3c <__multiply>
 800833a:	9904      	ldr	r1, [sp, #16]
 800833c:	9007      	str	r0, [sp, #28]
 800833e:	0038      	movs	r0, r7
 8008340:	f000 fcb6 	bl	8008cb0 <_Bfree>
 8008344:	9b07      	ldr	r3, [sp, #28]
 8008346:	9304      	str	r3, [sp, #16]
 8008348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800834a:	1b9a      	subs	r2, r3, r6
 800834c:	42b3      	cmp	r3, r6
 800834e:	d004      	beq.n	800835a <_dtoa_r+0x82e>
 8008350:	0038      	movs	r0, r7
 8008352:	9904      	ldr	r1, [sp, #16]
 8008354:	f000 fe22 	bl	8008f9c <__pow5mult>
 8008358:	9004      	str	r0, [sp, #16]
 800835a:	2101      	movs	r1, #1
 800835c:	0038      	movs	r0, r7
 800835e:	f000 fd57 	bl	8008e10 <__i2b>
 8008362:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008364:	0006      	movs	r6, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	dd37      	ble.n	80083da <_dtoa_r+0x8ae>
 800836a:	001a      	movs	r2, r3
 800836c:	0001      	movs	r1, r0
 800836e:	0038      	movs	r0, r7
 8008370:	f000 fe14 	bl	8008f9c <__pow5mult>
 8008374:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008376:	0006      	movs	r6, r0
 8008378:	2b01      	cmp	r3, #1
 800837a:	dd33      	ble.n	80083e4 <_dtoa_r+0x8b8>
 800837c:	2300      	movs	r3, #0
 800837e:	9307      	str	r3, [sp, #28]
 8008380:	6933      	ldr	r3, [r6, #16]
 8008382:	3303      	adds	r3, #3
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	18f3      	adds	r3, r6, r3
 8008388:	6858      	ldr	r0, [r3, #4]
 800838a:	f000 fcf9 	bl	8008d80 <__hi0bits>
 800838e:	2320      	movs	r3, #32
 8008390:	1a18      	subs	r0, r3, r0
 8008392:	e03f      	b.n	8008414 <_dtoa_r+0x8e8>
 8008394:	2336      	movs	r3, #54	; 0x36
 8008396:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008398:	1a9b      	subs	r3, r3, r2
 800839a:	e79d      	b.n	80082d8 <_dtoa_r+0x7ac>
 800839c:	9b06      	ldr	r3, [sp, #24]
 800839e:	1e5e      	subs	r6, r3, #1
 80083a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a2:	42b3      	cmp	r3, r6
 80083a4:	db08      	blt.n	80083b8 <_dtoa_r+0x88c>
 80083a6:	1b9e      	subs	r6, r3, r6
 80083a8:	9b06      	ldr	r3, [sp, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da0c      	bge.n	80083c8 <_dtoa_r+0x89c>
 80083ae:	9b08      	ldr	r3, [sp, #32]
 80083b0:	9a06      	ldr	r2, [sp, #24]
 80083b2:	1a9c      	subs	r4, r3, r2
 80083b4:	2300      	movs	r3, #0
 80083b6:	e791      	b.n	80082dc <_dtoa_r+0x7b0>
 80083b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083bc:	1af3      	subs	r3, r6, r3
 80083be:	18d3      	adds	r3, r2, r3
 80083c0:	960e      	str	r6, [sp, #56]	; 0x38
 80083c2:	9314      	str	r3, [sp, #80]	; 0x50
 80083c4:	2600      	movs	r6, #0
 80083c6:	e7ef      	b.n	80083a8 <_dtoa_r+0x87c>
 80083c8:	9c08      	ldr	r4, [sp, #32]
 80083ca:	9b06      	ldr	r3, [sp, #24]
 80083cc:	e786      	b.n	80082dc <_dtoa_r+0x7b0>
 80083ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80083d0:	9c08      	ldr	r4, [sp, #32]
 80083d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80083d4:	e78d      	b.n	80082f2 <_dtoa_r+0x7c6>
 80083d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d8:	e7ba      	b.n	8008350 <_dtoa_r+0x824>
 80083da:	2300      	movs	r3, #0
 80083dc:	9307      	str	r3, [sp, #28]
 80083de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	dc13      	bgt.n	800840c <_dtoa_r+0x8e0>
 80083e4:	2300      	movs	r3, #0
 80083e6:	9307      	str	r3, [sp, #28]
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10e      	bne.n	800840c <_dtoa_r+0x8e0>
 80083ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083f0:	031b      	lsls	r3, r3, #12
 80083f2:	d10b      	bne.n	800840c <_dtoa_r+0x8e0>
 80083f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80083f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083f8:	4213      	tst	r3, r2
 80083fa:	d007      	beq.n	800840c <_dtoa_r+0x8e0>
 80083fc:	9b08      	ldr	r3, [sp, #32]
 80083fe:	3301      	adds	r3, #1
 8008400:	9308      	str	r3, [sp, #32]
 8008402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008404:	3301      	adds	r3, #1
 8008406:	930d      	str	r3, [sp, #52]	; 0x34
 8008408:	2301      	movs	r3, #1
 800840a:	9307      	str	r3, [sp, #28]
 800840c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800840e:	2001      	movs	r0, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1b5      	bne.n	8008380 <_dtoa_r+0x854>
 8008414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008416:	221f      	movs	r2, #31
 8008418:	1818      	adds	r0, r3, r0
 800841a:	0003      	movs	r3, r0
 800841c:	4013      	ands	r3, r2
 800841e:	4210      	tst	r0, r2
 8008420:	d046      	beq.n	80084b0 <_dtoa_r+0x984>
 8008422:	3201      	adds	r2, #1
 8008424:	1ad2      	subs	r2, r2, r3
 8008426:	2a04      	cmp	r2, #4
 8008428:	dd3f      	ble.n	80084aa <_dtoa_r+0x97e>
 800842a:	221c      	movs	r2, #28
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	9a08      	ldr	r2, [sp, #32]
 8008430:	18e4      	adds	r4, r4, r3
 8008432:	18d2      	adds	r2, r2, r3
 8008434:	9208      	str	r2, [sp, #32]
 8008436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008438:	18d3      	adds	r3, r2, r3
 800843a:	930d      	str	r3, [sp, #52]	; 0x34
 800843c:	9b08      	ldr	r3, [sp, #32]
 800843e:	2b00      	cmp	r3, #0
 8008440:	dd05      	ble.n	800844e <_dtoa_r+0x922>
 8008442:	001a      	movs	r2, r3
 8008444:	0038      	movs	r0, r7
 8008446:	9904      	ldr	r1, [sp, #16]
 8008448:	f000 fe04 	bl	8009054 <__lshift>
 800844c:	9004      	str	r0, [sp, #16]
 800844e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008450:	2b00      	cmp	r3, #0
 8008452:	dd05      	ble.n	8008460 <_dtoa_r+0x934>
 8008454:	0031      	movs	r1, r6
 8008456:	001a      	movs	r2, r3
 8008458:	0038      	movs	r0, r7
 800845a:	f000 fdfb 	bl	8009054 <__lshift>
 800845e:	0006      	movs	r6, r0
 8008460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008462:	2b00      	cmp	r3, #0
 8008464:	d026      	beq.n	80084b4 <_dtoa_r+0x988>
 8008466:	0031      	movs	r1, r6
 8008468:	9804      	ldr	r0, [sp, #16]
 800846a:	f000 fe63 	bl	8009134 <__mcmp>
 800846e:	2800      	cmp	r0, #0
 8008470:	da20      	bge.n	80084b4 <_dtoa_r+0x988>
 8008472:	9b02      	ldr	r3, [sp, #8]
 8008474:	220a      	movs	r2, #10
 8008476:	3b01      	subs	r3, #1
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	0038      	movs	r0, r7
 800847c:	2300      	movs	r3, #0
 800847e:	9904      	ldr	r1, [sp, #16]
 8008480:	f000 fc3a 	bl	8008cf8 <__multadd>
 8008484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008486:	9004      	str	r0, [sp, #16]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d100      	bne.n	800848e <_dtoa_r+0x962>
 800848c:	e160      	b.n	8008750 <_dtoa_r+0xc24>
 800848e:	2300      	movs	r3, #0
 8008490:	0029      	movs	r1, r5
 8008492:	220a      	movs	r2, #10
 8008494:	0038      	movs	r0, r7
 8008496:	f000 fc2f 	bl	8008cf8 <__multadd>
 800849a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800849c:	0005      	movs	r5, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dc47      	bgt.n	8008532 <_dtoa_r+0xa06>
 80084a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	dc0d      	bgt.n	80084c4 <_dtoa_r+0x998>
 80084a8:	e043      	b.n	8008532 <_dtoa_r+0xa06>
 80084aa:	2a04      	cmp	r2, #4
 80084ac:	d0c6      	beq.n	800843c <_dtoa_r+0x910>
 80084ae:	0013      	movs	r3, r2
 80084b0:	331c      	adds	r3, #28
 80084b2:	e7bc      	b.n	800842e <_dtoa_r+0x902>
 80084b4:	9b06      	ldr	r3, [sp, #24]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	dc35      	bgt.n	8008526 <_dtoa_r+0x9fa>
 80084ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084bc:	2b02      	cmp	r3, #2
 80084be:	dd32      	ble.n	8008526 <_dtoa_r+0x9fa>
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	930c      	str	r3, [sp, #48]	; 0x30
 80084c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10c      	bne.n	80084e4 <_dtoa_r+0x9b8>
 80084ca:	0031      	movs	r1, r6
 80084cc:	2205      	movs	r2, #5
 80084ce:	0038      	movs	r0, r7
 80084d0:	f000 fc12 	bl	8008cf8 <__multadd>
 80084d4:	0006      	movs	r6, r0
 80084d6:	0001      	movs	r1, r0
 80084d8:	9804      	ldr	r0, [sp, #16]
 80084da:	f000 fe2b 	bl	8009134 <__mcmp>
 80084de:	2800      	cmp	r0, #0
 80084e0:	dd00      	ble.n	80084e4 <_dtoa_r+0x9b8>
 80084e2:	e59f      	b.n	8008024 <_dtoa_r+0x4f8>
 80084e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084e6:	43db      	mvns	r3, r3
 80084e8:	9302      	str	r3, [sp, #8]
 80084ea:	9b05      	ldr	r3, [sp, #20]
 80084ec:	9307      	str	r3, [sp, #28]
 80084ee:	2400      	movs	r4, #0
 80084f0:	0031      	movs	r1, r6
 80084f2:	0038      	movs	r0, r7
 80084f4:	f000 fbdc 	bl	8008cb0 <_Bfree>
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	d100      	bne.n	80084fe <_dtoa_r+0x9d2>
 80084fc:	e6b0      	b.n	8008260 <_dtoa_r+0x734>
 80084fe:	2c00      	cmp	r4, #0
 8008500:	d005      	beq.n	800850e <_dtoa_r+0x9e2>
 8008502:	42ac      	cmp	r4, r5
 8008504:	d003      	beq.n	800850e <_dtoa_r+0x9e2>
 8008506:	0021      	movs	r1, r4
 8008508:	0038      	movs	r0, r7
 800850a:	f000 fbd1 	bl	8008cb0 <_Bfree>
 800850e:	0029      	movs	r1, r5
 8008510:	0038      	movs	r0, r7
 8008512:	f000 fbcd 	bl	8008cb0 <_Bfree>
 8008516:	e6a3      	b.n	8008260 <_dtoa_r+0x734>
 8008518:	2600      	movs	r6, #0
 800851a:	0035      	movs	r5, r6
 800851c:	e7e2      	b.n	80084e4 <_dtoa_r+0x9b8>
 800851e:	9602      	str	r6, [sp, #8]
 8008520:	9e07      	ldr	r6, [sp, #28]
 8008522:	0035      	movs	r5, r6
 8008524:	e57e      	b.n	8008024 <_dtoa_r+0x4f8>
 8008526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d100      	bne.n	800852e <_dtoa_r+0xa02>
 800852c:	e0c8      	b.n	80086c0 <_dtoa_r+0xb94>
 800852e:	9b06      	ldr	r3, [sp, #24]
 8008530:	930c      	str	r3, [sp, #48]	; 0x30
 8008532:	2c00      	cmp	r4, #0
 8008534:	dd05      	ble.n	8008542 <_dtoa_r+0xa16>
 8008536:	0029      	movs	r1, r5
 8008538:	0022      	movs	r2, r4
 800853a:	0038      	movs	r0, r7
 800853c:	f000 fd8a 	bl	8009054 <__lshift>
 8008540:	0005      	movs	r5, r0
 8008542:	9b07      	ldr	r3, [sp, #28]
 8008544:	0028      	movs	r0, r5
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01f      	beq.n	800858a <_dtoa_r+0xa5e>
 800854a:	0038      	movs	r0, r7
 800854c:	6869      	ldr	r1, [r5, #4]
 800854e:	f000 fb6b 	bl	8008c28 <_Balloc>
 8008552:	1e04      	subs	r4, r0, #0
 8008554:	d10c      	bne.n	8008570 <_dtoa_r+0xa44>
 8008556:	0002      	movs	r2, r0
 8008558:	4b03      	ldr	r3, [pc, #12]	; (8008568 <_dtoa_r+0xa3c>)
 800855a:	4904      	ldr	r1, [pc, #16]	; (800856c <_dtoa_r+0xa40>)
 800855c:	f7ff fafb 	bl	8007b56 <_dtoa_r+0x2a>
 8008560:	40240000 	.word	0x40240000
 8008564:	00000433 	.word	0x00000433
 8008568:	08009ae8 	.word	0x08009ae8
 800856c:	000002ea 	.word	0x000002ea
 8008570:	0029      	movs	r1, r5
 8008572:	692b      	ldr	r3, [r5, #16]
 8008574:	310c      	adds	r1, #12
 8008576:	1c9a      	adds	r2, r3, #2
 8008578:	0092      	lsls	r2, r2, #2
 800857a:	300c      	adds	r0, #12
 800857c:	f000 fb4b 	bl	8008c16 <memcpy>
 8008580:	2201      	movs	r2, #1
 8008582:	0021      	movs	r1, r4
 8008584:	0038      	movs	r0, r7
 8008586:	f000 fd65 	bl	8009054 <__lshift>
 800858a:	002c      	movs	r4, r5
 800858c:	0005      	movs	r5, r0
 800858e:	9b05      	ldr	r3, [sp, #20]
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	0031      	movs	r1, r6
 8008594:	9804      	ldr	r0, [sp, #16]
 8008596:	f7ff fa3e 	bl	8007a16 <quorem>
 800859a:	0003      	movs	r3, r0
 800859c:	0021      	movs	r1, r4
 800859e:	3330      	adds	r3, #48	; 0x30
 80085a0:	900e      	str	r0, [sp, #56]	; 0x38
 80085a2:	9804      	ldr	r0, [sp, #16]
 80085a4:	9306      	str	r3, [sp, #24]
 80085a6:	f000 fdc5 	bl	8009134 <__mcmp>
 80085aa:	002a      	movs	r2, r5
 80085ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80085ae:	0031      	movs	r1, r6
 80085b0:	0038      	movs	r0, r7
 80085b2:	f000 fddb 	bl	800916c <__mdiff>
 80085b6:	68c3      	ldr	r3, [r0, #12]
 80085b8:	9007      	str	r0, [sp, #28]
 80085ba:	9310      	str	r3, [sp, #64]	; 0x40
 80085bc:	2301      	movs	r3, #1
 80085be:	930d      	str	r3, [sp, #52]	; 0x34
 80085c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d104      	bne.n	80085d0 <_dtoa_r+0xaa4>
 80085c6:	0001      	movs	r1, r0
 80085c8:	9804      	ldr	r0, [sp, #16]
 80085ca:	f000 fdb3 	bl	8009134 <__mcmp>
 80085ce:	900d      	str	r0, [sp, #52]	; 0x34
 80085d0:	0038      	movs	r0, r7
 80085d2:	9907      	ldr	r1, [sp, #28]
 80085d4:	f000 fb6c 	bl	8008cb0 <_Bfree>
 80085d8:	2301      	movs	r3, #1
 80085da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80085dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085de:	4018      	ands	r0, r3
 80085e0:	9b08      	ldr	r3, [sp, #32]
 80085e2:	3301      	adds	r3, #1
 80085e4:	9307      	str	r3, [sp, #28]
 80085e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085e8:	4313      	orrs	r3, r2
 80085ea:	4303      	orrs	r3, r0
 80085ec:	d10c      	bne.n	8008608 <_dtoa_r+0xadc>
 80085ee:	9b06      	ldr	r3, [sp, #24]
 80085f0:	2b39      	cmp	r3, #57	; 0x39
 80085f2:	d025      	beq.n	8008640 <_dtoa_r+0xb14>
 80085f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd02      	ble.n	8008600 <_dtoa_r+0xad4>
 80085fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085fc:	3331      	adds	r3, #49	; 0x31
 80085fe:	9306      	str	r3, [sp, #24]
 8008600:	9b08      	ldr	r3, [sp, #32]
 8008602:	9a06      	ldr	r2, [sp, #24]
 8008604:	701a      	strb	r2, [r3, #0]
 8008606:	e773      	b.n	80084f0 <_dtoa_r+0x9c4>
 8008608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800860a:	2b00      	cmp	r3, #0
 800860c:	db03      	blt.n	8008616 <_dtoa_r+0xaea>
 800860e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008610:	4313      	orrs	r3, r2
 8008612:	4303      	orrs	r3, r0
 8008614:	d11f      	bne.n	8008656 <_dtoa_r+0xb2a>
 8008616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	ddf1      	ble.n	8008600 <_dtoa_r+0xad4>
 800861c:	9904      	ldr	r1, [sp, #16]
 800861e:	2201      	movs	r2, #1
 8008620:	0038      	movs	r0, r7
 8008622:	f000 fd17 	bl	8009054 <__lshift>
 8008626:	0031      	movs	r1, r6
 8008628:	9004      	str	r0, [sp, #16]
 800862a:	f000 fd83 	bl	8009134 <__mcmp>
 800862e:	2800      	cmp	r0, #0
 8008630:	dc03      	bgt.n	800863a <_dtoa_r+0xb0e>
 8008632:	d1e5      	bne.n	8008600 <_dtoa_r+0xad4>
 8008634:	9b06      	ldr	r3, [sp, #24]
 8008636:	07db      	lsls	r3, r3, #31
 8008638:	d5e2      	bpl.n	8008600 <_dtoa_r+0xad4>
 800863a:	9b06      	ldr	r3, [sp, #24]
 800863c:	2b39      	cmp	r3, #57	; 0x39
 800863e:	d1dc      	bne.n	80085fa <_dtoa_r+0xace>
 8008640:	2339      	movs	r3, #57	; 0x39
 8008642:	9a08      	ldr	r2, [sp, #32]
 8008644:	7013      	strb	r3, [r2, #0]
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	9307      	str	r3, [sp, #28]
 800864a:	3b01      	subs	r3, #1
 800864c:	781a      	ldrb	r2, [r3, #0]
 800864e:	2a39      	cmp	r2, #57	; 0x39
 8008650:	d06c      	beq.n	800872c <_dtoa_r+0xc00>
 8008652:	3201      	adds	r2, #1
 8008654:	e7d6      	b.n	8008604 <_dtoa_r+0xad8>
 8008656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008658:	2b00      	cmp	r3, #0
 800865a:	dd07      	ble.n	800866c <_dtoa_r+0xb40>
 800865c:	9b06      	ldr	r3, [sp, #24]
 800865e:	2b39      	cmp	r3, #57	; 0x39
 8008660:	d0ee      	beq.n	8008640 <_dtoa_r+0xb14>
 8008662:	9b06      	ldr	r3, [sp, #24]
 8008664:	9a08      	ldr	r2, [sp, #32]
 8008666:	3301      	adds	r3, #1
 8008668:	7013      	strb	r3, [r2, #0]
 800866a:	e741      	b.n	80084f0 <_dtoa_r+0x9c4>
 800866c:	9b08      	ldr	r3, [sp, #32]
 800866e:	9a06      	ldr	r2, [sp, #24]
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	2301      	movs	r3, #1
 8008674:	9a05      	ldr	r2, [sp, #20]
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	9a08      	ldr	r2, [sp, #32]
 800867a:	189b      	adds	r3, r3, r2
 800867c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800867e:	429a      	cmp	r2, r3
 8008680:	d03e      	beq.n	8008700 <_dtoa_r+0xbd4>
 8008682:	2300      	movs	r3, #0
 8008684:	220a      	movs	r2, #10
 8008686:	9904      	ldr	r1, [sp, #16]
 8008688:	0038      	movs	r0, r7
 800868a:	f000 fb35 	bl	8008cf8 <__multadd>
 800868e:	2300      	movs	r3, #0
 8008690:	9004      	str	r0, [sp, #16]
 8008692:	220a      	movs	r2, #10
 8008694:	0021      	movs	r1, r4
 8008696:	0038      	movs	r0, r7
 8008698:	42ac      	cmp	r4, r5
 800869a:	d106      	bne.n	80086aa <_dtoa_r+0xb7e>
 800869c:	f000 fb2c 	bl	8008cf8 <__multadd>
 80086a0:	0004      	movs	r4, r0
 80086a2:	0005      	movs	r5, r0
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	9308      	str	r3, [sp, #32]
 80086a8:	e773      	b.n	8008592 <_dtoa_r+0xa66>
 80086aa:	f000 fb25 	bl	8008cf8 <__multadd>
 80086ae:	0029      	movs	r1, r5
 80086b0:	0004      	movs	r4, r0
 80086b2:	2300      	movs	r3, #0
 80086b4:	220a      	movs	r2, #10
 80086b6:	0038      	movs	r0, r7
 80086b8:	f000 fb1e 	bl	8008cf8 <__multadd>
 80086bc:	0005      	movs	r5, r0
 80086be:	e7f1      	b.n	80086a4 <_dtoa_r+0xb78>
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	930c      	str	r3, [sp, #48]	; 0x30
 80086c4:	2400      	movs	r4, #0
 80086c6:	0031      	movs	r1, r6
 80086c8:	9804      	ldr	r0, [sp, #16]
 80086ca:	f7ff f9a4 	bl	8007a16 <quorem>
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	3030      	adds	r0, #48	; 0x30
 80086d2:	5518      	strb	r0, [r3, r4]
 80086d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086d6:	3401      	adds	r4, #1
 80086d8:	9006      	str	r0, [sp, #24]
 80086da:	42a3      	cmp	r3, r4
 80086dc:	dd07      	ble.n	80086ee <_dtoa_r+0xbc2>
 80086de:	2300      	movs	r3, #0
 80086e0:	220a      	movs	r2, #10
 80086e2:	0038      	movs	r0, r7
 80086e4:	9904      	ldr	r1, [sp, #16]
 80086e6:	f000 fb07 	bl	8008cf8 <__multadd>
 80086ea:	9004      	str	r0, [sp, #16]
 80086ec:	e7eb      	b.n	80086c6 <_dtoa_r+0xb9a>
 80086ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f0:	2001      	movs	r0, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd00      	ble.n	80086f8 <_dtoa_r+0xbcc>
 80086f6:	0018      	movs	r0, r3
 80086f8:	2400      	movs	r4, #0
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	181b      	adds	r3, r3, r0
 80086fe:	9307      	str	r3, [sp, #28]
 8008700:	9904      	ldr	r1, [sp, #16]
 8008702:	2201      	movs	r2, #1
 8008704:	0038      	movs	r0, r7
 8008706:	f000 fca5 	bl	8009054 <__lshift>
 800870a:	0031      	movs	r1, r6
 800870c:	9004      	str	r0, [sp, #16]
 800870e:	f000 fd11 	bl	8009134 <__mcmp>
 8008712:	2800      	cmp	r0, #0
 8008714:	dc97      	bgt.n	8008646 <_dtoa_r+0xb1a>
 8008716:	d102      	bne.n	800871e <_dtoa_r+0xbf2>
 8008718:	9b06      	ldr	r3, [sp, #24]
 800871a:	07db      	lsls	r3, r3, #31
 800871c:	d493      	bmi.n	8008646 <_dtoa_r+0xb1a>
 800871e:	9b07      	ldr	r3, [sp, #28]
 8008720:	9307      	str	r3, [sp, #28]
 8008722:	3b01      	subs	r3, #1
 8008724:	781a      	ldrb	r2, [r3, #0]
 8008726:	2a30      	cmp	r2, #48	; 0x30
 8008728:	d0fa      	beq.n	8008720 <_dtoa_r+0xbf4>
 800872a:	e6e1      	b.n	80084f0 <_dtoa_r+0x9c4>
 800872c:	9a05      	ldr	r2, [sp, #20]
 800872e:	429a      	cmp	r2, r3
 8008730:	d18a      	bne.n	8008648 <_dtoa_r+0xb1c>
 8008732:	9b02      	ldr	r3, [sp, #8]
 8008734:	3301      	adds	r3, #1
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	2331      	movs	r3, #49	; 0x31
 800873a:	e795      	b.n	8008668 <_dtoa_r+0xb3c>
 800873c:	4b08      	ldr	r3, [pc, #32]	; (8008760 <_dtoa_r+0xc34>)
 800873e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	4b08      	ldr	r3, [pc, #32]	; (8008764 <_dtoa_r+0xc38>)
 8008744:	2a00      	cmp	r2, #0
 8008746:	d001      	beq.n	800874c <_dtoa_r+0xc20>
 8008748:	f7ff fa3b 	bl	8007bc2 <_dtoa_r+0x96>
 800874c:	f7ff fa3b 	bl	8007bc6 <_dtoa_r+0x9a>
 8008750:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008752:	2b00      	cmp	r3, #0
 8008754:	dcb6      	bgt.n	80086c4 <_dtoa_r+0xb98>
 8008756:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008758:	2b02      	cmp	r3, #2
 800875a:	dd00      	ble.n	800875e <_dtoa_r+0xc32>
 800875c:	e6b2      	b.n	80084c4 <_dtoa_r+0x998>
 800875e:	e7b1      	b.n	80086c4 <_dtoa_r+0xb98>
 8008760:	08009a65 	.word	0x08009a65
 8008764:	08009a6d 	.word	0x08009a6d

08008768 <__sflush_r>:
 8008768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800876a:	898b      	ldrh	r3, [r1, #12]
 800876c:	0005      	movs	r5, r0
 800876e:	000c      	movs	r4, r1
 8008770:	071a      	lsls	r2, r3, #28
 8008772:	d45f      	bmi.n	8008834 <__sflush_r+0xcc>
 8008774:	684a      	ldr	r2, [r1, #4]
 8008776:	2a00      	cmp	r2, #0
 8008778:	dc04      	bgt.n	8008784 <__sflush_r+0x1c>
 800877a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800877c:	2a00      	cmp	r2, #0
 800877e:	dc01      	bgt.n	8008784 <__sflush_r+0x1c>
 8008780:	2000      	movs	r0, #0
 8008782:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008784:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008786:	2f00      	cmp	r7, #0
 8008788:	d0fa      	beq.n	8008780 <__sflush_r+0x18>
 800878a:	2200      	movs	r2, #0
 800878c:	2180      	movs	r1, #128	; 0x80
 800878e:	682e      	ldr	r6, [r5, #0]
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	001a      	movs	r2, r3
 8008794:	0149      	lsls	r1, r1, #5
 8008796:	400a      	ands	r2, r1
 8008798:	420b      	tst	r3, r1
 800879a:	d034      	beq.n	8008806 <__sflush_r+0x9e>
 800879c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	075b      	lsls	r3, r3, #29
 80087a2:	d506      	bpl.n	80087b2 <__sflush_r+0x4a>
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	1ac0      	subs	r0, r0, r3
 80087a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <__sflush_r+0x4a>
 80087ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087b0:	1ac0      	subs	r0, r0, r3
 80087b2:	0002      	movs	r2, r0
 80087b4:	6a21      	ldr	r1, [r4, #32]
 80087b6:	2300      	movs	r3, #0
 80087b8:	0028      	movs	r0, r5
 80087ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80087bc:	47b8      	blx	r7
 80087be:	89a1      	ldrh	r1, [r4, #12]
 80087c0:	1c43      	adds	r3, r0, #1
 80087c2:	d106      	bne.n	80087d2 <__sflush_r+0x6a>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	2b1d      	cmp	r3, #29
 80087c8:	d831      	bhi.n	800882e <__sflush_r+0xc6>
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <__sflush_r+0x114>)
 80087cc:	40da      	lsrs	r2, r3
 80087ce:	07d3      	lsls	r3, r2, #31
 80087d0:	d52d      	bpl.n	800882e <__sflush_r+0xc6>
 80087d2:	2300      	movs	r3, #0
 80087d4:	6063      	str	r3, [r4, #4]
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	04cb      	lsls	r3, r1, #19
 80087dc:	d505      	bpl.n	80087ea <__sflush_r+0x82>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	d102      	bne.n	80087e8 <__sflush_r+0x80>
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d100      	bne.n	80087ea <__sflush_r+0x82>
 80087e8:	6560      	str	r0, [r4, #84]	; 0x54
 80087ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ec:	602e      	str	r6, [r5, #0]
 80087ee:	2900      	cmp	r1, #0
 80087f0:	d0c6      	beq.n	8008780 <__sflush_r+0x18>
 80087f2:	0023      	movs	r3, r4
 80087f4:	3344      	adds	r3, #68	; 0x44
 80087f6:	4299      	cmp	r1, r3
 80087f8:	d002      	beq.n	8008800 <__sflush_r+0x98>
 80087fa:	0028      	movs	r0, r5
 80087fc:	f000 fdc0 	bl	8009380 <_free_r>
 8008800:	2000      	movs	r0, #0
 8008802:	6360      	str	r0, [r4, #52]	; 0x34
 8008804:	e7bd      	b.n	8008782 <__sflush_r+0x1a>
 8008806:	2301      	movs	r3, #1
 8008808:	0028      	movs	r0, r5
 800880a:	6a21      	ldr	r1, [r4, #32]
 800880c:	47b8      	blx	r7
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	d1c5      	bne.n	800879e <__sflush_r+0x36>
 8008812:	682b      	ldr	r3, [r5, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0c2      	beq.n	800879e <__sflush_r+0x36>
 8008818:	2b1d      	cmp	r3, #29
 800881a:	d001      	beq.n	8008820 <__sflush_r+0xb8>
 800881c:	2b16      	cmp	r3, #22
 800881e:	d101      	bne.n	8008824 <__sflush_r+0xbc>
 8008820:	602e      	str	r6, [r5, #0]
 8008822:	e7ad      	b.n	8008780 <__sflush_r+0x18>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	89a2      	ldrh	r2, [r4, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	e7a9      	b.n	8008782 <__sflush_r+0x1a>
 800882e:	2340      	movs	r3, #64	; 0x40
 8008830:	430b      	orrs	r3, r1
 8008832:	e7fa      	b.n	800882a <__sflush_r+0xc2>
 8008834:	690f      	ldr	r7, [r1, #16]
 8008836:	2f00      	cmp	r7, #0
 8008838:	d0a2      	beq.n	8008780 <__sflush_r+0x18>
 800883a:	680a      	ldr	r2, [r1, #0]
 800883c:	600f      	str	r7, [r1, #0]
 800883e:	1bd2      	subs	r2, r2, r7
 8008840:	9201      	str	r2, [sp, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	079b      	lsls	r3, r3, #30
 8008846:	d100      	bne.n	800884a <__sflush_r+0xe2>
 8008848:	694a      	ldr	r2, [r1, #20]
 800884a:	60a2      	str	r2, [r4, #8]
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dc00      	bgt.n	8008854 <__sflush_r+0xec>
 8008852:	e795      	b.n	8008780 <__sflush_r+0x18>
 8008854:	003a      	movs	r2, r7
 8008856:	0028      	movs	r0, r5
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	6a21      	ldr	r1, [r4, #32]
 800885c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800885e:	47b0      	blx	r6
 8008860:	2800      	cmp	r0, #0
 8008862:	dc06      	bgt.n	8008872 <__sflush_r+0x10a>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	2001      	movs	r0, #1
 8008868:	89a2      	ldrh	r2, [r4, #12]
 800886a:	4240      	negs	r0, r0
 800886c:	4313      	orrs	r3, r2
 800886e:	81a3      	strh	r3, [r4, #12]
 8008870:	e787      	b.n	8008782 <__sflush_r+0x1a>
 8008872:	9b01      	ldr	r3, [sp, #4]
 8008874:	183f      	adds	r7, r7, r0
 8008876:	1a1b      	subs	r3, r3, r0
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	e7e7      	b.n	800884c <__sflush_r+0xe4>
 800887c:	20400001 	.word	0x20400001

08008880 <_fflush_r>:
 8008880:	690b      	ldr	r3, [r1, #16]
 8008882:	b570      	push	{r4, r5, r6, lr}
 8008884:	0005      	movs	r5, r0
 8008886:	000c      	movs	r4, r1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d102      	bne.n	8008892 <_fflush_r+0x12>
 800888c:	2500      	movs	r5, #0
 800888e:	0028      	movs	r0, r5
 8008890:	bd70      	pop	{r4, r5, r6, pc}
 8008892:	2800      	cmp	r0, #0
 8008894:	d004      	beq.n	80088a0 <_fflush_r+0x20>
 8008896:	6983      	ldr	r3, [r0, #24]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <_fflush_r+0x20>
 800889c:	f000 f892 	bl	80089c4 <__sinit>
 80088a0:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <_fflush_r+0x74>)
 80088a2:	429c      	cmp	r4, r3
 80088a4:	d11b      	bne.n	80088de <_fflush_r+0x5e>
 80088a6:	686c      	ldr	r4, [r5, #4]
 80088a8:	220c      	movs	r2, #12
 80088aa:	5ea3      	ldrsh	r3, [r4, r2]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0ed      	beq.n	800888c <_fflush_r+0xc>
 80088b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088b2:	07d2      	lsls	r2, r2, #31
 80088b4:	d404      	bmi.n	80088c0 <_fflush_r+0x40>
 80088b6:	059b      	lsls	r3, r3, #22
 80088b8:	d402      	bmi.n	80088c0 <_fflush_r+0x40>
 80088ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088bc:	f000 f927 	bl	8008b0e <__retarget_lock_acquire_recursive>
 80088c0:	0028      	movs	r0, r5
 80088c2:	0021      	movs	r1, r4
 80088c4:	f7ff ff50 	bl	8008768 <__sflush_r>
 80088c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088ca:	0005      	movs	r5, r0
 80088cc:	07db      	lsls	r3, r3, #31
 80088ce:	d4de      	bmi.n	800888e <_fflush_r+0xe>
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	059b      	lsls	r3, r3, #22
 80088d4:	d4db      	bmi.n	800888e <_fflush_r+0xe>
 80088d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088d8:	f000 f91a 	bl	8008b10 <__retarget_lock_release_recursive>
 80088dc:	e7d7      	b.n	800888e <_fflush_r+0xe>
 80088de:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <_fflush_r+0x78>)
 80088e0:	429c      	cmp	r4, r3
 80088e2:	d101      	bne.n	80088e8 <_fflush_r+0x68>
 80088e4:	68ac      	ldr	r4, [r5, #8]
 80088e6:	e7df      	b.n	80088a8 <_fflush_r+0x28>
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <_fflush_r+0x7c>)
 80088ea:	429c      	cmp	r4, r3
 80088ec:	d1dc      	bne.n	80088a8 <_fflush_r+0x28>
 80088ee:	68ec      	ldr	r4, [r5, #12]
 80088f0:	e7da      	b.n	80088a8 <_fflush_r+0x28>
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	08009b1c 	.word	0x08009b1c
 80088f8:	08009b3c 	.word	0x08009b3c
 80088fc:	08009afc 	.word	0x08009afc

08008900 <std>:
 8008900:	2300      	movs	r3, #0
 8008902:	b510      	push	{r4, lr}
 8008904:	0004      	movs	r4, r0
 8008906:	6003      	str	r3, [r0, #0]
 8008908:	6043      	str	r3, [r0, #4]
 800890a:	6083      	str	r3, [r0, #8]
 800890c:	8181      	strh	r1, [r0, #12]
 800890e:	6643      	str	r3, [r0, #100]	; 0x64
 8008910:	0019      	movs	r1, r3
 8008912:	81c2      	strh	r2, [r0, #14]
 8008914:	6103      	str	r3, [r0, #16]
 8008916:	6143      	str	r3, [r0, #20]
 8008918:	6183      	str	r3, [r0, #24]
 800891a:	2208      	movs	r2, #8
 800891c:	305c      	adds	r0, #92	; 0x5c
 800891e:	f7fe f9a7 	bl	8006c70 <memset>
 8008922:	4b05      	ldr	r3, [pc, #20]	; (8008938 <std+0x38>)
 8008924:	6263      	str	r3, [r4, #36]	; 0x24
 8008926:	4b05      	ldr	r3, [pc, #20]	; (800893c <std+0x3c>)
 8008928:	6224      	str	r4, [r4, #32]
 800892a:	62a3      	str	r3, [r4, #40]	; 0x28
 800892c:	4b04      	ldr	r3, [pc, #16]	; (8008940 <std+0x40>)
 800892e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008930:	4b04      	ldr	r3, [pc, #16]	; (8008944 <std+0x44>)
 8008932:	6323      	str	r3, [r4, #48]	; 0x30
 8008934:	bd10      	pop	{r4, pc}
 8008936:	46c0      	nop			; (mov r8, r8)
 8008938:	08009589 	.word	0x08009589
 800893c:	080095b1 	.word	0x080095b1
 8008940:	080095e9 	.word	0x080095e9
 8008944:	08009615 	.word	0x08009615

08008948 <_cleanup_r>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4902      	ldr	r1, [pc, #8]	; (8008954 <_cleanup_r+0xc>)
 800894c:	f000 f8ba 	bl	8008ac4 <_fwalk_reent>
 8008950:	bd10      	pop	{r4, pc}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	08008881 	.word	0x08008881

08008958 <__sfmoreglue>:
 8008958:	b570      	push	{r4, r5, r6, lr}
 800895a:	2568      	movs	r5, #104	; 0x68
 800895c:	1e4a      	subs	r2, r1, #1
 800895e:	4355      	muls	r5, r2
 8008960:	000e      	movs	r6, r1
 8008962:	0029      	movs	r1, r5
 8008964:	3174      	adds	r1, #116	; 0x74
 8008966:	f000 fd55 	bl	8009414 <_malloc_r>
 800896a:	1e04      	subs	r4, r0, #0
 800896c:	d008      	beq.n	8008980 <__sfmoreglue+0x28>
 800896e:	2100      	movs	r1, #0
 8008970:	002a      	movs	r2, r5
 8008972:	6001      	str	r1, [r0, #0]
 8008974:	6046      	str	r6, [r0, #4]
 8008976:	300c      	adds	r0, #12
 8008978:	60a0      	str	r0, [r4, #8]
 800897a:	3268      	adds	r2, #104	; 0x68
 800897c:	f7fe f978 	bl	8006c70 <memset>
 8008980:	0020      	movs	r0, r4
 8008982:	bd70      	pop	{r4, r5, r6, pc}

08008984 <__sfp_lock_acquire>:
 8008984:	b510      	push	{r4, lr}
 8008986:	4802      	ldr	r0, [pc, #8]	; (8008990 <__sfp_lock_acquire+0xc>)
 8008988:	f000 f8c1 	bl	8008b0e <__retarget_lock_acquire_recursive>
 800898c:	bd10      	pop	{r4, pc}
 800898e:	46c0      	nop			; (mov r8, r8)
 8008990:	2000033c 	.word	0x2000033c

08008994 <__sfp_lock_release>:
 8008994:	b510      	push	{r4, lr}
 8008996:	4802      	ldr	r0, [pc, #8]	; (80089a0 <__sfp_lock_release+0xc>)
 8008998:	f000 f8ba 	bl	8008b10 <__retarget_lock_release_recursive>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	2000033c 	.word	0x2000033c

080089a4 <__sinit_lock_acquire>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4802      	ldr	r0, [pc, #8]	; (80089b0 <__sinit_lock_acquire+0xc>)
 80089a8:	f000 f8b1 	bl	8008b0e <__retarget_lock_acquire_recursive>
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	20000337 	.word	0x20000337

080089b4 <__sinit_lock_release>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	4802      	ldr	r0, [pc, #8]	; (80089c0 <__sinit_lock_release+0xc>)
 80089b8:	f000 f8aa 	bl	8008b10 <__retarget_lock_release_recursive>
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	46c0      	nop			; (mov r8, r8)
 80089c0:	20000337 	.word	0x20000337

080089c4 <__sinit>:
 80089c4:	b513      	push	{r0, r1, r4, lr}
 80089c6:	0004      	movs	r4, r0
 80089c8:	f7ff ffec 	bl	80089a4 <__sinit_lock_acquire>
 80089cc:	69a3      	ldr	r3, [r4, #24]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d002      	beq.n	80089d8 <__sinit+0x14>
 80089d2:	f7ff ffef 	bl	80089b4 <__sinit_lock_release>
 80089d6:	bd13      	pop	{r0, r1, r4, pc}
 80089d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80089da:	64e3      	str	r3, [r4, #76]	; 0x4c
 80089dc:	6523      	str	r3, [r4, #80]	; 0x50
 80089de:	4b13      	ldr	r3, [pc, #76]	; (8008a2c <__sinit+0x68>)
 80089e0:	4a13      	ldr	r2, [pc, #76]	; (8008a30 <__sinit+0x6c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d101      	bne.n	80089f0 <__sinit+0x2c>
 80089ec:	2301      	movs	r3, #1
 80089ee:	61a3      	str	r3, [r4, #24]
 80089f0:	0020      	movs	r0, r4
 80089f2:	f000 f81f 	bl	8008a34 <__sfp>
 80089f6:	6060      	str	r0, [r4, #4]
 80089f8:	0020      	movs	r0, r4
 80089fa:	f000 f81b 	bl	8008a34 <__sfp>
 80089fe:	60a0      	str	r0, [r4, #8]
 8008a00:	0020      	movs	r0, r4
 8008a02:	f000 f817 	bl	8008a34 <__sfp>
 8008a06:	2200      	movs	r2, #0
 8008a08:	2104      	movs	r1, #4
 8008a0a:	60e0      	str	r0, [r4, #12]
 8008a0c:	6860      	ldr	r0, [r4, #4]
 8008a0e:	f7ff ff77 	bl	8008900 <std>
 8008a12:	2201      	movs	r2, #1
 8008a14:	2109      	movs	r1, #9
 8008a16:	68a0      	ldr	r0, [r4, #8]
 8008a18:	f7ff ff72 	bl	8008900 <std>
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	2112      	movs	r1, #18
 8008a20:	68e0      	ldr	r0, [r4, #12]
 8008a22:	f7ff ff6d 	bl	8008900 <std>
 8008a26:	2301      	movs	r3, #1
 8008a28:	61a3      	str	r3, [r4, #24]
 8008a2a:	e7d2      	b.n	80089d2 <__sinit+0xe>
 8008a2c:	08009a1c 	.word	0x08009a1c
 8008a30:	08008949 	.word	0x08008949

08008a34 <__sfp>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	0007      	movs	r7, r0
 8008a38:	f7ff ffa4 	bl	8008984 <__sfp_lock_acquire>
 8008a3c:	4b1f      	ldr	r3, [pc, #124]	; (8008abc <__sfp+0x88>)
 8008a3e:	681e      	ldr	r6, [r3, #0]
 8008a40:	69b3      	ldr	r3, [r6, #24]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <__sfp+0x18>
 8008a46:	0030      	movs	r0, r6
 8008a48:	f7ff ffbc 	bl	80089c4 <__sinit>
 8008a4c:	3648      	adds	r6, #72	; 0x48
 8008a4e:	68b4      	ldr	r4, [r6, #8]
 8008a50:	6873      	ldr	r3, [r6, #4]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	d504      	bpl.n	8008a60 <__sfp+0x2c>
 8008a56:	6833      	ldr	r3, [r6, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d022      	beq.n	8008aa2 <__sfp+0x6e>
 8008a5c:	6836      	ldr	r6, [r6, #0]
 8008a5e:	e7f6      	b.n	8008a4e <__sfp+0x1a>
 8008a60:	220c      	movs	r2, #12
 8008a62:	5ea5      	ldrsh	r5, [r4, r2]
 8008a64:	2d00      	cmp	r5, #0
 8008a66:	d11a      	bne.n	8008a9e <__sfp+0x6a>
 8008a68:	0020      	movs	r0, r4
 8008a6a:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <__sfp+0x8c>)
 8008a6c:	3058      	adds	r0, #88	; 0x58
 8008a6e:	60e3      	str	r3, [r4, #12]
 8008a70:	6665      	str	r5, [r4, #100]	; 0x64
 8008a72:	f000 f84b 	bl	8008b0c <__retarget_lock_init_recursive>
 8008a76:	f7ff ff8d 	bl	8008994 <__sfp_lock_release>
 8008a7a:	0020      	movs	r0, r4
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	0029      	movs	r1, r5
 8008a80:	6025      	str	r5, [r4, #0]
 8008a82:	60a5      	str	r5, [r4, #8]
 8008a84:	6065      	str	r5, [r4, #4]
 8008a86:	6125      	str	r5, [r4, #16]
 8008a88:	6165      	str	r5, [r4, #20]
 8008a8a:	61a5      	str	r5, [r4, #24]
 8008a8c:	305c      	adds	r0, #92	; 0x5c
 8008a8e:	f7fe f8ef 	bl	8006c70 <memset>
 8008a92:	6365      	str	r5, [r4, #52]	; 0x34
 8008a94:	63a5      	str	r5, [r4, #56]	; 0x38
 8008a96:	64a5      	str	r5, [r4, #72]	; 0x48
 8008a98:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008a9a:	0020      	movs	r0, r4
 8008a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a9e:	3468      	adds	r4, #104	; 0x68
 8008aa0:	e7d7      	b.n	8008a52 <__sfp+0x1e>
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	0038      	movs	r0, r7
 8008aa6:	f7ff ff57 	bl	8008958 <__sfmoreglue>
 8008aaa:	1e04      	subs	r4, r0, #0
 8008aac:	6030      	str	r0, [r6, #0]
 8008aae:	d1d5      	bne.n	8008a5c <__sfp+0x28>
 8008ab0:	f7ff ff70 	bl	8008994 <__sfp_lock_release>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	e7ef      	b.n	8008a9a <__sfp+0x66>
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	08009a1c 	.word	0x08009a1c
 8008ac0:	ffff0001 	.word	0xffff0001

08008ac4 <_fwalk_reent>:
 8008ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ac6:	0004      	movs	r4, r0
 8008ac8:	0006      	movs	r6, r0
 8008aca:	2700      	movs	r7, #0
 8008acc:	9101      	str	r1, [sp, #4]
 8008ace:	3448      	adds	r4, #72	; 0x48
 8008ad0:	6863      	ldr	r3, [r4, #4]
 8008ad2:	68a5      	ldr	r5, [r4, #8]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	9b00      	ldr	r3, [sp, #0]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	d504      	bpl.n	8008ae8 <_fwalk_reent+0x24>
 8008ade:	6824      	ldr	r4, [r4, #0]
 8008ae0:	2c00      	cmp	r4, #0
 8008ae2:	d1f5      	bne.n	8008ad0 <_fwalk_reent+0xc>
 8008ae4:	0038      	movs	r0, r7
 8008ae6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ae8:	89ab      	ldrh	r3, [r5, #12]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d908      	bls.n	8008b00 <_fwalk_reent+0x3c>
 8008aee:	220e      	movs	r2, #14
 8008af0:	5eab      	ldrsh	r3, [r5, r2]
 8008af2:	3301      	adds	r3, #1
 8008af4:	d004      	beq.n	8008b00 <_fwalk_reent+0x3c>
 8008af6:	0029      	movs	r1, r5
 8008af8:	0030      	movs	r0, r6
 8008afa:	9b01      	ldr	r3, [sp, #4]
 8008afc:	4798      	blx	r3
 8008afe:	4307      	orrs	r7, r0
 8008b00:	3568      	adds	r5, #104	; 0x68
 8008b02:	e7e8      	b.n	8008ad6 <_fwalk_reent+0x12>

08008b04 <_localeconv_r>:
 8008b04:	4800      	ldr	r0, [pc, #0]	; (8008b08 <_localeconv_r+0x4>)
 8008b06:	4770      	bx	lr
 8008b08:	20000160 	.word	0x20000160

08008b0c <__retarget_lock_init_recursive>:
 8008b0c:	4770      	bx	lr

08008b0e <__retarget_lock_acquire_recursive>:
 8008b0e:	4770      	bx	lr

08008b10 <__retarget_lock_release_recursive>:
 8008b10:	4770      	bx	lr
	...

08008b14 <__swhatbuf_r>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	000e      	movs	r6, r1
 8008b18:	001d      	movs	r5, r3
 8008b1a:	230e      	movs	r3, #14
 8008b1c:	5ec9      	ldrsh	r1, [r1, r3]
 8008b1e:	0014      	movs	r4, r2
 8008b20:	b096      	sub	sp, #88	; 0x58
 8008b22:	2900      	cmp	r1, #0
 8008b24:	da07      	bge.n	8008b36 <__swhatbuf_r+0x22>
 8008b26:	2300      	movs	r3, #0
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	89b3      	ldrh	r3, [r6, #12]
 8008b2c:	061b      	lsls	r3, r3, #24
 8008b2e:	d411      	bmi.n	8008b54 <__swhatbuf_r+0x40>
 8008b30:	2380      	movs	r3, #128	; 0x80
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	e00f      	b.n	8008b56 <__swhatbuf_r+0x42>
 8008b36:	466a      	mov	r2, sp
 8008b38:	f000 fd98 	bl	800966c <_fstat_r>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	dbf2      	blt.n	8008b26 <__swhatbuf_r+0x12>
 8008b40:	23f0      	movs	r3, #240	; 0xf0
 8008b42:	9901      	ldr	r1, [sp, #4]
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	4019      	ands	r1, r3
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <__swhatbuf_r+0x4c>)
 8008b4a:	18c9      	adds	r1, r1, r3
 8008b4c:	424b      	negs	r3, r1
 8008b4e:	4159      	adcs	r1, r3
 8008b50:	6029      	str	r1, [r5, #0]
 8008b52:	e7ed      	b.n	8008b30 <__swhatbuf_r+0x1c>
 8008b54:	2340      	movs	r3, #64	; 0x40
 8008b56:	2000      	movs	r0, #0
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	b016      	add	sp, #88	; 0x58
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}
 8008b5e:	46c0      	nop			; (mov r8, r8)
 8008b60:	ffffe000 	.word	0xffffe000

08008b64 <__smakebuf_r>:
 8008b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b66:	2602      	movs	r6, #2
 8008b68:	898b      	ldrh	r3, [r1, #12]
 8008b6a:	0005      	movs	r5, r0
 8008b6c:	000c      	movs	r4, r1
 8008b6e:	4233      	tst	r3, r6
 8008b70:	d006      	beq.n	8008b80 <__smakebuf_r+0x1c>
 8008b72:	0023      	movs	r3, r4
 8008b74:	3347      	adds	r3, #71	; 0x47
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	6123      	str	r3, [r4, #16]
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	6163      	str	r3, [r4, #20]
 8008b7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008b80:	466a      	mov	r2, sp
 8008b82:	ab01      	add	r3, sp, #4
 8008b84:	f7ff ffc6 	bl	8008b14 <__swhatbuf_r>
 8008b88:	9900      	ldr	r1, [sp, #0]
 8008b8a:	0007      	movs	r7, r0
 8008b8c:	0028      	movs	r0, r5
 8008b8e:	f000 fc41 	bl	8009414 <_malloc_r>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d108      	bne.n	8008ba8 <__smakebuf_r+0x44>
 8008b96:	220c      	movs	r2, #12
 8008b98:	5ea3      	ldrsh	r3, [r4, r2]
 8008b9a:	059a      	lsls	r2, r3, #22
 8008b9c:	d4ef      	bmi.n	8008b7e <__smakebuf_r+0x1a>
 8008b9e:	2203      	movs	r2, #3
 8008ba0:	4393      	bics	r3, r2
 8008ba2:	431e      	orrs	r6, r3
 8008ba4:	81a6      	strh	r6, [r4, #12]
 8008ba6:	e7e4      	b.n	8008b72 <__smakebuf_r+0xe>
 8008ba8:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <__smakebuf_r+0x84>)
 8008baa:	62ab      	str	r3, [r5, #40]	; 0x28
 8008bac:	2380      	movs	r3, #128	; 0x80
 8008bae:	89a2      	ldrh	r2, [r4, #12]
 8008bb0:	6020      	str	r0, [r4, #0]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	9b00      	ldr	r3, [sp, #0]
 8008bb8:	6120      	str	r0, [r4, #16]
 8008bba:	6163      	str	r3, [r4, #20]
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00d      	beq.n	8008bde <__smakebuf_r+0x7a>
 8008bc2:	0028      	movs	r0, r5
 8008bc4:	230e      	movs	r3, #14
 8008bc6:	5ee1      	ldrsh	r1, [r4, r3]
 8008bc8:	f000 fd62 	bl	8009690 <_isatty_r>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d006      	beq.n	8008bde <__smakebuf_r+0x7a>
 8008bd0:	2203      	movs	r2, #3
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	4393      	bics	r3, r2
 8008bd6:	001a      	movs	r2, r3
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	81a3      	strh	r3, [r4, #12]
 8008bde:	89a0      	ldrh	r0, [r4, #12]
 8008be0:	4307      	orrs	r7, r0
 8008be2:	81a7      	strh	r7, [r4, #12]
 8008be4:	e7cb      	b.n	8008b7e <__smakebuf_r+0x1a>
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	08008949 	.word	0x08008949

08008bec <malloc>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	4b03      	ldr	r3, [pc, #12]	; (8008bfc <malloc+0x10>)
 8008bf0:	0001      	movs	r1, r0
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	f000 fc0e 	bl	8009414 <_malloc_r>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	46c0      	nop			; (mov r8, r8)
 8008bfc:	2000000c 	.word	0x2000000c

08008c00 <memchr>:
 8008c00:	b2c9      	uxtb	r1, r1
 8008c02:	1882      	adds	r2, r0, r2
 8008c04:	4290      	cmp	r0, r2
 8008c06:	d101      	bne.n	8008c0c <memchr+0xc>
 8008c08:	2000      	movs	r0, #0
 8008c0a:	4770      	bx	lr
 8008c0c:	7803      	ldrb	r3, [r0, #0]
 8008c0e:	428b      	cmp	r3, r1
 8008c10:	d0fb      	beq.n	8008c0a <memchr+0xa>
 8008c12:	3001      	adds	r0, #1
 8008c14:	e7f6      	b.n	8008c04 <memchr+0x4>

08008c16 <memcpy>:
 8008c16:	2300      	movs	r3, #0
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d100      	bne.n	8008c20 <memcpy+0xa>
 8008c1e:	bd10      	pop	{r4, pc}
 8008c20:	5ccc      	ldrb	r4, [r1, r3]
 8008c22:	54c4      	strb	r4, [r0, r3]
 8008c24:	3301      	adds	r3, #1
 8008c26:	e7f8      	b.n	8008c1a <memcpy+0x4>

08008c28 <_Balloc>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c2c:	0006      	movs	r6, r0
 8008c2e:	000c      	movs	r4, r1
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	d10e      	bne.n	8008c52 <_Balloc+0x2a>
 8008c34:	2010      	movs	r0, #16
 8008c36:	f7ff ffd9 	bl	8008bec <malloc>
 8008c3a:	1e02      	subs	r2, r0, #0
 8008c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8008c3e:	d104      	bne.n	8008c4a <_Balloc+0x22>
 8008c40:	2166      	movs	r1, #102	; 0x66
 8008c42:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <_Balloc+0x80>)
 8008c44:	4819      	ldr	r0, [pc, #100]	; (8008cac <_Balloc+0x84>)
 8008c46:	f7fd ffbb 	bl	8006bc0 <__assert_func>
 8008c4a:	6045      	str	r5, [r0, #4]
 8008c4c:	6085      	str	r5, [r0, #8]
 8008c4e:	6005      	str	r5, [r0, #0]
 8008c50:	60c5      	str	r5, [r0, #12]
 8008c52:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008c54:	68eb      	ldr	r3, [r5, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d013      	beq.n	8008c82 <_Balloc+0x5a>
 8008c5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c5c:	00a2      	lsls	r2, r4, #2
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	189b      	adds	r3, r3, r2
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d118      	bne.n	8008c9a <_Balloc+0x72>
 8008c68:	2101      	movs	r1, #1
 8008c6a:	000d      	movs	r5, r1
 8008c6c:	40a5      	lsls	r5, r4
 8008c6e:	1d6a      	adds	r2, r5, #5
 8008c70:	0030      	movs	r0, r6
 8008c72:	0092      	lsls	r2, r2, #2
 8008c74:	f000 fb76 	bl	8009364 <_calloc_r>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d00c      	beq.n	8008c96 <_Balloc+0x6e>
 8008c7c:	6044      	str	r4, [r0, #4]
 8008c7e:	6085      	str	r5, [r0, #8]
 8008c80:	e00d      	b.n	8008c9e <_Balloc+0x76>
 8008c82:	2221      	movs	r2, #33	; 0x21
 8008c84:	2104      	movs	r1, #4
 8008c86:	0030      	movs	r0, r6
 8008c88:	f000 fb6c 	bl	8009364 <_calloc_r>
 8008c8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c8e:	60e8      	str	r0, [r5, #12]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e1      	bne.n	8008c5a <_Balloc+0x32>
 8008c96:	2000      	movs	r0, #0
 8008c98:	bd70      	pop	{r4, r5, r6, pc}
 8008c9a:	6802      	ldr	r2, [r0, #0]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	6103      	str	r3, [r0, #16]
 8008ca2:	60c3      	str	r3, [r0, #12]
 8008ca4:	e7f8      	b.n	8008c98 <_Balloc+0x70>
 8008ca6:	46c0      	nop			; (mov r8, r8)
 8008ca8:	08009a72 	.word	0x08009a72
 8008cac:	08009b5c 	.word	0x08009b5c

08008cb0 <_Bfree>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cb4:	0005      	movs	r5, r0
 8008cb6:	000c      	movs	r4, r1
 8008cb8:	2e00      	cmp	r6, #0
 8008cba:	d10e      	bne.n	8008cda <_Bfree+0x2a>
 8008cbc:	2010      	movs	r0, #16
 8008cbe:	f7ff ff95 	bl	8008bec <malloc>
 8008cc2:	1e02      	subs	r2, r0, #0
 8008cc4:	6268      	str	r0, [r5, #36]	; 0x24
 8008cc6:	d104      	bne.n	8008cd2 <_Bfree+0x22>
 8008cc8:	218a      	movs	r1, #138	; 0x8a
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <_Bfree+0x40>)
 8008ccc:	4809      	ldr	r0, [pc, #36]	; (8008cf4 <_Bfree+0x44>)
 8008cce:	f7fd ff77 	bl	8006bc0 <__assert_func>
 8008cd2:	6046      	str	r6, [r0, #4]
 8008cd4:	6086      	str	r6, [r0, #8]
 8008cd6:	6006      	str	r6, [r0, #0]
 8008cd8:	60c6      	str	r6, [r0, #12]
 8008cda:	2c00      	cmp	r4, #0
 8008cdc:	d007      	beq.n	8008cee <_Bfree+0x3e>
 8008cde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ce0:	6862      	ldr	r2, [r4, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	0092      	lsls	r2, r2, #2
 8008ce6:	189b      	adds	r3, r3, r2
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	6022      	str	r2, [r4, #0]
 8008cec:	601c      	str	r4, [r3, #0]
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	08009a72 	.word	0x08009a72
 8008cf4:	08009b5c 	.word	0x08009b5c

08008cf8 <__multadd>:
 8008cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cfa:	000e      	movs	r6, r1
 8008cfc:	9001      	str	r0, [sp, #4]
 8008cfe:	000c      	movs	r4, r1
 8008d00:	001d      	movs	r5, r3
 8008d02:	2000      	movs	r0, #0
 8008d04:	690f      	ldr	r7, [r1, #16]
 8008d06:	3614      	adds	r6, #20
 8008d08:	6833      	ldr	r3, [r6, #0]
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	b299      	uxth	r1, r3
 8008d0e:	4351      	muls	r1, r2
 8008d10:	0c1b      	lsrs	r3, r3, #16
 8008d12:	4353      	muls	r3, r2
 8008d14:	1949      	adds	r1, r1, r5
 8008d16:	0c0d      	lsrs	r5, r1, #16
 8008d18:	195b      	adds	r3, r3, r5
 8008d1a:	0c1d      	lsrs	r5, r3, #16
 8008d1c:	b289      	uxth	r1, r1
 8008d1e:	041b      	lsls	r3, r3, #16
 8008d20:	185b      	adds	r3, r3, r1
 8008d22:	c608      	stmia	r6!, {r3}
 8008d24:	4287      	cmp	r7, r0
 8008d26:	dcef      	bgt.n	8008d08 <__multadd+0x10>
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	d022      	beq.n	8008d72 <__multadd+0x7a>
 8008d2c:	68a3      	ldr	r3, [r4, #8]
 8008d2e:	42bb      	cmp	r3, r7
 8008d30:	dc19      	bgt.n	8008d66 <__multadd+0x6e>
 8008d32:	6863      	ldr	r3, [r4, #4]
 8008d34:	9801      	ldr	r0, [sp, #4]
 8008d36:	1c59      	adds	r1, r3, #1
 8008d38:	f7ff ff76 	bl	8008c28 <_Balloc>
 8008d3c:	1e06      	subs	r6, r0, #0
 8008d3e:	d105      	bne.n	8008d4c <__multadd+0x54>
 8008d40:	0002      	movs	r2, r0
 8008d42:	21b5      	movs	r1, #181	; 0xb5
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <__multadd+0x80>)
 8008d46:	480d      	ldr	r0, [pc, #52]	; (8008d7c <__multadd+0x84>)
 8008d48:	f7fd ff3a 	bl	8006bc0 <__assert_func>
 8008d4c:	0021      	movs	r1, r4
 8008d4e:	6923      	ldr	r3, [r4, #16]
 8008d50:	310c      	adds	r1, #12
 8008d52:	1c9a      	adds	r2, r3, #2
 8008d54:	0092      	lsls	r2, r2, #2
 8008d56:	300c      	adds	r0, #12
 8008d58:	f7ff ff5d 	bl	8008c16 <memcpy>
 8008d5c:	0021      	movs	r1, r4
 8008d5e:	9801      	ldr	r0, [sp, #4]
 8008d60:	f7ff ffa6 	bl	8008cb0 <_Bfree>
 8008d64:	0034      	movs	r4, r6
 8008d66:	1d3b      	adds	r3, r7, #4
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	18e3      	adds	r3, r4, r3
 8008d6c:	605d      	str	r5, [r3, #4]
 8008d6e:	1c7b      	adds	r3, r7, #1
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	0020      	movs	r0, r4
 8008d74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	08009ae8 	.word	0x08009ae8
 8008d7c:	08009b5c 	.word	0x08009b5c

08008d80 <__hi0bits>:
 8008d80:	0003      	movs	r3, r0
 8008d82:	0c02      	lsrs	r2, r0, #16
 8008d84:	2000      	movs	r0, #0
 8008d86:	4282      	cmp	r2, r0
 8008d88:	d101      	bne.n	8008d8e <__hi0bits+0xe>
 8008d8a:	041b      	lsls	r3, r3, #16
 8008d8c:	3010      	adds	r0, #16
 8008d8e:	0e1a      	lsrs	r2, r3, #24
 8008d90:	d101      	bne.n	8008d96 <__hi0bits+0x16>
 8008d92:	3008      	adds	r0, #8
 8008d94:	021b      	lsls	r3, r3, #8
 8008d96:	0f1a      	lsrs	r2, r3, #28
 8008d98:	d101      	bne.n	8008d9e <__hi0bits+0x1e>
 8008d9a:	3004      	adds	r0, #4
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	0f9a      	lsrs	r2, r3, #30
 8008da0:	d101      	bne.n	8008da6 <__hi0bits+0x26>
 8008da2:	3002      	adds	r0, #2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	db03      	blt.n	8008db2 <__hi0bits+0x32>
 8008daa:	3001      	adds	r0, #1
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	d400      	bmi.n	8008db2 <__hi0bits+0x32>
 8008db0:	2020      	movs	r0, #32
 8008db2:	4770      	bx	lr

08008db4 <__lo0bits>:
 8008db4:	6803      	ldr	r3, [r0, #0]
 8008db6:	0002      	movs	r2, r0
 8008db8:	2107      	movs	r1, #7
 8008dba:	0018      	movs	r0, r3
 8008dbc:	4008      	ands	r0, r1
 8008dbe:	420b      	tst	r3, r1
 8008dc0:	d00d      	beq.n	8008dde <__lo0bits+0x2a>
 8008dc2:	3906      	subs	r1, #6
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	420b      	tst	r3, r1
 8008dc8:	d105      	bne.n	8008dd6 <__lo0bits+0x22>
 8008dca:	3002      	adds	r0, #2
 8008dcc:	4203      	tst	r3, r0
 8008dce:	d003      	beq.n	8008dd8 <__lo0bits+0x24>
 8008dd0:	40cb      	lsrs	r3, r1
 8008dd2:	0008      	movs	r0, r1
 8008dd4:	6013      	str	r3, [r2, #0]
 8008dd6:	4770      	bx	lr
 8008dd8:	089b      	lsrs	r3, r3, #2
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	e7fb      	b.n	8008dd6 <__lo0bits+0x22>
 8008dde:	b299      	uxth	r1, r3
 8008de0:	2900      	cmp	r1, #0
 8008de2:	d101      	bne.n	8008de8 <__lo0bits+0x34>
 8008de4:	2010      	movs	r0, #16
 8008de6:	0c1b      	lsrs	r3, r3, #16
 8008de8:	b2d9      	uxtb	r1, r3
 8008dea:	2900      	cmp	r1, #0
 8008dec:	d101      	bne.n	8008df2 <__lo0bits+0x3e>
 8008dee:	3008      	adds	r0, #8
 8008df0:	0a1b      	lsrs	r3, r3, #8
 8008df2:	0719      	lsls	r1, r3, #28
 8008df4:	d101      	bne.n	8008dfa <__lo0bits+0x46>
 8008df6:	3004      	adds	r0, #4
 8008df8:	091b      	lsrs	r3, r3, #4
 8008dfa:	0799      	lsls	r1, r3, #30
 8008dfc:	d101      	bne.n	8008e02 <__lo0bits+0x4e>
 8008dfe:	3002      	adds	r0, #2
 8008e00:	089b      	lsrs	r3, r3, #2
 8008e02:	07d9      	lsls	r1, r3, #31
 8008e04:	d4e9      	bmi.n	8008dda <__lo0bits+0x26>
 8008e06:	3001      	adds	r0, #1
 8008e08:	085b      	lsrs	r3, r3, #1
 8008e0a:	d1e6      	bne.n	8008dda <__lo0bits+0x26>
 8008e0c:	2020      	movs	r0, #32
 8008e0e:	e7e2      	b.n	8008dd6 <__lo0bits+0x22>

08008e10 <__i2b>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	000c      	movs	r4, r1
 8008e14:	2101      	movs	r1, #1
 8008e16:	f7ff ff07 	bl	8008c28 <_Balloc>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d106      	bne.n	8008e2c <__i2b+0x1c>
 8008e1e:	21a0      	movs	r1, #160	; 0xa0
 8008e20:	0002      	movs	r2, r0
 8008e22:	4b04      	ldr	r3, [pc, #16]	; (8008e34 <__i2b+0x24>)
 8008e24:	4804      	ldr	r0, [pc, #16]	; (8008e38 <__i2b+0x28>)
 8008e26:	0049      	lsls	r1, r1, #1
 8008e28:	f7fd feca 	bl	8006bc0 <__assert_func>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	6144      	str	r4, [r0, #20]
 8008e30:	6103      	str	r3, [r0, #16]
 8008e32:	bd10      	pop	{r4, pc}
 8008e34:	08009ae8 	.word	0x08009ae8
 8008e38:	08009b5c 	.word	0x08009b5c

08008e3c <__multiply>:
 8008e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3e:	690b      	ldr	r3, [r1, #16]
 8008e40:	0014      	movs	r4, r2
 8008e42:	6912      	ldr	r2, [r2, #16]
 8008e44:	000d      	movs	r5, r1
 8008e46:	b089      	sub	sp, #36	; 0x24
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	da01      	bge.n	8008e50 <__multiply+0x14>
 8008e4c:	0025      	movs	r5, r4
 8008e4e:	000c      	movs	r4, r1
 8008e50:	692f      	ldr	r7, [r5, #16]
 8008e52:	6926      	ldr	r6, [r4, #16]
 8008e54:	6869      	ldr	r1, [r5, #4]
 8008e56:	19bb      	adds	r3, r7, r6
 8008e58:	9302      	str	r3, [sp, #8]
 8008e5a:	68ab      	ldr	r3, [r5, #8]
 8008e5c:	19ba      	adds	r2, r7, r6
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	da00      	bge.n	8008e64 <__multiply+0x28>
 8008e62:	3101      	adds	r1, #1
 8008e64:	f7ff fee0 	bl	8008c28 <_Balloc>
 8008e68:	9001      	str	r0, [sp, #4]
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d106      	bne.n	8008e7c <__multiply+0x40>
 8008e6e:	215e      	movs	r1, #94	; 0x5e
 8008e70:	0002      	movs	r2, r0
 8008e72:	4b48      	ldr	r3, [pc, #288]	; (8008f94 <__multiply+0x158>)
 8008e74:	4848      	ldr	r0, [pc, #288]	; (8008f98 <__multiply+0x15c>)
 8008e76:	31ff      	adds	r1, #255	; 0xff
 8008e78:	f7fd fea2 	bl	8006bc0 <__assert_func>
 8008e7c:	9b01      	ldr	r3, [sp, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	3314      	adds	r3, #20
 8008e82:	469c      	mov	ip, r3
 8008e84:	19bb      	adds	r3, r7, r6
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4463      	add	r3, ip
 8008e8a:	9303      	str	r3, [sp, #12]
 8008e8c:	4663      	mov	r3, ip
 8008e8e:	9903      	ldr	r1, [sp, #12]
 8008e90:	428b      	cmp	r3, r1
 8008e92:	d32c      	bcc.n	8008eee <__multiply+0xb2>
 8008e94:	002b      	movs	r3, r5
 8008e96:	0022      	movs	r2, r4
 8008e98:	3314      	adds	r3, #20
 8008e9a:	00bf      	lsls	r7, r7, #2
 8008e9c:	3214      	adds	r2, #20
 8008e9e:	9306      	str	r3, [sp, #24]
 8008ea0:	00b6      	lsls	r6, r6, #2
 8008ea2:	19db      	adds	r3, r3, r7
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	1993      	adds	r3, r2, r6
 8008ea8:	9307      	str	r3, [sp, #28]
 8008eaa:	2304      	movs	r3, #4
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	002b      	movs	r3, r5
 8008eb0:	9904      	ldr	r1, [sp, #16]
 8008eb2:	3315      	adds	r3, #21
 8008eb4:	9200      	str	r2, [sp, #0]
 8008eb6:	4299      	cmp	r1, r3
 8008eb8:	d305      	bcc.n	8008ec6 <__multiply+0x8a>
 8008eba:	1b4b      	subs	r3, r1, r5
 8008ebc:	3b15      	subs	r3, #21
 8008ebe:	089b      	lsrs	r3, r3, #2
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	9305      	str	r3, [sp, #20]
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	9a00      	ldr	r2, [sp, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d311      	bcc.n	8008ef2 <__multiply+0xb6>
 8008ece:	9b02      	ldr	r3, [sp, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	dd06      	ble.n	8008ee2 <__multiply+0xa6>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	3b04      	subs	r3, #4
 8008ed8:	9303      	str	r3, [sp, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d054      	beq.n	8008f8c <__multiply+0x150>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	9a02      	ldr	r2, [sp, #8]
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	611a      	str	r2, [r3, #16]
 8008eea:	b009      	add	sp, #36	; 0x24
 8008eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eee:	c304      	stmia	r3!, {r2}
 8008ef0:	e7cd      	b.n	8008e8e <__multiply+0x52>
 8008ef2:	9b00      	ldr	r3, [sp, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	b298      	uxth	r0, r3
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d01c      	beq.n	8008f36 <__multiply+0xfa>
 8008efc:	4667      	mov	r7, ip
 8008efe:	2400      	movs	r4, #0
 8008f00:	9e06      	ldr	r6, [sp, #24]
 8008f02:	ce02      	ldmia	r6!, {r1}
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	b28b      	uxth	r3, r1
 8008f08:	4343      	muls	r3, r0
 8008f0a:	0c09      	lsrs	r1, r1, #16
 8008f0c:	4341      	muls	r1, r0
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	189b      	adds	r3, r3, r2
 8008f12:	191b      	adds	r3, r3, r4
 8008f14:	000c      	movs	r4, r1
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	0c11      	lsrs	r1, r2, #16
 8008f1a:	1861      	adds	r1, r4, r1
 8008f1c:	0c1c      	lsrs	r4, r3, #16
 8008f1e:	1909      	adds	r1, r1, r4
 8008f20:	0c0c      	lsrs	r4, r1, #16
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	0409      	lsls	r1, r1, #16
 8008f26:	430b      	orrs	r3, r1
 8008f28:	c708      	stmia	r7!, {r3}
 8008f2a:	9b04      	ldr	r3, [sp, #16]
 8008f2c:	42b3      	cmp	r3, r6
 8008f2e:	d8e8      	bhi.n	8008f02 <__multiply+0xc6>
 8008f30:	4663      	mov	r3, ip
 8008f32:	9a05      	ldr	r2, [sp, #20]
 8008f34:	509c      	str	r4, [r3, r2]
 8008f36:	9b00      	ldr	r3, [sp, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	0c1e      	lsrs	r6, r3, #16
 8008f3c:	d020      	beq.n	8008f80 <__multiply+0x144>
 8008f3e:	4663      	mov	r3, ip
 8008f40:	002c      	movs	r4, r5
 8008f42:	4660      	mov	r0, ip
 8008f44:	2700      	movs	r7, #0
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3414      	adds	r4, #20
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	b291      	uxth	r1, r2
 8008f50:	4371      	muls	r1, r6
 8008f52:	6802      	ldr	r2, [r0, #0]
 8008f54:	0c12      	lsrs	r2, r2, #16
 8008f56:	1889      	adds	r1, r1, r2
 8008f58:	19cf      	adds	r7, r1, r7
 8008f5a:	0439      	lsls	r1, r7, #16
 8008f5c:	430b      	orrs	r3, r1
 8008f5e:	6003      	str	r3, [r0, #0]
 8008f60:	cc02      	ldmia	r4!, {r1}
 8008f62:	6843      	ldr	r3, [r0, #4]
 8008f64:	0c09      	lsrs	r1, r1, #16
 8008f66:	4371      	muls	r1, r6
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	0c3f      	lsrs	r7, r7, #16
 8008f6c:	18cb      	adds	r3, r1, r3
 8008f6e:	9a04      	ldr	r2, [sp, #16]
 8008f70:	19db      	adds	r3, r3, r7
 8008f72:	0c1f      	lsrs	r7, r3, #16
 8008f74:	3004      	adds	r0, #4
 8008f76:	42a2      	cmp	r2, r4
 8008f78:	d8e7      	bhi.n	8008f4a <__multiply+0x10e>
 8008f7a:	4662      	mov	r2, ip
 8008f7c:	9905      	ldr	r1, [sp, #20]
 8008f7e:	5053      	str	r3, [r2, r1]
 8008f80:	9b00      	ldr	r3, [sp, #0]
 8008f82:	3304      	adds	r3, #4
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	2304      	movs	r3, #4
 8008f88:	449c      	add	ip, r3
 8008f8a:	e79c      	b.n	8008ec6 <__multiply+0x8a>
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	9302      	str	r3, [sp, #8]
 8008f92:	e79c      	b.n	8008ece <__multiply+0x92>
 8008f94:	08009ae8 	.word	0x08009ae8
 8008f98:	08009b5c 	.word	0x08009b5c

08008f9c <__pow5mult>:
 8008f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	0015      	movs	r5, r2
 8008fa2:	0007      	movs	r7, r0
 8008fa4:	000e      	movs	r6, r1
 8008fa6:	401a      	ands	r2, r3
 8008fa8:	421d      	tst	r5, r3
 8008faa:	d008      	beq.n	8008fbe <__pow5mult+0x22>
 8008fac:	4925      	ldr	r1, [pc, #148]	; (8009044 <__pow5mult+0xa8>)
 8008fae:	3a01      	subs	r2, #1
 8008fb0:	0092      	lsls	r2, r2, #2
 8008fb2:	5852      	ldr	r2, [r2, r1]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	0031      	movs	r1, r6
 8008fb8:	f7ff fe9e 	bl	8008cf8 <__multadd>
 8008fbc:	0006      	movs	r6, r0
 8008fbe:	10ad      	asrs	r5, r5, #2
 8008fc0:	d03d      	beq.n	800903e <__pow5mult+0xa2>
 8008fc2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008fc4:	2c00      	cmp	r4, #0
 8008fc6:	d10f      	bne.n	8008fe8 <__pow5mult+0x4c>
 8008fc8:	2010      	movs	r0, #16
 8008fca:	f7ff fe0f 	bl	8008bec <malloc>
 8008fce:	1e02      	subs	r2, r0, #0
 8008fd0:	6278      	str	r0, [r7, #36]	; 0x24
 8008fd2:	d105      	bne.n	8008fe0 <__pow5mult+0x44>
 8008fd4:	21d7      	movs	r1, #215	; 0xd7
 8008fd6:	4b1c      	ldr	r3, [pc, #112]	; (8009048 <__pow5mult+0xac>)
 8008fd8:	481c      	ldr	r0, [pc, #112]	; (800904c <__pow5mult+0xb0>)
 8008fda:	0049      	lsls	r1, r1, #1
 8008fdc:	f7fd fdf0 	bl	8006bc0 <__assert_func>
 8008fe0:	6044      	str	r4, [r0, #4]
 8008fe2:	6084      	str	r4, [r0, #8]
 8008fe4:	6004      	str	r4, [r0, #0]
 8008fe6:	60c4      	str	r4, [r0, #12]
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	689c      	ldr	r4, [r3, #8]
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	2c00      	cmp	r4, #0
 8008ff0:	d108      	bne.n	8009004 <__pow5mult+0x68>
 8008ff2:	0038      	movs	r0, r7
 8008ff4:	4916      	ldr	r1, [pc, #88]	; (8009050 <__pow5mult+0xb4>)
 8008ff6:	f7ff ff0b 	bl	8008e10 <__i2b>
 8008ffa:	9b01      	ldr	r3, [sp, #4]
 8008ffc:	0004      	movs	r4, r0
 8008ffe:	6098      	str	r0, [r3, #8]
 8009000:	2300      	movs	r3, #0
 8009002:	6003      	str	r3, [r0, #0]
 8009004:	2301      	movs	r3, #1
 8009006:	421d      	tst	r5, r3
 8009008:	d00a      	beq.n	8009020 <__pow5mult+0x84>
 800900a:	0031      	movs	r1, r6
 800900c:	0022      	movs	r2, r4
 800900e:	0038      	movs	r0, r7
 8009010:	f7ff ff14 	bl	8008e3c <__multiply>
 8009014:	0031      	movs	r1, r6
 8009016:	9001      	str	r0, [sp, #4]
 8009018:	0038      	movs	r0, r7
 800901a:	f7ff fe49 	bl	8008cb0 <_Bfree>
 800901e:	9e01      	ldr	r6, [sp, #4]
 8009020:	106d      	asrs	r5, r5, #1
 8009022:	d00c      	beq.n	800903e <__pow5mult+0xa2>
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	2800      	cmp	r0, #0
 8009028:	d107      	bne.n	800903a <__pow5mult+0x9e>
 800902a:	0022      	movs	r2, r4
 800902c:	0021      	movs	r1, r4
 800902e:	0038      	movs	r0, r7
 8009030:	f7ff ff04 	bl	8008e3c <__multiply>
 8009034:	2300      	movs	r3, #0
 8009036:	6020      	str	r0, [r4, #0]
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	0004      	movs	r4, r0
 800903c:	e7e2      	b.n	8009004 <__pow5mult+0x68>
 800903e:	0030      	movs	r0, r6
 8009040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	08009cb0 	.word	0x08009cb0
 8009048:	08009a72 	.word	0x08009a72
 800904c:	08009b5c 	.word	0x08009b5c
 8009050:	00000271 	.word	0x00000271

08009054 <__lshift>:
 8009054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009056:	000c      	movs	r4, r1
 8009058:	0017      	movs	r7, r2
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	1155      	asrs	r5, r2, #5
 800905e:	b087      	sub	sp, #28
 8009060:	18eb      	adds	r3, r5, r3
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	3301      	adds	r3, #1
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	6849      	ldr	r1, [r1, #4]
 800906a:	68a3      	ldr	r3, [r4, #8]
 800906c:	9004      	str	r0, [sp, #16]
 800906e:	9a01      	ldr	r2, [sp, #4]
 8009070:	4293      	cmp	r3, r2
 8009072:	db11      	blt.n	8009098 <__lshift+0x44>
 8009074:	9804      	ldr	r0, [sp, #16]
 8009076:	f7ff fdd7 	bl	8008c28 <_Balloc>
 800907a:	0002      	movs	r2, r0
 800907c:	2300      	movs	r3, #0
 800907e:	3214      	adds	r2, #20
 8009080:	0006      	movs	r6, r0
 8009082:	0011      	movs	r1, r2
 8009084:	9203      	str	r2, [sp, #12]
 8009086:	4298      	cmp	r0, r3
 8009088:	d10d      	bne.n	80090a6 <__lshift+0x52>
 800908a:	21da      	movs	r1, #218	; 0xda
 800908c:	0002      	movs	r2, r0
 800908e:	4b27      	ldr	r3, [pc, #156]	; (800912c <__lshift+0xd8>)
 8009090:	4827      	ldr	r0, [pc, #156]	; (8009130 <__lshift+0xdc>)
 8009092:	31ff      	adds	r1, #255	; 0xff
 8009094:	f7fd fd94 	bl	8006bc0 <__assert_func>
 8009098:	3101      	adds	r1, #1
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	e7e7      	b.n	800906e <__lshift+0x1a>
 800909e:	2200      	movs	r2, #0
 80090a0:	0098      	lsls	r0, r3, #2
 80090a2:	500a      	str	r2, [r1, r0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	42ab      	cmp	r3, r5
 80090a8:	dbf9      	blt.n	800909e <__lshift+0x4a>
 80090aa:	43eb      	mvns	r3, r5
 80090ac:	17db      	asrs	r3, r3, #31
 80090ae:	401d      	ands	r5, r3
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	00ad      	lsls	r5, r5, #2
 80090b4:	211f      	movs	r1, #31
 80090b6:	0038      	movs	r0, r7
 80090b8:	195d      	adds	r5, r3, r5
 80090ba:	0023      	movs	r3, r4
 80090bc:	6922      	ldr	r2, [r4, #16]
 80090be:	3314      	adds	r3, #20
 80090c0:	0092      	lsls	r2, r2, #2
 80090c2:	4008      	ands	r0, r1
 80090c4:	4684      	mov	ip, r0
 80090c6:	189a      	adds	r2, r3, r2
 80090c8:	420f      	tst	r7, r1
 80090ca:	d02a      	beq.n	8009122 <__lshift+0xce>
 80090cc:	3101      	adds	r1, #1
 80090ce:	1a09      	subs	r1, r1, r0
 80090d0:	9105      	str	r1, [sp, #20]
 80090d2:	2100      	movs	r1, #0
 80090d4:	9503      	str	r5, [sp, #12]
 80090d6:	4667      	mov	r7, ip
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	40b8      	lsls	r0, r7
 80090dc:	4301      	orrs	r1, r0
 80090de:	9803      	ldr	r0, [sp, #12]
 80090e0:	c002      	stmia	r0!, {r1}
 80090e2:	cb02      	ldmia	r3!, {r1}
 80090e4:	9003      	str	r0, [sp, #12]
 80090e6:	9805      	ldr	r0, [sp, #20]
 80090e8:	40c1      	lsrs	r1, r0
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d8f3      	bhi.n	80090d6 <__lshift+0x82>
 80090ee:	0020      	movs	r0, r4
 80090f0:	3015      	adds	r0, #21
 80090f2:	2304      	movs	r3, #4
 80090f4:	4282      	cmp	r2, r0
 80090f6:	d304      	bcc.n	8009102 <__lshift+0xae>
 80090f8:	1b13      	subs	r3, r2, r4
 80090fa:	3b15      	subs	r3, #21
 80090fc:	089b      	lsrs	r3, r3, #2
 80090fe:	3301      	adds	r3, #1
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	50e9      	str	r1, [r5, r3]
 8009104:	2900      	cmp	r1, #0
 8009106:	d002      	beq.n	800910e <__lshift+0xba>
 8009108:	9b02      	ldr	r3, [sp, #8]
 800910a:	3302      	adds	r3, #2
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	9804      	ldr	r0, [sp, #16]
 8009112:	3b01      	subs	r3, #1
 8009114:	0021      	movs	r1, r4
 8009116:	6133      	str	r3, [r6, #16]
 8009118:	f7ff fdca 	bl	8008cb0 <_Bfree>
 800911c:	0030      	movs	r0, r6
 800911e:	b007      	add	sp, #28
 8009120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009122:	cb02      	ldmia	r3!, {r1}
 8009124:	c502      	stmia	r5!, {r1}
 8009126:	429a      	cmp	r2, r3
 8009128:	d8fb      	bhi.n	8009122 <__lshift+0xce>
 800912a:	e7f0      	b.n	800910e <__lshift+0xba>
 800912c:	08009ae8 	.word	0x08009ae8
 8009130:	08009b5c 	.word	0x08009b5c

08009134 <__mcmp>:
 8009134:	6902      	ldr	r2, [r0, #16]
 8009136:	690b      	ldr	r3, [r1, #16]
 8009138:	b530      	push	{r4, r5, lr}
 800913a:	0004      	movs	r4, r0
 800913c:	1ad0      	subs	r0, r2, r3
 800913e:	429a      	cmp	r2, r3
 8009140:	d10d      	bne.n	800915e <__mcmp+0x2a>
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	3414      	adds	r4, #20
 8009146:	3114      	adds	r1, #20
 8009148:	18e2      	adds	r2, r4, r3
 800914a:	18c9      	adds	r1, r1, r3
 800914c:	3a04      	subs	r2, #4
 800914e:	3904      	subs	r1, #4
 8009150:	6815      	ldr	r5, [r2, #0]
 8009152:	680b      	ldr	r3, [r1, #0]
 8009154:	429d      	cmp	r5, r3
 8009156:	d003      	beq.n	8009160 <__mcmp+0x2c>
 8009158:	2001      	movs	r0, #1
 800915a:	429d      	cmp	r5, r3
 800915c:	d303      	bcc.n	8009166 <__mcmp+0x32>
 800915e:	bd30      	pop	{r4, r5, pc}
 8009160:	4294      	cmp	r4, r2
 8009162:	d3f3      	bcc.n	800914c <__mcmp+0x18>
 8009164:	e7fb      	b.n	800915e <__mcmp+0x2a>
 8009166:	4240      	negs	r0, r0
 8009168:	e7f9      	b.n	800915e <__mcmp+0x2a>
	...

0800916c <__mdiff>:
 800916c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916e:	000e      	movs	r6, r1
 8009170:	0007      	movs	r7, r0
 8009172:	0011      	movs	r1, r2
 8009174:	0030      	movs	r0, r6
 8009176:	b087      	sub	sp, #28
 8009178:	0014      	movs	r4, r2
 800917a:	f7ff ffdb 	bl	8009134 <__mcmp>
 800917e:	1e05      	subs	r5, r0, #0
 8009180:	d110      	bne.n	80091a4 <__mdiff+0x38>
 8009182:	0001      	movs	r1, r0
 8009184:	0038      	movs	r0, r7
 8009186:	f7ff fd4f 	bl	8008c28 <_Balloc>
 800918a:	1e02      	subs	r2, r0, #0
 800918c:	d104      	bne.n	8009198 <__mdiff+0x2c>
 800918e:	4b40      	ldr	r3, [pc, #256]	; (8009290 <__mdiff+0x124>)
 8009190:	4940      	ldr	r1, [pc, #256]	; (8009294 <__mdiff+0x128>)
 8009192:	4841      	ldr	r0, [pc, #260]	; (8009298 <__mdiff+0x12c>)
 8009194:	f7fd fd14 	bl	8006bc0 <__assert_func>
 8009198:	2301      	movs	r3, #1
 800919a:	6145      	str	r5, [r0, #20]
 800919c:	6103      	str	r3, [r0, #16]
 800919e:	0010      	movs	r0, r2
 80091a0:	b007      	add	sp, #28
 80091a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a4:	2301      	movs	r3, #1
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	2800      	cmp	r0, #0
 80091aa:	db04      	blt.n	80091b6 <__mdiff+0x4a>
 80091ac:	0023      	movs	r3, r4
 80091ae:	0034      	movs	r4, r6
 80091b0:	001e      	movs	r6, r3
 80091b2:	2300      	movs	r3, #0
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	0038      	movs	r0, r7
 80091b8:	6861      	ldr	r1, [r4, #4]
 80091ba:	f7ff fd35 	bl	8008c28 <_Balloc>
 80091be:	1e02      	subs	r2, r0, #0
 80091c0:	d103      	bne.n	80091ca <__mdiff+0x5e>
 80091c2:	2190      	movs	r1, #144	; 0x90
 80091c4:	4b32      	ldr	r3, [pc, #200]	; (8009290 <__mdiff+0x124>)
 80091c6:	0089      	lsls	r1, r1, #2
 80091c8:	e7e3      	b.n	8009192 <__mdiff+0x26>
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	2700      	movs	r7, #0
 80091ce:	60c3      	str	r3, [r0, #12]
 80091d0:	6920      	ldr	r0, [r4, #16]
 80091d2:	3414      	adds	r4, #20
 80091d4:	9401      	str	r4, [sp, #4]
 80091d6:	9b01      	ldr	r3, [sp, #4]
 80091d8:	0084      	lsls	r4, r0, #2
 80091da:	191b      	adds	r3, r3, r4
 80091dc:	0034      	movs	r4, r6
 80091de:	9302      	str	r3, [sp, #8]
 80091e0:	6933      	ldr	r3, [r6, #16]
 80091e2:	3414      	adds	r4, #20
 80091e4:	0099      	lsls	r1, r3, #2
 80091e6:	1863      	adds	r3, r4, r1
 80091e8:	9303      	str	r3, [sp, #12]
 80091ea:	0013      	movs	r3, r2
 80091ec:	3314      	adds	r3, #20
 80091ee:	469c      	mov	ip, r3
 80091f0:	9305      	str	r3, [sp, #20]
 80091f2:	9b01      	ldr	r3, [sp, #4]
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	9b04      	ldr	r3, [sp, #16]
 80091f8:	cc02      	ldmia	r4!, {r1}
 80091fa:	cb20      	ldmia	r3!, {r5}
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	b2ab      	uxth	r3, r5
 8009200:	19df      	adds	r7, r3, r7
 8009202:	b28b      	uxth	r3, r1
 8009204:	1afb      	subs	r3, r7, r3
 8009206:	0c2d      	lsrs	r5, r5, #16
 8009208:	0c09      	lsrs	r1, r1, #16
 800920a:	1a69      	subs	r1, r5, r1
 800920c:	141d      	asrs	r5, r3, #16
 800920e:	1949      	adds	r1, r1, r5
 8009210:	140f      	asrs	r7, r1, #16
 8009212:	b29b      	uxth	r3, r3
 8009214:	0409      	lsls	r1, r1, #16
 8009216:	430b      	orrs	r3, r1
 8009218:	4661      	mov	r1, ip
 800921a:	c108      	stmia	r1!, {r3}
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	468c      	mov	ip, r1
 8009220:	42a3      	cmp	r3, r4
 8009222:	d8e8      	bhi.n	80091f6 <__mdiff+0x8a>
 8009224:	0031      	movs	r1, r6
 8009226:	9c03      	ldr	r4, [sp, #12]
 8009228:	3115      	adds	r1, #21
 800922a:	2304      	movs	r3, #4
 800922c:	428c      	cmp	r4, r1
 800922e:	d304      	bcc.n	800923a <__mdiff+0xce>
 8009230:	1ba3      	subs	r3, r4, r6
 8009232:	3b15      	subs	r3, #21
 8009234:	089b      	lsrs	r3, r3, #2
 8009236:	3301      	adds	r3, #1
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	9901      	ldr	r1, [sp, #4]
 800923c:	18cc      	adds	r4, r1, r3
 800923e:	9905      	ldr	r1, [sp, #20]
 8009240:	0026      	movs	r6, r4
 8009242:	18cb      	adds	r3, r1, r3
 8009244:	469c      	mov	ip, r3
 8009246:	9902      	ldr	r1, [sp, #8]
 8009248:	428e      	cmp	r6, r1
 800924a:	d310      	bcc.n	800926e <__mdiff+0x102>
 800924c:	9e02      	ldr	r6, [sp, #8]
 800924e:	1ee5      	subs	r5, r4, #3
 8009250:	2100      	movs	r1, #0
 8009252:	42ae      	cmp	r6, r5
 8009254:	d304      	bcc.n	8009260 <__mdiff+0xf4>
 8009256:	0031      	movs	r1, r6
 8009258:	3103      	adds	r1, #3
 800925a:	1b09      	subs	r1, r1, r4
 800925c:	0889      	lsrs	r1, r1, #2
 800925e:	0089      	lsls	r1, r1, #2
 8009260:	185b      	adds	r3, r3, r1
 8009262:	3b04      	subs	r3, #4
 8009264:	6819      	ldr	r1, [r3, #0]
 8009266:	2900      	cmp	r1, #0
 8009268:	d00f      	beq.n	800928a <__mdiff+0x11e>
 800926a:	6110      	str	r0, [r2, #16]
 800926c:	e797      	b.n	800919e <__mdiff+0x32>
 800926e:	ce02      	ldmia	r6!, {r1}
 8009270:	b28d      	uxth	r5, r1
 8009272:	19ed      	adds	r5, r5, r7
 8009274:	0c0f      	lsrs	r7, r1, #16
 8009276:	1429      	asrs	r1, r5, #16
 8009278:	1879      	adds	r1, r7, r1
 800927a:	140f      	asrs	r7, r1, #16
 800927c:	b2ad      	uxth	r5, r5
 800927e:	0409      	lsls	r1, r1, #16
 8009280:	430d      	orrs	r5, r1
 8009282:	4661      	mov	r1, ip
 8009284:	c120      	stmia	r1!, {r5}
 8009286:	468c      	mov	ip, r1
 8009288:	e7dd      	b.n	8009246 <__mdiff+0xda>
 800928a:	3801      	subs	r0, #1
 800928c:	e7e9      	b.n	8009262 <__mdiff+0xf6>
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	08009ae8 	.word	0x08009ae8
 8009294:	00000232 	.word	0x00000232
 8009298:	08009b5c 	.word	0x08009b5c

0800929c <__d2b>:
 800929c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800929e:	2101      	movs	r1, #1
 80092a0:	0014      	movs	r4, r2
 80092a2:	001e      	movs	r6, r3
 80092a4:	9f08      	ldr	r7, [sp, #32]
 80092a6:	f7ff fcbf 	bl	8008c28 <_Balloc>
 80092aa:	1e05      	subs	r5, r0, #0
 80092ac:	d105      	bne.n	80092ba <__d2b+0x1e>
 80092ae:	0002      	movs	r2, r0
 80092b0:	4b26      	ldr	r3, [pc, #152]	; (800934c <__d2b+0xb0>)
 80092b2:	4927      	ldr	r1, [pc, #156]	; (8009350 <__d2b+0xb4>)
 80092b4:	4827      	ldr	r0, [pc, #156]	; (8009354 <__d2b+0xb8>)
 80092b6:	f7fd fc83 	bl	8006bc0 <__assert_func>
 80092ba:	0333      	lsls	r3, r6, #12
 80092bc:	0076      	lsls	r6, r6, #1
 80092be:	0b1b      	lsrs	r3, r3, #12
 80092c0:	0d76      	lsrs	r6, r6, #21
 80092c2:	d124      	bne.n	800930e <__d2b+0x72>
 80092c4:	9301      	str	r3, [sp, #4]
 80092c6:	2c00      	cmp	r4, #0
 80092c8:	d027      	beq.n	800931a <__d2b+0x7e>
 80092ca:	4668      	mov	r0, sp
 80092cc:	9400      	str	r4, [sp, #0]
 80092ce:	f7ff fd71 	bl	8008db4 <__lo0bits>
 80092d2:	9c00      	ldr	r4, [sp, #0]
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d01e      	beq.n	8009316 <__d2b+0x7a>
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	2120      	movs	r1, #32
 80092dc:	001a      	movs	r2, r3
 80092de:	1a09      	subs	r1, r1, r0
 80092e0:	408a      	lsls	r2, r1
 80092e2:	40c3      	lsrs	r3, r0
 80092e4:	4322      	orrs	r2, r4
 80092e6:	616a      	str	r2, [r5, #20]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	9c01      	ldr	r4, [sp, #4]
 80092ec:	61ac      	str	r4, [r5, #24]
 80092ee:	1e63      	subs	r3, r4, #1
 80092f0:	419c      	sbcs	r4, r3
 80092f2:	3401      	adds	r4, #1
 80092f4:	612c      	str	r4, [r5, #16]
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	d018      	beq.n	800932c <__d2b+0x90>
 80092fa:	4b17      	ldr	r3, [pc, #92]	; (8009358 <__d2b+0xbc>)
 80092fc:	18f6      	adds	r6, r6, r3
 80092fe:	2335      	movs	r3, #53	; 0x35
 8009300:	1836      	adds	r6, r6, r0
 8009302:	1a18      	subs	r0, r3, r0
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	603e      	str	r6, [r7, #0]
 8009308:	6018      	str	r0, [r3, #0]
 800930a:	0028      	movs	r0, r5
 800930c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800930e:	2280      	movs	r2, #128	; 0x80
 8009310:	0352      	lsls	r2, r2, #13
 8009312:	4313      	orrs	r3, r2
 8009314:	e7d6      	b.n	80092c4 <__d2b+0x28>
 8009316:	616c      	str	r4, [r5, #20]
 8009318:	e7e7      	b.n	80092ea <__d2b+0x4e>
 800931a:	a801      	add	r0, sp, #4
 800931c:	f7ff fd4a 	bl	8008db4 <__lo0bits>
 8009320:	2401      	movs	r4, #1
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	612c      	str	r4, [r5, #16]
 8009326:	616b      	str	r3, [r5, #20]
 8009328:	3020      	adds	r0, #32
 800932a:	e7e4      	b.n	80092f6 <__d2b+0x5a>
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <__d2b+0xc0>)
 800932e:	18c0      	adds	r0, r0, r3
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <__d2b+0xc4>)
 8009332:	6038      	str	r0, [r7, #0]
 8009334:	18e3      	adds	r3, r4, r3
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	18eb      	adds	r3, r5, r3
 800933a:	6958      	ldr	r0, [r3, #20]
 800933c:	f7ff fd20 	bl	8008d80 <__hi0bits>
 8009340:	0164      	lsls	r4, r4, #5
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	1a24      	subs	r4, r4, r0
 8009346:	601c      	str	r4, [r3, #0]
 8009348:	e7df      	b.n	800930a <__d2b+0x6e>
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	08009ae8 	.word	0x08009ae8
 8009350:	0000030a 	.word	0x0000030a
 8009354:	08009b5c 	.word	0x08009b5c
 8009358:	fffffbcd 	.word	0xfffffbcd
 800935c:	fffffbce 	.word	0xfffffbce
 8009360:	3fffffff 	.word	0x3fffffff

08009364 <_calloc_r>:
 8009364:	434a      	muls	r2, r1
 8009366:	b570      	push	{r4, r5, r6, lr}
 8009368:	0011      	movs	r1, r2
 800936a:	0015      	movs	r5, r2
 800936c:	f000 f852 	bl	8009414 <_malloc_r>
 8009370:	1e04      	subs	r4, r0, #0
 8009372:	d003      	beq.n	800937c <_calloc_r+0x18>
 8009374:	002a      	movs	r2, r5
 8009376:	2100      	movs	r1, #0
 8009378:	f7fd fc7a 	bl	8006c70 <memset>
 800937c:	0020      	movs	r0, r4
 800937e:	bd70      	pop	{r4, r5, r6, pc}

08009380 <_free_r>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	0005      	movs	r5, r0
 8009384:	2900      	cmp	r1, #0
 8009386:	d010      	beq.n	80093aa <_free_r+0x2a>
 8009388:	1f0c      	subs	r4, r1, #4
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	da00      	bge.n	8009392 <_free_r+0x12>
 8009390:	18e4      	adds	r4, r4, r3
 8009392:	0028      	movs	r0, r5
 8009394:	f000 f9b4 	bl	8009700 <__malloc_lock>
 8009398:	4a1d      	ldr	r2, [pc, #116]	; (8009410 <_free_r+0x90>)
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d105      	bne.n	80093ac <_free_r+0x2c>
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	6014      	str	r4, [r2, #0]
 80093a4:	0028      	movs	r0, r5
 80093a6:	f000 f9b3 	bl	8009710 <__malloc_unlock>
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	d908      	bls.n	80093c2 <_free_r+0x42>
 80093b0:	6821      	ldr	r1, [r4, #0]
 80093b2:	1860      	adds	r0, r4, r1
 80093b4:	4283      	cmp	r3, r0
 80093b6:	d1f3      	bne.n	80093a0 <_free_r+0x20>
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	1841      	adds	r1, r0, r1
 80093be:	6021      	str	r1, [r4, #0]
 80093c0:	e7ee      	b.n	80093a0 <_free_r+0x20>
 80093c2:	001a      	movs	r2, r3
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <_free_r+0x4e>
 80093ca:	42a3      	cmp	r3, r4
 80093cc:	d9f9      	bls.n	80093c2 <_free_r+0x42>
 80093ce:	6811      	ldr	r1, [r2, #0]
 80093d0:	1850      	adds	r0, r2, r1
 80093d2:	42a0      	cmp	r0, r4
 80093d4:	d10b      	bne.n	80093ee <_free_r+0x6e>
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	1809      	adds	r1, r1, r0
 80093da:	1850      	adds	r0, r2, r1
 80093dc:	6011      	str	r1, [r2, #0]
 80093de:	4283      	cmp	r3, r0
 80093e0:	d1e0      	bne.n	80093a4 <_free_r+0x24>
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	1841      	adds	r1, r0, r1
 80093e8:	6011      	str	r1, [r2, #0]
 80093ea:	6053      	str	r3, [r2, #4]
 80093ec:	e7da      	b.n	80093a4 <_free_r+0x24>
 80093ee:	42a0      	cmp	r0, r4
 80093f0:	d902      	bls.n	80093f8 <_free_r+0x78>
 80093f2:	230c      	movs	r3, #12
 80093f4:	602b      	str	r3, [r5, #0]
 80093f6:	e7d5      	b.n	80093a4 <_free_r+0x24>
 80093f8:	6821      	ldr	r1, [r4, #0]
 80093fa:	1860      	adds	r0, r4, r1
 80093fc:	4283      	cmp	r3, r0
 80093fe:	d103      	bne.n	8009408 <_free_r+0x88>
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	1841      	adds	r1, r0, r1
 8009406:	6021      	str	r1, [r4, #0]
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	6054      	str	r4, [r2, #4]
 800940c:	e7ca      	b.n	80093a4 <_free_r+0x24>
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	200001fc 	.word	0x200001fc

08009414 <_malloc_r>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	2303      	movs	r3, #3
 8009418:	1ccd      	adds	r5, r1, #3
 800941a:	439d      	bics	r5, r3
 800941c:	3508      	adds	r5, #8
 800941e:	0006      	movs	r6, r0
 8009420:	2d0c      	cmp	r5, #12
 8009422:	d21f      	bcs.n	8009464 <_malloc_r+0x50>
 8009424:	250c      	movs	r5, #12
 8009426:	42a9      	cmp	r1, r5
 8009428:	d81e      	bhi.n	8009468 <_malloc_r+0x54>
 800942a:	0030      	movs	r0, r6
 800942c:	f000 f968 	bl	8009700 <__malloc_lock>
 8009430:	4925      	ldr	r1, [pc, #148]	; (80094c8 <_malloc_r+0xb4>)
 8009432:	680a      	ldr	r2, [r1, #0]
 8009434:	0014      	movs	r4, r2
 8009436:	2c00      	cmp	r4, #0
 8009438:	d11a      	bne.n	8009470 <_malloc_r+0x5c>
 800943a:	4f24      	ldr	r7, [pc, #144]	; (80094cc <_malloc_r+0xb8>)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d104      	bne.n	800944c <_malloc_r+0x38>
 8009442:	0021      	movs	r1, r4
 8009444:	0030      	movs	r0, r6
 8009446:	f000 f843 	bl	80094d0 <_sbrk_r>
 800944a:	6038      	str	r0, [r7, #0]
 800944c:	0029      	movs	r1, r5
 800944e:	0030      	movs	r0, r6
 8009450:	f000 f83e 	bl	80094d0 <_sbrk_r>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d12b      	bne.n	80094b0 <_malloc_r+0x9c>
 8009458:	230c      	movs	r3, #12
 800945a:	0030      	movs	r0, r6
 800945c:	6033      	str	r3, [r6, #0]
 800945e:	f000 f957 	bl	8009710 <__malloc_unlock>
 8009462:	e003      	b.n	800946c <_malloc_r+0x58>
 8009464:	2d00      	cmp	r5, #0
 8009466:	dade      	bge.n	8009426 <_malloc_r+0x12>
 8009468:	230c      	movs	r3, #12
 800946a:	6033      	str	r3, [r6, #0]
 800946c:	2000      	movs	r0, #0
 800946e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	1b5b      	subs	r3, r3, r5
 8009474:	d419      	bmi.n	80094aa <_malloc_r+0x96>
 8009476:	2b0b      	cmp	r3, #11
 8009478:	d903      	bls.n	8009482 <_malloc_r+0x6e>
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	18e4      	adds	r4, r4, r3
 800947e:	6025      	str	r5, [r4, #0]
 8009480:	e003      	b.n	800948a <_malloc_r+0x76>
 8009482:	6863      	ldr	r3, [r4, #4]
 8009484:	42a2      	cmp	r2, r4
 8009486:	d10e      	bne.n	80094a6 <_malloc_r+0x92>
 8009488:	600b      	str	r3, [r1, #0]
 800948a:	0030      	movs	r0, r6
 800948c:	f000 f940 	bl	8009710 <__malloc_unlock>
 8009490:	0020      	movs	r0, r4
 8009492:	2207      	movs	r2, #7
 8009494:	300b      	adds	r0, #11
 8009496:	1d23      	adds	r3, r4, #4
 8009498:	4390      	bics	r0, r2
 800949a:	1ac2      	subs	r2, r0, r3
 800949c:	4298      	cmp	r0, r3
 800949e:	d0e6      	beq.n	800946e <_malloc_r+0x5a>
 80094a0:	1a1b      	subs	r3, r3, r0
 80094a2:	50a3      	str	r3, [r4, r2]
 80094a4:	e7e3      	b.n	800946e <_malloc_r+0x5a>
 80094a6:	6053      	str	r3, [r2, #4]
 80094a8:	e7ef      	b.n	800948a <_malloc_r+0x76>
 80094aa:	0022      	movs	r2, r4
 80094ac:	6864      	ldr	r4, [r4, #4]
 80094ae:	e7c2      	b.n	8009436 <_malloc_r+0x22>
 80094b0:	2303      	movs	r3, #3
 80094b2:	1cc4      	adds	r4, r0, #3
 80094b4:	439c      	bics	r4, r3
 80094b6:	42a0      	cmp	r0, r4
 80094b8:	d0e1      	beq.n	800947e <_malloc_r+0x6a>
 80094ba:	1a21      	subs	r1, r4, r0
 80094bc:	0030      	movs	r0, r6
 80094be:	f000 f807 	bl	80094d0 <_sbrk_r>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	d1db      	bne.n	800947e <_malloc_r+0x6a>
 80094c6:	e7c7      	b.n	8009458 <_malloc_r+0x44>
 80094c8:	200001fc 	.word	0x200001fc
 80094cc:	20000200 	.word	0x20000200

080094d0 <_sbrk_r>:
 80094d0:	2300      	movs	r3, #0
 80094d2:	b570      	push	{r4, r5, r6, lr}
 80094d4:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_sbrk_r+0x20>)
 80094d6:	0004      	movs	r4, r0
 80094d8:	0008      	movs	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7fa f914 	bl	8003708 <_sbrk>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d103      	bne.n	80094ec <_sbrk_r+0x1c>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d000      	beq.n	80094ec <_sbrk_r+0x1c>
 80094ea:	6023      	str	r3, [r4, #0]
 80094ec:	bd70      	pop	{r4, r5, r6, pc}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	20000340 	.word	0x20000340

080094f4 <_raise_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	0004      	movs	r4, r0
 80094f8:	000d      	movs	r5, r1
 80094fa:	291f      	cmp	r1, #31
 80094fc:	d904      	bls.n	8009508 <_raise_r+0x14>
 80094fe:	2316      	movs	r3, #22
 8009500:	6003      	str	r3, [r0, #0]
 8009502:	2001      	movs	r0, #1
 8009504:	4240      	negs	r0, r0
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <_raise_r+0x24>
 800950e:	008a      	lsls	r2, r1, #2
 8009510:	189b      	adds	r3, r3, r2
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	2a00      	cmp	r2, #0
 8009516:	d108      	bne.n	800952a <_raise_r+0x36>
 8009518:	0020      	movs	r0, r4
 800951a:	f000 f831 	bl	8009580 <_getpid_r>
 800951e:	002a      	movs	r2, r5
 8009520:	0001      	movs	r1, r0
 8009522:	0020      	movs	r0, r4
 8009524:	f000 f81a 	bl	800955c <_kill_r>
 8009528:	e7ed      	b.n	8009506 <_raise_r+0x12>
 800952a:	2000      	movs	r0, #0
 800952c:	2a01      	cmp	r2, #1
 800952e:	d0ea      	beq.n	8009506 <_raise_r+0x12>
 8009530:	1c51      	adds	r1, r2, #1
 8009532:	d103      	bne.n	800953c <_raise_r+0x48>
 8009534:	2316      	movs	r3, #22
 8009536:	3001      	adds	r0, #1
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	e7e4      	b.n	8009506 <_raise_r+0x12>
 800953c:	2400      	movs	r4, #0
 800953e:	0028      	movs	r0, r5
 8009540:	601c      	str	r4, [r3, #0]
 8009542:	4790      	blx	r2
 8009544:	0020      	movs	r0, r4
 8009546:	e7de      	b.n	8009506 <_raise_r+0x12>

08009548 <raise>:
 8009548:	b510      	push	{r4, lr}
 800954a:	4b03      	ldr	r3, [pc, #12]	; (8009558 <raise+0x10>)
 800954c:	0001      	movs	r1, r0
 800954e:	6818      	ldr	r0, [r3, #0]
 8009550:	f7ff ffd0 	bl	80094f4 <_raise_r>
 8009554:	bd10      	pop	{r4, pc}
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	2000000c 	.word	0x2000000c

0800955c <_kill_r>:
 800955c:	2300      	movs	r3, #0
 800955e:	b570      	push	{r4, r5, r6, lr}
 8009560:	4d06      	ldr	r5, [pc, #24]	; (800957c <_kill_r+0x20>)
 8009562:	0004      	movs	r4, r0
 8009564:	0008      	movs	r0, r1
 8009566:	0011      	movs	r1, r2
 8009568:	602b      	str	r3, [r5, #0]
 800956a:	f7fa f84c 	bl	8003606 <_kill>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d103      	bne.n	800957a <_kill_r+0x1e>
 8009572:	682b      	ldr	r3, [r5, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d000      	beq.n	800957a <_kill_r+0x1e>
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	20000340 	.word	0x20000340

08009580 <_getpid_r>:
 8009580:	b510      	push	{r4, lr}
 8009582:	f7fa f83a 	bl	80035fa <_getpid>
 8009586:	bd10      	pop	{r4, pc}

08009588 <__sread>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	000c      	movs	r4, r1
 800958c:	250e      	movs	r5, #14
 800958e:	5f49      	ldrsh	r1, [r1, r5]
 8009590:	f000 f8c6 	bl	8009720 <_read_r>
 8009594:	2800      	cmp	r0, #0
 8009596:	db03      	blt.n	80095a0 <__sread+0x18>
 8009598:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800959a:	181b      	adds	r3, r3, r0
 800959c:	6563      	str	r3, [r4, #84]	; 0x54
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	4a02      	ldr	r2, [pc, #8]	; (80095ac <__sread+0x24>)
 80095a4:	4013      	ands	r3, r2
 80095a6:	81a3      	strh	r3, [r4, #12]
 80095a8:	e7f9      	b.n	800959e <__sread+0x16>
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	ffffefff 	.word	0xffffefff

080095b0 <__swrite>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	001f      	movs	r7, r3
 80095b4:	898b      	ldrh	r3, [r1, #12]
 80095b6:	0005      	movs	r5, r0
 80095b8:	000c      	movs	r4, r1
 80095ba:	0016      	movs	r6, r2
 80095bc:	05db      	lsls	r3, r3, #23
 80095be:	d505      	bpl.n	80095cc <__swrite+0x1c>
 80095c0:	230e      	movs	r3, #14
 80095c2:	5ec9      	ldrsh	r1, [r1, r3]
 80095c4:	2200      	movs	r2, #0
 80095c6:	2302      	movs	r3, #2
 80095c8:	f000 f874 	bl	80096b4 <_lseek_r>
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	4a05      	ldr	r2, [pc, #20]	; (80095e4 <__swrite+0x34>)
 80095d0:	0028      	movs	r0, r5
 80095d2:	4013      	ands	r3, r2
 80095d4:	81a3      	strh	r3, [r4, #12]
 80095d6:	0032      	movs	r2, r6
 80095d8:	230e      	movs	r3, #14
 80095da:	5ee1      	ldrsh	r1, [r4, r3]
 80095dc:	003b      	movs	r3, r7
 80095de:	f000 f81f 	bl	8009620 <_write_r>
 80095e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095e4:	ffffefff 	.word	0xffffefff

080095e8 <__sseek>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	000c      	movs	r4, r1
 80095ec:	250e      	movs	r5, #14
 80095ee:	5f49      	ldrsh	r1, [r1, r5]
 80095f0:	f000 f860 	bl	80096b4 <_lseek_r>
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	1c42      	adds	r2, r0, #1
 80095f8:	d103      	bne.n	8009602 <__sseek+0x1a>
 80095fa:	4a05      	ldr	r2, [pc, #20]	; (8009610 <__sseek+0x28>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	bd70      	pop	{r4, r5, r6, pc}
 8009602:	2280      	movs	r2, #128	; 0x80
 8009604:	0152      	lsls	r2, r2, #5
 8009606:	4313      	orrs	r3, r2
 8009608:	81a3      	strh	r3, [r4, #12]
 800960a:	6560      	str	r0, [r4, #84]	; 0x54
 800960c:	e7f8      	b.n	8009600 <__sseek+0x18>
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	ffffefff 	.word	0xffffefff

08009614 <__sclose>:
 8009614:	b510      	push	{r4, lr}
 8009616:	230e      	movs	r3, #14
 8009618:	5ec9      	ldrsh	r1, [r1, r3]
 800961a:	f000 f815 	bl	8009648 <_close_r>
 800961e:	bd10      	pop	{r4, pc}

08009620 <_write_r>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	0004      	movs	r4, r0
 8009624:	0008      	movs	r0, r1
 8009626:	0011      	movs	r1, r2
 8009628:	001a      	movs	r2, r3
 800962a:	2300      	movs	r3, #0
 800962c:	4d05      	ldr	r5, [pc, #20]	; (8009644 <_write_r+0x24>)
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	f7fa f822 	bl	8003678 <_write>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d103      	bne.n	8009640 <_write_r+0x20>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d000      	beq.n	8009640 <_write_r+0x20>
 800963e:	6023      	str	r3, [r4, #0]
 8009640:	bd70      	pop	{r4, r5, r6, pc}
 8009642:	46c0      	nop			; (mov r8, r8)
 8009644:	20000340 	.word	0x20000340

08009648 <_close_r>:
 8009648:	2300      	movs	r3, #0
 800964a:	b570      	push	{r4, r5, r6, lr}
 800964c:	4d06      	ldr	r5, [pc, #24]	; (8009668 <_close_r+0x20>)
 800964e:	0004      	movs	r4, r0
 8009650:	0008      	movs	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7fa f82c 	bl	80036b0 <_close>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d103      	bne.n	8009664 <_close_r+0x1c>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d000      	beq.n	8009664 <_close_r+0x1c>
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	20000340 	.word	0x20000340

0800966c <_fstat_r>:
 800966c:	2300      	movs	r3, #0
 800966e:	b570      	push	{r4, r5, r6, lr}
 8009670:	4d06      	ldr	r5, [pc, #24]	; (800968c <_fstat_r+0x20>)
 8009672:	0004      	movs	r4, r0
 8009674:	0008      	movs	r0, r1
 8009676:	0011      	movs	r1, r2
 8009678:	602b      	str	r3, [r5, #0]
 800967a:	f7fa f823 	bl	80036c4 <_fstat>
 800967e:	1c43      	adds	r3, r0, #1
 8009680:	d103      	bne.n	800968a <_fstat_r+0x1e>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d000      	beq.n	800968a <_fstat_r+0x1e>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	20000340 	.word	0x20000340

08009690 <_isatty_r>:
 8009690:	2300      	movs	r3, #0
 8009692:	b570      	push	{r4, r5, r6, lr}
 8009694:	4d06      	ldr	r5, [pc, #24]	; (80096b0 <_isatty_r+0x20>)
 8009696:	0004      	movs	r4, r0
 8009698:	0008      	movs	r0, r1
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	f7fa f820 	bl	80036e0 <_isatty>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d103      	bne.n	80096ac <_isatty_r+0x1c>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d000      	beq.n	80096ac <_isatty_r+0x1c>
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
 80096ae:	46c0      	nop			; (mov r8, r8)
 80096b0:	20000340 	.word	0x20000340

080096b4 <_lseek_r>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	0004      	movs	r4, r0
 80096b8:	0008      	movs	r0, r1
 80096ba:	0011      	movs	r1, r2
 80096bc:	001a      	movs	r2, r3
 80096be:	2300      	movs	r3, #0
 80096c0:	4d05      	ldr	r5, [pc, #20]	; (80096d8 <_lseek_r+0x24>)
 80096c2:	602b      	str	r3, [r5, #0]
 80096c4:	f7fa f815 	bl	80036f2 <_lseek>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d103      	bne.n	80096d4 <_lseek_r+0x20>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d000      	beq.n	80096d4 <_lseek_r+0x20>
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	bd70      	pop	{r4, r5, r6, pc}
 80096d6:	46c0      	nop			; (mov r8, r8)
 80096d8:	20000340 	.word	0x20000340

080096dc <__ascii_mbtowc>:
 80096dc:	b082      	sub	sp, #8
 80096de:	2900      	cmp	r1, #0
 80096e0:	d100      	bne.n	80096e4 <__ascii_mbtowc+0x8>
 80096e2:	a901      	add	r1, sp, #4
 80096e4:	1e10      	subs	r0, r2, #0
 80096e6:	d006      	beq.n	80096f6 <__ascii_mbtowc+0x1a>
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d006      	beq.n	80096fa <__ascii_mbtowc+0x1e>
 80096ec:	7813      	ldrb	r3, [r2, #0]
 80096ee:	600b      	str	r3, [r1, #0]
 80096f0:	7810      	ldrb	r0, [r2, #0]
 80096f2:	1e43      	subs	r3, r0, #1
 80096f4:	4198      	sbcs	r0, r3
 80096f6:	b002      	add	sp, #8
 80096f8:	4770      	bx	lr
 80096fa:	2002      	movs	r0, #2
 80096fc:	4240      	negs	r0, r0
 80096fe:	e7fa      	b.n	80096f6 <__ascii_mbtowc+0x1a>

08009700 <__malloc_lock>:
 8009700:	b510      	push	{r4, lr}
 8009702:	4802      	ldr	r0, [pc, #8]	; (800970c <__malloc_lock+0xc>)
 8009704:	f7ff fa03 	bl	8008b0e <__retarget_lock_acquire_recursive>
 8009708:	bd10      	pop	{r4, pc}
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	20000338 	.word	0x20000338

08009710 <__malloc_unlock>:
 8009710:	b510      	push	{r4, lr}
 8009712:	4802      	ldr	r0, [pc, #8]	; (800971c <__malloc_unlock+0xc>)
 8009714:	f7ff f9fc 	bl	8008b10 <__retarget_lock_release_recursive>
 8009718:	bd10      	pop	{r4, pc}
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	20000338 	.word	0x20000338

08009720 <_read_r>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	0004      	movs	r4, r0
 8009724:	0008      	movs	r0, r1
 8009726:	0011      	movs	r1, r2
 8009728:	001a      	movs	r2, r3
 800972a:	2300      	movs	r3, #0
 800972c:	4d05      	ldr	r5, [pc, #20]	; (8009744 <_read_r+0x24>)
 800972e:	602b      	str	r3, [r5, #0]
 8009730:	f7f9 ff85 	bl	800363e <_read>
 8009734:	1c43      	adds	r3, r0, #1
 8009736:	d103      	bne.n	8009740 <_read_r+0x20>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d000      	beq.n	8009740 <_read_r+0x20>
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	bd70      	pop	{r4, r5, r6, pc}
 8009742:	46c0      	nop			; (mov r8, r8)
 8009744:	20000340 	.word	0x20000340

08009748 <__ascii_wctomb>:
 8009748:	0003      	movs	r3, r0
 800974a:	1e08      	subs	r0, r1, #0
 800974c:	d005      	beq.n	800975a <__ascii_wctomb+0x12>
 800974e:	2aff      	cmp	r2, #255	; 0xff
 8009750:	d904      	bls.n	800975c <__ascii_wctomb+0x14>
 8009752:	228a      	movs	r2, #138	; 0x8a
 8009754:	2001      	movs	r0, #1
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	4240      	negs	r0, r0
 800975a:	4770      	bx	lr
 800975c:	2001      	movs	r0, #1
 800975e:	700a      	strb	r2, [r1, #0]
 8009760:	e7fb      	b.n	800975a <__ascii_wctomb+0x12>
	...

08009764 <_init>:
 8009764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976a:	bc08      	pop	{r3}
 800976c:	469e      	mov	lr, r3
 800976e:	4770      	bx	lr

08009770 <_fini>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009776:	bc08      	pop	{r3}
 8009778:	469e      	mov	lr, r3
 800977a:	4770      	bx	lr
