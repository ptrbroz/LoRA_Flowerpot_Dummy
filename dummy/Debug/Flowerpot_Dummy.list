
Flowerpot_Dummy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000964c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08009710  08009710  00019710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d50  08009d50  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d58  08009d58  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d58  08009d58  00019d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001dc  08009f3c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08009f3c  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d99f  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f29  00000000  00000000  0002dba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002fad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00030688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159e3  00000000  00000000  00031168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef8d  00000000  00000000  00046b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821f1  00000000  00000000  00055ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7cc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  000d7d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080096f4 	.word	0x080096f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	080096f4 	.word	0x080096f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fca3 	bl	8001d88 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fbf3 	bl	8001c38 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc95 	bl	8001d88 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc8b 	bl	8001d88 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc1b 	bl	8001cbc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc11 	bl	8001cbc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 fb82 	bl	8002c6c <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 fb7d 	bl	8002c6c <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_fdiv>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	464f      	mov	r7, r9
 80006e0:	4646      	mov	r6, r8
 80006e2:	46d6      	mov	lr, sl
 80006e4:	0245      	lsls	r5, r0, #9
 80006e6:	b5c0      	push	{r6, r7, lr}
 80006e8:	0047      	lsls	r7, r0, #1
 80006ea:	1c0c      	adds	r4, r1, #0
 80006ec:	0a6d      	lsrs	r5, r5, #9
 80006ee:	0e3f      	lsrs	r7, r7, #24
 80006f0:	0fc6      	lsrs	r6, r0, #31
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fdiv+0x1c>
 80006f6:	e070      	b.n	80007da <__aeabi_fdiv+0xfe>
 80006f8:	2fff      	cmp	r7, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fdiv+0x22>
 80006fc:	e075      	b.n	80007ea <__aeabi_fdiv+0x10e>
 80006fe:	00eb      	lsls	r3, r5, #3
 8000700:	2580      	movs	r5, #128	; 0x80
 8000702:	04ed      	lsls	r5, r5, #19
 8000704:	431d      	orrs	r5, r3
 8000706:	2300      	movs	r3, #0
 8000708:	4699      	mov	r9, r3
 800070a:	469a      	mov	sl, r3
 800070c:	3f7f      	subs	r7, #127	; 0x7f
 800070e:	0260      	lsls	r0, r4, #9
 8000710:	0a43      	lsrs	r3, r0, #9
 8000712:	4698      	mov	r8, r3
 8000714:	0063      	lsls	r3, r4, #1
 8000716:	0e1b      	lsrs	r3, r3, #24
 8000718:	0fe4      	lsrs	r4, r4, #31
 800071a:	2b00      	cmp	r3, #0
 800071c:	d04e      	beq.n	80007bc <__aeabi_fdiv+0xe0>
 800071e:	2bff      	cmp	r3, #255	; 0xff
 8000720:	d046      	beq.n	80007b0 <__aeabi_fdiv+0xd4>
 8000722:	4642      	mov	r2, r8
 8000724:	00d0      	lsls	r0, r2, #3
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	04d2      	lsls	r2, r2, #19
 800072a:	4302      	orrs	r2, r0
 800072c:	4690      	mov	r8, r2
 800072e:	2200      	movs	r2, #0
 8000730:	3b7f      	subs	r3, #127	; 0x7f
 8000732:	0031      	movs	r1, r6
 8000734:	1aff      	subs	r7, r7, r3
 8000736:	464b      	mov	r3, r9
 8000738:	4061      	eors	r1, r4
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4313      	orrs	r3, r2
 800073e:	2b0f      	cmp	r3, #15
 8000740:	d900      	bls.n	8000744 <__aeabi_fdiv+0x68>
 8000742:	e0b5      	b.n	80008b0 <__aeabi_fdiv+0x1d4>
 8000744:	486e      	ldr	r0, [pc, #440]	; (8000900 <__aeabi_fdiv+0x224>)
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	58c3      	ldr	r3, [r0, r3]
 800074a:	469f      	mov	pc, r3
 800074c:	2300      	movs	r3, #0
 800074e:	4698      	mov	r8, r3
 8000750:	0026      	movs	r6, r4
 8000752:	4645      	mov	r5, r8
 8000754:	4692      	mov	sl, r2
 8000756:	4653      	mov	r3, sl
 8000758:	2b02      	cmp	r3, #2
 800075a:	d100      	bne.n	800075e <__aeabi_fdiv+0x82>
 800075c:	e089      	b.n	8000872 <__aeabi_fdiv+0x196>
 800075e:	2b03      	cmp	r3, #3
 8000760:	d100      	bne.n	8000764 <__aeabi_fdiv+0x88>
 8000762:	e09e      	b.n	80008a2 <__aeabi_fdiv+0x1c6>
 8000764:	2b01      	cmp	r3, #1
 8000766:	d018      	beq.n	800079a <__aeabi_fdiv+0xbe>
 8000768:	003b      	movs	r3, r7
 800076a:	337f      	adds	r3, #127	; 0x7f
 800076c:	2b00      	cmp	r3, #0
 800076e:	dd69      	ble.n	8000844 <__aeabi_fdiv+0x168>
 8000770:	076a      	lsls	r2, r5, #29
 8000772:	d004      	beq.n	800077e <__aeabi_fdiv+0xa2>
 8000774:	220f      	movs	r2, #15
 8000776:	402a      	ands	r2, r5
 8000778:	2a04      	cmp	r2, #4
 800077a:	d000      	beq.n	800077e <__aeabi_fdiv+0xa2>
 800077c:	3504      	adds	r5, #4
 800077e:	012a      	lsls	r2, r5, #4
 8000780:	d503      	bpl.n	800078a <__aeabi_fdiv+0xae>
 8000782:	4b60      	ldr	r3, [pc, #384]	; (8000904 <__aeabi_fdiv+0x228>)
 8000784:	401d      	ands	r5, r3
 8000786:	003b      	movs	r3, r7
 8000788:	3380      	adds	r3, #128	; 0x80
 800078a:	2bfe      	cmp	r3, #254	; 0xfe
 800078c:	dd00      	ble.n	8000790 <__aeabi_fdiv+0xb4>
 800078e:	e070      	b.n	8000872 <__aeabi_fdiv+0x196>
 8000790:	01ad      	lsls	r5, r5, #6
 8000792:	0a6d      	lsrs	r5, r5, #9
 8000794:	b2d8      	uxtb	r0, r3
 8000796:	e002      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000798:	000e      	movs	r6, r1
 800079a:	2000      	movs	r0, #0
 800079c:	2500      	movs	r5, #0
 800079e:	05c0      	lsls	r0, r0, #23
 80007a0:	4328      	orrs	r0, r5
 80007a2:	07f6      	lsls	r6, r6, #31
 80007a4:	4330      	orrs	r0, r6
 80007a6:	bce0      	pop	{r5, r6, r7}
 80007a8:	46ba      	mov	sl, r7
 80007aa:	46b1      	mov	r9, r6
 80007ac:	46a8      	mov	r8, r5
 80007ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b0:	4643      	mov	r3, r8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d13f      	bne.n	8000836 <__aeabi_fdiv+0x15a>
 80007b6:	2202      	movs	r2, #2
 80007b8:	3fff      	subs	r7, #255	; 0xff
 80007ba:	e003      	b.n	80007c4 <__aeabi_fdiv+0xe8>
 80007bc:	4643      	mov	r3, r8
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d12d      	bne.n	800081e <__aeabi_fdiv+0x142>
 80007c2:	2201      	movs	r2, #1
 80007c4:	0031      	movs	r1, r6
 80007c6:	464b      	mov	r3, r9
 80007c8:	4061      	eors	r1, r4
 80007ca:	b2c9      	uxtb	r1, r1
 80007cc:	4313      	orrs	r3, r2
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d834      	bhi.n	800083c <__aeabi_fdiv+0x160>
 80007d2:	484d      	ldr	r0, [pc, #308]	; (8000908 <__aeabi_fdiv+0x22c>)
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	58c3      	ldr	r3, [r0, r3]
 80007d8:	469f      	mov	pc, r3
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d113      	bne.n	8000806 <__aeabi_fdiv+0x12a>
 80007de:	2304      	movs	r3, #4
 80007e0:	4699      	mov	r9, r3
 80007e2:	3b03      	subs	r3, #3
 80007e4:	2700      	movs	r7, #0
 80007e6:	469a      	mov	sl, r3
 80007e8:	e791      	b.n	800070e <__aeabi_fdiv+0x32>
 80007ea:	2d00      	cmp	r5, #0
 80007ec:	d105      	bne.n	80007fa <__aeabi_fdiv+0x11e>
 80007ee:	2308      	movs	r3, #8
 80007f0:	4699      	mov	r9, r3
 80007f2:	3b06      	subs	r3, #6
 80007f4:	27ff      	movs	r7, #255	; 0xff
 80007f6:	469a      	mov	sl, r3
 80007f8:	e789      	b.n	800070e <__aeabi_fdiv+0x32>
 80007fa:	230c      	movs	r3, #12
 80007fc:	4699      	mov	r9, r3
 80007fe:	3b09      	subs	r3, #9
 8000800:	27ff      	movs	r7, #255	; 0xff
 8000802:	469a      	mov	sl, r3
 8000804:	e783      	b.n	800070e <__aeabi_fdiv+0x32>
 8000806:	0028      	movs	r0, r5
 8000808:	f002 fa12 	bl	8002c30 <__clzsi2>
 800080c:	2776      	movs	r7, #118	; 0x76
 800080e:	1f43      	subs	r3, r0, #5
 8000810:	409d      	lsls	r5, r3
 8000812:	2300      	movs	r3, #0
 8000814:	427f      	negs	r7, r7
 8000816:	4699      	mov	r9, r3
 8000818:	469a      	mov	sl, r3
 800081a:	1a3f      	subs	r7, r7, r0
 800081c:	e777      	b.n	800070e <__aeabi_fdiv+0x32>
 800081e:	4640      	mov	r0, r8
 8000820:	f002 fa06 	bl	8002c30 <__clzsi2>
 8000824:	4642      	mov	r2, r8
 8000826:	1f43      	subs	r3, r0, #5
 8000828:	409a      	lsls	r2, r3
 800082a:	2376      	movs	r3, #118	; 0x76
 800082c:	425b      	negs	r3, r3
 800082e:	4690      	mov	r8, r2
 8000830:	1a1b      	subs	r3, r3, r0
 8000832:	2200      	movs	r2, #0
 8000834:	e77d      	b.n	8000732 <__aeabi_fdiv+0x56>
 8000836:	23ff      	movs	r3, #255	; 0xff
 8000838:	2203      	movs	r2, #3
 800083a:	e77a      	b.n	8000732 <__aeabi_fdiv+0x56>
 800083c:	000e      	movs	r6, r1
 800083e:	20ff      	movs	r0, #255	; 0xff
 8000840:	2500      	movs	r5, #0
 8000842:	e7ac      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000844:	2001      	movs	r0, #1
 8000846:	1ac0      	subs	r0, r0, r3
 8000848:	281b      	cmp	r0, #27
 800084a:	dca6      	bgt.n	800079a <__aeabi_fdiv+0xbe>
 800084c:	379e      	adds	r7, #158	; 0x9e
 800084e:	002a      	movs	r2, r5
 8000850:	40bd      	lsls	r5, r7
 8000852:	40c2      	lsrs	r2, r0
 8000854:	1e6b      	subs	r3, r5, #1
 8000856:	419d      	sbcs	r5, r3
 8000858:	4315      	orrs	r5, r2
 800085a:	076b      	lsls	r3, r5, #29
 800085c:	d004      	beq.n	8000868 <__aeabi_fdiv+0x18c>
 800085e:	230f      	movs	r3, #15
 8000860:	402b      	ands	r3, r5
 8000862:	2b04      	cmp	r3, #4
 8000864:	d000      	beq.n	8000868 <__aeabi_fdiv+0x18c>
 8000866:	3504      	adds	r5, #4
 8000868:	016b      	lsls	r3, r5, #5
 800086a:	d544      	bpl.n	80008f6 <__aeabi_fdiv+0x21a>
 800086c:	2001      	movs	r0, #1
 800086e:	2500      	movs	r5, #0
 8000870:	e795      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000872:	20ff      	movs	r0, #255	; 0xff
 8000874:	2500      	movs	r5, #0
 8000876:	e792      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000878:	2580      	movs	r5, #128	; 0x80
 800087a:	2600      	movs	r6, #0
 800087c:	20ff      	movs	r0, #255	; 0xff
 800087e:	03ed      	lsls	r5, r5, #15
 8000880:	e78d      	b.n	800079e <__aeabi_fdiv+0xc2>
 8000882:	2300      	movs	r3, #0
 8000884:	4698      	mov	r8, r3
 8000886:	2080      	movs	r0, #128	; 0x80
 8000888:	03c0      	lsls	r0, r0, #15
 800088a:	4205      	tst	r5, r0
 800088c:	d009      	beq.n	80008a2 <__aeabi_fdiv+0x1c6>
 800088e:	4643      	mov	r3, r8
 8000890:	4203      	tst	r3, r0
 8000892:	d106      	bne.n	80008a2 <__aeabi_fdiv+0x1c6>
 8000894:	4645      	mov	r5, r8
 8000896:	4305      	orrs	r5, r0
 8000898:	026d      	lsls	r5, r5, #9
 800089a:	0026      	movs	r6, r4
 800089c:	20ff      	movs	r0, #255	; 0xff
 800089e:	0a6d      	lsrs	r5, r5, #9
 80008a0:	e77d      	b.n	800079e <__aeabi_fdiv+0xc2>
 80008a2:	2080      	movs	r0, #128	; 0x80
 80008a4:	03c0      	lsls	r0, r0, #15
 80008a6:	4305      	orrs	r5, r0
 80008a8:	026d      	lsls	r5, r5, #9
 80008aa:	20ff      	movs	r0, #255	; 0xff
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	e776      	b.n	800079e <__aeabi_fdiv+0xc2>
 80008b0:	4642      	mov	r2, r8
 80008b2:	016b      	lsls	r3, r5, #5
 80008b4:	0150      	lsls	r0, r2, #5
 80008b6:	4283      	cmp	r3, r0
 80008b8:	d219      	bcs.n	80008ee <__aeabi_fdiv+0x212>
 80008ba:	221b      	movs	r2, #27
 80008bc:	2500      	movs	r5, #0
 80008be:	3f01      	subs	r7, #1
 80008c0:	2601      	movs	r6, #1
 80008c2:	001c      	movs	r4, r3
 80008c4:	006d      	lsls	r5, r5, #1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	db01      	blt.n	80008d0 <__aeabi_fdiv+0x1f4>
 80008cc:	4298      	cmp	r0, r3
 80008ce:	d801      	bhi.n	80008d4 <__aeabi_fdiv+0x1f8>
 80008d0:	1a1b      	subs	r3, r3, r0
 80008d2:	4335      	orrs	r5, r6
 80008d4:	3a01      	subs	r2, #1
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d1f3      	bne.n	80008c2 <__aeabi_fdiv+0x1e6>
 80008da:	1e5a      	subs	r2, r3, #1
 80008dc:	4193      	sbcs	r3, r2
 80008de:	431d      	orrs	r5, r3
 80008e0:	003b      	movs	r3, r7
 80008e2:	337f      	adds	r3, #127	; 0x7f
 80008e4:	000e      	movs	r6, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dd00      	ble.n	80008ec <__aeabi_fdiv+0x210>
 80008ea:	e741      	b.n	8000770 <__aeabi_fdiv+0x94>
 80008ec:	e7aa      	b.n	8000844 <__aeabi_fdiv+0x168>
 80008ee:	221a      	movs	r2, #26
 80008f0:	2501      	movs	r5, #1
 80008f2:	1a1b      	subs	r3, r3, r0
 80008f4:	e7e4      	b.n	80008c0 <__aeabi_fdiv+0x1e4>
 80008f6:	01ad      	lsls	r5, r5, #6
 80008f8:	2000      	movs	r0, #0
 80008fa:	0a6d      	lsrs	r5, r5, #9
 80008fc:	e74f      	b.n	800079e <__aeabi_fdiv+0xc2>
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	080097b8 	.word	0x080097b8
 8000904:	f7ffffff 	.word	0xf7ffffff
 8000908:	080097f8 	.word	0x080097f8

0800090c <__aeabi_fmul>:
 800090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090e:	464f      	mov	r7, r9
 8000910:	4646      	mov	r6, r8
 8000912:	46d6      	mov	lr, sl
 8000914:	0244      	lsls	r4, r0, #9
 8000916:	0045      	lsls	r5, r0, #1
 8000918:	b5c0      	push	{r6, r7, lr}
 800091a:	0a64      	lsrs	r4, r4, #9
 800091c:	1c0f      	adds	r7, r1, #0
 800091e:	0e2d      	lsrs	r5, r5, #24
 8000920:	0fc6      	lsrs	r6, r0, #31
 8000922:	2d00      	cmp	r5, #0
 8000924:	d100      	bne.n	8000928 <__aeabi_fmul+0x1c>
 8000926:	e08d      	b.n	8000a44 <__aeabi_fmul+0x138>
 8000928:	2dff      	cmp	r5, #255	; 0xff
 800092a:	d100      	bne.n	800092e <__aeabi_fmul+0x22>
 800092c:	e092      	b.n	8000a54 <__aeabi_fmul+0x148>
 800092e:	2300      	movs	r3, #0
 8000930:	2080      	movs	r0, #128	; 0x80
 8000932:	4699      	mov	r9, r3
 8000934:	469a      	mov	sl, r3
 8000936:	00e4      	lsls	r4, r4, #3
 8000938:	04c0      	lsls	r0, r0, #19
 800093a:	4304      	orrs	r4, r0
 800093c:	3d7f      	subs	r5, #127	; 0x7f
 800093e:	0278      	lsls	r0, r7, #9
 8000940:	0a43      	lsrs	r3, r0, #9
 8000942:	4698      	mov	r8, r3
 8000944:	007b      	lsls	r3, r7, #1
 8000946:	0e1b      	lsrs	r3, r3, #24
 8000948:	0fff      	lsrs	r7, r7, #31
 800094a:	2b00      	cmp	r3, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fmul+0x44>
 800094e:	e070      	b.n	8000a32 <__aeabi_fmul+0x126>
 8000950:	2bff      	cmp	r3, #255	; 0xff
 8000952:	d100      	bne.n	8000956 <__aeabi_fmul+0x4a>
 8000954:	e086      	b.n	8000a64 <__aeabi_fmul+0x158>
 8000956:	4642      	mov	r2, r8
 8000958:	00d0      	lsls	r0, r2, #3
 800095a:	2280      	movs	r2, #128	; 0x80
 800095c:	3b7f      	subs	r3, #127	; 0x7f
 800095e:	18ed      	adds	r5, r5, r3
 8000960:	2300      	movs	r3, #0
 8000962:	04d2      	lsls	r2, r2, #19
 8000964:	4302      	orrs	r2, r0
 8000966:	4690      	mov	r8, r2
 8000968:	469c      	mov	ip, r3
 800096a:	0031      	movs	r1, r6
 800096c:	464b      	mov	r3, r9
 800096e:	4079      	eors	r1, r7
 8000970:	1c68      	adds	r0, r5, #1
 8000972:	2b0f      	cmp	r3, #15
 8000974:	d81c      	bhi.n	80009b0 <__aeabi_fmul+0xa4>
 8000976:	4a76      	ldr	r2, [pc, #472]	; (8000b50 <__aeabi_fmul+0x244>)
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	58d3      	ldr	r3, [r2, r3]
 800097c:	469f      	mov	pc, r3
 800097e:	0039      	movs	r1, r7
 8000980:	4644      	mov	r4, r8
 8000982:	46e2      	mov	sl, ip
 8000984:	4653      	mov	r3, sl
 8000986:	2b02      	cmp	r3, #2
 8000988:	d00f      	beq.n	80009aa <__aeabi_fmul+0x9e>
 800098a:	2b03      	cmp	r3, #3
 800098c:	d100      	bne.n	8000990 <__aeabi_fmul+0x84>
 800098e:	e0d7      	b.n	8000b40 <__aeabi_fmul+0x234>
 8000990:	2b01      	cmp	r3, #1
 8000992:	d137      	bne.n	8000a04 <__aeabi_fmul+0xf8>
 8000994:	2000      	movs	r0, #0
 8000996:	2400      	movs	r4, #0
 8000998:	05c0      	lsls	r0, r0, #23
 800099a:	4320      	orrs	r0, r4
 800099c:	07c9      	lsls	r1, r1, #31
 800099e:	4308      	orrs	r0, r1
 80009a0:	bce0      	pop	{r5, r6, r7}
 80009a2:	46ba      	mov	sl, r7
 80009a4:	46b1      	mov	r9, r6
 80009a6:	46a8      	mov	r8, r5
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	2400      	movs	r4, #0
 80009ae:	e7f3      	b.n	8000998 <__aeabi_fmul+0x8c>
 80009b0:	0c26      	lsrs	r6, r4, #16
 80009b2:	0424      	lsls	r4, r4, #16
 80009b4:	0c22      	lsrs	r2, r4, #16
 80009b6:	4644      	mov	r4, r8
 80009b8:	0424      	lsls	r4, r4, #16
 80009ba:	0c24      	lsrs	r4, r4, #16
 80009bc:	4643      	mov	r3, r8
 80009be:	0027      	movs	r7, r4
 80009c0:	0c1b      	lsrs	r3, r3, #16
 80009c2:	4357      	muls	r7, r2
 80009c4:	4374      	muls	r4, r6
 80009c6:	435a      	muls	r2, r3
 80009c8:	435e      	muls	r6, r3
 80009ca:	1912      	adds	r2, r2, r4
 80009cc:	0c3b      	lsrs	r3, r7, #16
 80009ce:	189b      	adds	r3, r3, r2
 80009d0:	429c      	cmp	r4, r3
 80009d2:	d903      	bls.n	80009dc <__aeabi_fmul+0xd0>
 80009d4:	2280      	movs	r2, #128	; 0x80
 80009d6:	0252      	lsls	r2, r2, #9
 80009d8:	4694      	mov	ip, r2
 80009da:	4466      	add	r6, ip
 80009dc:	043f      	lsls	r7, r7, #16
 80009de:	041a      	lsls	r2, r3, #16
 80009e0:	0c3f      	lsrs	r7, r7, #16
 80009e2:	19d2      	adds	r2, r2, r7
 80009e4:	0194      	lsls	r4, r2, #6
 80009e6:	1e67      	subs	r7, r4, #1
 80009e8:	41bc      	sbcs	r4, r7
 80009ea:	0c1b      	lsrs	r3, r3, #16
 80009ec:	0e92      	lsrs	r2, r2, #26
 80009ee:	199b      	adds	r3, r3, r6
 80009f0:	4314      	orrs	r4, r2
 80009f2:	019b      	lsls	r3, r3, #6
 80009f4:	431c      	orrs	r4, r3
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	d400      	bmi.n	80009fc <__aeabi_fmul+0xf0>
 80009fa:	e09b      	b.n	8000b34 <__aeabi_fmul+0x228>
 80009fc:	2301      	movs	r3, #1
 80009fe:	0862      	lsrs	r2, r4, #1
 8000a00:	401c      	ands	r4, r3
 8000a02:	4314      	orrs	r4, r2
 8000a04:	0002      	movs	r2, r0
 8000a06:	327f      	adds	r2, #127	; 0x7f
 8000a08:	2a00      	cmp	r2, #0
 8000a0a:	dd64      	ble.n	8000ad6 <__aeabi_fmul+0x1ca>
 8000a0c:	0763      	lsls	r3, r4, #29
 8000a0e:	d004      	beq.n	8000a1a <__aeabi_fmul+0x10e>
 8000a10:	230f      	movs	r3, #15
 8000a12:	4023      	ands	r3, r4
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fmul+0x10e>
 8000a18:	3404      	adds	r4, #4
 8000a1a:	0123      	lsls	r3, r4, #4
 8000a1c:	d503      	bpl.n	8000a26 <__aeabi_fmul+0x11a>
 8000a1e:	0002      	movs	r2, r0
 8000a20:	4b4c      	ldr	r3, [pc, #304]	; (8000b54 <__aeabi_fmul+0x248>)
 8000a22:	3280      	adds	r2, #128	; 0x80
 8000a24:	401c      	ands	r4, r3
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	dcbf      	bgt.n	80009aa <__aeabi_fmul+0x9e>
 8000a2a:	01a4      	lsls	r4, r4, #6
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	b2d0      	uxtb	r0, r2
 8000a30:	e7b2      	b.n	8000998 <__aeabi_fmul+0x8c>
 8000a32:	4643      	mov	r3, r8
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d13d      	bne.n	8000ab4 <__aeabi_fmul+0x1a8>
 8000a38:	464a      	mov	r2, r9
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	4691      	mov	r9, r2
 8000a40:	469c      	mov	ip, r3
 8000a42:	e792      	b.n	800096a <__aeabi_fmul+0x5e>
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	d129      	bne.n	8000a9c <__aeabi_fmul+0x190>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2500      	movs	r5, #0
 8000a50:	469a      	mov	sl, r3
 8000a52:	e774      	b.n	800093e <__aeabi_fmul+0x32>
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d11b      	bne.n	8000a90 <__aeabi_fmul+0x184>
 8000a58:	2308      	movs	r3, #8
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b06      	subs	r3, #6
 8000a5e:	25ff      	movs	r5, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e76c      	b.n	800093e <__aeabi_fmul+0x32>
 8000a64:	4643      	mov	r3, r8
 8000a66:	35ff      	adds	r5, #255	; 0xff
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10b      	bne.n	8000a84 <__aeabi_fmul+0x178>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	464a      	mov	r2, r9
 8000a70:	431a      	orrs	r2, r3
 8000a72:	4691      	mov	r9, r2
 8000a74:	469c      	mov	ip, r3
 8000a76:	e778      	b.n	800096a <__aeabi_fmul+0x5e>
 8000a78:	4653      	mov	r3, sl
 8000a7a:	0031      	movs	r1, r6
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fmul+0x176>
 8000a80:	e783      	b.n	800098a <__aeabi_fmul+0x7e>
 8000a82:	e792      	b.n	80009aa <__aeabi_fmul+0x9e>
 8000a84:	2303      	movs	r3, #3
 8000a86:	464a      	mov	r2, r9
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	469c      	mov	ip, r3
 8000a8e:	e76c      	b.n	800096a <__aeabi_fmul+0x5e>
 8000a90:	230c      	movs	r3, #12
 8000a92:	4699      	mov	r9, r3
 8000a94:	3b09      	subs	r3, #9
 8000a96:	25ff      	movs	r5, #255	; 0xff
 8000a98:	469a      	mov	sl, r3
 8000a9a:	e750      	b.n	800093e <__aeabi_fmul+0x32>
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	f002 f8c7 	bl	8002c30 <__clzsi2>
 8000aa2:	2576      	movs	r5, #118	; 0x76
 8000aa4:	1f43      	subs	r3, r0, #5
 8000aa6:	409c      	lsls	r4, r3
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	426d      	negs	r5, r5
 8000aac:	4699      	mov	r9, r3
 8000aae:	469a      	mov	sl, r3
 8000ab0:	1a2d      	subs	r5, r5, r0
 8000ab2:	e744      	b.n	800093e <__aeabi_fmul+0x32>
 8000ab4:	4640      	mov	r0, r8
 8000ab6:	f002 f8bb 	bl	8002c30 <__clzsi2>
 8000aba:	4642      	mov	r2, r8
 8000abc:	1f43      	subs	r3, r0, #5
 8000abe:	409a      	lsls	r2, r3
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	1a2d      	subs	r5, r5, r0
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	469c      	mov	ip, r3
 8000ac8:	3d76      	subs	r5, #118	; 0x76
 8000aca:	e74e      	b.n	800096a <__aeabi_fmul+0x5e>
 8000acc:	2480      	movs	r4, #128	; 0x80
 8000ace:	2100      	movs	r1, #0
 8000ad0:	20ff      	movs	r0, #255	; 0xff
 8000ad2:	03e4      	lsls	r4, r4, #15
 8000ad4:	e760      	b.n	8000998 <__aeabi_fmul+0x8c>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	2b1b      	cmp	r3, #27
 8000adc:	dd00      	ble.n	8000ae0 <__aeabi_fmul+0x1d4>
 8000ade:	e759      	b.n	8000994 <__aeabi_fmul+0x88>
 8000ae0:	0022      	movs	r2, r4
 8000ae2:	309e      	adds	r0, #158	; 0x9e
 8000ae4:	40da      	lsrs	r2, r3
 8000ae6:	4084      	lsls	r4, r0
 8000ae8:	0013      	movs	r3, r2
 8000aea:	1e62      	subs	r2, r4, #1
 8000aec:	4194      	sbcs	r4, r2
 8000aee:	431c      	orrs	r4, r3
 8000af0:	0763      	lsls	r3, r4, #29
 8000af2:	d004      	beq.n	8000afe <__aeabi_fmul+0x1f2>
 8000af4:	230f      	movs	r3, #15
 8000af6:	4023      	ands	r3, r4
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d000      	beq.n	8000afe <__aeabi_fmul+0x1f2>
 8000afc:	3404      	adds	r4, #4
 8000afe:	0163      	lsls	r3, r4, #5
 8000b00:	d51a      	bpl.n	8000b38 <__aeabi_fmul+0x22c>
 8000b02:	2001      	movs	r0, #1
 8000b04:	2400      	movs	r4, #0
 8000b06:	e747      	b.n	8000998 <__aeabi_fmul+0x8c>
 8000b08:	2080      	movs	r0, #128	; 0x80
 8000b0a:	03c0      	lsls	r0, r0, #15
 8000b0c:	4204      	tst	r4, r0
 8000b0e:	d009      	beq.n	8000b24 <__aeabi_fmul+0x218>
 8000b10:	4643      	mov	r3, r8
 8000b12:	4203      	tst	r3, r0
 8000b14:	d106      	bne.n	8000b24 <__aeabi_fmul+0x218>
 8000b16:	4644      	mov	r4, r8
 8000b18:	4304      	orrs	r4, r0
 8000b1a:	0264      	lsls	r4, r4, #9
 8000b1c:	0039      	movs	r1, r7
 8000b1e:	20ff      	movs	r0, #255	; 0xff
 8000b20:	0a64      	lsrs	r4, r4, #9
 8000b22:	e739      	b.n	8000998 <__aeabi_fmul+0x8c>
 8000b24:	2080      	movs	r0, #128	; 0x80
 8000b26:	03c0      	lsls	r0, r0, #15
 8000b28:	4304      	orrs	r4, r0
 8000b2a:	0264      	lsls	r4, r4, #9
 8000b2c:	0031      	movs	r1, r6
 8000b2e:	20ff      	movs	r0, #255	; 0xff
 8000b30:	0a64      	lsrs	r4, r4, #9
 8000b32:	e731      	b.n	8000998 <__aeabi_fmul+0x8c>
 8000b34:	0028      	movs	r0, r5
 8000b36:	e765      	b.n	8000a04 <__aeabi_fmul+0xf8>
 8000b38:	01a4      	lsls	r4, r4, #6
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	0a64      	lsrs	r4, r4, #9
 8000b3e:	e72b      	b.n	8000998 <__aeabi_fmul+0x8c>
 8000b40:	2080      	movs	r0, #128	; 0x80
 8000b42:	03c0      	lsls	r0, r0, #15
 8000b44:	4304      	orrs	r4, r0
 8000b46:	0264      	lsls	r4, r4, #9
 8000b48:	20ff      	movs	r0, #255	; 0xff
 8000b4a:	0a64      	lsrs	r4, r4, #9
 8000b4c:	e724      	b.n	8000998 <__aeabi_fmul+0x8c>
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	08009838 	.word	0x08009838
 8000b54:	f7ffffff 	.word	0xf7ffffff

08000b58 <__aeabi_fsub>:
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	46ce      	mov	lr, r9
 8000b5c:	4647      	mov	r7, r8
 8000b5e:	0243      	lsls	r3, r0, #9
 8000b60:	0a5b      	lsrs	r3, r3, #9
 8000b62:	024e      	lsls	r6, r1, #9
 8000b64:	00da      	lsls	r2, r3, #3
 8000b66:	4694      	mov	ip, r2
 8000b68:	0a72      	lsrs	r2, r6, #9
 8000b6a:	4691      	mov	r9, r2
 8000b6c:	0045      	lsls	r5, r0, #1
 8000b6e:	004a      	lsls	r2, r1, #1
 8000b70:	b580      	push	{r7, lr}
 8000b72:	0e2d      	lsrs	r5, r5, #24
 8000b74:	001f      	movs	r7, r3
 8000b76:	0fc4      	lsrs	r4, r0, #31
 8000b78:	0e12      	lsrs	r2, r2, #24
 8000b7a:	0fc9      	lsrs	r1, r1, #31
 8000b7c:	09b6      	lsrs	r6, r6, #6
 8000b7e:	2aff      	cmp	r2, #255	; 0xff
 8000b80:	d05b      	beq.n	8000c3a <__aeabi_fsub+0xe2>
 8000b82:	2001      	movs	r0, #1
 8000b84:	4041      	eors	r1, r0
 8000b86:	428c      	cmp	r4, r1
 8000b88:	d039      	beq.n	8000bfe <__aeabi_fsub+0xa6>
 8000b8a:	1aa8      	subs	r0, r5, r2
 8000b8c:	2800      	cmp	r0, #0
 8000b8e:	dd5a      	ble.n	8000c46 <__aeabi_fsub+0xee>
 8000b90:	2a00      	cmp	r2, #0
 8000b92:	d06a      	beq.n	8000c6a <__aeabi_fsub+0x112>
 8000b94:	2dff      	cmp	r5, #255	; 0xff
 8000b96:	d100      	bne.n	8000b9a <__aeabi_fsub+0x42>
 8000b98:	e0d9      	b.n	8000d4e <__aeabi_fsub+0x1f6>
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	04d2      	lsls	r2, r2, #19
 8000b9e:	4316      	orrs	r6, r2
 8000ba0:	281b      	cmp	r0, #27
 8000ba2:	dc00      	bgt.n	8000ba6 <__aeabi_fsub+0x4e>
 8000ba4:	e0e9      	b.n	8000d7a <__aeabi_fsub+0x222>
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	4663      	mov	r3, ip
 8000baa:	1a18      	subs	r0, r3, r0
 8000bac:	0143      	lsls	r3, r0, #5
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_fsub+0x5a>
 8000bb0:	e0b4      	b.n	8000d1c <__aeabi_fsub+0x1c4>
 8000bb2:	0180      	lsls	r0, r0, #6
 8000bb4:	0987      	lsrs	r7, r0, #6
 8000bb6:	0038      	movs	r0, r7
 8000bb8:	f002 f83a 	bl	8002c30 <__clzsi2>
 8000bbc:	3805      	subs	r0, #5
 8000bbe:	4087      	lsls	r7, r0
 8000bc0:	4285      	cmp	r5, r0
 8000bc2:	dc00      	bgt.n	8000bc6 <__aeabi_fsub+0x6e>
 8000bc4:	e0cc      	b.n	8000d60 <__aeabi_fsub+0x208>
 8000bc6:	1a2d      	subs	r5, r5, r0
 8000bc8:	48b5      	ldr	r0, [pc, #724]	; (8000ea0 <__aeabi_fsub+0x348>)
 8000bca:	4038      	ands	r0, r7
 8000bcc:	0743      	lsls	r3, r0, #29
 8000bce:	d004      	beq.n	8000bda <__aeabi_fsub+0x82>
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	4003      	ands	r3, r0
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	d000      	beq.n	8000bda <__aeabi_fsub+0x82>
 8000bd8:	3004      	adds	r0, #4
 8000bda:	0143      	lsls	r3, r0, #5
 8000bdc:	d400      	bmi.n	8000be0 <__aeabi_fsub+0x88>
 8000bde:	e0a0      	b.n	8000d22 <__aeabi_fsub+0x1ca>
 8000be0:	1c6a      	adds	r2, r5, #1
 8000be2:	2dfe      	cmp	r5, #254	; 0xfe
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x90>
 8000be6:	e08d      	b.n	8000d04 <__aeabi_fsub+0x1ac>
 8000be8:	0180      	lsls	r0, r0, #6
 8000bea:	0a47      	lsrs	r7, r0, #9
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	05d0      	lsls	r0, r2, #23
 8000bf0:	4338      	orrs	r0, r7
 8000bf2:	07e4      	lsls	r4, r4, #31
 8000bf4:	4320      	orrs	r0, r4
 8000bf6:	bcc0      	pop	{r6, r7}
 8000bf8:	46b9      	mov	r9, r7
 8000bfa:	46b0      	mov	r8, r6
 8000bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bfe:	1aa8      	subs	r0, r5, r2
 8000c00:	4680      	mov	r8, r0
 8000c02:	2800      	cmp	r0, #0
 8000c04:	dd45      	ble.n	8000c92 <__aeabi_fsub+0x13a>
 8000c06:	2a00      	cmp	r2, #0
 8000c08:	d070      	beq.n	8000cec <__aeabi_fsub+0x194>
 8000c0a:	2dff      	cmp	r5, #255	; 0xff
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0xb8>
 8000c0e:	e09e      	b.n	8000d4e <__aeabi_fsub+0x1f6>
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	04db      	lsls	r3, r3, #19
 8000c14:	431e      	orrs	r6, r3
 8000c16:	4643      	mov	r3, r8
 8000c18:	2b1b      	cmp	r3, #27
 8000c1a:	dc00      	bgt.n	8000c1e <__aeabi_fsub+0xc6>
 8000c1c:	e0d2      	b.n	8000dc4 <__aeabi_fsub+0x26c>
 8000c1e:	2001      	movs	r0, #1
 8000c20:	4460      	add	r0, ip
 8000c22:	0143      	lsls	r3, r0, #5
 8000c24:	d57a      	bpl.n	8000d1c <__aeabi_fsub+0x1c4>
 8000c26:	3501      	adds	r5, #1
 8000c28:	2dff      	cmp	r5, #255	; 0xff
 8000c2a:	d06b      	beq.n	8000d04 <__aeabi_fsub+0x1ac>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	4a9d      	ldr	r2, [pc, #628]	; (8000ea4 <__aeabi_fsub+0x34c>)
 8000c30:	4003      	ands	r3, r0
 8000c32:	0840      	lsrs	r0, r0, #1
 8000c34:	4010      	ands	r0, r2
 8000c36:	4318      	orrs	r0, r3
 8000c38:	e7c8      	b.n	8000bcc <__aeabi_fsub+0x74>
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d020      	beq.n	8000c80 <__aeabi_fsub+0x128>
 8000c3e:	428c      	cmp	r4, r1
 8000c40:	d023      	beq.n	8000c8a <__aeabi_fsub+0x132>
 8000c42:	0028      	movs	r0, r5
 8000c44:	38ff      	subs	r0, #255	; 0xff
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d039      	beq.n	8000cbe <__aeabi_fsub+0x166>
 8000c4a:	1b57      	subs	r7, r2, r5
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d000      	beq.n	8000c52 <__aeabi_fsub+0xfa>
 8000c50:	e09d      	b.n	8000d8e <__aeabi_fsub+0x236>
 8000c52:	4663      	mov	r3, ip
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x102>
 8000c58:	e0db      	b.n	8000e12 <__aeabi_fsub+0x2ba>
 8000c5a:	1e7b      	subs	r3, r7, #1
 8000c5c:	2f01      	cmp	r7, #1
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fsub+0x10a>
 8000c60:	e10d      	b.n	8000e7e <__aeabi_fsub+0x326>
 8000c62:	2fff      	cmp	r7, #255	; 0xff
 8000c64:	d071      	beq.n	8000d4a <__aeabi_fsub+0x1f2>
 8000c66:	001f      	movs	r7, r3
 8000c68:	e098      	b.n	8000d9c <__aeabi_fsub+0x244>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x118>
 8000c6e:	e0a7      	b.n	8000dc0 <__aeabi_fsub+0x268>
 8000c70:	1e42      	subs	r2, r0, #1
 8000c72:	2801      	cmp	r0, #1
 8000c74:	d100      	bne.n	8000c78 <__aeabi_fsub+0x120>
 8000c76:	e0e6      	b.n	8000e46 <__aeabi_fsub+0x2ee>
 8000c78:	28ff      	cmp	r0, #255	; 0xff
 8000c7a:	d068      	beq.n	8000d4e <__aeabi_fsub+0x1f6>
 8000c7c:	0010      	movs	r0, r2
 8000c7e:	e78f      	b.n	8000ba0 <__aeabi_fsub+0x48>
 8000c80:	2001      	movs	r0, #1
 8000c82:	4041      	eors	r1, r0
 8000c84:	42a1      	cmp	r1, r4
 8000c86:	d000      	beq.n	8000c8a <__aeabi_fsub+0x132>
 8000c88:	e77f      	b.n	8000b8a <__aeabi_fsub+0x32>
 8000c8a:	20ff      	movs	r0, #255	; 0xff
 8000c8c:	4240      	negs	r0, r0
 8000c8e:	4680      	mov	r8, r0
 8000c90:	44a8      	add	r8, r5
 8000c92:	4640      	mov	r0, r8
 8000c94:	2800      	cmp	r0, #0
 8000c96:	d038      	beq.n	8000d0a <__aeabi_fsub+0x1b2>
 8000c98:	1b51      	subs	r1, r2, r5
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_fsub+0x148>
 8000c9e:	e0ae      	b.n	8000dfe <__aeabi_fsub+0x2a6>
 8000ca0:	2aff      	cmp	r2, #255	; 0xff
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x14e>
 8000ca4:	e0df      	b.n	8000e66 <__aeabi_fsub+0x30e>
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	4660      	mov	r0, ip
 8000caa:	04db      	lsls	r3, r3, #19
 8000cac:	4318      	orrs	r0, r3
 8000cae:	4684      	mov	ip, r0
 8000cb0:	291b      	cmp	r1, #27
 8000cb2:	dc00      	bgt.n	8000cb6 <__aeabi_fsub+0x15e>
 8000cb4:	e0d9      	b.n	8000e6a <__aeabi_fsub+0x312>
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	0015      	movs	r5, r2
 8000cba:	1980      	adds	r0, r0, r6
 8000cbc:	e7b1      	b.n	8000c22 <__aeabi_fsub+0xca>
 8000cbe:	20fe      	movs	r0, #254	; 0xfe
 8000cc0:	1c6a      	adds	r2, r5, #1
 8000cc2:	4210      	tst	r0, r2
 8000cc4:	d171      	bne.n	8000daa <__aeabi_fsub+0x252>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_fsub+0x174>
 8000cca:	e0a6      	b.n	8000e1a <__aeabi_fsub+0x2c2>
 8000ccc:	4663      	mov	r3, ip
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_fsub+0x17c>
 8000cd2:	e0d9      	b.n	8000e88 <__aeabi_fsub+0x330>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x184>
 8000cda:	e788      	b.n	8000bee <__aeabi_fsub+0x96>
 8000cdc:	1b98      	subs	r0, r3, r6
 8000cde:	0143      	lsls	r3, r0, #5
 8000ce0:	d400      	bmi.n	8000ce4 <__aeabi_fsub+0x18c>
 8000ce2:	e0e1      	b.n	8000ea8 <__aeabi_fsub+0x350>
 8000ce4:	4663      	mov	r3, ip
 8000ce6:	000c      	movs	r4, r1
 8000ce8:	1af0      	subs	r0, r6, r3
 8000cea:	e76f      	b.n	8000bcc <__aeabi_fsub+0x74>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_fsub+0x19a>
 8000cf0:	e0b7      	b.n	8000e62 <__aeabi_fsub+0x30a>
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	2801      	cmp	r0, #1
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fsub+0x1a4>
 8000cfa:	e09c      	b.n	8000e36 <__aeabi_fsub+0x2de>
 8000cfc:	28ff      	cmp	r0, #255	; 0xff
 8000cfe:	d026      	beq.n	8000d4e <__aeabi_fsub+0x1f6>
 8000d00:	4690      	mov	r8, r2
 8000d02:	e788      	b.n	8000c16 <__aeabi_fsub+0xbe>
 8000d04:	22ff      	movs	r2, #255	; 0xff
 8000d06:	2700      	movs	r7, #0
 8000d08:	e771      	b.n	8000bee <__aeabi_fsub+0x96>
 8000d0a:	20fe      	movs	r0, #254	; 0xfe
 8000d0c:	1c6a      	adds	r2, r5, #1
 8000d0e:	4210      	tst	r0, r2
 8000d10:	d064      	beq.n	8000ddc <__aeabi_fsub+0x284>
 8000d12:	2aff      	cmp	r2, #255	; 0xff
 8000d14:	d0f6      	beq.n	8000d04 <__aeabi_fsub+0x1ac>
 8000d16:	0015      	movs	r5, r2
 8000d18:	4466      	add	r6, ip
 8000d1a:	0870      	lsrs	r0, r6, #1
 8000d1c:	0743      	lsls	r3, r0, #29
 8000d1e:	d000      	beq.n	8000d22 <__aeabi_fsub+0x1ca>
 8000d20:	e756      	b.n	8000bd0 <__aeabi_fsub+0x78>
 8000d22:	08c3      	lsrs	r3, r0, #3
 8000d24:	2dff      	cmp	r5, #255	; 0xff
 8000d26:	d012      	beq.n	8000d4e <__aeabi_fsub+0x1f6>
 8000d28:	025b      	lsls	r3, r3, #9
 8000d2a:	0a5f      	lsrs	r7, r3, #9
 8000d2c:	b2ea      	uxtb	r2, r5
 8000d2e:	e75e      	b.n	8000bee <__aeabi_fsub+0x96>
 8000d30:	4662      	mov	r2, ip
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_fsub+0x1e0>
 8000d36:	e096      	b.n	8000e66 <__aeabi_fsub+0x30e>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d008      	beq.n	8000d4e <__aeabi_fsub+0x1f6>
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	03d2      	lsls	r2, r2, #15
 8000d40:	4213      	tst	r3, r2
 8000d42:	d004      	beq.n	8000d4e <__aeabi_fsub+0x1f6>
 8000d44:	4648      	mov	r0, r9
 8000d46:	4210      	tst	r0, r2
 8000d48:	d101      	bne.n	8000d4e <__aeabi_fsub+0x1f6>
 8000d4a:	000c      	movs	r4, r1
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0d8      	beq.n	8000d04 <__aeabi_fsub+0x1ac>
 8000d52:	2780      	movs	r7, #128	; 0x80
 8000d54:	03ff      	lsls	r7, r7, #15
 8000d56:	431f      	orrs	r7, r3
 8000d58:	027f      	lsls	r7, r7, #9
 8000d5a:	22ff      	movs	r2, #255	; 0xff
 8000d5c:	0a7f      	lsrs	r7, r7, #9
 8000d5e:	e746      	b.n	8000bee <__aeabi_fsub+0x96>
 8000d60:	2320      	movs	r3, #32
 8000d62:	003a      	movs	r2, r7
 8000d64:	1b45      	subs	r5, r0, r5
 8000d66:	0038      	movs	r0, r7
 8000d68:	3501      	adds	r5, #1
 8000d6a:	40ea      	lsrs	r2, r5
 8000d6c:	1b5d      	subs	r5, r3, r5
 8000d6e:	40a8      	lsls	r0, r5
 8000d70:	1e43      	subs	r3, r0, #1
 8000d72:	4198      	sbcs	r0, r3
 8000d74:	2500      	movs	r5, #0
 8000d76:	4310      	orrs	r0, r2
 8000d78:	e728      	b.n	8000bcc <__aeabi_fsub+0x74>
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	1a1b      	subs	r3, r3, r0
 8000d7e:	0032      	movs	r2, r6
 8000d80:	409e      	lsls	r6, r3
 8000d82:	40c2      	lsrs	r2, r0
 8000d84:	0030      	movs	r0, r6
 8000d86:	1e43      	subs	r3, r0, #1
 8000d88:	4198      	sbcs	r0, r3
 8000d8a:	4310      	orrs	r0, r2
 8000d8c:	e70c      	b.n	8000ba8 <__aeabi_fsub+0x50>
 8000d8e:	2aff      	cmp	r2, #255	; 0xff
 8000d90:	d0db      	beq.n	8000d4a <__aeabi_fsub+0x1f2>
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	4660      	mov	r0, ip
 8000d96:	04db      	lsls	r3, r3, #19
 8000d98:	4318      	orrs	r0, r3
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	2f1b      	cmp	r7, #27
 8000d9e:	dd56      	ble.n	8000e4e <__aeabi_fsub+0x2f6>
 8000da0:	2001      	movs	r0, #1
 8000da2:	000c      	movs	r4, r1
 8000da4:	0015      	movs	r5, r2
 8000da6:	1a30      	subs	r0, r6, r0
 8000da8:	e700      	b.n	8000bac <__aeabi_fsub+0x54>
 8000daa:	4663      	mov	r3, ip
 8000dac:	1b9f      	subs	r7, r3, r6
 8000dae:	017b      	lsls	r3, r7, #5
 8000db0:	d43d      	bmi.n	8000e2e <__aeabi_fsub+0x2d6>
 8000db2:	2f00      	cmp	r7, #0
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fsub+0x260>
 8000db6:	e6fe      	b.n	8000bb6 <__aeabi_fsub+0x5e>
 8000db8:	2400      	movs	r4, #0
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	e716      	b.n	8000bee <__aeabi_fsub+0x96>
 8000dc0:	0005      	movs	r5, r0
 8000dc2:	e7af      	b.n	8000d24 <__aeabi_fsub+0x1cc>
 8000dc4:	0032      	movs	r2, r6
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	4641      	mov	r1, r8
 8000dca:	40da      	lsrs	r2, r3
 8000dcc:	2320      	movs	r3, #32
 8000dce:	1a5b      	subs	r3, r3, r1
 8000dd0:	409e      	lsls	r6, r3
 8000dd2:	0030      	movs	r0, r6
 8000dd4:	1e43      	subs	r3, r0, #1
 8000dd6:	4198      	sbcs	r0, r3
 8000dd8:	4310      	orrs	r0, r2
 8000dda:	e721      	b.n	8000c20 <__aeabi_fsub+0xc8>
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d1a7      	bne.n	8000d30 <__aeabi_fsub+0x1d8>
 8000de0:	4663      	mov	r3, ip
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d059      	beq.n	8000e9a <__aeabi_fsub+0x342>
 8000de6:	2200      	movs	r2, #0
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d100      	bne.n	8000dee <__aeabi_fsub+0x296>
 8000dec:	e6ff      	b.n	8000bee <__aeabi_fsub+0x96>
 8000dee:	0030      	movs	r0, r6
 8000df0:	4460      	add	r0, ip
 8000df2:	0143      	lsls	r3, r0, #5
 8000df4:	d592      	bpl.n	8000d1c <__aeabi_fsub+0x1c4>
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <__aeabi_fsub+0x348>)
 8000df8:	3501      	adds	r5, #1
 8000dfa:	4018      	ands	r0, r3
 8000dfc:	e78e      	b.n	8000d1c <__aeabi_fsub+0x1c4>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d047      	beq.n	8000e94 <__aeabi_fsub+0x33c>
 8000e04:	1e4b      	subs	r3, r1, #1
 8000e06:	2901      	cmp	r1, #1
 8000e08:	d015      	beq.n	8000e36 <__aeabi_fsub+0x2de>
 8000e0a:	29ff      	cmp	r1, #255	; 0xff
 8000e0c:	d02b      	beq.n	8000e66 <__aeabi_fsub+0x30e>
 8000e0e:	0019      	movs	r1, r3
 8000e10:	e74e      	b.n	8000cb0 <__aeabi_fsub+0x158>
 8000e12:	000c      	movs	r4, r1
 8000e14:	464b      	mov	r3, r9
 8000e16:	003d      	movs	r5, r7
 8000e18:	e784      	b.n	8000d24 <__aeabi_fsub+0x1cc>
 8000e1a:	4662      	mov	r2, ip
 8000e1c:	2a00      	cmp	r2, #0
 8000e1e:	d18b      	bne.n	8000d38 <__aeabi_fsub+0x1e0>
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d192      	bne.n	8000d4a <__aeabi_fsub+0x1f2>
 8000e24:	2780      	movs	r7, #128	; 0x80
 8000e26:	2400      	movs	r4, #0
 8000e28:	22ff      	movs	r2, #255	; 0xff
 8000e2a:	03ff      	lsls	r7, r7, #15
 8000e2c:	e6df      	b.n	8000bee <__aeabi_fsub+0x96>
 8000e2e:	4663      	mov	r3, ip
 8000e30:	000c      	movs	r4, r1
 8000e32:	1af7      	subs	r7, r6, r3
 8000e34:	e6bf      	b.n	8000bb6 <__aeabi_fsub+0x5e>
 8000e36:	0030      	movs	r0, r6
 8000e38:	4460      	add	r0, ip
 8000e3a:	2501      	movs	r5, #1
 8000e3c:	0143      	lsls	r3, r0, #5
 8000e3e:	d400      	bmi.n	8000e42 <__aeabi_fsub+0x2ea>
 8000e40:	e76c      	b.n	8000d1c <__aeabi_fsub+0x1c4>
 8000e42:	2502      	movs	r5, #2
 8000e44:	e6f2      	b.n	8000c2c <__aeabi_fsub+0xd4>
 8000e46:	4663      	mov	r3, ip
 8000e48:	2501      	movs	r5, #1
 8000e4a:	1b98      	subs	r0, r3, r6
 8000e4c:	e6ae      	b.n	8000bac <__aeabi_fsub+0x54>
 8000e4e:	2320      	movs	r3, #32
 8000e50:	4664      	mov	r4, ip
 8000e52:	4660      	mov	r0, ip
 8000e54:	40fc      	lsrs	r4, r7
 8000e56:	1bdf      	subs	r7, r3, r7
 8000e58:	40b8      	lsls	r0, r7
 8000e5a:	1e43      	subs	r3, r0, #1
 8000e5c:	4198      	sbcs	r0, r3
 8000e5e:	4320      	orrs	r0, r4
 8000e60:	e79f      	b.n	8000da2 <__aeabi_fsub+0x24a>
 8000e62:	0005      	movs	r5, r0
 8000e64:	e75e      	b.n	8000d24 <__aeabi_fsub+0x1cc>
 8000e66:	464b      	mov	r3, r9
 8000e68:	e771      	b.n	8000d4e <__aeabi_fsub+0x1f6>
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	4665      	mov	r5, ip
 8000e6e:	4660      	mov	r0, ip
 8000e70:	40cd      	lsrs	r5, r1
 8000e72:	1a59      	subs	r1, r3, r1
 8000e74:	4088      	lsls	r0, r1
 8000e76:	1e43      	subs	r3, r0, #1
 8000e78:	4198      	sbcs	r0, r3
 8000e7a:	4328      	orrs	r0, r5
 8000e7c:	e71c      	b.n	8000cb8 <__aeabi_fsub+0x160>
 8000e7e:	4663      	mov	r3, ip
 8000e80:	000c      	movs	r4, r1
 8000e82:	2501      	movs	r5, #1
 8000e84:	1af0      	subs	r0, r6, r3
 8000e86:	e691      	b.n	8000bac <__aeabi_fsub+0x54>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d095      	beq.n	8000db8 <__aeabi_fsub+0x260>
 8000e8c:	000c      	movs	r4, r1
 8000e8e:	464f      	mov	r7, r9
 8000e90:	2200      	movs	r2, #0
 8000e92:	e6ac      	b.n	8000bee <__aeabi_fsub+0x96>
 8000e94:	464b      	mov	r3, r9
 8000e96:	000d      	movs	r5, r1
 8000e98:	e744      	b.n	8000d24 <__aeabi_fsub+0x1cc>
 8000e9a:	464f      	mov	r7, r9
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	e6a6      	b.n	8000bee <__aeabi_fsub+0x96>
 8000ea0:	fbffffff 	.word	0xfbffffff
 8000ea4:	7dffffff 	.word	0x7dffffff
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d000      	beq.n	8000eae <__aeabi_fsub+0x356>
 8000eac:	e736      	b.n	8000d1c <__aeabi_fsub+0x1c4>
 8000eae:	2400      	movs	r4, #0
 8000eb0:	2700      	movs	r7, #0
 8000eb2:	e69c      	b.n	8000bee <__aeabi_fsub+0x96>

08000eb4 <__aeabi_i2f>:
 8000eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d013      	beq.n	8000ee2 <__aeabi_i2f+0x2e>
 8000eba:	17c3      	asrs	r3, r0, #31
 8000ebc:	18c6      	adds	r6, r0, r3
 8000ebe:	405e      	eors	r6, r3
 8000ec0:	0fc4      	lsrs	r4, r0, #31
 8000ec2:	0030      	movs	r0, r6
 8000ec4:	f001 feb4 	bl	8002c30 <__clzsi2>
 8000ec8:	239e      	movs	r3, #158	; 0x9e
 8000eca:	0005      	movs	r5, r0
 8000ecc:	1a1b      	subs	r3, r3, r0
 8000ece:	2b96      	cmp	r3, #150	; 0x96
 8000ed0:	dc0f      	bgt.n	8000ef2 <__aeabi_i2f+0x3e>
 8000ed2:	2808      	cmp	r0, #8
 8000ed4:	dd01      	ble.n	8000eda <__aeabi_i2f+0x26>
 8000ed6:	3d08      	subs	r5, #8
 8000ed8:	40ae      	lsls	r6, r5
 8000eda:	0276      	lsls	r6, r6, #9
 8000edc:	0a76      	lsrs	r6, r6, #9
 8000ede:	b2d8      	uxtb	r0, r3
 8000ee0:	e002      	b.n	8000ee8 <__aeabi_i2f+0x34>
 8000ee2:	2400      	movs	r4, #0
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	05c0      	lsls	r0, r0, #23
 8000eea:	4330      	orrs	r0, r6
 8000eec:	07e4      	lsls	r4, r4, #31
 8000eee:	4320      	orrs	r0, r4
 8000ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef2:	2b99      	cmp	r3, #153	; 0x99
 8000ef4:	dd0c      	ble.n	8000f10 <__aeabi_i2f+0x5c>
 8000ef6:	2205      	movs	r2, #5
 8000ef8:	0031      	movs	r1, r6
 8000efa:	1a12      	subs	r2, r2, r0
 8000efc:	40d1      	lsrs	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	0001      	movs	r1, r0
 8000f02:	0030      	movs	r0, r6
 8000f04:	311b      	adds	r1, #27
 8000f06:	4088      	lsls	r0, r1
 8000f08:	1e41      	subs	r1, r0, #1
 8000f0a:	4188      	sbcs	r0, r1
 8000f0c:	4302      	orrs	r2, r0
 8000f0e:	0016      	movs	r6, r2
 8000f10:	2d05      	cmp	r5, #5
 8000f12:	dc12      	bgt.n	8000f3a <__aeabi_i2f+0x86>
 8000f14:	0031      	movs	r1, r6
 8000f16:	4f0d      	ldr	r7, [pc, #52]	; (8000f4c <__aeabi_i2f+0x98>)
 8000f18:	4039      	ands	r1, r7
 8000f1a:	0772      	lsls	r2, r6, #29
 8000f1c:	d009      	beq.n	8000f32 <__aeabi_i2f+0x7e>
 8000f1e:	200f      	movs	r0, #15
 8000f20:	4030      	ands	r0, r6
 8000f22:	2804      	cmp	r0, #4
 8000f24:	d005      	beq.n	8000f32 <__aeabi_i2f+0x7e>
 8000f26:	3104      	adds	r1, #4
 8000f28:	014a      	lsls	r2, r1, #5
 8000f2a:	d502      	bpl.n	8000f32 <__aeabi_i2f+0x7e>
 8000f2c:	239f      	movs	r3, #159	; 0x9f
 8000f2e:	4039      	ands	r1, r7
 8000f30:	1b5b      	subs	r3, r3, r5
 8000f32:	0189      	lsls	r1, r1, #6
 8000f34:	0a4e      	lsrs	r6, r1, #9
 8000f36:	b2d8      	uxtb	r0, r3
 8000f38:	e7d6      	b.n	8000ee8 <__aeabi_i2f+0x34>
 8000f3a:	1f6a      	subs	r2, r5, #5
 8000f3c:	4096      	lsls	r6, r2
 8000f3e:	0031      	movs	r1, r6
 8000f40:	4f02      	ldr	r7, [pc, #8]	; (8000f4c <__aeabi_i2f+0x98>)
 8000f42:	4039      	ands	r1, r7
 8000f44:	0772      	lsls	r2, r6, #29
 8000f46:	d0f4      	beq.n	8000f32 <__aeabi_i2f+0x7e>
 8000f48:	e7e9      	b.n	8000f1e <__aeabi_i2f+0x6a>
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	fbffffff 	.word	0xfbffffff

08000f50 <__aeabi_ui2f>:
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	1e05      	subs	r5, r0, #0
 8000f54:	d00e      	beq.n	8000f74 <__aeabi_ui2f+0x24>
 8000f56:	f001 fe6b 	bl	8002c30 <__clzsi2>
 8000f5a:	239e      	movs	r3, #158	; 0x9e
 8000f5c:	0004      	movs	r4, r0
 8000f5e:	1a1b      	subs	r3, r3, r0
 8000f60:	2b96      	cmp	r3, #150	; 0x96
 8000f62:	dc0c      	bgt.n	8000f7e <__aeabi_ui2f+0x2e>
 8000f64:	2808      	cmp	r0, #8
 8000f66:	dd01      	ble.n	8000f6c <__aeabi_ui2f+0x1c>
 8000f68:	3c08      	subs	r4, #8
 8000f6a:	40a5      	lsls	r5, r4
 8000f6c:	026d      	lsls	r5, r5, #9
 8000f6e:	0a6d      	lsrs	r5, r5, #9
 8000f70:	b2d8      	uxtb	r0, r3
 8000f72:	e001      	b.n	8000f78 <__aeabi_ui2f+0x28>
 8000f74:	2000      	movs	r0, #0
 8000f76:	2500      	movs	r5, #0
 8000f78:	05c0      	lsls	r0, r0, #23
 8000f7a:	4328      	orrs	r0, r5
 8000f7c:	bd70      	pop	{r4, r5, r6, pc}
 8000f7e:	2b99      	cmp	r3, #153	; 0x99
 8000f80:	dd09      	ble.n	8000f96 <__aeabi_ui2f+0x46>
 8000f82:	0002      	movs	r2, r0
 8000f84:	0029      	movs	r1, r5
 8000f86:	321b      	adds	r2, #27
 8000f88:	4091      	lsls	r1, r2
 8000f8a:	1e4a      	subs	r2, r1, #1
 8000f8c:	4191      	sbcs	r1, r2
 8000f8e:	2205      	movs	r2, #5
 8000f90:	1a12      	subs	r2, r2, r0
 8000f92:	40d5      	lsrs	r5, r2
 8000f94:	430d      	orrs	r5, r1
 8000f96:	2c05      	cmp	r4, #5
 8000f98:	dc12      	bgt.n	8000fc0 <__aeabi_ui2f+0x70>
 8000f9a:	0029      	movs	r1, r5
 8000f9c:	4e0c      	ldr	r6, [pc, #48]	; (8000fd0 <__aeabi_ui2f+0x80>)
 8000f9e:	4031      	ands	r1, r6
 8000fa0:	076a      	lsls	r2, r5, #29
 8000fa2:	d009      	beq.n	8000fb8 <__aeabi_ui2f+0x68>
 8000fa4:	200f      	movs	r0, #15
 8000fa6:	4028      	ands	r0, r5
 8000fa8:	2804      	cmp	r0, #4
 8000faa:	d005      	beq.n	8000fb8 <__aeabi_ui2f+0x68>
 8000fac:	3104      	adds	r1, #4
 8000fae:	014a      	lsls	r2, r1, #5
 8000fb0:	d502      	bpl.n	8000fb8 <__aeabi_ui2f+0x68>
 8000fb2:	239f      	movs	r3, #159	; 0x9f
 8000fb4:	4031      	ands	r1, r6
 8000fb6:	1b1b      	subs	r3, r3, r4
 8000fb8:	0189      	lsls	r1, r1, #6
 8000fba:	0a4d      	lsrs	r5, r1, #9
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	e7db      	b.n	8000f78 <__aeabi_ui2f+0x28>
 8000fc0:	1f62      	subs	r2, r4, #5
 8000fc2:	4095      	lsls	r5, r2
 8000fc4:	0029      	movs	r1, r5
 8000fc6:	4e02      	ldr	r6, [pc, #8]	; (8000fd0 <__aeabi_ui2f+0x80>)
 8000fc8:	4031      	ands	r1, r6
 8000fca:	076a      	lsls	r2, r5, #29
 8000fcc:	d0f4      	beq.n	8000fb8 <__aeabi_ui2f+0x68>
 8000fce:	e7e9      	b.n	8000fa4 <__aeabi_ui2f+0x54>
 8000fd0:	fbffffff 	.word	0xfbffffff

08000fd4 <__aeabi_dadd>:
 8000fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd6:	464f      	mov	r7, r9
 8000fd8:	4646      	mov	r6, r8
 8000fda:	46d6      	mov	lr, sl
 8000fdc:	000d      	movs	r5, r1
 8000fde:	0004      	movs	r4, r0
 8000fe0:	b5c0      	push	{r6, r7, lr}
 8000fe2:	001f      	movs	r7, r3
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0328      	lsls	r0, r5, #12
 8000fe8:	0f62      	lsrs	r2, r4, #29
 8000fea:	0a40      	lsrs	r0, r0, #9
 8000fec:	4310      	orrs	r0, r2
 8000fee:	007a      	lsls	r2, r7, #1
 8000ff0:	0d52      	lsrs	r2, r2, #21
 8000ff2:	00e3      	lsls	r3, r4, #3
 8000ff4:	033c      	lsls	r4, r7, #12
 8000ff6:	4691      	mov	r9, r2
 8000ff8:	0a64      	lsrs	r4, r4, #9
 8000ffa:	0ffa      	lsrs	r2, r7, #31
 8000ffc:	0f4f      	lsrs	r7, r1, #29
 8000ffe:	006e      	lsls	r6, r5, #1
 8001000:	4327      	orrs	r7, r4
 8001002:	4692      	mov	sl, r2
 8001004:	46b8      	mov	r8, r7
 8001006:	0d76      	lsrs	r6, r6, #21
 8001008:	0fed      	lsrs	r5, r5, #31
 800100a:	00c9      	lsls	r1, r1, #3
 800100c:	4295      	cmp	r5, r2
 800100e:	d100      	bne.n	8001012 <__aeabi_dadd+0x3e>
 8001010:	e099      	b.n	8001146 <__aeabi_dadd+0x172>
 8001012:	464c      	mov	r4, r9
 8001014:	1b34      	subs	r4, r6, r4
 8001016:	46a4      	mov	ip, r4
 8001018:	2c00      	cmp	r4, #0
 800101a:	dc00      	bgt.n	800101e <__aeabi_dadd+0x4a>
 800101c:	e07c      	b.n	8001118 <__aeabi_dadd+0x144>
 800101e:	464a      	mov	r2, r9
 8001020:	2a00      	cmp	r2, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_dadd+0x52>
 8001024:	e0b8      	b.n	8001198 <__aeabi_dadd+0x1c4>
 8001026:	4ac5      	ldr	r2, [pc, #788]	; (800133c <__aeabi_dadd+0x368>)
 8001028:	4296      	cmp	r6, r2
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x5a>
 800102c:	e11c      	b.n	8001268 <__aeabi_dadd+0x294>
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	003c      	movs	r4, r7
 8001032:	0412      	lsls	r2, r2, #16
 8001034:	4314      	orrs	r4, r2
 8001036:	46a0      	mov	r8, r4
 8001038:	4662      	mov	r2, ip
 800103a:	2a38      	cmp	r2, #56	; 0x38
 800103c:	dd00      	ble.n	8001040 <__aeabi_dadd+0x6c>
 800103e:	e161      	b.n	8001304 <__aeabi_dadd+0x330>
 8001040:	2a1f      	cmp	r2, #31
 8001042:	dd00      	ble.n	8001046 <__aeabi_dadd+0x72>
 8001044:	e1cc      	b.n	80013e0 <__aeabi_dadd+0x40c>
 8001046:	4664      	mov	r4, ip
 8001048:	2220      	movs	r2, #32
 800104a:	1b12      	subs	r2, r2, r4
 800104c:	4644      	mov	r4, r8
 800104e:	4094      	lsls	r4, r2
 8001050:	000f      	movs	r7, r1
 8001052:	46a1      	mov	r9, r4
 8001054:	4664      	mov	r4, ip
 8001056:	4091      	lsls	r1, r2
 8001058:	40e7      	lsrs	r7, r4
 800105a:	464c      	mov	r4, r9
 800105c:	1e4a      	subs	r2, r1, #1
 800105e:	4191      	sbcs	r1, r2
 8001060:	433c      	orrs	r4, r7
 8001062:	4642      	mov	r2, r8
 8001064:	4321      	orrs	r1, r4
 8001066:	4664      	mov	r4, ip
 8001068:	40e2      	lsrs	r2, r4
 800106a:	1a80      	subs	r0, r0, r2
 800106c:	1a5c      	subs	r4, r3, r1
 800106e:	42a3      	cmp	r3, r4
 8001070:	419b      	sbcs	r3, r3
 8001072:	425f      	negs	r7, r3
 8001074:	1bc7      	subs	r7, r0, r7
 8001076:	023b      	lsls	r3, r7, #8
 8001078:	d400      	bmi.n	800107c <__aeabi_dadd+0xa8>
 800107a:	e0d0      	b.n	800121e <__aeabi_dadd+0x24a>
 800107c:	027f      	lsls	r7, r7, #9
 800107e:	0a7f      	lsrs	r7, r7, #9
 8001080:	2f00      	cmp	r7, #0
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0xb2>
 8001084:	e0ff      	b.n	8001286 <__aeabi_dadd+0x2b2>
 8001086:	0038      	movs	r0, r7
 8001088:	f001 fdd2 	bl	8002c30 <__clzsi2>
 800108c:	0001      	movs	r1, r0
 800108e:	3908      	subs	r1, #8
 8001090:	2320      	movs	r3, #32
 8001092:	0022      	movs	r2, r4
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	408f      	lsls	r7, r1
 8001098:	40da      	lsrs	r2, r3
 800109a:	408c      	lsls	r4, r1
 800109c:	4317      	orrs	r7, r2
 800109e:	42b1      	cmp	r1, r6
 80010a0:	da00      	bge.n	80010a4 <__aeabi_dadd+0xd0>
 80010a2:	e0ff      	b.n	80012a4 <__aeabi_dadd+0x2d0>
 80010a4:	1b89      	subs	r1, r1, r6
 80010a6:	1c4b      	adds	r3, r1, #1
 80010a8:	2b1f      	cmp	r3, #31
 80010aa:	dd00      	ble.n	80010ae <__aeabi_dadd+0xda>
 80010ac:	e0a8      	b.n	8001200 <__aeabi_dadd+0x22c>
 80010ae:	2220      	movs	r2, #32
 80010b0:	0039      	movs	r1, r7
 80010b2:	1ad2      	subs	r2, r2, r3
 80010b4:	0020      	movs	r0, r4
 80010b6:	4094      	lsls	r4, r2
 80010b8:	4091      	lsls	r1, r2
 80010ba:	40d8      	lsrs	r0, r3
 80010bc:	1e62      	subs	r2, r4, #1
 80010be:	4194      	sbcs	r4, r2
 80010c0:	40df      	lsrs	r7, r3
 80010c2:	2600      	movs	r6, #0
 80010c4:	4301      	orrs	r1, r0
 80010c6:	430c      	orrs	r4, r1
 80010c8:	0763      	lsls	r3, r4, #29
 80010ca:	d009      	beq.n	80010e0 <__aeabi_dadd+0x10c>
 80010cc:	230f      	movs	r3, #15
 80010ce:	4023      	ands	r3, r4
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d005      	beq.n	80010e0 <__aeabi_dadd+0x10c>
 80010d4:	1d23      	adds	r3, r4, #4
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	41a4      	sbcs	r4, r4
 80010da:	4264      	negs	r4, r4
 80010dc:	193f      	adds	r7, r7, r4
 80010de:	001c      	movs	r4, r3
 80010e0:	023b      	lsls	r3, r7, #8
 80010e2:	d400      	bmi.n	80010e6 <__aeabi_dadd+0x112>
 80010e4:	e09e      	b.n	8001224 <__aeabi_dadd+0x250>
 80010e6:	4b95      	ldr	r3, [pc, #596]	; (800133c <__aeabi_dadd+0x368>)
 80010e8:	3601      	adds	r6, #1
 80010ea:	429e      	cmp	r6, r3
 80010ec:	d100      	bne.n	80010f0 <__aeabi_dadd+0x11c>
 80010ee:	e0b7      	b.n	8001260 <__aeabi_dadd+0x28c>
 80010f0:	4a93      	ldr	r2, [pc, #588]	; (8001340 <__aeabi_dadd+0x36c>)
 80010f2:	08e4      	lsrs	r4, r4, #3
 80010f4:	4017      	ands	r7, r2
 80010f6:	077b      	lsls	r3, r7, #29
 80010f8:	0571      	lsls	r1, r6, #21
 80010fa:	027f      	lsls	r7, r7, #9
 80010fc:	4323      	orrs	r3, r4
 80010fe:	0b3f      	lsrs	r7, r7, #12
 8001100:	0d4a      	lsrs	r2, r1, #21
 8001102:	0512      	lsls	r2, r2, #20
 8001104:	433a      	orrs	r2, r7
 8001106:	07ed      	lsls	r5, r5, #31
 8001108:	432a      	orrs	r2, r5
 800110a:	0018      	movs	r0, r3
 800110c:	0011      	movs	r1, r2
 800110e:	bce0      	pop	{r5, r6, r7}
 8001110:	46ba      	mov	sl, r7
 8001112:	46b1      	mov	r9, r6
 8001114:	46a8      	mov	r8, r5
 8001116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001118:	2c00      	cmp	r4, #0
 800111a:	d04b      	beq.n	80011b4 <__aeabi_dadd+0x1e0>
 800111c:	464c      	mov	r4, r9
 800111e:	1ba4      	subs	r4, r4, r6
 8001120:	46a4      	mov	ip, r4
 8001122:	2e00      	cmp	r6, #0
 8001124:	d000      	beq.n	8001128 <__aeabi_dadd+0x154>
 8001126:	e123      	b.n	8001370 <__aeabi_dadd+0x39c>
 8001128:	0004      	movs	r4, r0
 800112a:	431c      	orrs	r4, r3
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x15c>
 800112e:	e1af      	b.n	8001490 <__aeabi_dadd+0x4bc>
 8001130:	4662      	mov	r2, ip
 8001132:	1e54      	subs	r4, r2, #1
 8001134:	2a01      	cmp	r2, #1
 8001136:	d100      	bne.n	800113a <__aeabi_dadd+0x166>
 8001138:	e215      	b.n	8001566 <__aeabi_dadd+0x592>
 800113a:	4d80      	ldr	r5, [pc, #512]	; (800133c <__aeabi_dadd+0x368>)
 800113c:	45ac      	cmp	ip, r5
 800113e:	d100      	bne.n	8001142 <__aeabi_dadd+0x16e>
 8001140:	e1c8      	b.n	80014d4 <__aeabi_dadd+0x500>
 8001142:	46a4      	mov	ip, r4
 8001144:	e11b      	b.n	800137e <__aeabi_dadd+0x3aa>
 8001146:	464a      	mov	r2, r9
 8001148:	1ab2      	subs	r2, r6, r2
 800114a:	4694      	mov	ip, r2
 800114c:	2a00      	cmp	r2, #0
 800114e:	dc00      	bgt.n	8001152 <__aeabi_dadd+0x17e>
 8001150:	e0ac      	b.n	80012ac <__aeabi_dadd+0x2d8>
 8001152:	464a      	mov	r2, r9
 8001154:	2a00      	cmp	r2, #0
 8001156:	d043      	beq.n	80011e0 <__aeabi_dadd+0x20c>
 8001158:	4a78      	ldr	r2, [pc, #480]	; (800133c <__aeabi_dadd+0x368>)
 800115a:	4296      	cmp	r6, r2
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x18c>
 800115e:	e1af      	b.n	80014c0 <__aeabi_dadd+0x4ec>
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	003c      	movs	r4, r7
 8001164:	0412      	lsls	r2, r2, #16
 8001166:	4314      	orrs	r4, r2
 8001168:	46a0      	mov	r8, r4
 800116a:	4662      	mov	r2, ip
 800116c:	2a38      	cmp	r2, #56	; 0x38
 800116e:	dc67      	bgt.n	8001240 <__aeabi_dadd+0x26c>
 8001170:	2a1f      	cmp	r2, #31
 8001172:	dc00      	bgt.n	8001176 <__aeabi_dadd+0x1a2>
 8001174:	e15f      	b.n	8001436 <__aeabi_dadd+0x462>
 8001176:	4647      	mov	r7, r8
 8001178:	3a20      	subs	r2, #32
 800117a:	40d7      	lsrs	r7, r2
 800117c:	4662      	mov	r2, ip
 800117e:	2a20      	cmp	r2, #32
 8001180:	d005      	beq.n	800118e <__aeabi_dadd+0x1ba>
 8001182:	4664      	mov	r4, ip
 8001184:	2240      	movs	r2, #64	; 0x40
 8001186:	1b12      	subs	r2, r2, r4
 8001188:	4644      	mov	r4, r8
 800118a:	4094      	lsls	r4, r2
 800118c:	4321      	orrs	r1, r4
 800118e:	1e4a      	subs	r2, r1, #1
 8001190:	4191      	sbcs	r1, r2
 8001192:	000c      	movs	r4, r1
 8001194:	433c      	orrs	r4, r7
 8001196:	e057      	b.n	8001248 <__aeabi_dadd+0x274>
 8001198:	003a      	movs	r2, r7
 800119a:	430a      	orrs	r2, r1
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x1cc>
 800119e:	e105      	b.n	80013ac <__aeabi_dadd+0x3d8>
 80011a0:	0022      	movs	r2, r4
 80011a2:	3a01      	subs	r2, #1
 80011a4:	2c01      	cmp	r4, #1
 80011a6:	d100      	bne.n	80011aa <__aeabi_dadd+0x1d6>
 80011a8:	e182      	b.n	80014b0 <__aeabi_dadd+0x4dc>
 80011aa:	4c64      	ldr	r4, [pc, #400]	; (800133c <__aeabi_dadd+0x368>)
 80011ac:	45a4      	cmp	ip, r4
 80011ae:	d05b      	beq.n	8001268 <__aeabi_dadd+0x294>
 80011b0:	4694      	mov	ip, r2
 80011b2:	e741      	b.n	8001038 <__aeabi_dadd+0x64>
 80011b4:	4c63      	ldr	r4, [pc, #396]	; (8001344 <__aeabi_dadd+0x370>)
 80011b6:	1c77      	adds	r7, r6, #1
 80011b8:	4227      	tst	r7, r4
 80011ba:	d000      	beq.n	80011be <__aeabi_dadd+0x1ea>
 80011bc:	e0c4      	b.n	8001348 <__aeabi_dadd+0x374>
 80011be:	0004      	movs	r4, r0
 80011c0:	431c      	orrs	r4, r3
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	d000      	beq.n	80011c8 <__aeabi_dadd+0x1f4>
 80011c6:	e169      	b.n	800149c <__aeabi_dadd+0x4c8>
 80011c8:	2c00      	cmp	r4, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x1fa>
 80011cc:	e1bf      	b.n	800154e <__aeabi_dadd+0x57a>
 80011ce:	4644      	mov	r4, r8
 80011d0:	430c      	orrs	r4, r1
 80011d2:	d000      	beq.n	80011d6 <__aeabi_dadd+0x202>
 80011d4:	e1d0      	b.n	8001578 <__aeabi_dadd+0x5a4>
 80011d6:	0742      	lsls	r2, r0, #29
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	4313      	orrs	r3, r2
 80011dc:	08c0      	lsrs	r0, r0, #3
 80011de:	e029      	b.n	8001234 <__aeabi_dadd+0x260>
 80011e0:	003a      	movs	r2, r7
 80011e2:	430a      	orrs	r2, r1
 80011e4:	d100      	bne.n	80011e8 <__aeabi_dadd+0x214>
 80011e6:	e170      	b.n	80014ca <__aeabi_dadd+0x4f6>
 80011e8:	4662      	mov	r2, ip
 80011ea:	4664      	mov	r4, ip
 80011ec:	3a01      	subs	r2, #1
 80011ee:	2c01      	cmp	r4, #1
 80011f0:	d100      	bne.n	80011f4 <__aeabi_dadd+0x220>
 80011f2:	e0e0      	b.n	80013b6 <__aeabi_dadd+0x3e2>
 80011f4:	4c51      	ldr	r4, [pc, #324]	; (800133c <__aeabi_dadd+0x368>)
 80011f6:	45a4      	cmp	ip, r4
 80011f8:	d100      	bne.n	80011fc <__aeabi_dadd+0x228>
 80011fa:	e161      	b.n	80014c0 <__aeabi_dadd+0x4ec>
 80011fc:	4694      	mov	ip, r2
 80011fe:	e7b4      	b.n	800116a <__aeabi_dadd+0x196>
 8001200:	003a      	movs	r2, r7
 8001202:	391f      	subs	r1, #31
 8001204:	40ca      	lsrs	r2, r1
 8001206:	0011      	movs	r1, r2
 8001208:	2b20      	cmp	r3, #32
 800120a:	d003      	beq.n	8001214 <__aeabi_dadd+0x240>
 800120c:	2240      	movs	r2, #64	; 0x40
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	409f      	lsls	r7, r3
 8001212:	433c      	orrs	r4, r7
 8001214:	1e63      	subs	r3, r4, #1
 8001216:	419c      	sbcs	r4, r3
 8001218:	2700      	movs	r7, #0
 800121a:	2600      	movs	r6, #0
 800121c:	430c      	orrs	r4, r1
 800121e:	0763      	lsls	r3, r4, #29
 8001220:	d000      	beq.n	8001224 <__aeabi_dadd+0x250>
 8001222:	e753      	b.n	80010cc <__aeabi_dadd+0xf8>
 8001224:	46b4      	mov	ip, r6
 8001226:	08e4      	lsrs	r4, r4, #3
 8001228:	077b      	lsls	r3, r7, #29
 800122a:	4323      	orrs	r3, r4
 800122c:	08f8      	lsrs	r0, r7, #3
 800122e:	4a43      	ldr	r2, [pc, #268]	; (800133c <__aeabi_dadd+0x368>)
 8001230:	4594      	cmp	ip, r2
 8001232:	d01d      	beq.n	8001270 <__aeabi_dadd+0x29c>
 8001234:	4662      	mov	r2, ip
 8001236:	0307      	lsls	r7, r0, #12
 8001238:	0552      	lsls	r2, r2, #21
 800123a:	0b3f      	lsrs	r7, r7, #12
 800123c:	0d52      	lsrs	r2, r2, #21
 800123e:	e760      	b.n	8001102 <__aeabi_dadd+0x12e>
 8001240:	4644      	mov	r4, r8
 8001242:	430c      	orrs	r4, r1
 8001244:	1e62      	subs	r2, r4, #1
 8001246:	4194      	sbcs	r4, r2
 8001248:	18e4      	adds	r4, r4, r3
 800124a:	429c      	cmp	r4, r3
 800124c:	419b      	sbcs	r3, r3
 800124e:	425f      	negs	r7, r3
 8001250:	183f      	adds	r7, r7, r0
 8001252:	023b      	lsls	r3, r7, #8
 8001254:	d5e3      	bpl.n	800121e <__aeabi_dadd+0x24a>
 8001256:	4b39      	ldr	r3, [pc, #228]	; (800133c <__aeabi_dadd+0x368>)
 8001258:	3601      	adds	r6, #1
 800125a:	429e      	cmp	r6, r3
 800125c:	d000      	beq.n	8001260 <__aeabi_dadd+0x28c>
 800125e:	e0b5      	b.n	80013cc <__aeabi_dadd+0x3f8>
 8001260:	0032      	movs	r2, r6
 8001262:	2700      	movs	r7, #0
 8001264:	2300      	movs	r3, #0
 8001266:	e74c      	b.n	8001102 <__aeabi_dadd+0x12e>
 8001268:	0742      	lsls	r2, r0, #29
 800126a:	08db      	lsrs	r3, r3, #3
 800126c:	4313      	orrs	r3, r2
 800126e:	08c0      	lsrs	r0, r0, #3
 8001270:	001a      	movs	r2, r3
 8001272:	4302      	orrs	r2, r0
 8001274:	d100      	bne.n	8001278 <__aeabi_dadd+0x2a4>
 8001276:	e1e1      	b.n	800163c <__aeabi_dadd+0x668>
 8001278:	2780      	movs	r7, #128	; 0x80
 800127a:	033f      	lsls	r7, r7, #12
 800127c:	4307      	orrs	r7, r0
 800127e:	033f      	lsls	r7, r7, #12
 8001280:	4a2e      	ldr	r2, [pc, #184]	; (800133c <__aeabi_dadd+0x368>)
 8001282:	0b3f      	lsrs	r7, r7, #12
 8001284:	e73d      	b.n	8001102 <__aeabi_dadd+0x12e>
 8001286:	0020      	movs	r0, r4
 8001288:	f001 fcd2 	bl	8002c30 <__clzsi2>
 800128c:	0001      	movs	r1, r0
 800128e:	3118      	adds	r1, #24
 8001290:	291f      	cmp	r1, #31
 8001292:	dc00      	bgt.n	8001296 <__aeabi_dadd+0x2c2>
 8001294:	e6fc      	b.n	8001090 <__aeabi_dadd+0xbc>
 8001296:	3808      	subs	r0, #8
 8001298:	4084      	lsls	r4, r0
 800129a:	0027      	movs	r7, r4
 800129c:	2400      	movs	r4, #0
 800129e:	42b1      	cmp	r1, r6
 80012a0:	db00      	blt.n	80012a4 <__aeabi_dadd+0x2d0>
 80012a2:	e6ff      	b.n	80010a4 <__aeabi_dadd+0xd0>
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <__aeabi_dadd+0x36c>)
 80012a6:	1a76      	subs	r6, r6, r1
 80012a8:	4017      	ands	r7, r2
 80012aa:	e70d      	b.n	80010c8 <__aeabi_dadd+0xf4>
 80012ac:	2a00      	cmp	r2, #0
 80012ae:	d02f      	beq.n	8001310 <__aeabi_dadd+0x33c>
 80012b0:	464a      	mov	r2, r9
 80012b2:	1b92      	subs	r2, r2, r6
 80012b4:	4694      	mov	ip, r2
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d100      	bne.n	80012bc <__aeabi_dadd+0x2e8>
 80012ba:	e0ad      	b.n	8001418 <__aeabi_dadd+0x444>
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <__aeabi_dadd+0x368>)
 80012be:	4591      	cmp	r9, r2
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x2f0>
 80012c2:	e10f      	b.n	80014e4 <__aeabi_dadd+0x510>
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	0412      	lsls	r2, r2, #16
 80012c8:	4310      	orrs	r0, r2
 80012ca:	4662      	mov	r2, ip
 80012cc:	2a38      	cmp	r2, #56	; 0x38
 80012ce:	dd00      	ble.n	80012d2 <__aeabi_dadd+0x2fe>
 80012d0:	e10f      	b.n	80014f2 <__aeabi_dadd+0x51e>
 80012d2:	2a1f      	cmp	r2, #31
 80012d4:	dd00      	ble.n	80012d8 <__aeabi_dadd+0x304>
 80012d6:	e180      	b.n	80015da <__aeabi_dadd+0x606>
 80012d8:	4664      	mov	r4, ip
 80012da:	2220      	movs	r2, #32
 80012dc:	001e      	movs	r6, r3
 80012de:	1b12      	subs	r2, r2, r4
 80012e0:	4667      	mov	r7, ip
 80012e2:	0004      	movs	r4, r0
 80012e4:	4093      	lsls	r3, r2
 80012e6:	4094      	lsls	r4, r2
 80012e8:	40fe      	lsrs	r6, r7
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	4193      	sbcs	r3, r2
 80012ee:	40f8      	lsrs	r0, r7
 80012f0:	4334      	orrs	r4, r6
 80012f2:	431c      	orrs	r4, r3
 80012f4:	4480      	add	r8, r0
 80012f6:	1864      	adds	r4, r4, r1
 80012f8:	428c      	cmp	r4, r1
 80012fa:	41bf      	sbcs	r7, r7
 80012fc:	427f      	negs	r7, r7
 80012fe:	464e      	mov	r6, r9
 8001300:	4447      	add	r7, r8
 8001302:	e7a6      	b.n	8001252 <__aeabi_dadd+0x27e>
 8001304:	4642      	mov	r2, r8
 8001306:	430a      	orrs	r2, r1
 8001308:	0011      	movs	r1, r2
 800130a:	1e4a      	subs	r2, r1, #1
 800130c:	4191      	sbcs	r1, r2
 800130e:	e6ad      	b.n	800106c <__aeabi_dadd+0x98>
 8001310:	4c0c      	ldr	r4, [pc, #48]	; (8001344 <__aeabi_dadd+0x370>)
 8001312:	1c72      	adds	r2, r6, #1
 8001314:	4222      	tst	r2, r4
 8001316:	d000      	beq.n	800131a <__aeabi_dadd+0x346>
 8001318:	e0a1      	b.n	800145e <__aeabi_dadd+0x48a>
 800131a:	0002      	movs	r2, r0
 800131c:	431a      	orrs	r2, r3
 800131e:	2e00      	cmp	r6, #0
 8001320:	d000      	beq.n	8001324 <__aeabi_dadd+0x350>
 8001322:	e0fa      	b.n	800151a <__aeabi_dadd+0x546>
 8001324:	2a00      	cmp	r2, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0x356>
 8001328:	e145      	b.n	80015b6 <__aeabi_dadd+0x5e2>
 800132a:	003a      	movs	r2, r7
 800132c:	430a      	orrs	r2, r1
 800132e:	d000      	beq.n	8001332 <__aeabi_dadd+0x35e>
 8001330:	e146      	b.n	80015c0 <__aeabi_dadd+0x5ec>
 8001332:	0742      	lsls	r2, r0, #29
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	08c0      	lsrs	r0, r0, #3
 800133a:	e77b      	b.n	8001234 <__aeabi_dadd+0x260>
 800133c:	000007ff 	.word	0x000007ff
 8001340:	ff7fffff 	.word	0xff7fffff
 8001344:	000007fe 	.word	0x000007fe
 8001348:	4647      	mov	r7, r8
 800134a:	1a5c      	subs	r4, r3, r1
 800134c:	1bc2      	subs	r2, r0, r7
 800134e:	42a3      	cmp	r3, r4
 8001350:	41bf      	sbcs	r7, r7
 8001352:	427f      	negs	r7, r7
 8001354:	46b9      	mov	r9, r7
 8001356:	0017      	movs	r7, r2
 8001358:	464a      	mov	r2, r9
 800135a:	1abf      	subs	r7, r7, r2
 800135c:	023a      	lsls	r2, r7, #8
 800135e:	d500      	bpl.n	8001362 <__aeabi_dadd+0x38e>
 8001360:	e08d      	b.n	800147e <__aeabi_dadd+0x4aa>
 8001362:	0023      	movs	r3, r4
 8001364:	433b      	orrs	r3, r7
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x396>
 8001368:	e68a      	b.n	8001080 <__aeabi_dadd+0xac>
 800136a:	2000      	movs	r0, #0
 800136c:	2500      	movs	r5, #0
 800136e:	e761      	b.n	8001234 <__aeabi_dadd+0x260>
 8001370:	4cb4      	ldr	r4, [pc, #720]	; (8001644 <__aeabi_dadd+0x670>)
 8001372:	45a1      	cmp	r9, r4
 8001374:	d100      	bne.n	8001378 <__aeabi_dadd+0x3a4>
 8001376:	e0ad      	b.n	80014d4 <__aeabi_dadd+0x500>
 8001378:	2480      	movs	r4, #128	; 0x80
 800137a:	0424      	lsls	r4, r4, #16
 800137c:	4320      	orrs	r0, r4
 800137e:	4664      	mov	r4, ip
 8001380:	2c38      	cmp	r4, #56	; 0x38
 8001382:	dc3d      	bgt.n	8001400 <__aeabi_dadd+0x42c>
 8001384:	4662      	mov	r2, ip
 8001386:	2c1f      	cmp	r4, #31
 8001388:	dd00      	ble.n	800138c <__aeabi_dadd+0x3b8>
 800138a:	e0b7      	b.n	80014fc <__aeabi_dadd+0x528>
 800138c:	2520      	movs	r5, #32
 800138e:	001e      	movs	r6, r3
 8001390:	1b2d      	subs	r5, r5, r4
 8001392:	0004      	movs	r4, r0
 8001394:	40ab      	lsls	r3, r5
 8001396:	40ac      	lsls	r4, r5
 8001398:	40d6      	lsrs	r6, r2
 800139a:	40d0      	lsrs	r0, r2
 800139c:	4642      	mov	r2, r8
 800139e:	1e5d      	subs	r5, r3, #1
 80013a0:	41ab      	sbcs	r3, r5
 80013a2:	4334      	orrs	r4, r6
 80013a4:	1a12      	subs	r2, r2, r0
 80013a6:	4690      	mov	r8, r2
 80013a8:	4323      	orrs	r3, r4
 80013aa:	e02c      	b.n	8001406 <__aeabi_dadd+0x432>
 80013ac:	0742      	lsls	r2, r0, #29
 80013ae:	08db      	lsrs	r3, r3, #3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	08c0      	lsrs	r0, r0, #3
 80013b4:	e73b      	b.n	800122e <__aeabi_dadd+0x25a>
 80013b6:	185c      	adds	r4, r3, r1
 80013b8:	429c      	cmp	r4, r3
 80013ba:	419b      	sbcs	r3, r3
 80013bc:	4440      	add	r0, r8
 80013be:	425b      	negs	r3, r3
 80013c0:	18c7      	adds	r7, r0, r3
 80013c2:	2601      	movs	r6, #1
 80013c4:	023b      	lsls	r3, r7, #8
 80013c6:	d400      	bmi.n	80013ca <__aeabi_dadd+0x3f6>
 80013c8:	e729      	b.n	800121e <__aeabi_dadd+0x24a>
 80013ca:	2602      	movs	r6, #2
 80013cc:	4a9e      	ldr	r2, [pc, #632]	; (8001648 <__aeabi_dadd+0x674>)
 80013ce:	0863      	lsrs	r3, r4, #1
 80013d0:	4017      	ands	r7, r2
 80013d2:	2201      	movs	r2, #1
 80013d4:	4014      	ands	r4, r2
 80013d6:	431c      	orrs	r4, r3
 80013d8:	07fb      	lsls	r3, r7, #31
 80013da:	431c      	orrs	r4, r3
 80013dc:	087f      	lsrs	r7, r7, #1
 80013de:	e673      	b.n	80010c8 <__aeabi_dadd+0xf4>
 80013e0:	4644      	mov	r4, r8
 80013e2:	3a20      	subs	r2, #32
 80013e4:	40d4      	lsrs	r4, r2
 80013e6:	4662      	mov	r2, ip
 80013e8:	2a20      	cmp	r2, #32
 80013ea:	d005      	beq.n	80013f8 <__aeabi_dadd+0x424>
 80013ec:	4667      	mov	r7, ip
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	1bd2      	subs	r2, r2, r7
 80013f2:	4647      	mov	r7, r8
 80013f4:	4097      	lsls	r7, r2
 80013f6:	4339      	orrs	r1, r7
 80013f8:	1e4a      	subs	r2, r1, #1
 80013fa:	4191      	sbcs	r1, r2
 80013fc:	4321      	orrs	r1, r4
 80013fe:	e635      	b.n	800106c <__aeabi_dadd+0x98>
 8001400:	4303      	orrs	r3, r0
 8001402:	1e58      	subs	r0, r3, #1
 8001404:	4183      	sbcs	r3, r0
 8001406:	1acc      	subs	r4, r1, r3
 8001408:	42a1      	cmp	r1, r4
 800140a:	41bf      	sbcs	r7, r7
 800140c:	4643      	mov	r3, r8
 800140e:	427f      	negs	r7, r7
 8001410:	4655      	mov	r5, sl
 8001412:	464e      	mov	r6, r9
 8001414:	1bdf      	subs	r7, r3, r7
 8001416:	e62e      	b.n	8001076 <__aeabi_dadd+0xa2>
 8001418:	0002      	movs	r2, r0
 800141a:	431a      	orrs	r2, r3
 800141c:	d100      	bne.n	8001420 <__aeabi_dadd+0x44c>
 800141e:	e0bd      	b.n	800159c <__aeabi_dadd+0x5c8>
 8001420:	4662      	mov	r2, ip
 8001422:	4664      	mov	r4, ip
 8001424:	3a01      	subs	r2, #1
 8001426:	2c01      	cmp	r4, #1
 8001428:	d100      	bne.n	800142c <__aeabi_dadd+0x458>
 800142a:	e0e5      	b.n	80015f8 <__aeabi_dadd+0x624>
 800142c:	4c85      	ldr	r4, [pc, #532]	; (8001644 <__aeabi_dadd+0x670>)
 800142e:	45a4      	cmp	ip, r4
 8001430:	d058      	beq.n	80014e4 <__aeabi_dadd+0x510>
 8001432:	4694      	mov	ip, r2
 8001434:	e749      	b.n	80012ca <__aeabi_dadd+0x2f6>
 8001436:	4664      	mov	r4, ip
 8001438:	2220      	movs	r2, #32
 800143a:	1b12      	subs	r2, r2, r4
 800143c:	4644      	mov	r4, r8
 800143e:	4094      	lsls	r4, r2
 8001440:	000f      	movs	r7, r1
 8001442:	46a1      	mov	r9, r4
 8001444:	4664      	mov	r4, ip
 8001446:	4091      	lsls	r1, r2
 8001448:	40e7      	lsrs	r7, r4
 800144a:	464c      	mov	r4, r9
 800144c:	1e4a      	subs	r2, r1, #1
 800144e:	4191      	sbcs	r1, r2
 8001450:	433c      	orrs	r4, r7
 8001452:	4642      	mov	r2, r8
 8001454:	430c      	orrs	r4, r1
 8001456:	4661      	mov	r1, ip
 8001458:	40ca      	lsrs	r2, r1
 800145a:	1880      	adds	r0, r0, r2
 800145c:	e6f4      	b.n	8001248 <__aeabi_dadd+0x274>
 800145e:	4c79      	ldr	r4, [pc, #484]	; (8001644 <__aeabi_dadd+0x670>)
 8001460:	42a2      	cmp	r2, r4
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0x492>
 8001464:	e6fd      	b.n	8001262 <__aeabi_dadd+0x28e>
 8001466:	1859      	adds	r1, r3, r1
 8001468:	4299      	cmp	r1, r3
 800146a:	419b      	sbcs	r3, r3
 800146c:	4440      	add	r0, r8
 800146e:	425f      	negs	r7, r3
 8001470:	19c7      	adds	r7, r0, r7
 8001472:	07fc      	lsls	r4, r7, #31
 8001474:	0849      	lsrs	r1, r1, #1
 8001476:	0016      	movs	r6, r2
 8001478:	430c      	orrs	r4, r1
 800147a:	087f      	lsrs	r7, r7, #1
 800147c:	e6cf      	b.n	800121e <__aeabi_dadd+0x24a>
 800147e:	1acc      	subs	r4, r1, r3
 8001480:	42a1      	cmp	r1, r4
 8001482:	41bf      	sbcs	r7, r7
 8001484:	4643      	mov	r3, r8
 8001486:	427f      	negs	r7, r7
 8001488:	1a18      	subs	r0, r3, r0
 800148a:	4655      	mov	r5, sl
 800148c:	1bc7      	subs	r7, r0, r7
 800148e:	e5f7      	b.n	8001080 <__aeabi_dadd+0xac>
 8001490:	08c9      	lsrs	r1, r1, #3
 8001492:	077b      	lsls	r3, r7, #29
 8001494:	4655      	mov	r5, sl
 8001496:	430b      	orrs	r3, r1
 8001498:	08f8      	lsrs	r0, r7, #3
 800149a:	e6c8      	b.n	800122e <__aeabi_dadd+0x25a>
 800149c:	2c00      	cmp	r4, #0
 800149e:	d000      	beq.n	80014a2 <__aeabi_dadd+0x4ce>
 80014a0:	e081      	b.n	80015a6 <__aeabi_dadd+0x5d2>
 80014a2:	4643      	mov	r3, r8
 80014a4:	430b      	orrs	r3, r1
 80014a6:	d115      	bne.n	80014d4 <__aeabi_dadd+0x500>
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	2500      	movs	r5, #0
 80014ac:	0300      	lsls	r0, r0, #12
 80014ae:	e6e3      	b.n	8001278 <__aeabi_dadd+0x2a4>
 80014b0:	1a5c      	subs	r4, r3, r1
 80014b2:	42a3      	cmp	r3, r4
 80014b4:	419b      	sbcs	r3, r3
 80014b6:	1bc7      	subs	r7, r0, r7
 80014b8:	425b      	negs	r3, r3
 80014ba:	2601      	movs	r6, #1
 80014bc:	1aff      	subs	r7, r7, r3
 80014be:	e5da      	b.n	8001076 <__aeabi_dadd+0xa2>
 80014c0:	0742      	lsls	r2, r0, #29
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	08c0      	lsrs	r0, r0, #3
 80014c8:	e6d2      	b.n	8001270 <__aeabi_dadd+0x29c>
 80014ca:	0742      	lsls	r2, r0, #29
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	08c0      	lsrs	r0, r0, #3
 80014d2:	e6ac      	b.n	800122e <__aeabi_dadd+0x25a>
 80014d4:	4643      	mov	r3, r8
 80014d6:	4642      	mov	r2, r8
 80014d8:	08c9      	lsrs	r1, r1, #3
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	4655      	mov	r5, sl
 80014de:	430b      	orrs	r3, r1
 80014e0:	08d0      	lsrs	r0, r2, #3
 80014e2:	e6c5      	b.n	8001270 <__aeabi_dadd+0x29c>
 80014e4:	4643      	mov	r3, r8
 80014e6:	4642      	mov	r2, r8
 80014e8:	075b      	lsls	r3, r3, #29
 80014ea:	08c9      	lsrs	r1, r1, #3
 80014ec:	430b      	orrs	r3, r1
 80014ee:	08d0      	lsrs	r0, r2, #3
 80014f0:	e6be      	b.n	8001270 <__aeabi_dadd+0x29c>
 80014f2:	4303      	orrs	r3, r0
 80014f4:	001c      	movs	r4, r3
 80014f6:	1e63      	subs	r3, r4, #1
 80014f8:	419c      	sbcs	r4, r3
 80014fa:	e6fc      	b.n	80012f6 <__aeabi_dadd+0x322>
 80014fc:	0002      	movs	r2, r0
 80014fe:	3c20      	subs	r4, #32
 8001500:	40e2      	lsrs	r2, r4
 8001502:	0014      	movs	r4, r2
 8001504:	4662      	mov	r2, ip
 8001506:	2a20      	cmp	r2, #32
 8001508:	d003      	beq.n	8001512 <__aeabi_dadd+0x53e>
 800150a:	2540      	movs	r5, #64	; 0x40
 800150c:	1aad      	subs	r5, r5, r2
 800150e:	40a8      	lsls	r0, r5
 8001510:	4303      	orrs	r3, r0
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	4183      	sbcs	r3, r0
 8001516:	4323      	orrs	r3, r4
 8001518:	e775      	b.n	8001406 <__aeabi_dadd+0x432>
 800151a:	2a00      	cmp	r2, #0
 800151c:	d0e2      	beq.n	80014e4 <__aeabi_dadd+0x510>
 800151e:	003a      	movs	r2, r7
 8001520:	430a      	orrs	r2, r1
 8001522:	d0cd      	beq.n	80014c0 <__aeabi_dadd+0x4ec>
 8001524:	0742      	lsls	r2, r0, #29
 8001526:	08db      	lsrs	r3, r3, #3
 8001528:	4313      	orrs	r3, r2
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	08c0      	lsrs	r0, r0, #3
 800152e:	0312      	lsls	r2, r2, #12
 8001530:	4210      	tst	r0, r2
 8001532:	d006      	beq.n	8001542 <__aeabi_dadd+0x56e>
 8001534:	08fc      	lsrs	r4, r7, #3
 8001536:	4214      	tst	r4, r2
 8001538:	d103      	bne.n	8001542 <__aeabi_dadd+0x56e>
 800153a:	0020      	movs	r0, r4
 800153c:	08cb      	lsrs	r3, r1, #3
 800153e:	077a      	lsls	r2, r7, #29
 8001540:	4313      	orrs	r3, r2
 8001542:	0f5a      	lsrs	r2, r3, #29
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	0752      	lsls	r2, r2, #29
 8001548:	08db      	lsrs	r3, r3, #3
 800154a:	4313      	orrs	r3, r2
 800154c:	e690      	b.n	8001270 <__aeabi_dadd+0x29c>
 800154e:	4643      	mov	r3, r8
 8001550:	430b      	orrs	r3, r1
 8001552:	d100      	bne.n	8001556 <__aeabi_dadd+0x582>
 8001554:	e709      	b.n	800136a <__aeabi_dadd+0x396>
 8001556:	4643      	mov	r3, r8
 8001558:	4642      	mov	r2, r8
 800155a:	08c9      	lsrs	r1, r1, #3
 800155c:	075b      	lsls	r3, r3, #29
 800155e:	4655      	mov	r5, sl
 8001560:	430b      	orrs	r3, r1
 8001562:	08d0      	lsrs	r0, r2, #3
 8001564:	e666      	b.n	8001234 <__aeabi_dadd+0x260>
 8001566:	1acc      	subs	r4, r1, r3
 8001568:	42a1      	cmp	r1, r4
 800156a:	4189      	sbcs	r1, r1
 800156c:	1a3f      	subs	r7, r7, r0
 800156e:	4249      	negs	r1, r1
 8001570:	4655      	mov	r5, sl
 8001572:	2601      	movs	r6, #1
 8001574:	1a7f      	subs	r7, r7, r1
 8001576:	e57e      	b.n	8001076 <__aeabi_dadd+0xa2>
 8001578:	4642      	mov	r2, r8
 800157a:	1a5c      	subs	r4, r3, r1
 800157c:	1a87      	subs	r7, r0, r2
 800157e:	42a3      	cmp	r3, r4
 8001580:	4192      	sbcs	r2, r2
 8001582:	4252      	negs	r2, r2
 8001584:	1abf      	subs	r7, r7, r2
 8001586:	023a      	lsls	r2, r7, #8
 8001588:	d53d      	bpl.n	8001606 <__aeabi_dadd+0x632>
 800158a:	1acc      	subs	r4, r1, r3
 800158c:	42a1      	cmp	r1, r4
 800158e:	4189      	sbcs	r1, r1
 8001590:	4643      	mov	r3, r8
 8001592:	4249      	negs	r1, r1
 8001594:	1a1f      	subs	r7, r3, r0
 8001596:	4655      	mov	r5, sl
 8001598:	1a7f      	subs	r7, r7, r1
 800159a:	e595      	b.n	80010c8 <__aeabi_dadd+0xf4>
 800159c:	077b      	lsls	r3, r7, #29
 800159e:	08c9      	lsrs	r1, r1, #3
 80015a0:	430b      	orrs	r3, r1
 80015a2:	08f8      	lsrs	r0, r7, #3
 80015a4:	e643      	b.n	800122e <__aeabi_dadd+0x25a>
 80015a6:	4644      	mov	r4, r8
 80015a8:	08db      	lsrs	r3, r3, #3
 80015aa:	430c      	orrs	r4, r1
 80015ac:	d130      	bne.n	8001610 <__aeabi_dadd+0x63c>
 80015ae:	0742      	lsls	r2, r0, #29
 80015b0:	4313      	orrs	r3, r2
 80015b2:	08c0      	lsrs	r0, r0, #3
 80015b4:	e65c      	b.n	8001270 <__aeabi_dadd+0x29c>
 80015b6:	077b      	lsls	r3, r7, #29
 80015b8:	08c9      	lsrs	r1, r1, #3
 80015ba:	430b      	orrs	r3, r1
 80015bc:	08f8      	lsrs	r0, r7, #3
 80015be:	e639      	b.n	8001234 <__aeabi_dadd+0x260>
 80015c0:	185c      	adds	r4, r3, r1
 80015c2:	429c      	cmp	r4, r3
 80015c4:	419b      	sbcs	r3, r3
 80015c6:	4440      	add	r0, r8
 80015c8:	425b      	negs	r3, r3
 80015ca:	18c7      	adds	r7, r0, r3
 80015cc:	023b      	lsls	r3, r7, #8
 80015ce:	d400      	bmi.n	80015d2 <__aeabi_dadd+0x5fe>
 80015d0:	e625      	b.n	800121e <__aeabi_dadd+0x24a>
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <__aeabi_dadd+0x674>)
 80015d4:	2601      	movs	r6, #1
 80015d6:	401f      	ands	r7, r3
 80015d8:	e621      	b.n	800121e <__aeabi_dadd+0x24a>
 80015da:	0004      	movs	r4, r0
 80015dc:	3a20      	subs	r2, #32
 80015de:	40d4      	lsrs	r4, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	2a20      	cmp	r2, #32
 80015e4:	d004      	beq.n	80015f0 <__aeabi_dadd+0x61c>
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	4666      	mov	r6, ip
 80015ea:	1b92      	subs	r2, r2, r6
 80015ec:	4090      	lsls	r0, r2
 80015ee:	4303      	orrs	r3, r0
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	4193      	sbcs	r3, r2
 80015f4:	431c      	orrs	r4, r3
 80015f6:	e67e      	b.n	80012f6 <__aeabi_dadd+0x322>
 80015f8:	185c      	adds	r4, r3, r1
 80015fa:	428c      	cmp	r4, r1
 80015fc:	4189      	sbcs	r1, r1
 80015fe:	4440      	add	r0, r8
 8001600:	4249      	negs	r1, r1
 8001602:	1847      	adds	r7, r0, r1
 8001604:	e6dd      	b.n	80013c2 <__aeabi_dadd+0x3ee>
 8001606:	0023      	movs	r3, r4
 8001608:	433b      	orrs	r3, r7
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x63a>
 800160c:	e6ad      	b.n	800136a <__aeabi_dadd+0x396>
 800160e:	e606      	b.n	800121e <__aeabi_dadd+0x24a>
 8001610:	0744      	lsls	r4, r0, #29
 8001612:	4323      	orrs	r3, r4
 8001614:	2480      	movs	r4, #128	; 0x80
 8001616:	08c0      	lsrs	r0, r0, #3
 8001618:	0324      	lsls	r4, r4, #12
 800161a:	4220      	tst	r0, r4
 800161c:	d008      	beq.n	8001630 <__aeabi_dadd+0x65c>
 800161e:	4642      	mov	r2, r8
 8001620:	08d6      	lsrs	r6, r2, #3
 8001622:	4226      	tst	r6, r4
 8001624:	d104      	bne.n	8001630 <__aeabi_dadd+0x65c>
 8001626:	4655      	mov	r5, sl
 8001628:	0030      	movs	r0, r6
 800162a:	08cb      	lsrs	r3, r1, #3
 800162c:	0751      	lsls	r1, r2, #29
 800162e:	430b      	orrs	r3, r1
 8001630:	0f5a      	lsrs	r2, r3, #29
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	08db      	lsrs	r3, r3, #3
 8001636:	0752      	lsls	r2, r2, #29
 8001638:	4313      	orrs	r3, r2
 800163a:	e619      	b.n	8001270 <__aeabi_dadd+0x29c>
 800163c:	2300      	movs	r3, #0
 800163e:	4a01      	ldr	r2, [pc, #4]	; (8001644 <__aeabi_dadd+0x670>)
 8001640:	001f      	movs	r7, r3
 8001642:	e55e      	b.n	8001102 <__aeabi_dadd+0x12e>
 8001644:	000007ff 	.word	0x000007ff
 8001648:	ff7fffff 	.word	0xff7fffff

0800164c <__aeabi_ddiv>:
 800164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800164e:	4657      	mov	r7, sl
 8001650:	464e      	mov	r6, r9
 8001652:	4645      	mov	r5, r8
 8001654:	46de      	mov	lr, fp
 8001656:	b5e0      	push	{r5, r6, r7, lr}
 8001658:	4681      	mov	r9, r0
 800165a:	0005      	movs	r5, r0
 800165c:	030c      	lsls	r4, r1, #12
 800165e:	0048      	lsls	r0, r1, #1
 8001660:	4692      	mov	sl, r2
 8001662:	001f      	movs	r7, r3
 8001664:	b085      	sub	sp, #20
 8001666:	0b24      	lsrs	r4, r4, #12
 8001668:	0d40      	lsrs	r0, r0, #21
 800166a:	0fce      	lsrs	r6, r1, #31
 800166c:	2800      	cmp	r0, #0
 800166e:	d100      	bne.n	8001672 <__aeabi_ddiv+0x26>
 8001670:	e156      	b.n	8001920 <__aeabi_ddiv+0x2d4>
 8001672:	4bd4      	ldr	r3, [pc, #848]	; (80019c4 <__aeabi_ddiv+0x378>)
 8001674:	4298      	cmp	r0, r3
 8001676:	d100      	bne.n	800167a <__aeabi_ddiv+0x2e>
 8001678:	e172      	b.n	8001960 <__aeabi_ddiv+0x314>
 800167a:	0f6b      	lsrs	r3, r5, #29
 800167c:	00e4      	lsls	r4, r4, #3
 800167e:	431c      	orrs	r4, r3
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	041b      	lsls	r3, r3, #16
 8001684:	4323      	orrs	r3, r4
 8001686:	4698      	mov	r8, r3
 8001688:	4bcf      	ldr	r3, [pc, #828]	; (80019c8 <__aeabi_ddiv+0x37c>)
 800168a:	00ed      	lsls	r5, r5, #3
 800168c:	469b      	mov	fp, r3
 800168e:	2300      	movs	r3, #0
 8001690:	4699      	mov	r9, r3
 8001692:	4483      	add	fp, r0
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	033c      	lsls	r4, r7, #12
 8001698:	007b      	lsls	r3, r7, #1
 800169a:	4650      	mov	r0, sl
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	0fff      	lsrs	r7, r7, #31
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d100      	bne.n	80016a8 <__aeabi_ddiv+0x5c>
 80016a6:	e11f      	b.n	80018e8 <__aeabi_ddiv+0x29c>
 80016a8:	4ac6      	ldr	r2, [pc, #792]	; (80019c4 <__aeabi_ddiv+0x378>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d100      	bne.n	80016b0 <__aeabi_ddiv+0x64>
 80016ae:	e162      	b.n	8001976 <__aeabi_ddiv+0x32a>
 80016b0:	49c5      	ldr	r1, [pc, #788]	; (80019c8 <__aeabi_ddiv+0x37c>)
 80016b2:	0f42      	lsrs	r2, r0, #29
 80016b4:	468c      	mov	ip, r1
 80016b6:	00e4      	lsls	r4, r4, #3
 80016b8:	4659      	mov	r1, fp
 80016ba:	4314      	orrs	r4, r2
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	4463      	add	r3, ip
 80016c0:	0412      	lsls	r2, r2, #16
 80016c2:	1acb      	subs	r3, r1, r3
 80016c4:	4314      	orrs	r4, r2
 80016c6:	469b      	mov	fp, r3
 80016c8:	00c2      	lsls	r2, r0, #3
 80016ca:	2000      	movs	r0, #0
 80016cc:	0033      	movs	r3, r6
 80016ce:	407b      	eors	r3, r7
 80016d0:	469a      	mov	sl, r3
 80016d2:	464b      	mov	r3, r9
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d827      	bhi.n	8001728 <__aeabi_ddiv+0xdc>
 80016d8:	49bc      	ldr	r1, [pc, #752]	; (80019cc <__aeabi_ddiv+0x380>)
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	58cb      	ldr	r3, [r1, r3]
 80016de:	469f      	mov	pc, r3
 80016e0:	46b2      	mov	sl, r6
 80016e2:	9b00      	ldr	r3, [sp, #0]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d016      	beq.n	8001716 <__aeabi_ddiv+0xca>
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0xa2>
 80016ec:	e28e      	b.n	8001c0c <__aeabi_ddiv+0x5c0>
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d000      	beq.n	80016f4 <__aeabi_ddiv+0xa8>
 80016f2:	e0d9      	b.n	80018a8 <__aeabi_ddiv+0x25c>
 80016f4:	2300      	movs	r3, #0
 80016f6:	2400      	movs	r4, #0
 80016f8:	2500      	movs	r5, #0
 80016fa:	4652      	mov	r2, sl
 80016fc:	051b      	lsls	r3, r3, #20
 80016fe:	4323      	orrs	r3, r4
 8001700:	07d2      	lsls	r2, r2, #31
 8001702:	4313      	orrs	r3, r2
 8001704:	0028      	movs	r0, r5
 8001706:	0019      	movs	r1, r3
 8001708:	b005      	add	sp, #20
 800170a:	bcf0      	pop	{r4, r5, r6, r7}
 800170c:	46bb      	mov	fp, r7
 800170e:	46b2      	mov	sl, r6
 8001710:	46a9      	mov	r9, r5
 8001712:	46a0      	mov	r8, r4
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001716:	2400      	movs	r4, #0
 8001718:	2500      	movs	r5, #0
 800171a:	4baa      	ldr	r3, [pc, #680]	; (80019c4 <__aeabi_ddiv+0x378>)
 800171c:	e7ed      	b.n	80016fa <__aeabi_ddiv+0xae>
 800171e:	46ba      	mov	sl, r7
 8001720:	46a0      	mov	r8, r4
 8001722:	0015      	movs	r5, r2
 8001724:	9000      	str	r0, [sp, #0]
 8001726:	e7dc      	b.n	80016e2 <__aeabi_ddiv+0x96>
 8001728:	4544      	cmp	r4, r8
 800172a:	d200      	bcs.n	800172e <__aeabi_ddiv+0xe2>
 800172c:	e1c7      	b.n	8001abe <__aeabi_ddiv+0x472>
 800172e:	d100      	bne.n	8001732 <__aeabi_ddiv+0xe6>
 8001730:	e1c2      	b.n	8001ab8 <__aeabi_ddiv+0x46c>
 8001732:	2301      	movs	r3, #1
 8001734:	425b      	negs	r3, r3
 8001736:	469c      	mov	ip, r3
 8001738:	002e      	movs	r6, r5
 800173a:	4640      	mov	r0, r8
 800173c:	2500      	movs	r5, #0
 800173e:	44e3      	add	fp, ip
 8001740:	0223      	lsls	r3, r4, #8
 8001742:	0e14      	lsrs	r4, r2, #24
 8001744:	431c      	orrs	r4, r3
 8001746:	0c1b      	lsrs	r3, r3, #16
 8001748:	4699      	mov	r9, r3
 800174a:	0423      	lsls	r3, r4, #16
 800174c:	0c1f      	lsrs	r7, r3, #16
 800174e:	0212      	lsls	r2, r2, #8
 8001750:	4649      	mov	r1, r9
 8001752:	9200      	str	r2, [sp, #0]
 8001754:	9701      	str	r7, [sp, #4]
 8001756:	f7fe fd79 	bl	800024c <__aeabi_uidivmod>
 800175a:	0002      	movs	r2, r0
 800175c:	437a      	muls	r2, r7
 800175e:	040b      	lsls	r3, r1, #16
 8001760:	0c31      	lsrs	r1, r6, #16
 8001762:	4680      	mov	r8, r0
 8001764:	4319      	orrs	r1, r3
 8001766:	428a      	cmp	r2, r1
 8001768:	d907      	bls.n	800177a <__aeabi_ddiv+0x12e>
 800176a:	2301      	movs	r3, #1
 800176c:	425b      	negs	r3, r3
 800176e:	469c      	mov	ip, r3
 8001770:	1909      	adds	r1, r1, r4
 8001772:	44e0      	add	r8, ip
 8001774:	428c      	cmp	r4, r1
 8001776:	d800      	bhi.n	800177a <__aeabi_ddiv+0x12e>
 8001778:	e207      	b.n	8001b8a <__aeabi_ddiv+0x53e>
 800177a:	1a88      	subs	r0, r1, r2
 800177c:	4649      	mov	r1, r9
 800177e:	f7fe fd65 	bl	800024c <__aeabi_uidivmod>
 8001782:	0409      	lsls	r1, r1, #16
 8001784:	468c      	mov	ip, r1
 8001786:	0431      	lsls	r1, r6, #16
 8001788:	4666      	mov	r6, ip
 800178a:	9a01      	ldr	r2, [sp, #4]
 800178c:	0c09      	lsrs	r1, r1, #16
 800178e:	4342      	muls	r2, r0
 8001790:	0003      	movs	r3, r0
 8001792:	4331      	orrs	r1, r6
 8001794:	428a      	cmp	r2, r1
 8001796:	d904      	bls.n	80017a2 <__aeabi_ddiv+0x156>
 8001798:	1909      	adds	r1, r1, r4
 800179a:	3b01      	subs	r3, #1
 800179c:	428c      	cmp	r4, r1
 800179e:	d800      	bhi.n	80017a2 <__aeabi_ddiv+0x156>
 80017a0:	e1ed      	b.n	8001b7e <__aeabi_ddiv+0x532>
 80017a2:	1a88      	subs	r0, r1, r2
 80017a4:	4642      	mov	r2, r8
 80017a6:	0412      	lsls	r2, r2, #16
 80017a8:	431a      	orrs	r2, r3
 80017aa:	4690      	mov	r8, r2
 80017ac:	4641      	mov	r1, r8
 80017ae:	9b00      	ldr	r3, [sp, #0]
 80017b0:	040e      	lsls	r6, r1, #16
 80017b2:	0c1b      	lsrs	r3, r3, #16
 80017b4:	001f      	movs	r7, r3
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	9b00      	ldr	r3, [sp, #0]
 80017ba:	0c36      	lsrs	r6, r6, #16
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	0c19      	lsrs	r1, r3, #16
 80017c0:	000b      	movs	r3, r1
 80017c2:	4373      	muls	r3, r6
 80017c4:	0c12      	lsrs	r2, r2, #16
 80017c6:	437e      	muls	r6, r7
 80017c8:	9103      	str	r1, [sp, #12]
 80017ca:	4351      	muls	r1, r2
 80017cc:	437a      	muls	r2, r7
 80017ce:	0c1f      	lsrs	r7, r3, #16
 80017d0:	46bc      	mov	ip, r7
 80017d2:	1876      	adds	r6, r6, r1
 80017d4:	4466      	add	r6, ip
 80017d6:	42b1      	cmp	r1, r6
 80017d8:	d903      	bls.n	80017e2 <__aeabi_ddiv+0x196>
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	0249      	lsls	r1, r1, #9
 80017de:	468c      	mov	ip, r1
 80017e0:	4462      	add	r2, ip
 80017e2:	0c31      	lsrs	r1, r6, #16
 80017e4:	188a      	adds	r2, r1, r2
 80017e6:	0431      	lsls	r1, r6, #16
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	198e      	adds	r6, r1, r6
 80017ee:	4290      	cmp	r0, r2
 80017f0:	d302      	bcc.n	80017f8 <__aeabi_ddiv+0x1ac>
 80017f2:	d112      	bne.n	800181a <__aeabi_ddiv+0x1ce>
 80017f4:	42b5      	cmp	r5, r6
 80017f6:	d210      	bcs.n	800181a <__aeabi_ddiv+0x1ce>
 80017f8:	4643      	mov	r3, r8
 80017fa:	1e59      	subs	r1, r3, #1
 80017fc:	9b00      	ldr	r3, [sp, #0]
 80017fe:	469c      	mov	ip, r3
 8001800:	4465      	add	r5, ip
 8001802:	001f      	movs	r7, r3
 8001804:	429d      	cmp	r5, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	425b      	negs	r3, r3
 800180a:	191b      	adds	r3, r3, r4
 800180c:	18c0      	adds	r0, r0, r3
 800180e:	4284      	cmp	r4, r0
 8001810:	d200      	bcs.n	8001814 <__aeabi_ddiv+0x1c8>
 8001812:	e1a0      	b.n	8001b56 <__aeabi_ddiv+0x50a>
 8001814:	d100      	bne.n	8001818 <__aeabi_ddiv+0x1cc>
 8001816:	e19b      	b.n	8001b50 <__aeabi_ddiv+0x504>
 8001818:	4688      	mov	r8, r1
 800181a:	1bae      	subs	r6, r5, r6
 800181c:	42b5      	cmp	r5, r6
 800181e:	41ad      	sbcs	r5, r5
 8001820:	1a80      	subs	r0, r0, r2
 8001822:	426d      	negs	r5, r5
 8001824:	1b40      	subs	r0, r0, r5
 8001826:	4284      	cmp	r4, r0
 8001828:	d100      	bne.n	800182c <__aeabi_ddiv+0x1e0>
 800182a:	e1d5      	b.n	8001bd8 <__aeabi_ddiv+0x58c>
 800182c:	4649      	mov	r1, r9
 800182e:	f7fe fd0d 	bl	800024c <__aeabi_uidivmod>
 8001832:	9a01      	ldr	r2, [sp, #4]
 8001834:	040b      	lsls	r3, r1, #16
 8001836:	4342      	muls	r2, r0
 8001838:	0c31      	lsrs	r1, r6, #16
 800183a:	0005      	movs	r5, r0
 800183c:	4319      	orrs	r1, r3
 800183e:	428a      	cmp	r2, r1
 8001840:	d900      	bls.n	8001844 <__aeabi_ddiv+0x1f8>
 8001842:	e16c      	b.n	8001b1e <__aeabi_ddiv+0x4d2>
 8001844:	1a88      	subs	r0, r1, r2
 8001846:	4649      	mov	r1, r9
 8001848:	f7fe fd00 	bl	800024c <__aeabi_uidivmod>
 800184c:	9a01      	ldr	r2, [sp, #4]
 800184e:	0436      	lsls	r6, r6, #16
 8001850:	4342      	muls	r2, r0
 8001852:	0409      	lsls	r1, r1, #16
 8001854:	0c36      	lsrs	r6, r6, #16
 8001856:	0003      	movs	r3, r0
 8001858:	430e      	orrs	r6, r1
 800185a:	42b2      	cmp	r2, r6
 800185c:	d900      	bls.n	8001860 <__aeabi_ddiv+0x214>
 800185e:	e153      	b.n	8001b08 <__aeabi_ddiv+0x4bc>
 8001860:	9803      	ldr	r0, [sp, #12]
 8001862:	1ab6      	subs	r6, r6, r2
 8001864:	0002      	movs	r2, r0
 8001866:	042d      	lsls	r5, r5, #16
 8001868:	431d      	orrs	r5, r3
 800186a:	9f02      	ldr	r7, [sp, #8]
 800186c:	042b      	lsls	r3, r5, #16
 800186e:	0c1b      	lsrs	r3, r3, #16
 8001870:	435a      	muls	r2, r3
 8001872:	437b      	muls	r3, r7
 8001874:	469c      	mov	ip, r3
 8001876:	0c29      	lsrs	r1, r5, #16
 8001878:	4348      	muls	r0, r1
 800187a:	0c13      	lsrs	r3, r2, #16
 800187c:	4484      	add	ip, r0
 800187e:	4463      	add	r3, ip
 8001880:	4379      	muls	r1, r7
 8001882:	4298      	cmp	r0, r3
 8001884:	d903      	bls.n	800188e <__aeabi_ddiv+0x242>
 8001886:	2080      	movs	r0, #128	; 0x80
 8001888:	0240      	lsls	r0, r0, #9
 800188a:	4684      	mov	ip, r0
 800188c:	4461      	add	r1, ip
 800188e:	0c18      	lsrs	r0, r3, #16
 8001890:	0412      	lsls	r2, r2, #16
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	0c12      	lsrs	r2, r2, #16
 8001896:	1841      	adds	r1, r0, r1
 8001898:	189b      	adds	r3, r3, r2
 800189a:	428e      	cmp	r6, r1
 800189c:	d200      	bcs.n	80018a0 <__aeabi_ddiv+0x254>
 800189e:	e0ff      	b.n	8001aa0 <__aeabi_ddiv+0x454>
 80018a0:	d100      	bne.n	80018a4 <__aeabi_ddiv+0x258>
 80018a2:	e0fa      	b.n	8001a9a <__aeabi_ddiv+0x44e>
 80018a4:	2301      	movs	r3, #1
 80018a6:	431d      	orrs	r5, r3
 80018a8:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <__aeabi_ddiv+0x384>)
 80018aa:	445a      	add	r2, fp
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	dc00      	bgt.n	80018b2 <__aeabi_ddiv+0x266>
 80018b0:	e0aa      	b.n	8001a08 <__aeabi_ddiv+0x3bc>
 80018b2:	076b      	lsls	r3, r5, #29
 80018b4:	d000      	beq.n	80018b8 <__aeabi_ddiv+0x26c>
 80018b6:	e13d      	b.n	8001b34 <__aeabi_ddiv+0x4e8>
 80018b8:	08ed      	lsrs	r5, r5, #3
 80018ba:	4643      	mov	r3, r8
 80018bc:	01db      	lsls	r3, r3, #7
 80018be:	d506      	bpl.n	80018ce <__aeabi_ddiv+0x282>
 80018c0:	4642      	mov	r2, r8
 80018c2:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <__aeabi_ddiv+0x388>)
 80018c4:	401a      	ands	r2, r3
 80018c6:	4690      	mov	r8, r2
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	00d2      	lsls	r2, r2, #3
 80018cc:	445a      	add	r2, fp
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <__aeabi_ddiv+0x38c>)
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dd00      	ble.n	80018d6 <__aeabi_ddiv+0x28a>
 80018d4:	e71f      	b.n	8001716 <__aeabi_ddiv+0xca>
 80018d6:	4643      	mov	r3, r8
 80018d8:	075b      	lsls	r3, r3, #29
 80018da:	431d      	orrs	r5, r3
 80018dc:	4643      	mov	r3, r8
 80018de:	0552      	lsls	r2, r2, #21
 80018e0:	025c      	lsls	r4, r3, #9
 80018e2:	0b24      	lsrs	r4, r4, #12
 80018e4:	0d53      	lsrs	r3, r2, #21
 80018e6:	e708      	b.n	80016fa <__aeabi_ddiv+0xae>
 80018e8:	4652      	mov	r2, sl
 80018ea:	4322      	orrs	r2, r4
 80018ec:	d100      	bne.n	80018f0 <__aeabi_ddiv+0x2a4>
 80018ee:	e07b      	b.n	80019e8 <__aeabi_ddiv+0x39c>
 80018f0:	2c00      	cmp	r4, #0
 80018f2:	d100      	bne.n	80018f6 <__aeabi_ddiv+0x2aa>
 80018f4:	e0fa      	b.n	8001aec <__aeabi_ddiv+0x4a0>
 80018f6:	0020      	movs	r0, r4
 80018f8:	f001 f99a 	bl	8002c30 <__clzsi2>
 80018fc:	0002      	movs	r2, r0
 80018fe:	3a0b      	subs	r2, #11
 8001900:	231d      	movs	r3, #29
 8001902:	0001      	movs	r1, r0
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	4652      	mov	r2, sl
 8001908:	3908      	subs	r1, #8
 800190a:	40da      	lsrs	r2, r3
 800190c:	408c      	lsls	r4, r1
 800190e:	4314      	orrs	r4, r2
 8001910:	4652      	mov	r2, sl
 8001912:	408a      	lsls	r2, r1
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <__aeabi_ddiv+0x390>)
 8001916:	4458      	add	r0, fp
 8001918:	469b      	mov	fp, r3
 800191a:	4483      	add	fp, r0
 800191c:	2000      	movs	r0, #0
 800191e:	e6d5      	b.n	80016cc <__aeabi_ddiv+0x80>
 8001920:	464b      	mov	r3, r9
 8001922:	4323      	orrs	r3, r4
 8001924:	4698      	mov	r8, r3
 8001926:	d044      	beq.n	80019b2 <__aeabi_ddiv+0x366>
 8001928:	2c00      	cmp	r4, #0
 800192a:	d100      	bne.n	800192e <__aeabi_ddiv+0x2e2>
 800192c:	e0ce      	b.n	8001acc <__aeabi_ddiv+0x480>
 800192e:	0020      	movs	r0, r4
 8001930:	f001 f97e 	bl	8002c30 <__clzsi2>
 8001934:	0001      	movs	r1, r0
 8001936:	0002      	movs	r2, r0
 8001938:	390b      	subs	r1, #11
 800193a:	231d      	movs	r3, #29
 800193c:	1a5b      	subs	r3, r3, r1
 800193e:	4649      	mov	r1, r9
 8001940:	0010      	movs	r0, r2
 8001942:	40d9      	lsrs	r1, r3
 8001944:	3808      	subs	r0, #8
 8001946:	4084      	lsls	r4, r0
 8001948:	000b      	movs	r3, r1
 800194a:	464d      	mov	r5, r9
 800194c:	4323      	orrs	r3, r4
 800194e:	4698      	mov	r8, r3
 8001950:	4085      	lsls	r5, r0
 8001952:	4823      	ldr	r0, [pc, #140]	; (80019e0 <__aeabi_ddiv+0x394>)
 8001954:	1a83      	subs	r3, r0, r2
 8001956:	469b      	mov	fp, r3
 8001958:	2300      	movs	r3, #0
 800195a:	4699      	mov	r9, r3
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	e69a      	b.n	8001696 <__aeabi_ddiv+0x4a>
 8001960:	464b      	mov	r3, r9
 8001962:	4323      	orrs	r3, r4
 8001964:	4698      	mov	r8, r3
 8001966:	d11d      	bne.n	80019a4 <__aeabi_ddiv+0x358>
 8001968:	2308      	movs	r3, #8
 800196a:	4699      	mov	r9, r3
 800196c:	3b06      	subs	r3, #6
 800196e:	2500      	movs	r5, #0
 8001970:	4683      	mov	fp, r0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	e68f      	b.n	8001696 <__aeabi_ddiv+0x4a>
 8001976:	4652      	mov	r2, sl
 8001978:	4322      	orrs	r2, r4
 800197a:	d109      	bne.n	8001990 <__aeabi_ddiv+0x344>
 800197c:	2302      	movs	r3, #2
 800197e:	4649      	mov	r1, r9
 8001980:	4319      	orrs	r1, r3
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <__aeabi_ddiv+0x398>)
 8001984:	4689      	mov	r9, r1
 8001986:	469c      	mov	ip, r3
 8001988:	2400      	movs	r4, #0
 800198a:	2002      	movs	r0, #2
 800198c:	44e3      	add	fp, ip
 800198e:	e69d      	b.n	80016cc <__aeabi_ddiv+0x80>
 8001990:	2303      	movs	r3, #3
 8001992:	464a      	mov	r2, r9
 8001994:	431a      	orrs	r2, r3
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <__aeabi_ddiv+0x398>)
 8001998:	4691      	mov	r9, r2
 800199a:	469c      	mov	ip, r3
 800199c:	4652      	mov	r2, sl
 800199e:	2003      	movs	r0, #3
 80019a0:	44e3      	add	fp, ip
 80019a2:	e693      	b.n	80016cc <__aeabi_ddiv+0x80>
 80019a4:	230c      	movs	r3, #12
 80019a6:	4699      	mov	r9, r3
 80019a8:	3b09      	subs	r3, #9
 80019aa:	46a0      	mov	r8, r4
 80019ac:	4683      	mov	fp, r0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	e671      	b.n	8001696 <__aeabi_ddiv+0x4a>
 80019b2:	2304      	movs	r3, #4
 80019b4:	4699      	mov	r9, r3
 80019b6:	2300      	movs	r3, #0
 80019b8:	469b      	mov	fp, r3
 80019ba:	3301      	adds	r3, #1
 80019bc:	2500      	movs	r5, #0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	e669      	b.n	8001696 <__aeabi_ddiv+0x4a>
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	fffffc01 	.word	0xfffffc01
 80019cc:	08009878 	.word	0x08009878
 80019d0:	000003ff 	.word	0x000003ff
 80019d4:	feffffff 	.word	0xfeffffff
 80019d8:	000007fe 	.word	0x000007fe
 80019dc:	000003f3 	.word	0x000003f3
 80019e0:	fffffc0d 	.word	0xfffffc0d
 80019e4:	fffff801 	.word	0xfffff801
 80019e8:	4649      	mov	r1, r9
 80019ea:	2301      	movs	r3, #1
 80019ec:	4319      	orrs	r1, r3
 80019ee:	4689      	mov	r9, r1
 80019f0:	2400      	movs	r4, #0
 80019f2:	2001      	movs	r0, #1
 80019f4:	e66a      	b.n	80016cc <__aeabi_ddiv+0x80>
 80019f6:	2300      	movs	r3, #0
 80019f8:	2480      	movs	r4, #128	; 0x80
 80019fa:	469a      	mov	sl, r3
 80019fc:	2500      	movs	r5, #0
 80019fe:	4b8a      	ldr	r3, [pc, #552]	; (8001c28 <__aeabi_ddiv+0x5dc>)
 8001a00:	0324      	lsls	r4, r4, #12
 8001a02:	e67a      	b.n	80016fa <__aeabi_ddiv+0xae>
 8001a04:	2501      	movs	r5, #1
 8001a06:	426d      	negs	r5, r5
 8001a08:	2301      	movs	r3, #1
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	2b38      	cmp	r3, #56	; 0x38
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_ddiv+0x3c6>
 8001a10:	e670      	b.n	80016f4 <__aeabi_ddiv+0xa8>
 8001a12:	2b1f      	cmp	r3, #31
 8001a14:	dc00      	bgt.n	8001a18 <__aeabi_ddiv+0x3cc>
 8001a16:	e0bf      	b.n	8001b98 <__aeabi_ddiv+0x54c>
 8001a18:	211f      	movs	r1, #31
 8001a1a:	4249      	negs	r1, r1
 8001a1c:	1a8a      	subs	r2, r1, r2
 8001a1e:	4641      	mov	r1, r8
 8001a20:	40d1      	lsrs	r1, r2
 8001a22:	000a      	movs	r2, r1
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d004      	beq.n	8001a32 <__aeabi_ddiv+0x3e6>
 8001a28:	4641      	mov	r1, r8
 8001a2a:	4b80      	ldr	r3, [pc, #512]	; (8001c2c <__aeabi_ddiv+0x5e0>)
 8001a2c:	445b      	add	r3, fp
 8001a2e:	4099      	lsls	r1, r3
 8001a30:	430d      	orrs	r5, r1
 8001a32:	1e6b      	subs	r3, r5, #1
 8001a34:	419d      	sbcs	r5, r3
 8001a36:	2307      	movs	r3, #7
 8001a38:	432a      	orrs	r2, r5
 8001a3a:	001d      	movs	r5, r3
 8001a3c:	2400      	movs	r4, #0
 8001a3e:	4015      	ands	r5, r2
 8001a40:	4213      	tst	r3, r2
 8001a42:	d100      	bne.n	8001a46 <__aeabi_ddiv+0x3fa>
 8001a44:	e0d4      	b.n	8001bf0 <__aeabi_ddiv+0x5a4>
 8001a46:	210f      	movs	r1, #15
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4011      	ands	r1, r2
 8001a4c:	2904      	cmp	r1, #4
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_ddiv+0x406>
 8001a50:	e0cb      	b.n	8001bea <__aeabi_ddiv+0x59e>
 8001a52:	1d11      	adds	r1, r2, #4
 8001a54:	4291      	cmp	r1, r2
 8001a56:	4192      	sbcs	r2, r2
 8001a58:	4252      	negs	r2, r2
 8001a5a:	189b      	adds	r3, r3, r2
 8001a5c:	000a      	movs	r2, r1
 8001a5e:	0219      	lsls	r1, r3, #8
 8001a60:	d400      	bmi.n	8001a64 <__aeabi_ddiv+0x418>
 8001a62:	e0c2      	b.n	8001bea <__aeabi_ddiv+0x59e>
 8001a64:	2301      	movs	r3, #1
 8001a66:	2400      	movs	r4, #0
 8001a68:	2500      	movs	r5, #0
 8001a6a:	e646      	b.n	80016fa <__aeabi_ddiv+0xae>
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	4641      	mov	r1, r8
 8001a70:	031b      	lsls	r3, r3, #12
 8001a72:	4219      	tst	r1, r3
 8001a74:	d008      	beq.n	8001a88 <__aeabi_ddiv+0x43c>
 8001a76:	421c      	tst	r4, r3
 8001a78:	d106      	bne.n	8001a88 <__aeabi_ddiv+0x43c>
 8001a7a:	431c      	orrs	r4, r3
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	46ba      	mov	sl, r7
 8001a80:	0015      	movs	r5, r2
 8001a82:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <__aeabi_ddiv+0x5dc>)
 8001a84:	0b24      	lsrs	r4, r4, #12
 8001a86:	e638      	b.n	80016fa <__aeabi_ddiv+0xae>
 8001a88:	2480      	movs	r4, #128	; 0x80
 8001a8a:	4643      	mov	r3, r8
 8001a8c:	0324      	lsls	r4, r4, #12
 8001a8e:	431c      	orrs	r4, r3
 8001a90:	0324      	lsls	r4, r4, #12
 8001a92:	46b2      	mov	sl, r6
 8001a94:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <__aeabi_ddiv+0x5dc>)
 8001a96:	0b24      	lsrs	r4, r4, #12
 8001a98:	e62f      	b.n	80016fa <__aeabi_ddiv+0xae>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_ddiv+0x454>
 8001a9e:	e703      	b.n	80018a8 <__aeabi_ddiv+0x25c>
 8001aa0:	19a6      	adds	r6, r4, r6
 8001aa2:	1e68      	subs	r0, r5, #1
 8001aa4:	42a6      	cmp	r6, r4
 8001aa6:	d200      	bcs.n	8001aaa <__aeabi_ddiv+0x45e>
 8001aa8:	e08d      	b.n	8001bc6 <__aeabi_ddiv+0x57a>
 8001aaa:	428e      	cmp	r6, r1
 8001aac:	d200      	bcs.n	8001ab0 <__aeabi_ddiv+0x464>
 8001aae:	e0a3      	b.n	8001bf8 <__aeabi_ddiv+0x5ac>
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_ddiv+0x468>
 8001ab2:	e0b3      	b.n	8001c1c <__aeabi_ddiv+0x5d0>
 8001ab4:	0005      	movs	r5, r0
 8001ab6:	e6f5      	b.n	80018a4 <__aeabi_ddiv+0x258>
 8001ab8:	42aa      	cmp	r2, r5
 8001aba:	d900      	bls.n	8001abe <__aeabi_ddiv+0x472>
 8001abc:	e639      	b.n	8001732 <__aeabi_ddiv+0xe6>
 8001abe:	4643      	mov	r3, r8
 8001ac0:	07de      	lsls	r6, r3, #31
 8001ac2:	0858      	lsrs	r0, r3, #1
 8001ac4:	086b      	lsrs	r3, r5, #1
 8001ac6:	431e      	orrs	r6, r3
 8001ac8:	07ed      	lsls	r5, r5, #31
 8001aca:	e639      	b.n	8001740 <__aeabi_ddiv+0xf4>
 8001acc:	4648      	mov	r0, r9
 8001ace:	f001 f8af 	bl	8002c30 <__clzsi2>
 8001ad2:	0001      	movs	r1, r0
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	3115      	adds	r1, #21
 8001ad8:	3220      	adds	r2, #32
 8001ada:	291c      	cmp	r1, #28
 8001adc:	dc00      	bgt.n	8001ae0 <__aeabi_ddiv+0x494>
 8001ade:	e72c      	b.n	800193a <__aeabi_ddiv+0x2ee>
 8001ae0:	464b      	mov	r3, r9
 8001ae2:	3808      	subs	r0, #8
 8001ae4:	4083      	lsls	r3, r0
 8001ae6:	2500      	movs	r5, #0
 8001ae8:	4698      	mov	r8, r3
 8001aea:	e732      	b.n	8001952 <__aeabi_ddiv+0x306>
 8001aec:	f001 f8a0 	bl	8002c30 <__clzsi2>
 8001af0:	0003      	movs	r3, r0
 8001af2:	001a      	movs	r2, r3
 8001af4:	3215      	adds	r2, #21
 8001af6:	3020      	adds	r0, #32
 8001af8:	2a1c      	cmp	r2, #28
 8001afa:	dc00      	bgt.n	8001afe <__aeabi_ddiv+0x4b2>
 8001afc:	e700      	b.n	8001900 <__aeabi_ddiv+0x2b4>
 8001afe:	4654      	mov	r4, sl
 8001b00:	3b08      	subs	r3, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	409c      	lsls	r4, r3
 8001b06:	e705      	b.n	8001914 <__aeabi_ddiv+0x2c8>
 8001b08:	1936      	adds	r6, r6, r4
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	42b4      	cmp	r4, r6
 8001b0e:	d900      	bls.n	8001b12 <__aeabi_ddiv+0x4c6>
 8001b10:	e6a6      	b.n	8001860 <__aeabi_ddiv+0x214>
 8001b12:	42b2      	cmp	r2, r6
 8001b14:	d800      	bhi.n	8001b18 <__aeabi_ddiv+0x4cc>
 8001b16:	e6a3      	b.n	8001860 <__aeabi_ddiv+0x214>
 8001b18:	1e83      	subs	r3, r0, #2
 8001b1a:	1936      	adds	r6, r6, r4
 8001b1c:	e6a0      	b.n	8001860 <__aeabi_ddiv+0x214>
 8001b1e:	1909      	adds	r1, r1, r4
 8001b20:	3d01      	subs	r5, #1
 8001b22:	428c      	cmp	r4, r1
 8001b24:	d900      	bls.n	8001b28 <__aeabi_ddiv+0x4dc>
 8001b26:	e68d      	b.n	8001844 <__aeabi_ddiv+0x1f8>
 8001b28:	428a      	cmp	r2, r1
 8001b2a:	d800      	bhi.n	8001b2e <__aeabi_ddiv+0x4e2>
 8001b2c:	e68a      	b.n	8001844 <__aeabi_ddiv+0x1f8>
 8001b2e:	1e85      	subs	r5, r0, #2
 8001b30:	1909      	adds	r1, r1, r4
 8001b32:	e687      	b.n	8001844 <__aeabi_ddiv+0x1f8>
 8001b34:	230f      	movs	r3, #15
 8001b36:	402b      	ands	r3, r5
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_ddiv+0x4f2>
 8001b3c:	e6bc      	b.n	80018b8 <__aeabi_ddiv+0x26c>
 8001b3e:	2305      	movs	r3, #5
 8001b40:	425b      	negs	r3, r3
 8001b42:	42ab      	cmp	r3, r5
 8001b44:	419b      	sbcs	r3, r3
 8001b46:	3504      	adds	r5, #4
 8001b48:	425b      	negs	r3, r3
 8001b4a:	08ed      	lsrs	r5, r5, #3
 8001b4c:	4498      	add	r8, r3
 8001b4e:	e6b4      	b.n	80018ba <__aeabi_ddiv+0x26e>
 8001b50:	42af      	cmp	r7, r5
 8001b52:	d900      	bls.n	8001b56 <__aeabi_ddiv+0x50a>
 8001b54:	e660      	b.n	8001818 <__aeabi_ddiv+0x1cc>
 8001b56:	4282      	cmp	r2, r0
 8001b58:	d804      	bhi.n	8001b64 <__aeabi_ddiv+0x518>
 8001b5a:	d000      	beq.n	8001b5e <__aeabi_ddiv+0x512>
 8001b5c:	e65c      	b.n	8001818 <__aeabi_ddiv+0x1cc>
 8001b5e:	42ae      	cmp	r6, r5
 8001b60:	d800      	bhi.n	8001b64 <__aeabi_ddiv+0x518>
 8001b62:	e659      	b.n	8001818 <__aeabi_ddiv+0x1cc>
 8001b64:	2302      	movs	r3, #2
 8001b66:	425b      	negs	r3, r3
 8001b68:	469c      	mov	ip, r3
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	44e0      	add	r8, ip
 8001b6e:	469c      	mov	ip, r3
 8001b70:	4465      	add	r5, ip
 8001b72:	429d      	cmp	r5, r3
 8001b74:	419b      	sbcs	r3, r3
 8001b76:	425b      	negs	r3, r3
 8001b78:	191b      	adds	r3, r3, r4
 8001b7a:	18c0      	adds	r0, r0, r3
 8001b7c:	e64d      	b.n	800181a <__aeabi_ddiv+0x1ce>
 8001b7e:	428a      	cmp	r2, r1
 8001b80:	d800      	bhi.n	8001b84 <__aeabi_ddiv+0x538>
 8001b82:	e60e      	b.n	80017a2 <__aeabi_ddiv+0x156>
 8001b84:	1e83      	subs	r3, r0, #2
 8001b86:	1909      	adds	r1, r1, r4
 8001b88:	e60b      	b.n	80017a2 <__aeabi_ddiv+0x156>
 8001b8a:	428a      	cmp	r2, r1
 8001b8c:	d800      	bhi.n	8001b90 <__aeabi_ddiv+0x544>
 8001b8e:	e5f4      	b.n	800177a <__aeabi_ddiv+0x12e>
 8001b90:	1e83      	subs	r3, r0, #2
 8001b92:	4698      	mov	r8, r3
 8001b94:	1909      	adds	r1, r1, r4
 8001b96:	e5f0      	b.n	800177a <__aeabi_ddiv+0x12e>
 8001b98:	4925      	ldr	r1, [pc, #148]	; (8001c30 <__aeabi_ddiv+0x5e4>)
 8001b9a:	0028      	movs	r0, r5
 8001b9c:	4459      	add	r1, fp
 8001b9e:	408d      	lsls	r5, r1
 8001ba0:	4642      	mov	r2, r8
 8001ba2:	408a      	lsls	r2, r1
 8001ba4:	1e69      	subs	r1, r5, #1
 8001ba6:	418d      	sbcs	r5, r1
 8001ba8:	4641      	mov	r1, r8
 8001baa:	40d8      	lsrs	r0, r3
 8001bac:	40d9      	lsrs	r1, r3
 8001bae:	4302      	orrs	r2, r0
 8001bb0:	432a      	orrs	r2, r5
 8001bb2:	000b      	movs	r3, r1
 8001bb4:	0751      	lsls	r1, r2, #29
 8001bb6:	d100      	bne.n	8001bba <__aeabi_ddiv+0x56e>
 8001bb8:	e751      	b.n	8001a5e <__aeabi_ddiv+0x412>
 8001bba:	210f      	movs	r1, #15
 8001bbc:	4011      	ands	r1, r2
 8001bbe:	2904      	cmp	r1, #4
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_ddiv+0x578>
 8001bc2:	e746      	b.n	8001a52 <__aeabi_ddiv+0x406>
 8001bc4:	e74b      	b.n	8001a5e <__aeabi_ddiv+0x412>
 8001bc6:	0005      	movs	r5, r0
 8001bc8:	428e      	cmp	r6, r1
 8001bca:	d000      	beq.n	8001bce <__aeabi_ddiv+0x582>
 8001bcc:	e66a      	b.n	80018a4 <__aeabi_ddiv+0x258>
 8001bce:	9a00      	ldr	r2, [sp, #0]
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_ddiv+0x58a>
 8001bd4:	e666      	b.n	80018a4 <__aeabi_ddiv+0x258>
 8001bd6:	e667      	b.n	80018a8 <__aeabi_ddiv+0x25c>
 8001bd8:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <__aeabi_ddiv+0x5e8>)
 8001bda:	445a      	add	r2, fp
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_ddiv+0x596>
 8001be0:	e710      	b.n	8001a04 <__aeabi_ddiv+0x3b8>
 8001be2:	2301      	movs	r3, #1
 8001be4:	2500      	movs	r5, #0
 8001be6:	4498      	add	r8, r3
 8001be8:	e667      	b.n	80018ba <__aeabi_ddiv+0x26e>
 8001bea:	075d      	lsls	r5, r3, #29
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	0b1c      	lsrs	r4, r3, #12
 8001bf0:	08d2      	lsrs	r2, r2, #3
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	4315      	orrs	r5, r2
 8001bf6:	e580      	b.n	80016fa <__aeabi_ddiv+0xae>
 8001bf8:	9800      	ldr	r0, [sp, #0]
 8001bfa:	3d02      	subs	r5, #2
 8001bfc:	0042      	lsls	r2, r0, #1
 8001bfe:	4282      	cmp	r2, r0
 8001c00:	41bf      	sbcs	r7, r7
 8001c02:	427f      	negs	r7, r7
 8001c04:	193c      	adds	r4, r7, r4
 8001c06:	1936      	adds	r6, r6, r4
 8001c08:	9200      	str	r2, [sp, #0]
 8001c0a:	e7dd      	b.n	8001bc8 <__aeabi_ddiv+0x57c>
 8001c0c:	2480      	movs	r4, #128	; 0x80
 8001c0e:	4643      	mov	r3, r8
 8001c10:	0324      	lsls	r4, r4, #12
 8001c12:	431c      	orrs	r4, r3
 8001c14:	0324      	lsls	r4, r4, #12
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__aeabi_ddiv+0x5dc>)
 8001c18:	0b24      	lsrs	r4, r4, #12
 8001c1a:	e56e      	b.n	80016fa <__aeabi_ddiv+0xae>
 8001c1c:	9a00      	ldr	r2, [sp, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d3ea      	bcc.n	8001bf8 <__aeabi_ddiv+0x5ac>
 8001c22:	0005      	movs	r5, r0
 8001c24:	e7d3      	b.n	8001bce <__aeabi_ddiv+0x582>
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	000007ff 	.word	0x000007ff
 8001c2c:	0000043e 	.word	0x0000043e
 8001c30:	0000041e 	.word	0x0000041e
 8001c34:	000003ff 	.word	0x000003ff

08001c38 <__eqdf2>:
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	464e      	mov	r6, r9
 8001c3c:	4645      	mov	r5, r8
 8001c3e:	46de      	mov	lr, fp
 8001c40:	4657      	mov	r7, sl
 8001c42:	4690      	mov	r8, r2
 8001c44:	b5e0      	push	{r5, r6, r7, lr}
 8001c46:	0017      	movs	r7, r2
 8001c48:	031a      	lsls	r2, r3, #12
 8001c4a:	0b12      	lsrs	r2, r2, #12
 8001c4c:	0005      	movs	r5, r0
 8001c4e:	4684      	mov	ip, r0
 8001c50:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <__eqdf2+0x80>)
 8001c52:	030e      	lsls	r6, r1, #12
 8001c54:	004c      	lsls	r4, r1, #1
 8001c56:	4691      	mov	r9, r2
 8001c58:	005a      	lsls	r2, r3, #1
 8001c5a:	0fdb      	lsrs	r3, r3, #31
 8001c5c:	469b      	mov	fp, r3
 8001c5e:	0b36      	lsrs	r6, r6, #12
 8001c60:	0d64      	lsrs	r4, r4, #21
 8001c62:	0fc9      	lsrs	r1, r1, #31
 8001c64:	0d52      	lsrs	r2, r2, #21
 8001c66:	4284      	cmp	r4, r0
 8001c68:	d019      	beq.n	8001c9e <__eqdf2+0x66>
 8001c6a:	4282      	cmp	r2, r0
 8001c6c:	d010      	beq.n	8001c90 <__eqdf2+0x58>
 8001c6e:	2001      	movs	r0, #1
 8001c70:	4294      	cmp	r4, r2
 8001c72:	d10e      	bne.n	8001c92 <__eqdf2+0x5a>
 8001c74:	454e      	cmp	r6, r9
 8001c76:	d10c      	bne.n	8001c92 <__eqdf2+0x5a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c4      	cmp	ip, r8
 8001c7c:	d109      	bne.n	8001c92 <__eqdf2+0x5a>
 8001c7e:	4559      	cmp	r1, fp
 8001c80:	d017      	beq.n	8001cb2 <__eqdf2+0x7a>
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d105      	bne.n	8001c92 <__eqdf2+0x5a>
 8001c86:	0030      	movs	r0, r6
 8001c88:	4328      	orrs	r0, r5
 8001c8a:	1e43      	subs	r3, r0, #1
 8001c8c:	4198      	sbcs	r0, r3
 8001c8e:	e000      	b.n	8001c92 <__eqdf2+0x5a>
 8001c90:	2001      	movs	r0, #1
 8001c92:	bcf0      	pop	{r4, r5, r6, r7}
 8001c94:	46bb      	mov	fp, r7
 8001c96:	46b2      	mov	sl, r6
 8001c98:	46a9      	mov	r9, r5
 8001c9a:	46a0      	mov	r8, r4
 8001c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9e:	0033      	movs	r3, r6
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	432b      	orrs	r3, r5
 8001ca4:	d1f5      	bne.n	8001c92 <__eqdf2+0x5a>
 8001ca6:	42a2      	cmp	r2, r4
 8001ca8:	d1f3      	bne.n	8001c92 <__eqdf2+0x5a>
 8001caa:	464b      	mov	r3, r9
 8001cac:	433b      	orrs	r3, r7
 8001cae:	d1f0      	bne.n	8001c92 <__eqdf2+0x5a>
 8001cb0:	e7e2      	b.n	8001c78 <__eqdf2+0x40>
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	e7ed      	b.n	8001c92 <__eqdf2+0x5a>
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	000007ff 	.word	0x000007ff

08001cbc <__gedf2>:
 8001cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbe:	4647      	mov	r7, r8
 8001cc0:	46ce      	mov	lr, r9
 8001cc2:	0004      	movs	r4, r0
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	0016      	movs	r6, r2
 8001cc8:	031b      	lsls	r3, r3, #12
 8001cca:	0b1b      	lsrs	r3, r3, #12
 8001ccc:	4d2d      	ldr	r5, [pc, #180]	; (8001d84 <__gedf2+0xc8>)
 8001cce:	004a      	lsls	r2, r1, #1
 8001cd0:	4699      	mov	r9, r3
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	0043      	lsls	r3, r0, #1
 8001cd6:	030f      	lsls	r7, r1, #12
 8001cd8:	46a4      	mov	ip, r4
 8001cda:	46b0      	mov	r8, r6
 8001cdc:	0b3f      	lsrs	r7, r7, #12
 8001cde:	0d52      	lsrs	r2, r2, #21
 8001ce0:	0fc9      	lsrs	r1, r1, #31
 8001ce2:	0d5b      	lsrs	r3, r3, #21
 8001ce4:	0fc0      	lsrs	r0, r0, #31
 8001ce6:	42aa      	cmp	r2, r5
 8001ce8:	d021      	beq.n	8001d2e <__gedf2+0x72>
 8001cea:	42ab      	cmp	r3, r5
 8001cec:	d013      	beq.n	8001d16 <__gedf2+0x5a>
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	d122      	bne.n	8001d38 <__gedf2+0x7c>
 8001cf2:	433c      	orrs	r4, r7
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <__gedf2+0x42>
 8001cf8:	464d      	mov	r5, r9
 8001cfa:	432e      	orrs	r6, r5
 8001cfc:	d022      	beq.n	8001d44 <__gedf2+0x88>
 8001cfe:	2c00      	cmp	r4, #0
 8001d00:	d010      	beq.n	8001d24 <__gedf2+0x68>
 8001d02:	4281      	cmp	r1, r0
 8001d04:	d022      	beq.n	8001d4c <__gedf2+0x90>
 8001d06:	2002      	movs	r0, #2
 8001d08:	3901      	subs	r1, #1
 8001d0a:	4008      	ands	r0, r1
 8001d0c:	3801      	subs	r0, #1
 8001d0e:	bcc0      	pop	{r6, r7}
 8001d10:	46b9      	mov	r9, r7
 8001d12:	46b0      	mov	r8, r6
 8001d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d16:	464d      	mov	r5, r9
 8001d18:	432e      	orrs	r6, r5
 8001d1a:	d129      	bne.n	8001d70 <__gedf2+0xb4>
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d1f0      	bne.n	8001d02 <__gedf2+0x46>
 8001d20:	433c      	orrs	r4, r7
 8001d22:	d1ee      	bne.n	8001d02 <__gedf2+0x46>
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d1f2      	bne.n	8001d0e <__gedf2+0x52>
 8001d28:	2001      	movs	r0, #1
 8001d2a:	4240      	negs	r0, r0
 8001d2c:	e7ef      	b.n	8001d0e <__gedf2+0x52>
 8001d2e:	003d      	movs	r5, r7
 8001d30:	4325      	orrs	r5, r4
 8001d32:	d11d      	bne.n	8001d70 <__gedf2+0xb4>
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d0ee      	beq.n	8001d16 <__gedf2+0x5a>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1e2      	bne.n	8001d02 <__gedf2+0x46>
 8001d3c:	464c      	mov	r4, r9
 8001d3e:	4326      	orrs	r6, r4
 8001d40:	d1df      	bne.n	8001d02 <__gedf2+0x46>
 8001d42:	e7e0      	b.n	8001d06 <__gedf2+0x4a>
 8001d44:	2000      	movs	r0, #0
 8001d46:	2c00      	cmp	r4, #0
 8001d48:	d0e1      	beq.n	8001d0e <__gedf2+0x52>
 8001d4a:	e7dc      	b.n	8001d06 <__gedf2+0x4a>
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dc0a      	bgt.n	8001d66 <__gedf2+0xaa>
 8001d50:	dbe8      	blt.n	8001d24 <__gedf2+0x68>
 8001d52:	454f      	cmp	r7, r9
 8001d54:	d8d7      	bhi.n	8001d06 <__gedf2+0x4a>
 8001d56:	d00e      	beq.n	8001d76 <__gedf2+0xba>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	454f      	cmp	r7, r9
 8001d5c:	d2d7      	bcs.n	8001d0e <__gedf2+0x52>
 8001d5e:	2900      	cmp	r1, #0
 8001d60:	d0e2      	beq.n	8001d28 <__gedf2+0x6c>
 8001d62:	0008      	movs	r0, r1
 8001d64:	e7d3      	b.n	8001d0e <__gedf2+0x52>
 8001d66:	4243      	negs	r3, r0
 8001d68:	4158      	adcs	r0, r3
 8001d6a:	0040      	lsls	r0, r0, #1
 8001d6c:	3801      	subs	r0, #1
 8001d6e:	e7ce      	b.n	8001d0e <__gedf2+0x52>
 8001d70:	2002      	movs	r0, #2
 8001d72:	4240      	negs	r0, r0
 8001d74:	e7cb      	b.n	8001d0e <__gedf2+0x52>
 8001d76:	45c4      	cmp	ip, r8
 8001d78:	d8c5      	bhi.n	8001d06 <__gedf2+0x4a>
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	45c4      	cmp	ip, r8
 8001d7e:	d2c6      	bcs.n	8001d0e <__gedf2+0x52>
 8001d80:	e7ed      	b.n	8001d5e <__gedf2+0xa2>
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	000007ff 	.word	0x000007ff

08001d88 <__ledf2>:
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	4647      	mov	r7, r8
 8001d8c:	46ce      	mov	lr, r9
 8001d8e:	0004      	movs	r4, r0
 8001d90:	0018      	movs	r0, r3
 8001d92:	0016      	movs	r6, r2
 8001d94:	031b      	lsls	r3, r3, #12
 8001d96:	0b1b      	lsrs	r3, r3, #12
 8001d98:	4d2c      	ldr	r5, [pc, #176]	; (8001e4c <__ledf2+0xc4>)
 8001d9a:	004a      	lsls	r2, r1, #1
 8001d9c:	4699      	mov	r9, r3
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	0043      	lsls	r3, r0, #1
 8001da2:	030f      	lsls	r7, r1, #12
 8001da4:	46a4      	mov	ip, r4
 8001da6:	46b0      	mov	r8, r6
 8001da8:	0b3f      	lsrs	r7, r7, #12
 8001daa:	0d52      	lsrs	r2, r2, #21
 8001dac:	0fc9      	lsrs	r1, r1, #31
 8001dae:	0d5b      	lsrs	r3, r3, #21
 8001db0:	0fc0      	lsrs	r0, r0, #31
 8001db2:	42aa      	cmp	r2, r5
 8001db4:	d00d      	beq.n	8001dd2 <__ledf2+0x4a>
 8001db6:	42ab      	cmp	r3, r5
 8001db8:	d010      	beq.n	8001ddc <__ledf2+0x54>
 8001dba:	2a00      	cmp	r2, #0
 8001dbc:	d127      	bne.n	8001e0e <__ledf2+0x86>
 8001dbe:	433c      	orrs	r4, r7
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <__ledf2+0x60>
 8001dc4:	464d      	mov	r5, r9
 8001dc6:	432e      	orrs	r6, r5
 8001dc8:	d10e      	bne.n	8001de8 <__ledf2+0x60>
 8001dca:	2000      	movs	r0, #0
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	d015      	beq.n	8001dfc <__ledf2+0x74>
 8001dd0:	e00e      	b.n	8001df0 <__ledf2+0x68>
 8001dd2:	003d      	movs	r5, r7
 8001dd4:	4325      	orrs	r5, r4
 8001dd6:	d110      	bne.n	8001dfa <__ledf2+0x72>
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d118      	bne.n	8001e0e <__ledf2+0x86>
 8001ddc:	464d      	mov	r5, r9
 8001dde:	432e      	orrs	r6, r5
 8001de0:	d10b      	bne.n	8001dfa <__ledf2+0x72>
 8001de2:	2a00      	cmp	r2, #0
 8001de4:	d102      	bne.n	8001dec <__ledf2+0x64>
 8001de6:	433c      	orrs	r4, r7
 8001de8:	2c00      	cmp	r4, #0
 8001dea:	d00b      	beq.n	8001e04 <__ledf2+0x7c>
 8001dec:	4281      	cmp	r1, r0
 8001dee:	d014      	beq.n	8001e1a <__ledf2+0x92>
 8001df0:	2002      	movs	r0, #2
 8001df2:	3901      	subs	r1, #1
 8001df4:	4008      	ands	r0, r1
 8001df6:	3801      	subs	r0, #1
 8001df8:	e000      	b.n	8001dfc <__ledf2+0x74>
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	bcc0      	pop	{r6, r7}
 8001dfe:	46b9      	mov	r9, r7
 8001e00:	46b0      	mov	r8, r6
 8001e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d1f9      	bne.n	8001dfc <__ledf2+0x74>
 8001e08:	2001      	movs	r0, #1
 8001e0a:	4240      	negs	r0, r0
 8001e0c:	e7f6      	b.n	8001dfc <__ledf2+0x74>
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ec      	bne.n	8001dec <__ledf2+0x64>
 8001e12:	464c      	mov	r4, r9
 8001e14:	4326      	orrs	r6, r4
 8001e16:	d1e9      	bne.n	8001dec <__ledf2+0x64>
 8001e18:	e7ea      	b.n	8001df0 <__ledf2+0x68>
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	dd04      	ble.n	8001e28 <__ledf2+0xa0>
 8001e1e:	4243      	negs	r3, r0
 8001e20:	4158      	adcs	r0, r3
 8001e22:	0040      	lsls	r0, r0, #1
 8001e24:	3801      	subs	r0, #1
 8001e26:	e7e9      	b.n	8001dfc <__ledf2+0x74>
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbeb      	blt.n	8001e04 <__ledf2+0x7c>
 8001e2c:	454f      	cmp	r7, r9
 8001e2e:	d8df      	bhi.n	8001df0 <__ledf2+0x68>
 8001e30:	d006      	beq.n	8001e40 <__ledf2+0xb8>
 8001e32:	2000      	movs	r0, #0
 8001e34:	454f      	cmp	r7, r9
 8001e36:	d2e1      	bcs.n	8001dfc <__ledf2+0x74>
 8001e38:	2900      	cmp	r1, #0
 8001e3a:	d0e5      	beq.n	8001e08 <__ledf2+0x80>
 8001e3c:	0008      	movs	r0, r1
 8001e3e:	e7dd      	b.n	8001dfc <__ledf2+0x74>
 8001e40:	45c4      	cmp	ip, r8
 8001e42:	d8d5      	bhi.n	8001df0 <__ledf2+0x68>
 8001e44:	2000      	movs	r0, #0
 8001e46:	45c4      	cmp	ip, r8
 8001e48:	d2d8      	bcs.n	8001dfc <__ledf2+0x74>
 8001e4a:	e7f5      	b.n	8001e38 <__ledf2+0xb0>
 8001e4c:	000007ff 	.word	0x000007ff

08001e50 <__aeabi_dmul>:
 8001e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e52:	4657      	mov	r7, sl
 8001e54:	464e      	mov	r6, r9
 8001e56:	4645      	mov	r5, r8
 8001e58:	46de      	mov	lr, fp
 8001e5a:	b5e0      	push	{r5, r6, r7, lr}
 8001e5c:	4698      	mov	r8, r3
 8001e5e:	030c      	lsls	r4, r1, #12
 8001e60:	004b      	lsls	r3, r1, #1
 8001e62:	0006      	movs	r6, r0
 8001e64:	4692      	mov	sl, r2
 8001e66:	b087      	sub	sp, #28
 8001e68:	0b24      	lsrs	r4, r4, #12
 8001e6a:	0d5b      	lsrs	r3, r3, #21
 8001e6c:	0fcf      	lsrs	r7, r1, #31
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dmul+0x24>
 8001e72:	e15c      	b.n	800212e <__aeabi_dmul+0x2de>
 8001e74:	4ad9      	ldr	r2, [pc, #868]	; (80021dc <__aeabi_dmul+0x38c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dmul+0x2c>
 8001e7a:	e175      	b.n	8002168 <__aeabi_dmul+0x318>
 8001e7c:	0f42      	lsrs	r2, r0, #29
 8001e7e:	00e4      	lsls	r4, r4, #3
 8001e80:	4314      	orrs	r4, r2
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	0412      	lsls	r2, r2, #16
 8001e86:	4314      	orrs	r4, r2
 8001e88:	4ad5      	ldr	r2, [pc, #852]	; (80021e0 <__aeabi_dmul+0x390>)
 8001e8a:	00c5      	lsls	r5, r0, #3
 8001e8c:	4694      	mov	ip, r2
 8001e8e:	4463      	add	r3, ip
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	4699      	mov	r9, r3
 8001e96:	469b      	mov	fp, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	031e      	lsls	r6, r3, #12
 8001e9e:	0fd2      	lsrs	r2, r2, #31
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4650      	mov	r0, sl
 8001ea4:	4690      	mov	r8, r2
 8001ea6:	0b36      	lsrs	r6, r6, #12
 8001ea8:	0d5b      	lsrs	r3, r3, #21
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dmul+0x5e>
 8001eac:	e120      	b.n	80020f0 <__aeabi_dmul+0x2a0>
 8001eae:	4acb      	ldr	r2, [pc, #812]	; (80021dc <__aeabi_dmul+0x38c>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dmul+0x66>
 8001eb4:	e162      	b.n	800217c <__aeabi_dmul+0x32c>
 8001eb6:	49ca      	ldr	r1, [pc, #808]	; (80021e0 <__aeabi_dmul+0x390>)
 8001eb8:	0f42      	lsrs	r2, r0, #29
 8001eba:	468c      	mov	ip, r1
 8001ebc:	9900      	ldr	r1, [sp, #0]
 8001ebe:	4463      	add	r3, ip
 8001ec0:	00f6      	lsls	r6, r6, #3
 8001ec2:	468c      	mov	ip, r1
 8001ec4:	4316      	orrs	r6, r2
 8001ec6:	2280      	movs	r2, #128	; 0x80
 8001ec8:	449c      	add	ip, r3
 8001eca:	0412      	lsls	r2, r2, #16
 8001ecc:	4663      	mov	r3, ip
 8001ece:	4316      	orrs	r6, r2
 8001ed0:	00c2      	lsls	r2, r0, #3
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	9900      	ldr	r1, [sp, #0]
 8001ed8:	4643      	mov	r3, r8
 8001eda:	3101      	adds	r1, #1
 8001edc:	468c      	mov	ip, r1
 8001ede:	4649      	mov	r1, r9
 8001ee0:	407b      	eors	r3, r7
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	290f      	cmp	r1, #15
 8001ee6:	d826      	bhi.n	8001f36 <__aeabi_dmul+0xe6>
 8001ee8:	4bbe      	ldr	r3, [pc, #760]	; (80021e4 <__aeabi_dmul+0x394>)
 8001eea:	0089      	lsls	r1, r1, #2
 8001eec:	5859      	ldr	r1, [r3, r1]
 8001eee:	468f      	mov	pc, r1
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	0034      	movs	r4, r6
 8001ef6:	0015      	movs	r5, r2
 8001ef8:	4683      	mov	fp, r0
 8001efa:	465b      	mov	r3, fp
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d016      	beq.n	8001f2e <__aeabi_dmul+0xde>
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dmul+0xb6>
 8001f04:	e203      	b.n	800230e <__aeabi_dmul+0x4be>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d000      	beq.n	8001f0c <__aeabi_dmul+0xbc>
 8001f0a:	e0cd      	b.n	80020a8 <__aeabi_dmul+0x258>
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2400      	movs	r4, #0
 8001f10:	2500      	movs	r5, #0
 8001f12:	9b01      	ldr	r3, [sp, #4]
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	4322      	orrs	r2, r4
 8001f18:	07db      	lsls	r3, r3, #31
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	0028      	movs	r0, r5
 8001f1e:	0011      	movs	r1, r2
 8001f20:	b007      	add	sp, #28
 8001f22:	bcf0      	pop	{r4, r5, r6, r7}
 8001f24:	46bb      	mov	fp, r7
 8001f26:	46b2      	mov	sl, r6
 8001f28:	46a9      	mov	r9, r5
 8001f2a:	46a0      	mov	r8, r4
 8001f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2e:	2400      	movs	r4, #0
 8001f30:	2500      	movs	r5, #0
 8001f32:	4aaa      	ldr	r2, [pc, #680]	; (80021dc <__aeabi_dmul+0x38c>)
 8001f34:	e7ed      	b.n	8001f12 <__aeabi_dmul+0xc2>
 8001f36:	0c28      	lsrs	r0, r5, #16
 8001f38:	042d      	lsls	r5, r5, #16
 8001f3a:	0c2d      	lsrs	r5, r5, #16
 8001f3c:	002b      	movs	r3, r5
 8001f3e:	0c11      	lsrs	r1, r2, #16
 8001f40:	0412      	lsls	r2, r2, #16
 8001f42:	0c12      	lsrs	r2, r2, #16
 8001f44:	4353      	muls	r3, r2
 8001f46:	4698      	mov	r8, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	002f      	movs	r7, r5
 8001f4c:	4343      	muls	r3, r0
 8001f4e:	4699      	mov	r9, r3
 8001f50:	434f      	muls	r7, r1
 8001f52:	444f      	add	r7, r9
 8001f54:	46bb      	mov	fp, r7
 8001f56:	4647      	mov	r7, r8
 8001f58:	000b      	movs	r3, r1
 8001f5a:	0c3f      	lsrs	r7, r7, #16
 8001f5c:	46ba      	mov	sl, r7
 8001f5e:	4343      	muls	r3, r0
 8001f60:	44da      	add	sl, fp
 8001f62:	9302      	str	r3, [sp, #8]
 8001f64:	45d1      	cmp	r9, sl
 8001f66:	d904      	bls.n	8001f72 <__aeabi_dmul+0x122>
 8001f68:	2780      	movs	r7, #128	; 0x80
 8001f6a:	027f      	lsls	r7, r7, #9
 8001f6c:	46b9      	mov	r9, r7
 8001f6e:	444b      	add	r3, r9
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	4653      	mov	r3, sl
 8001f74:	0c1b      	lsrs	r3, r3, #16
 8001f76:	469b      	mov	fp, r3
 8001f78:	4653      	mov	r3, sl
 8001f7a:	041f      	lsls	r7, r3, #16
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	4698      	mov	r8, r3
 8001f84:	003b      	movs	r3, r7
 8001f86:	4443      	add	r3, r8
 8001f88:	9304      	str	r3, [sp, #16]
 8001f8a:	0c33      	lsrs	r3, r6, #16
 8001f8c:	0436      	lsls	r6, r6, #16
 8001f8e:	0c36      	lsrs	r6, r6, #16
 8001f90:	4698      	mov	r8, r3
 8001f92:	0033      	movs	r3, r6
 8001f94:	4343      	muls	r3, r0
 8001f96:	4699      	mov	r9, r3
 8001f98:	4643      	mov	r3, r8
 8001f9a:	4343      	muls	r3, r0
 8001f9c:	002f      	movs	r7, r5
 8001f9e:	469a      	mov	sl, r3
 8001fa0:	4643      	mov	r3, r8
 8001fa2:	4377      	muls	r7, r6
 8001fa4:	435d      	muls	r5, r3
 8001fa6:	0c38      	lsrs	r0, r7, #16
 8001fa8:	444d      	add	r5, r9
 8001faa:	1945      	adds	r5, r0, r5
 8001fac:	45a9      	cmp	r9, r5
 8001fae:	d903      	bls.n	8001fb8 <__aeabi_dmul+0x168>
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	4699      	mov	r9, r3
 8001fb6:	44ca      	add	sl, r9
 8001fb8:	043f      	lsls	r7, r7, #16
 8001fba:	0c28      	lsrs	r0, r5, #16
 8001fbc:	0c3f      	lsrs	r7, r7, #16
 8001fbe:	042d      	lsls	r5, r5, #16
 8001fc0:	19ed      	adds	r5, r5, r7
 8001fc2:	0c27      	lsrs	r7, r4, #16
 8001fc4:	0424      	lsls	r4, r4, #16
 8001fc6:	0c24      	lsrs	r4, r4, #16
 8001fc8:	0003      	movs	r3, r0
 8001fca:	0020      	movs	r0, r4
 8001fcc:	4350      	muls	r0, r2
 8001fce:	437a      	muls	r2, r7
 8001fd0:	4691      	mov	r9, r2
 8001fd2:	003a      	movs	r2, r7
 8001fd4:	4453      	add	r3, sl
 8001fd6:	9305      	str	r3, [sp, #20]
 8001fd8:	0c03      	lsrs	r3, r0, #16
 8001fda:	469a      	mov	sl, r3
 8001fdc:	434a      	muls	r2, r1
 8001fde:	4361      	muls	r1, r4
 8001fe0:	4449      	add	r1, r9
 8001fe2:	4451      	add	r1, sl
 8001fe4:	44ab      	add	fp, r5
 8001fe6:	4589      	cmp	r9, r1
 8001fe8:	d903      	bls.n	8001ff2 <__aeabi_dmul+0x1a2>
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	025b      	lsls	r3, r3, #9
 8001fee:	4699      	mov	r9, r3
 8001ff0:	444a      	add	r2, r9
 8001ff2:	0400      	lsls	r0, r0, #16
 8001ff4:	0c0b      	lsrs	r3, r1, #16
 8001ff6:	0c00      	lsrs	r0, r0, #16
 8001ff8:	0409      	lsls	r1, r1, #16
 8001ffa:	1809      	adds	r1, r1, r0
 8001ffc:	0020      	movs	r0, r4
 8001ffe:	4699      	mov	r9, r3
 8002000:	4643      	mov	r3, r8
 8002002:	4370      	muls	r0, r6
 8002004:	435c      	muls	r4, r3
 8002006:	437e      	muls	r6, r7
 8002008:	435f      	muls	r7, r3
 800200a:	0c03      	lsrs	r3, r0, #16
 800200c:	4698      	mov	r8, r3
 800200e:	19a4      	adds	r4, r4, r6
 8002010:	4444      	add	r4, r8
 8002012:	444a      	add	r2, r9
 8002014:	9703      	str	r7, [sp, #12]
 8002016:	42a6      	cmp	r6, r4
 8002018:	d904      	bls.n	8002024 <__aeabi_dmul+0x1d4>
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	025b      	lsls	r3, r3, #9
 800201e:	4698      	mov	r8, r3
 8002020:	4447      	add	r7, r8
 8002022:	9703      	str	r7, [sp, #12]
 8002024:	0423      	lsls	r3, r4, #16
 8002026:	9e02      	ldr	r6, [sp, #8]
 8002028:	469a      	mov	sl, r3
 800202a:	9b05      	ldr	r3, [sp, #20]
 800202c:	445e      	add	r6, fp
 800202e:	4698      	mov	r8, r3
 8002030:	42ae      	cmp	r6, r5
 8002032:	41ad      	sbcs	r5, r5
 8002034:	1876      	adds	r6, r6, r1
 8002036:	428e      	cmp	r6, r1
 8002038:	4189      	sbcs	r1, r1
 800203a:	0400      	lsls	r0, r0, #16
 800203c:	0c00      	lsrs	r0, r0, #16
 800203e:	4450      	add	r0, sl
 8002040:	4440      	add	r0, r8
 8002042:	426d      	negs	r5, r5
 8002044:	1947      	adds	r7, r0, r5
 8002046:	46b8      	mov	r8, r7
 8002048:	4693      	mov	fp, r2
 800204a:	4249      	negs	r1, r1
 800204c:	4689      	mov	r9, r1
 800204e:	44c3      	add	fp, r8
 8002050:	44d9      	add	r9, fp
 8002052:	4298      	cmp	r0, r3
 8002054:	4180      	sbcs	r0, r0
 8002056:	45a8      	cmp	r8, r5
 8002058:	41ad      	sbcs	r5, r5
 800205a:	4593      	cmp	fp, r2
 800205c:	4192      	sbcs	r2, r2
 800205e:	4589      	cmp	r9, r1
 8002060:	4189      	sbcs	r1, r1
 8002062:	426d      	negs	r5, r5
 8002064:	4240      	negs	r0, r0
 8002066:	4328      	orrs	r0, r5
 8002068:	0c24      	lsrs	r4, r4, #16
 800206a:	4252      	negs	r2, r2
 800206c:	4249      	negs	r1, r1
 800206e:	430a      	orrs	r2, r1
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	1900      	adds	r0, r0, r4
 8002074:	1880      	adds	r0, r0, r2
 8002076:	18c7      	adds	r7, r0, r3
 8002078:	464b      	mov	r3, r9
 800207a:	0ddc      	lsrs	r4, r3, #23
 800207c:	9b04      	ldr	r3, [sp, #16]
 800207e:	0275      	lsls	r5, r6, #9
 8002080:	431d      	orrs	r5, r3
 8002082:	1e6a      	subs	r2, r5, #1
 8002084:	4195      	sbcs	r5, r2
 8002086:	464b      	mov	r3, r9
 8002088:	0df6      	lsrs	r6, r6, #23
 800208a:	027f      	lsls	r7, r7, #9
 800208c:	4335      	orrs	r5, r6
 800208e:	025a      	lsls	r2, r3, #9
 8002090:	433c      	orrs	r4, r7
 8002092:	4315      	orrs	r5, r2
 8002094:	01fb      	lsls	r3, r7, #7
 8002096:	d400      	bmi.n	800209a <__aeabi_dmul+0x24a>
 8002098:	e11c      	b.n	80022d4 <__aeabi_dmul+0x484>
 800209a:	2101      	movs	r1, #1
 800209c:	086a      	lsrs	r2, r5, #1
 800209e:	400d      	ands	r5, r1
 80020a0:	4315      	orrs	r5, r2
 80020a2:	07e2      	lsls	r2, r4, #31
 80020a4:	4315      	orrs	r5, r2
 80020a6:	0864      	lsrs	r4, r4, #1
 80020a8:	494f      	ldr	r1, [pc, #316]	; (80021e8 <__aeabi_dmul+0x398>)
 80020aa:	4461      	add	r1, ip
 80020ac:	2900      	cmp	r1, #0
 80020ae:	dc00      	bgt.n	80020b2 <__aeabi_dmul+0x262>
 80020b0:	e0b0      	b.n	8002214 <__aeabi_dmul+0x3c4>
 80020b2:	076b      	lsls	r3, r5, #29
 80020b4:	d009      	beq.n	80020ca <__aeabi_dmul+0x27a>
 80020b6:	220f      	movs	r2, #15
 80020b8:	402a      	ands	r2, r5
 80020ba:	2a04      	cmp	r2, #4
 80020bc:	d005      	beq.n	80020ca <__aeabi_dmul+0x27a>
 80020be:	1d2a      	adds	r2, r5, #4
 80020c0:	42aa      	cmp	r2, r5
 80020c2:	41ad      	sbcs	r5, r5
 80020c4:	426d      	negs	r5, r5
 80020c6:	1964      	adds	r4, r4, r5
 80020c8:	0015      	movs	r5, r2
 80020ca:	01e3      	lsls	r3, r4, #7
 80020cc:	d504      	bpl.n	80020d8 <__aeabi_dmul+0x288>
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	4a46      	ldr	r2, [pc, #280]	; (80021ec <__aeabi_dmul+0x39c>)
 80020d2:	00c9      	lsls	r1, r1, #3
 80020d4:	4014      	ands	r4, r2
 80020d6:	4461      	add	r1, ip
 80020d8:	4a45      	ldr	r2, [pc, #276]	; (80021f0 <__aeabi_dmul+0x3a0>)
 80020da:	4291      	cmp	r1, r2
 80020dc:	dd00      	ble.n	80020e0 <__aeabi_dmul+0x290>
 80020de:	e726      	b.n	8001f2e <__aeabi_dmul+0xde>
 80020e0:	0762      	lsls	r2, r4, #29
 80020e2:	08ed      	lsrs	r5, r5, #3
 80020e4:	0264      	lsls	r4, r4, #9
 80020e6:	0549      	lsls	r1, r1, #21
 80020e8:	4315      	orrs	r5, r2
 80020ea:	0b24      	lsrs	r4, r4, #12
 80020ec:	0d4a      	lsrs	r2, r1, #21
 80020ee:	e710      	b.n	8001f12 <__aeabi_dmul+0xc2>
 80020f0:	4652      	mov	r2, sl
 80020f2:	4332      	orrs	r2, r6
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dmul+0x2a8>
 80020f6:	e07f      	b.n	80021f8 <__aeabi_dmul+0x3a8>
 80020f8:	2e00      	cmp	r6, #0
 80020fa:	d100      	bne.n	80020fe <__aeabi_dmul+0x2ae>
 80020fc:	e0dc      	b.n	80022b8 <__aeabi_dmul+0x468>
 80020fe:	0030      	movs	r0, r6
 8002100:	f000 fd96 	bl	8002c30 <__clzsi2>
 8002104:	0002      	movs	r2, r0
 8002106:	3a0b      	subs	r2, #11
 8002108:	231d      	movs	r3, #29
 800210a:	0001      	movs	r1, r0
 800210c:	1a9b      	subs	r3, r3, r2
 800210e:	4652      	mov	r2, sl
 8002110:	3908      	subs	r1, #8
 8002112:	40da      	lsrs	r2, r3
 8002114:	408e      	lsls	r6, r1
 8002116:	4316      	orrs	r6, r2
 8002118:	4652      	mov	r2, sl
 800211a:	408a      	lsls	r2, r1
 800211c:	9b00      	ldr	r3, [sp, #0]
 800211e:	4935      	ldr	r1, [pc, #212]	; (80021f4 <__aeabi_dmul+0x3a4>)
 8002120:	1a18      	subs	r0, r3, r0
 8002122:	0003      	movs	r3, r0
 8002124:	468c      	mov	ip, r1
 8002126:	4463      	add	r3, ip
 8002128:	2000      	movs	r0, #0
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	e6d3      	b.n	8001ed6 <__aeabi_dmul+0x86>
 800212e:	0025      	movs	r5, r4
 8002130:	4305      	orrs	r5, r0
 8002132:	d04a      	beq.n	80021ca <__aeabi_dmul+0x37a>
 8002134:	2c00      	cmp	r4, #0
 8002136:	d100      	bne.n	800213a <__aeabi_dmul+0x2ea>
 8002138:	e0b0      	b.n	800229c <__aeabi_dmul+0x44c>
 800213a:	0020      	movs	r0, r4
 800213c:	f000 fd78 	bl	8002c30 <__clzsi2>
 8002140:	0001      	movs	r1, r0
 8002142:	0002      	movs	r2, r0
 8002144:	390b      	subs	r1, #11
 8002146:	231d      	movs	r3, #29
 8002148:	0010      	movs	r0, r2
 800214a:	1a5b      	subs	r3, r3, r1
 800214c:	0031      	movs	r1, r6
 800214e:	0035      	movs	r5, r6
 8002150:	3808      	subs	r0, #8
 8002152:	4084      	lsls	r4, r0
 8002154:	40d9      	lsrs	r1, r3
 8002156:	4085      	lsls	r5, r0
 8002158:	430c      	orrs	r4, r1
 800215a:	4826      	ldr	r0, [pc, #152]	; (80021f4 <__aeabi_dmul+0x3a4>)
 800215c:	1a83      	subs	r3, r0, r2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	4699      	mov	r9, r3
 8002164:	469b      	mov	fp, r3
 8002166:	e697      	b.n	8001e98 <__aeabi_dmul+0x48>
 8002168:	0005      	movs	r5, r0
 800216a:	4325      	orrs	r5, r4
 800216c:	d126      	bne.n	80021bc <__aeabi_dmul+0x36c>
 800216e:	2208      	movs	r2, #8
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2302      	movs	r3, #2
 8002174:	2400      	movs	r4, #0
 8002176:	4691      	mov	r9, r2
 8002178:	469b      	mov	fp, r3
 800217a:	e68d      	b.n	8001e98 <__aeabi_dmul+0x48>
 800217c:	4652      	mov	r2, sl
 800217e:	9b00      	ldr	r3, [sp, #0]
 8002180:	4332      	orrs	r2, r6
 8002182:	d110      	bne.n	80021a6 <__aeabi_dmul+0x356>
 8002184:	4915      	ldr	r1, [pc, #84]	; (80021dc <__aeabi_dmul+0x38c>)
 8002186:	2600      	movs	r6, #0
 8002188:	468c      	mov	ip, r1
 800218a:	4463      	add	r3, ip
 800218c:	4649      	mov	r1, r9
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2302      	movs	r3, #2
 8002192:	4319      	orrs	r1, r3
 8002194:	4689      	mov	r9, r1
 8002196:	2002      	movs	r0, #2
 8002198:	e69d      	b.n	8001ed6 <__aeabi_dmul+0x86>
 800219a:	465b      	mov	r3, fp
 800219c:	9701      	str	r7, [sp, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d000      	beq.n	80021a4 <__aeabi_dmul+0x354>
 80021a2:	e6ad      	b.n	8001f00 <__aeabi_dmul+0xb0>
 80021a4:	e6c3      	b.n	8001f2e <__aeabi_dmul+0xde>
 80021a6:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <__aeabi_dmul+0x38c>)
 80021a8:	2003      	movs	r0, #3
 80021aa:	4694      	mov	ip, r2
 80021ac:	4463      	add	r3, ip
 80021ae:	464a      	mov	r2, r9
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2303      	movs	r3, #3
 80021b4:	431a      	orrs	r2, r3
 80021b6:	4691      	mov	r9, r2
 80021b8:	4652      	mov	r2, sl
 80021ba:	e68c      	b.n	8001ed6 <__aeabi_dmul+0x86>
 80021bc:	220c      	movs	r2, #12
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2303      	movs	r3, #3
 80021c2:	0005      	movs	r5, r0
 80021c4:	4691      	mov	r9, r2
 80021c6:	469b      	mov	fp, r3
 80021c8:	e666      	b.n	8001e98 <__aeabi_dmul+0x48>
 80021ca:	2304      	movs	r3, #4
 80021cc:	4699      	mov	r9, r3
 80021ce:	2300      	movs	r3, #0
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	2400      	movs	r4, #0
 80021d6:	469b      	mov	fp, r3
 80021d8:	e65e      	b.n	8001e98 <__aeabi_dmul+0x48>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	000007ff 	.word	0x000007ff
 80021e0:	fffffc01 	.word	0xfffffc01
 80021e4:	080098b8 	.word	0x080098b8
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	fffffc0d 	.word	0xfffffc0d
 80021f8:	4649      	mov	r1, r9
 80021fa:	2301      	movs	r3, #1
 80021fc:	4319      	orrs	r1, r3
 80021fe:	4689      	mov	r9, r1
 8002200:	2600      	movs	r6, #0
 8002202:	2001      	movs	r0, #1
 8002204:	e667      	b.n	8001ed6 <__aeabi_dmul+0x86>
 8002206:	2300      	movs	r3, #0
 8002208:	2480      	movs	r4, #128	; 0x80
 800220a:	2500      	movs	r5, #0
 800220c:	4a43      	ldr	r2, [pc, #268]	; (800231c <__aeabi_dmul+0x4cc>)
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	0324      	lsls	r4, r4, #12
 8002212:	e67e      	b.n	8001f12 <__aeabi_dmul+0xc2>
 8002214:	2001      	movs	r0, #1
 8002216:	1a40      	subs	r0, r0, r1
 8002218:	2838      	cmp	r0, #56	; 0x38
 800221a:	dd00      	ble.n	800221e <__aeabi_dmul+0x3ce>
 800221c:	e676      	b.n	8001f0c <__aeabi_dmul+0xbc>
 800221e:	281f      	cmp	r0, #31
 8002220:	dd5b      	ble.n	80022da <__aeabi_dmul+0x48a>
 8002222:	221f      	movs	r2, #31
 8002224:	0023      	movs	r3, r4
 8002226:	4252      	negs	r2, r2
 8002228:	1a51      	subs	r1, r2, r1
 800222a:	40cb      	lsrs	r3, r1
 800222c:	0019      	movs	r1, r3
 800222e:	2820      	cmp	r0, #32
 8002230:	d003      	beq.n	800223a <__aeabi_dmul+0x3ea>
 8002232:	4a3b      	ldr	r2, [pc, #236]	; (8002320 <__aeabi_dmul+0x4d0>)
 8002234:	4462      	add	r2, ip
 8002236:	4094      	lsls	r4, r2
 8002238:	4325      	orrs	r5, r4
 800223a:	1e6a      	subs	r2, r5, #1
 800223c:	4195      	sbcs	r5, r2
 800223e:	002a      	movs	r2, r5
 8002240:	430a      	orrs	r2, r1
 8002242:	2107      	movs	r1, #7
 8002244:	000d      	movs	r5, r1
 8002246:	2400      	movs	r4, #0
 8002248:	4015      	ands	r5, r2
 800224a:	4211      	tst	r1, r2
 800224c:	d05b      	beq.n	8002306 <__aeabi_dmul+0x4b6>
 800224e:	210f      	movs	r1, #15
 8002250:	2400      	movs	r4, #0
 8002252:	4011      	ands	r1, r2
 8002254:	2904      	cmp	r1, #4
 8002256:	d053      	beq.n	8002300 <__aeabi_dmul+0x4b0>
 8002258:	1d11      	adds	r1, r2, #4
 800225a:	4291      	cmp	r1, r2
 800225c:	4192      	sbcs	r2, r2
 800225e:	4252      	negs	r2, r2
 8002260:	18a4      	adds	r4, r4, r2
 8002262:	000a      	movs	r2, r1
 8002264:	0223      	lsls	r3, r4, #8
 8002266:	d54b      	bpl.n	8002300 <__aeabi_dmul+0x4b0>
 8002268:	2201      	movs	r2, #1
 800226a:	2400      	movs	r4, #0
 800226c:	2500      	movs	r5, #0
 800226e:	e650      	b.n	8001f12 <__aeabi_dmul+0xc2>
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	031b      	lsls	r3, r3, #12
 8002274:	421c      	tst	r4, r3
 8002276:	d009      	beq.n	800228c <__aeabi_dmul+0x43c>
 8002278:	421e      	tst	r6, r3
 800227a:	d107      	bne.n	800228c <__aeabi_dmul+0x43c>
 800227c:	4333      	orrs	r3, r6
 800227e:	031c      	lsls	r4, r3, #12
 8002280:	4643      	mov	r3, r8
 8002282:	0015      	movs	r5, r2
 8002284:	0b24      	lsrs	r4, r4, #12
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <__aeabi_dmul+0x4cc>)
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	e642      	b.n	8001f12 <__aeabi_dmul+0xc2>
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	0312      	lsls	r2, r2, #12
 8002290:	4314      	orrs	r4, r2
 8002292:	0324      	lsls	r4, r4, #12
 8002294:	4a21      	ldr	r2, [pc, #132]	; (800231c <__aeabi_dmul+0x4cc>)
 8002296:	0b24      	lsrs	r4, r4, #12
 8002298:	9701      	str	r7, [sp, #4]
 800229a:	e63a      	b.n	8001f12 <__aeabi_dmul+0xc2>
 800229c:	f000 fcc8 	bl	8002c30 <__clzsi2>
 80022a0:	0001      	movs	r1, r0
 80022a2:	0002      	movs	r2, r0
 80022a4:	3115      	adds	r1, #21
 80022a6:	3220      	adds	r2, #32
 80022a8:	291c      	cmp	r1, #28
 80022aa:	dc00      	bgt.n	80022ae <__aeabi_dmul+0x45e>
 80022ac:	e74b      	b.n	8002146 <__aeabi_dmul+0x2f6>
 80022ae:	0034      	movs	r4, r6
 80022b0:	3808      	subs	r0, #8
 80022b2:	2500      	movs	r5, #0
 80022b4:	4084      	lsls	r4, r0
 80022b6:	e750      	b.n	800215a <__aeabi_dmul+0x30a>
 80022b8:	f000 fcba 	bl	8002c30 <__clzsi2>
 80022bc:	0003      	movs	r3, r0
 80022be:	001a      	movs	r2, r3
 80022c0:	3215      	adds	r2, #21
 80022c2:	3020      	adds	r0, #32
 80022c4:	2a1c      	cmp	r2, #28
 80022c6:	dc00      	bgt.n	80022ca <__aeabi_dmul+0x47a>
 80022c8:	e71e      	b.n	8002108 <__aeabi_dmul+0x2b8>
 80022ca:	4656      	mov	r6, sl
 80022cc:	3b08      	subs	r3, #8
 80022ce:	2200      	movs	r2, #0
 80022d0:	409e      	lsls	r6, r3
 80022d2:	e723      	b.n	800211c <__aeabi_dmul+0x2cc>
 80022d4:	9b00      	ldr	r3, [sp, #0]
 80022d6:	469c      	mov	ip, r3
 80022d8:	e6e6      	b.n	80020a8 <__aeabi_dmul+0x258>
 80022da:	4912      	ldr	r1, [pc, #72]	; (8002324 <__aeabi_dmul+0x4d4>)
 80022dc:	0022      	movs	r2, r4
 80022de:	4461      	add	r1, ip
 80022e0:	002e      	movs	r6, r5
 80022e2:	408d      	lsls	r5, r1
 80022e4:	408a      	lsls	r2, r1
 80022e6:	40c6      	lsrs	r6, r0
 80022e8:	1e69      	subs	r1, r5, #1
 80022ea:	418d      	sbcs	r5, r1
 80022ec:	4332      	orrs	r2, r6
 80022ee:	432a      	orrs	r2, r5
 80022f0:	40c4      	lsrs	r4, r0
 80022f2:	0753      	lsls	r3, r2, #29
 80022f4:	d0b6      	beq.n	8002264 <__aeabi_dmul+0x414>
 80022f6:	210f      	movs	r1, #15
 80022f8:	4011      	ands	r1, r2
 80022fa:	2904      	cmp	r1, #4
 80022fc:	d1ac      	bne.n	8002258 <__aeabi_dmul+0x408>
 80022fe:	e7b1      	b.n	8002264 <__aeabi_dmul+0x414>
 8002300:	0765      	lsls	r5, r4, #29
 8002302:	0264      	lsls	r4, r4, #9
 8002304:	0b24      	lsrs	r4, r4, #12
 8002306:	08d2      	lsrs	r2, r2, #3
 8002308:	4315      	orrs	r5, r2
 800230a:	2200      	movs	r2, #0
 800230c:	e601      	b.n	8001f12 <__aeabi_dmul+0xc2>
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	0312      	lsls	r2, r2, #12
 8002312:	4314      	orrs	r4, r2
 8002314:	0324      	lsls	r4, r4, #12
 8002316:	4a01      	ldr	r2, [pc, #4]	; (800231c <__aeabi_dmul+0x4cc>)
 8002318:	0b24      	lsrs	r4, r4, #12
 800231a:	e5fa      	b.n	8001f12 <__aeabi_dmul+0xc2>
 800231c:	000007ff 	.word	0x000007ff
 8002320:	0000043e 	.word	0x0000043e
 8002324:	0000041e 	.word	0x0000041e

08002328 <__aeabi_dsub>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	4657      	mov	r7, sl
 800232c:	464e      	mov	r6, r9
 800232e:	4645      	mov	r5, r8
 8002330:	46de      	mov	lr, fp
 8002332:	b5e0      	push	{r5, r6, r7, lr}
 8002334:	001e      	movs	r6, r3
 8002336:	0017      	movs	r7, r2
 8002338:	004a      	lsls	r2, r1, #1
 800233a:	030b      	lsls	r3, r1, #12
 800233c:	0d52      	lsrs	r2, r2, #21
 800233e:	0a5b      	lsrs	r3, r3, #9
 8002340:	4690      	mov	r8, r2
 8002342:	0f42      	lsrs	r2, r0, #29
 8002344:	431a      	orrs	r2, r3
 8002346:	0fcd      	lsrs	r5, r1, #31
 8002348:	4ccd      	ldr	r4, [pc, #820]	; (8002680 <__aeabi_dsub+0x358>)
 800234a:	0331      	lsls	r1, r6, #12
 800234c:	00c3      	lsls	r3, r0, #3
 800234e:	4694      	mov	ip, r2
 8002350:	0070      	lsls	r0, r6, #1
 8002352:	0f7a      	lsrs	r2, r7, #29
 8002354:	0a49      	lsrs	r1, r1, #9
 8002356:	00ff      	lsls	r7, r7, #3
 8002358:	469a      	mov	sl, r3
 800235a:	46b9      	mov	r9, r7
 800235c:	0d40      	lsrs	r0, r0, #21
 800235e:	0ff6      	lsrs	r6, r6, #31
 8002360:	4311      	orrs	r1, r2
 8002362:	42a0      	cmp	r0, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x40>
 8002366:	e0b1      	b.n	80024cc <__aeabi_dsub+0x1a4>
 8002368:	2201      	movs	r2, #1
 800236a:	4056      	eors	r6, r2
 800236c:	46b3      	mov	fp, r6
 800236e:	42b5      	cmp	r5, r6
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x4c>
 8002372:	e088      	b.n	8002486 <__aeabi_dsub+0x15e>
 8002374:	4642      	mov	r2, r8
 8002376:	1a12      	subs	r2, r2, r0
 8002378:	2a00      	cmp	r2, #0
 800237a:	dc00      	bgt.n	800237e <__aeabi_dsub+0x56>
 800237c:	e0ae      	b.n	80024dc <__aeabi_dsub+0x1b4>
 800237e:	2800      	cmp	r0, #0
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x5c>
 8002382:	e0c1      	b.n	8002508 <__aeabi_dsub+0x1e0>
 8002384:	48be      	ldr	r0, [pc, #760]	; (8002680 <__aeabi_dsub+0x358>)
 8002386:	4580      	cmp	r8, r0
 8002388:	d100      	bne.n	800238c <__aeabi_dsub+0x64>
 800238a:	e151      	b.n	8002630 <__aeabi_dsub+0x308>
 800238c:	2080      	movs	r0, #128	; 0x80
 800238e:	0400      	lsls	r0, r0, #16
 8002390:	4301      	orrs	r1, r0
 8002392:	2a38      	cmp	r2, #56	; 0x38
 8002394:	dd00      	ble.n	8002398 <__aeabi_dsub+0x70>
 8002396:	e17b      	b.n	8002690 <__aeabi_dsub+0x368>
 8002398:	2a1f      	cmp	r2, #31
 800239a:	dd00      	ble.n	800239e <__aeabi_dsub+0x76>
 800239c:	e1ee      	b.n	800277c <__aeabi_dsub+0x454>
 800239e:	2020      	movs	r0, #32
 80023a0:	003e      	movs	r6, r7
 80023a2:	1a80      	subs	r0, r0, r2
 80023a4:	000c      	movs	r4, r1
 80023a6:	40d6      	lsrs	r6, r2
 80023a8:	40d1      	lsrs	r1, r2
 80023aa:	4087      	lsls	r7, r0
 80023ac:	4662      	mov	r2, ip
 80023ae:	4084      	lsls	r4, r0
 80023b0:	1a52      	subs	r2, r2, r1
 80023b2:	1e78      	subs	r0, r7, #1
 80023b4:	4187      	sbcs	r7, r0
 80023b6:	4694      	mov	ip, r2
 80023b8:	4334      	orrs	r4, r6
 80023ba:	4327      	orrs	r7, r4
 80023bc:	1bdc      	subs	r4, r3, r7
 80023be:	42a3      	cmp	r3, r4
 80023c0:	419b      	sbcs	r3, r3
 80023c2:	4662      	mov	r2, ip
 80023c4:	425b      	negs	r3, r3
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	4699      	mov	r9, r3
 80023ca:	464b      	mov	r3, r9
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	d400      	bmi.n	80023d2 <__aeabi_dsub+0xaa>
 80023d0:	e118      	b.n	8002604 <__aeabi_dsub+0x2dc>
 80023d2:	464b      	mov	r3, r9
 80023d4:	0258      	lsls	r0, r3, #9
 80023d6:	0a43      	lsrs	r3, r0, #9
 80023d8:	4699      	mov	r9, r3
 80023da:	464b      	mov	r3, r9
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d100      	bne.n	80023e2 <__aeabi_dsub+0xba>
 80023e0:	e137      	b.n	8002652 <__aeabi_dsub+0x32a>
 80023e2:	4648      	mov	r0, r9
 80023e4:	f000 fc24 	bl	8002c30 <__clzsi2>
 80023e8:	0001      	movs	r1, r0
 80023ea:	3908      	subs	r1, #8
 80023ec:	2320      	movs	r3, #32
 80023ee:	0022      	movs	r2, r4
 80023f0:	4648      	mov	r0, r9
 80023f2:	1a5b      	subs	r3, r3, r1
 80023f4:	40da      	lsrs	r2, r3
 80023f6:	4088      	lsls	r0, r1
 80023f8:	408c      	lsls	r4, r1
 80023fa:	4643      	mov	r3, r8
 80023fc:	4310      	orrs	r0, r2
 80023fe:	4588      	cmp	r8, r1
 8002400:	dd00      	ble.n	8002404 <__aeabi_dsub+0xdc>
 8002402:	e136      	b.n	8002672 <__aeabi_dsub+0x34a>
 8002404:	1ac9      	subs	r1, r1, r3
 8002406:	1c4b      	adds	r3, r1, #1
 8002408:	2b1f      	cmp	r3, #31
 800240a:	dd00      	ble.n	800240e <__aeabi_dsub+0xe6>
 800240c:	e0ea      	b.n	80025e4 <__aeabi_dsub+0x2bc>
 800240e:	2220      	movs	r2, #32
 8002410:	0026      	movs	r6, r4
 8002412:	1ad2      	subs	r2, r2, r3
 8002414:	0001      	movs	r1, r0
 8002416:	4094      	lsls	r4, r2
 8002418:	40de      	lsrs	r6, r3
 800241a:	40d8      	lsrs	r0, r3
 800241c:	2300      	movs	r3, #0
 800241e:	4091      	lsls	r1, r2
 8002420:	1e62      	subs	r2, r4, #1
 8002422:	4194      	sbcs	r4, r2
 8002424:	4681      	mov	r9, r0
 8002426:	4698      	mov	r8, r3
 8002428:	4331      	orrs	r1, r6
 800242a:	430c      	orrs	r4, r1
 800242c:	0763      	lsls	r3, r4, #29
 800242e:	d009      	beq.n	8002444 <__aeabi_dsub+0x11c>
 8002430:	230f      	movs	r3, #15
 8002432:	4023      	ands	r3, r4
 8002434:	2b04      	cmp	r3, #4
 8002436:	d005      	beq.n	8002444 <__aeabi_dsub+0x11c>
 8002438:	1d23      	adds	r3, r4, #4
 800243a:	42a3      	cmp	r3, r4
 800243c:	41a4      	sbcs	r4, r4
 800243e:	4264      	negs	r4, r4
 8002440:	44a1      	add	r9, r4
 8002442:	001c      	movs	r4, r3
 8002444:	464b      	mov	r3, r9
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	d400      	bmi.n	800244c <__aeabi_dsub+0x124>
 800244a:	e0de      	b.n	800260a <__aeabi_dsub+0x2e2>
 800244c:	4641      	mov	r1, r8
 800244e:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <__aeabi_dsub+0x358>)
 8002450:	3101      	adds	r1, #1
 8002452:	4299      	cmp	r1, r3
 8002454:	d100      	bne.n	8002458 <__aeabi_dsub+0x130>
 8002456:	e0e7      	b.n	8002628 <__aeabi_dsub+0x300>
 8002458:	464b      	mov	r3, r9
 800245a:	488a      	ldr	r0, [pc, #552]	; (8002684 <__aeabi_dsub+0x35c>)
 800245c:	08e4      	lsrs	r4, r4, #3
 800245e:	4003      	ands	r3, r0
 8002460:	0018      	movs	r0, r3
 8002462:	0549      	lsls	r1, r1, #21
 8002464:	075b      	lsls	r3, r3, #29
 8002466:	0240      	lsls	r0, r0, #9
 8002468:	4323      	orrs	r3, r4
 800246a:	0d4a      	lsrs	r2, r1, #21
 800246c:	0b04      	lsrs	r4, r0, #12
 800246e:	0512      	lsls	r2, r2, #20
 8002470:	07ed      	lsls	r5, r5, #31
 8002472:	4322      	orrs	r2, r4
 8002474:	432a      	orrs	r2, r5
 8002476:	0018      	movs	r0, r3
 8002478:	0011      	movs	r1, r2
 800247a:	bcf0      	pop	{r4, r5, r6, r7}
 800247c:	46bb      	mov	fp, r7
 800247e:	46b2      	mov	sl, r6
 8002480:	46a9      	mov	r9, r5
 8002482:	46a0      	mov	r8, r4
 8002484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002486:	4642      	mov	r2, r8
 8002488:	1a12      	subs	r2, r2, r0
 800248a:	2a00      	cmp	r2, #0
 800248c:	dd52      	ble.n	8002534 <__aeabi_dsub+0x20c>
 800248e:	2800      	cmp	r0, #0
 8002490:	d100      	bne.n	8002494 <__aeabi_dsub+0x16c>
 8002492:	e09c      	b.n	80025ce <__aeabi_dsub+0x2a6>
 8002494:	45a0      	cmp	r8, r4
 8002496:	d100      	bne.n	800249a <__aeabi_dsub+0x172>
 8002498:	e0ca      	b.n	8002630 <__aeabi_dsub+0x308>
 800249a:	2080      	movs	r0, #128	; 0x80
 800249c:	0400      	lsls	r0, r0, #16
 800249e:	4301      	orrs	r1, r0
 80024a0:	2a38      	cmp	r2, #56	; 0x38
 80024a2:	dd00      	ble.n	80024a6 <__aeabi_dsub+0x17e>
 80024a4:	e149      	b.n	800273a <__aeabi_dsub+0x412>
 80024a6:	2a1f      	cmp	r2, #31
 80024a8:	dc00      	bgt.n	80024ac <__aeabi_dsub+0x184>
 80024aa:	e197      	b.n	80027dc <__aeabi_dsub+0x4b4>
 80024ac:	0010      	movs	r0, r2
 80024ae:	000e      	movs	r6, r1
 80024b0:	3820      	subs	r0, #32
 80024b2:	40c6      	lsrs	r6, r0
 80024b4:	2a20      	cmp	r2, #32
 80024b6:	d004      	beq.n	80024c2 <__aeabi_dsub+0x19a>
 80024b8:	2040      	movs	r0, #64	; 0x40
 80024ba:	1a82      	subs	r2, r0, r2
 80024bc:	4091      	lsls	r1, r2
 80024be:	430f      	orrs	r7, r1
 80024c0:	46b9      	mov	r9, r7
 80024c2:	464c      	mov	r4, r9
 80024c4:	1e62      	subs	r2, r4, #1
 80024c6:	4194      	sbcs	r4, r2
 80024c8:	4334      	orrs	r4, r6
 80024ca:	e13a      	b.n	8002742 <__aeabi_dsub+0x41a>
 80024cc:	000a      	movs	r2, r1
 80024ce:	433a      	orrs	r2, r7
 80024d0:	d028      	beq.n	8002524 <__aeabi_dsub+0x1fc>
 80024d2:	46b3      	mov	fp, r6
 80024d4:	42b5      	cmp	r5, r6
 80024d6:	d02b      	beq.n	8002530 <__aeabi_dsub+0x208>
 80024d8:	4a6b      	ldr	r2, [pc, #428]	; (8002688 <__aeabi_dsub+0x360>)
 80024da:	4442      	add	r2, r8
 80024dc:	2a00      	cmp	r2, #0
 80024de:	d05d      	beq.n	800259c <__aeabi_dsub+0x274>
 80024e0:	4642      	mov	r2, r8
 80024e2:	4644      	mov	r4, r8
 80024e4:	1a82      	subs	r2, r0, r2
 80024e6:	2c00      	cmp	r4, #0
 80024e8:	d000      	beq.n	80024ec <__aeabi_dsub+0x1c4>
 80024ea:	e0f5      	b.n	80026d8 <__aeabi_dsub+0x3b0>
 80024ec:	4665      	mov	r5, ip
 80024ee:	431d      	orrs	r5, r3
 80024f0:	d100      	bne.n	80024f4 <__aeabi_dsub+0x1cc>
 80024f2:	e19c      	b.n	800282e <__aeabi_dsub+0x506>
 80024f4:	1e55      	subs	r5, r2, #1
 80024f6:	2a01      	cmp	r2, #1
 80024f8:	d100      	bne.n	80024fc <__aeabi_dsub+0x1d4>
 80024fa:	e1fb      	b.n	80028f4 <__aeabi_dsub+0x5cc>
 80024fc:	4c60      	ldr	r4, [pc, #384]	; (8002680 <__aeabi_dsub+0x358>)
 80024fe:	42a2      	cmp	r2, r4
 8002500:	d100      	bne.n	8002504 <__aeabi_dsub+0x1dc>
 8002502:	e1bd      	b.n	8002880 <__aeabi_dsub+0x558>
 8002504:	002a      	movs	r2, r5
 8002506:	e0f0      	b.n	80026ea <__aeabi_dsub+0x3c2>
 8002508:	0008      	movs	r0, r1
 800250a:	4338      	orrs	r0, r7
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x1e8>
 800250e:	e0c3      	b.n	8002698 <__aeabi_dsub+0x370>
 8002510:	1e50      	subs	r0, r2, #1
 8002512:	2a01      	cmp	r2, #1
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x1f0>
 8002516:	e1a8      	b.n	800286a <__aeabi_dsub+0x542>
 8002518:	4c59      	ldr	r4, [pc, #356]	; (8002680 <__aeabi_dsub+0x358>)
 800251a:	42a2      	cmp	r2, r4
 800251c:	d100      	bne.n	8002520 <__aeabi_dsub+0x1f8>
 800251e:	e087      	b.n	8002630 <__aeabi_dsub+0x308>
 8002520:	0002      	movs	r2, r0
 8002522:	e736      	b.n	8002392 <__aeabi_dsub+0x6a>
 8002524:	2201      	movs	r2, #1
 8002526:	4056      	eors	r6, r2
 8002528:	46b3      	mov	fp, r6
 800252a:	42b5      	cmp	r5, r6
 800252c:	d000      	beq.n	8002530 <__aeabi_dsub+0x208>
 800252e:	e721      	b.n	8002374 <__aeabi_dsub+0x4c>
 8002530:	4a55      	ldr	r2, [pc, #340]	; (8002688 <__aeabi_dsub+0x360>)
 8002532:	4442      	add	r2, r8
 8002534:	2a00      	cmp	r2, #0
 8002536:	d100      	bne.n	800253a <__aeabi_dsub+0x212>
 8002538:	e0b5      	b.n	80026a6 <__aeabi_dsub+0x37e>
 800253a:	4642      	mov	r2, r8
 800253c:	4644      	mov	r4, r8
 800253e:	1a82      	subs	r2, r0, r2
 8002540:	2c00      	cmp	r4, #0
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x21e>
 8002544:	e138      	b.n	80027b8 <__aeabi_dsub+0x490>
 8002546:	4e4e      	ldr	r6, [pc, #312]	; (8002680 <__aeabi_dsub+0x358>)
 8002548:	42b0      	cmp	r0, r6
 800254a:	d100      	bne.n	800254e <__aeabi_dsub+0x226>
 800254c:	e1de      	b.n	800290c <__aeabi_dsub+0x5e4>
 800254e:	2680      	movs	r6, #128	; 0x80
 8002550:	4664      	mov	r4, ip
 8002552:	0436      	lsls	r6, r6, #16
 8002554:	4334      	orrs	r4, r6
 8002556:	46a4      	mov	ip, r4
 8002558:	2a38      	cmp	r2, #56	; 0x38
 800255a:	dd00      	ble.n	800255e <__aeabi_dsub+0x236>
 800255c:	e196      	b.n	800288c <__aeabi_dsub+0x564>
 800255e:	2a1f      	cmp	r2, #31
 8002560:	dd00      	ble.n	8002564 <__aeabi_dsub+0x23c>
 8002562:	e224      	b.n	80029ae <__aeabi_dsub+0x686>
 8002564:	2620      	movs	r6, #32
 8002566:	1ab4      	subs	r4, r6, r2
 8002568:	46a2      	mov	sl, r4
 800256a:	4664      	mov	r4, ip
 800256c:	4656      	mov	r6, sl
 800256e:	40b4      	lsls	r4, r6
 8002570:	46a1      	mov	r9, r4
 8002572:	001c      	movs	r4, r3
 8002574:	464e      	mov	r6, r9
 8002576:	40d4      	lsrs	r4, r2
 8002578:	4326      	orrs	r6, r4
 800257a:	0034      	movs	r4, r6
 800257c:	4656      	mov	r6, sl
 800257e:	40b3      	lsls	r3, r6
 8002580:	1e5e      	subs	r6, r3, #1
 8002582:	41b3      	sbcs	r3, r6
 8002584:	431c      	orrs	r4, r3
 8002586:	4663      	mov	r3, ip
 8002588:	40d3      	lsrs	r3, r2
 800258a:	18c9      	adds	r1, r1, r3
 800258c:	19e4      	adds	r4, r4, r7
 800258e:	42bc      	cmp	r4, r7
 8002590:	41bf      	sbcs	r7, r7
 8002592:	427f      	negs	r7, r7
 8002594:	46b9      	mov	r9, r7
 8002596:	4680      	mov	r8, r0
 8002598:	4489      	add	r9, r1
 800259a:	e0d8      	b.n	800274e <__aeabi_dsub+0x426>
 800259c:	4640      	mov	r0, r8
 800259e:	4c3b      	ldr	r4, [pc, #236]	; (800268c <__aeabi_dsub+0x364>)
 80025a0:	3001      	adds	r0, #1
 80025a2:	4220      	tst	r0, r4
 80025a4:	d000      	beq.n	80025a8 <__aeabi_dsub+0x280>
 80025a6:	e0b4      	b.n	8002712 <__aeabi_dsub+0x3ea>
 80025a8:	4640      	mov	r0, r8
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d000      	beq.n	80025b0 <__aeabi_dsub+0x288>
 80025ae:	e144      	b.n	800283a <__aeabi_dsub+0x512>
 80025b0:	4660      	mov	r0, ip
 80025b2:	4318      	orrs	r0, r3
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x290>
 80025b6:	e190      	b.n	80028da <__aeabi_dsub+0x5b2>
 80025b8:	0008      	movs	r0, r1
 80025ba:	4338      	orrs	r0, r7
 80025bc:	d000      	beq.n	80025c0 <__aeabi_dsub+0x298>
 80025be:	e1aa      	b.n	8002916 <__aeabi_dsub+0x5ee>
 80025c0:	4661      	mov	r1, ip
 80025c2:	08db      	lsrs	r3, r3, #3
 80025c4:	0749      	lsls	r1, r1, #29
 80025c6:	430b      	orrs	r3, r1
 80025c8:	4661      	mov	r1, ip
 80025ca:	08cc      	lsrs	r4, r1, #3
 80025cc:	e027      	b.n	800261e <__aeabi_dsub+0x2f6>
 80025ce:	0008      	movs	r0, r1
 80025d0:	4338      	orrs	r0, r7
 80025d2:	d061      	beq.n	8002698 <__aeabi_dsub+0x370>
 80025d4:	1e50      	subs	r0, r2, #1
 80025d6:	2a01      	cmp	r2, #1
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x2b4>
 80025da:	e139      	b.n	8002850 <__aeabi_dsub+0x528>
 80025dc:	42a2      	cmp	r2, r4
 80025de:	d027      	beq.n	8002630 <__aeabi_dsub+0x308>
 80025e0:	0002      	movs	r2, r0
 80025e2:	e75d      	b.n	80024a0 <__aeabi_dsub+0x178>
 80025e4:	0002      	movs	r2, r0
 80025e6:	391f      	subs	r1, #31
 80025e8:	40ca      	lsrs	r2, r1
 80025ea:	0011      	movs	r1, r2
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d003      	beq.n	80025f8 <__aeabi_dsub+0x2d0>
 80025f0:	2240      	movs	r2, #64	; 0x40
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	4098      	lsls	r0, r3
 80025f6:	4304      	orrs	r4, r0
 80025f8:	1e63      	subs	r3, r4, #1
 80025fa:	419c      	sbcs	r4, r3
 80025fc:	2300      	movs	r3, #0
 80025fe:	4699      	mov	r9, r3
 8002600:	4698      	mov	r8, r3
 8002602:	430c      	orrs	r4, r1
 8002604:	0763      	lsls	r3, r4, #29
 8002606:	d000      	beq.n	800260a <__aeabi_dsub+0x2e2>
 8002608:	e712      	b.n	8002430 <__aeabi_dsub+0x108>
 800260a:	464b      	mov	r3, r9
 800260c:	464a      	mov	r2, r9
 800260e:	08e4      	lsrs	r4, r4, #3
 8002610:	075b      	lsls	r3, r3, #29
 8002612:	4323      	orrs	r3, r4
 8002614:	08d4      	lsrs	r4, r2, #3
 8002616:	4642      	mov	r2, r8
 8002618:	4919      	ldr	r1, [pc, #100]	; (8002680 <__aeabi_dsub+0x358>)
 800261a:	428a      	cmp	r2, r1
 800261c:	d00e      	beq.n	800263c <__aeabi_dsub+0x314>
 800261e:	0324      	lsls	r4, r4, #12
 8002620:	0552      	lsls	r2, r2, #21
 8002622:	0b24      	lsrs	r4, r4, #12
 8002624:	0d52      	lsrs	r2, r2, #21
 8002626:	e722      	b.n	800246e <__aeabi_dsub+0x146>
 8002628:	000a      	movs	r2, r1
 800262a:	2400      	movs	r4, #0
 800262c:	2300      	movs	r3, #0
 800262e:	e71e      	b.n	800246e <__aeabi_dsub+0x146>
 8002630:	08db      	lsrs	r3, r3, #3
 8002632:	4662      	mov	r2, ip
 8002634:	0752      	lsls	r2, r2, #29
 8002636:	4313      	orrs	r3, r2
 8002638:	4662      	mov	r2, ip
 800263a:	08d4      	lsrs	r4, r2, #3
 800263c:	001a      	movs	r2, r3
 800263e:	4322      	orrs	r2, r4
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x31c>
 8002642:	e1fc      	b.n	8002a3e <__aeabi_dsub+0x716>
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	0312      	lsls	r2, r2, #12
 8002648:	4314      	orrs	r4, r2
 800264a:	0324      	lsls	r4, r4, #12
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <__aeabi_dsub+0x358>)
 800264e:	0b24      	lsrs	r4, r4, #12
 8002650:	e70d      	b.n	800246e <__aeabi_dsub+0x146>
 8002652:	0020      	movs	r0, r4
 8002654:	f000 faec 	bl	8002c30 <__clzsi2>
 8002658:	0001      	movs	r1, r0
 800265a:	3118      	adds	r1, #24
 800265c:	291f      	cmp	r1, #31
 800265e:	dc00      	bgt.n	8002662 <__aeabi_dsub+0x33a>
 8002660:	e6c4      	b.n	80023ec <__aeabi_dsub+0xc4>
 8002662:	3808      	subs	r0, #8
 8002664:	4084      	lsls	r4, r0
 8002666:	4643      	mov	r3, r8
 8002668:	0020      	movs	r0, r4
 800266a:	2400      	movs	r4, #0
 800266c:	4588      	cmp	r8, r1
 800266e:	dc00      	bgt.n	8002672 <__aeabi_dsub+0x34a>
 8002670:	e6c8      	b.n	8002404 <__aeabi_dsub+0xdc>
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__aeabi_dsub+0x35c>)
 8002674:	1a5b      	subs	r3, r3, r1
 8002676:	4010      	ands	r0, r2
 8002678:	4698      	mov	r8, r3
 800267a:	4681      	mov	r9, r0
 800267c:	e6d6      	b.n	800242c <__aeabi_dsub+0x104>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	000007ff 	.word	0x000007ff
 8002684:	ff7fffff 	.word	0xff7fffff
 8002688:	fffff801 	.word	0xfffff801
 800268c:	000007fe 	.word	0x000007fe
 8002690:	430f      	orrs	r7, r1
 8002692:	1e7a      	subs	r2, r7, #1
 8002694:	4197      	sbcs	r7, r2
 8002696:	e691      	b.n	80023bc <__aeabi_dsub+0x94>
 8002698:	4661      	mov	r1, ip
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	0749      	lsls	r1, r1, #29
 800269e:	430b      	orrs	r3, r1
 80026a0:	4661      	mov	r1, ip
 80026a2:	08cc      	lsrs	r4, r1, #3
 80026a4:	e7b8      	b.n	8002618 <__aeabi_dsub+0x2f0>
 80026a6:	4640      	mov	r0, r8
 80026a8:	4cd3      	ldr	r4, [pc, #844]	; (80029f8 <__aeabi_dsub+0x6d0>)
 80026aa:	3001      	adds	r0, #1
 80026ac:	4220      	tst	r0, r4
 80026ae:	d000      	beq.n	80026b2 <__aeabi_dsub+0x38a>
 80026b0:	e0a2      	b.n	80027f8 <__aeabi_dsub+0x4d0>
 80026b2:	4640      	mov	r0, r8
 80026b4:	2800      	cmp	r0, #0
 80026b6:	d000      	beq.n	80026ba <__aeabi_dsub+0x392>
 80026b8:	e101      	b.n	80028be <__aeabi_dsub+0x596>
 80026ba:	4660      	mov	r0, ip
 80026bc:	4318      	orrs	r0, r3
 80026be:	d100      	bne.n	80026c2 <__aeabi_dsub+0x39a>
 80026c0:	e15e      	b.n	8002980 <__aeabi_dsub+0x658>
 80026c2:	0008      	movs	r0, r1
 80026c4:	4338      	orrs	r0, r7
 80026c6:	d000      	beq.n	80026ca <__aeabi_dsub+0x3a2>
 80026c8:	e15f      	b.n	800298a <__aeabi_dsub+0x662>
 80026ca:	4661      	mov	r1, ip
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	0749      	lsls	r1, r1, #29
 80026d0:	430b      	orrs	r3, r1
 80026d2:	4661      	mov	r1, ip
 80026d4:	08cc      	lsrs	r4, r1, #3
 80026d6:	e7a2      	b.n	800261e <__aeabi_dsub+0x2f6>
 80026d8:	4dc8      	ldr	r5, [pc, #800]	; (80029fc <__aeabi_dsub+0x6d4>)
 80026da:	42a8      	cmp	r0, r5
 80026dc:	d100      	bne.n	80026e0 <__aeabi_dsub+0x3b8>
 80026de:	e0cf      	b.n	8002880 <__aeabi_dsub+0x558>
 80026e0:	2580      	movs	r5, #128	; 0x80
 80026e2:	4664      	mov	r4, ip
 80026e4:	042d      	lsls	r5, r5, #16
 80026e6:	432c      	orrs	r4, r5
 80026e8:	46a4      	mov	ip, r4
 80026ea:	2a38      	cmp	r2, #56	; 0x38
 80026ec:	dc56      	bgt.n	800279c <__aeabi_dsub+0x474>
 80026ee:	2a1f      	cmp	r2, #31
 80026f0:	dd00      	ble.n	80026f4 <__aeabi_dsub+0x3cc>
 80026f2:	e0d1      	b.n	8002898 <__aeabi_dsub+0x570>
 80026f4:	2520      	movs	r5, #32
 80026f6:	001e      	movs	r6, r3
 80026f8:	1aad      	subs	r5, r5, r2
 80026fa:	4664      	mov	r4, ip
 80026fc:	40ab      	lsls	r3, r5
 80026fe:	40ac      	lsls	r4, r5
 8002700:	40d6      	lsrs	r6, r2
 8002702:	1e5d      	subs	r5, r3, #1
 8002704:	41ab      	sbcs	r3, r5
 8002706:	4334      	orrs	r4, r6
 8002708:	4323      	orrs	r3, r4
 800270a:	4664      	mov	r4, ip
 800270c:	40d4      	lsrs	r4, r2
 800270e:	1b09      	subs	r1, r1, r4
 8002710:	e049      	b.n	80027a6 <__aeabi_dsub+0x47e>
 8002712:	4660      	mov	r0, ip
 8002714:	1bdc      	subs	r4, r3, r7
 8002716:	1a46      	subs	r6, r0, r1
 8002718:	42a3      	cmp	r3, r4
 800271a:	4180      	sbcs	r0, r0
 800271c:	4240      	negs	r0, r0
 800271e:	4681      	mov	r9, r0
 8002720:	0030      	movs	r0, r6
 8002722:	464e      	mov	r6, r9
 8002724:	1b80      	subs	r0, r0, r6
 8002726:	4681      	mov	r9, r0
 8002728:	0200      	lsls	r0, r0, #8
 800272a:	d476      	bmi.n	800281a <__aeabi_dsub+0x4f2>
 800272c:	464b      	mov	r3, r9
 800272e:	4323      	orrs	r3, r4
 8002730:	d000      	beq.n	8002734 <__aeabi_dsub+0x40c>
 8002732:	e652      	b.n	80023da <__aeabi_dsub+0xb2>
 8002734:	2400      	movs	r4, #0
 8002736:	2500      	movs	r5, #0
 8002738:	e771      	b.n	800261e <__aeabi_dsub+0x2f6>
 800273a:	4339      	orrs	r1, r7
 800273c:	000c      	movs	r4, r1
 800273e:	1e62      	subs	r2, r4, #1
 8002740:	4194      	sbcs	r4, r2
 8002742:	18e4      	adds	r4, r4, r3
 8002744:	429c      	cmp	r4, r3
 8002746:	419b      	sbcs	r3, r3
 8002748:	425b      	negs	r3, r3
 800274a:	4463      	add	r3, ip
 800274c:	4699      	mov	r9, r3
 800274e:	464b      	mov	r3, r9
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	d400      	bmi.n	8002756 <__aeabi_dsub+0x42e>
 8002754:	e756      	b.n	8002604 <__aeabi_dsub+0x2dc>
 8002756:	2301      	movs	r3, #1
 8002758:	469c      	mov	ip, r3
 800275a:	4ba8      	ldr	r3, [pc, #672]	; (80029fc <__aeabi_dsub+0x6d4>)
 800275c:	44e0      	add	r8, ip
 800275e:	4598      	cmp	r8, r3
 8002760:	d038      	beq.n	80027d4 <__aeabi_dsub+0x4ac>
 8002762:	464b      	mov	r3, r9
 8002764:	48a6      	ldr	r0, [pc, #664]	; (8002a00 <__aeabi_dsub+0x6d8>)
 8002766:	2201      	movs	r2, #1
 8002768:	4003      	ands	r3, r0
 800276a:	0018      	movs	r0, r3
 800276c:	0863      	lsrs	r3, r4, #1
 800276e:	4014      	ands	r4, r2
 8002770:	431c      	orrs	r4, r3
 8002772:	07c3      	lsls	r3, r0, #31
 8002774:	431c      	orrs	r4, r3
 8002776:	0843      	lsrs	r3, r0, #1
 8002778:	4699      	mov	r9, r3
 800277a:	e657      	b.n	800242c <__aeabi_dsub+0x104>
 800277c:	0010      	movs	r0, r2
 800277e:	000e      	movs	r6, r1
 8002780:	3820      	subs	r0, #32
 8002782:	40c6      	lsrs	r6, r0
 8002784:	2a20      	cmp	r2, #32
 8002786:	d004      	beq.n	8002792 <__aeabi_dsub+0x46a>
 8002788:	2040      	movs	r0, #64	; 0x40
 800278a:	1a82      	subs	r2, r0, r2
 800278c:	4091      	lsls	r1, r2
 800278e:	430f      	orrs	r7, r1
 8002790:	46b9      	mov	r9, r7
 8002792:	464f      	mov	r7, r9
 8002794:	1e7a      	subs	r2, r7, #1
 8002796:	4197      	sbcs	r7, r2
 8002798:	4337      	orrs	r7, r6
 800279a:	e60f      	b.n	80023bc <__aeabi_dsub+0x94>
 800279c:	4662      	mov	r2, ip
 800279e:	431a      	orrs	r2, r3
 80027a0:	0013      	movs	r3, r2
 80027a2:	1e5a      	subs	r2, r3, #1
 80027a4:	4193      	sbcs	r3, r2
 80027a6:	1afc      	subs	r4, r7, r3
 80027a8:	42a7      	cmp	r7, r4
 80027aa:	41bf      	sbcs	r7, r7
 80027ac:	427f      	negs	r7, r7
 80027ae:	1bcb      	subs	r3, r1, r7
 80027b0:	4699      	mov	r9, r3
 80027b2:	465d      	mov	r5, fp
 80027b4:	4680      	mov	r8, r0
 80027b6:	e608      	b.n	80023ca <__aeabi_dsub+0xa2>
 80027b8:	4666      	mov	r6, ip
 80027ba:	431e      	orrs	r6, r3
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x498>
 80027be:	e0be      	b.n	800293e <__aeabi_dsub+0x616>
 80027c0:	1e56      	subs	r6, r2, #1
 80027c2:	2a01      	cmp	r2, #1
 80027c4:	d100      	bne.n	80027c8 <__aeabi_dsub+0x4a0>
 80027c6:	e109      	b.n	80029dc <__aeabi_dsub+0x6b4>
 80027c8:	4c8c      	ldr	r4, [pc, #560]	; (80029fc <__aeabi_dsub+0x6d4>)
 80027ca:	42a2      	cmp	r2, r4
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x4a8>
 80027ce:	e119      	b.n	8002a04 <__aeabi_dsub+0x6dc>
 80027d0:	0032      	movs	r2, r6
 80027d2:	e6c1      	b.n	8002558 <__aeabi_dsub+0x230>
 80027d4:	4642      	mov	r2, r8
 80027d6:	2400      	movs	r4, #0
 80027d8:	2300      	movs	r3, #0
 80027da:	e648      	b.n	800246e <__aeabi_dsub+0x146>
 80027dc:	2020      	movs	r0, #32
 80027de:	000c      	movs	r4, r1
 80027e0:	1a80      	subs	r0, r0, r2
 80027e2:	003e      	movs	r6, r7
 80027e4:	4087      	lsls	r7, r0
 80027e6:	4084      	lsls	r4, r0
 80027e8:	40d6      	lsrs	r6, r2
 80027ea:	1e78      	subs	r0, r7, #1
 80027ec:	4187      	sbcs	r7, r0
 80027ee:	40d1      	lsrs	r1, r2
 80027f0:	4334      	orrs	r4, r6
 80027f2:	433c      	orrs	r4, r7
 80027f4:	448c      	add	ip, r1
 80027f6:	e7a4      	b.n	8002742 <__aeabi_dsub+0x41a>
 80027f8:	4a80      	ldr	r2, [pc, #512]	; (80029fc <__aeabi_dsub+0x6d4>)
 80027fa:	4290      	cmp	r0, r2
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x4d8>
 80027fe:	e0e9      	b.n	80029d4 <__aeabi_dsub+0x6ac>
 8002800:	19df      	adds	r7, r3, r7
 8002802:	429f      	cmp	r7, r3
 8002804:	419b      	sbcs	r3, r3
 8002806:	4461      	add	r1, ip
 8002808:	425b      	negs	r3, r3
 800280a:	18c9      	adds	r1, r1, r3
 800280c:	07cc      	lsls	r4, r1, #31
 800280e:	087f      	lsrs	r7, r7, #1
 8002810:	084b      	lsrs	r3, r1, #1
 8002812:	4699      	mov	r9, r3
 8002814:	4680      	mov	r8, r0
 8002816:	433c      	orrs	r4, r7
 8002818:	e6f4      	b.n	8002604 <__aeabi_dsub+0x2dc>
 800281a:	1afc      	subs	r4, r7, r3
 800281c:	42a7      	cmp	r7, r4
 800281e:	41bf      	sbcs	r7, r7
 8002820:	4663      	mov	r3, ip
 8002822:	427f      	negs	r7, r7
 8002824:	1ac9      	subs	r1, r1, r3
 8002826:	1bcb      	subs	r3, r1, r7
 8002828:	4699      	mov	r9, r3
 800282a:	465d      	mov	r5, fp
 800282c:	e5d5      	b.n	80023da <__aeabi_dsub+0xb2>
 800282e:	08ff      	lsrs	r7, r7, #3
 8002830:	074b      	lsls	r3, r1, #29
 8002832:	465d      	mov	r5, fp
 8002834:	433b      	orrs	r3, r7
 8002836:	08cc      	lsrs	r4, r1, #3
 8002838:	e6ee      	b.n	8002618 <__aeabi_dsub+0x2f0>
 800283a:	4662      	mov	r2, ip
 800283c:	431a      	orrs	r2, r3
 800283e:	d000      	beq.n	8002842 <__aeabi_dsub+0x51a>
 8002840:	e082      	b.n	8002948 <__aeabi_dsub+0x620>
 8002842:	000b      	movs	r3, r1
 8002844:	433b      	orrs	r3, r7
 8002846:	d11b      	bne.n	8002880 <__aeabi_dsub+0x558>
 8002848:	2480      	movs	r4, #128	; 0x80
 800284a:	2500      	movs	r5, #0
 800284c:	0324      	lsls	r4, r4, #12
 800284e:	e6f9      	b.n	8002644 <__aeabi_dsub+0x31c>
 8002850:	19dc      	adds	r4, r3, r7
 8002852:	429c      	cmp	r4, r3
 8002854:	419b      	sbcs	r3, r3
 8002856:	4461      	add	r1, ip
 8002858:	4689      	mov	r9, r1
 800285a:	425b      	negs	r3, r3
 800285c:	4499      	add	r9, r3
 800285e:	464b      	mov	r3, r9
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	d444      	bmi.n	80028ee <__aeabi_dsub+0x5c6>
 8002864:	2301      	movs	r3, #1
 8002866:	4698      	mov	r8, r3
 8002868:	e6cc      	b.n	8002604 <__aeabi_dsub+0x2dc>
 800286a:	1bdc      	subs	r4, r3, r7
 800286c:	4662      	mov	r2, ip
 800286e:	42a3      	cmp	r3, r4
 8002870:	419b      	sbcs	r3, r3
 8002872:	1a51      	subs	r1, r2, r1
 8002874:	425b      	negs	r3, r3
 8002876:	1acb      	subs	r3, r1, r3
 8002878:	4699      	mov	r9, r3
 800287a:	2301      	movs	r3, #1
 800287c:	4698      	mov	r8, r3
 800287e:	e5a4      	b.n	80023ca <__aeabi_dsub+0xa2>
 8002880:	08ff      	lsrs	r7, r7, #3
 8002882:	074b      	lsls	r3, r1, #29
 8002884:	465d      	mov	r5, fp
 8002886:	433b      	orrs	r3, r7
 8002888:	08cc      	lsrs	r4, r1, #3
 800288a:	e6d7      	b.n	800263c <__aeabi_dsub+0x314>
 800288c:	4662      	mov	r2, ip
 800288e:	431a      	orrs	r2, r3
 8002890:	0014      	movs	r4, r2
 8002892:	1e63      	subs	r3, r4, #1
 8002894:	419c      	sbcs	r4, r3
 8002896:	e679      	b.n	800258c <__aeabi_dsub+0x264>
 8002898:	0015      	movs	r5, r2
 800289a:	4664      	mov	r4, ip
 800289c:	3d20      	subs	r5, #32
 800289e:	40ec      	lsrs	r4, r5
 80028a0:	46a0      	mov	r8, r4
 80028a2:	2a20      	cmp	r2, #32
 80028a4:	d005      	beq.n	80028b2 <__aeabi_dsub+0x58a>
 80028a6:	2540      	movs	r5, #64	; 0x40
 80028a8:	4664      	mov	r4, ip
 80028aa:	1aaa      	subs	r2, r5, r2
 80028ac:	4094      	lsls	r4, r2
 80028ae:	4323      	orrs	r3, r4
 80028b0:	469a      	mov	sl, r3
 80028b2:	4654      	mov	r4, sl
 80028b4:	1e63      	subs	r3, r4, #1
 80028b6:	419c      	sbcs	r4, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	4323      	orrs	r3, r4
 80028bc:	e773      	b.n	80027a6 <__aeabi_dsub+0x47e>
 80028be:	4662      	mov	r2, ip
 80028c0:	431a      	orrs	r2, r3
 80028c2:	d023      	beq.n	800290c <__aeabi_dsub+0x5e4>
 80028c4:	000a      	movs	r2, r1
 80028c6:	433a      	orrs	r2, r7
 80028c8:	d000      	beq.n	80028cc <__aeabi_dsub+0x5a4>
 80028ca:	e0a0      	b.n	8002a0e <__aeabi_dsub+0x6e6>
 80028cc:	4662      	mov	r2, ip
 80028ce:	08db      	lsrs	r3, r3, #3
 80028d0:	0752      	lsls	r2, r2, #29
 80028d2:	4313      	orrs	r3, r2
 80028d4:	4662      	mov	r2, ip
 80028d6:	08d4      	lsrs	r4, r2, #3
 80028d8:	e6b0      	b.n	800263c <__aeabi_dsub+0x314>
 80028da:	000b      	movs	r3, r1
 80028dc:	433b      	orrs	r3, r7
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x5ba>
 80028e0:	e728      	b.n	8002734 <__aeabi_dsub+0x40c>
 80028e2:	08ff      	lsrs	r7, r7, #3
 80028e4:	074b      	lsls	r3, r1, #29
 80028e6:	465d      	mov	r5, fp
 80028e8:	433b      	orrs	r3, r7
 80028ea:	08cc      	lsrs	r4, r1, #3
 80028ec:	e697      	b.n	800261e <__aeabi_dsub+0x2f6>
 80028ee:	2302      	movs	r3, #2
 80028f0:	4698      	mov	r8, r3
 80028f2:	e736      	b.n	8002762 <__aeabi_dsub+0x43a>
 80028f4:	1afc      	subs	r4, r7, r3
 80028f6:	42a7      	cmp	r7, r4
 80028f8:	41bf      	sbcs	r7, r7
 80028fa:	4663      	mov	r3, ip
 80028fc:	427f      	negs	r7, r7
 80028fe:	1ac9      	subs	r1, r1, r3
 8002900:	1bcb      	subs	r3, r1, r7
 8002902:	4699      	mov	r9, r3
 8002904:	2301      	movs	r3, #1
 8002906:	465d      	mov	r5, fp
 8002908:	4698      	mov	r8, r3
 800290a:	e55e      	b.n	80023ca <__aeabi_dsub+0xa2>
 800290c:	074b      	lsls	r3, r1, #29
 800290e:	08ff      	lsrs	r7, r7, #3
 8002910:	433b      	orrs	r3, r7
 8002912:	08cc      	lsrs	r4, r1, #3
 8002914:	e692      	b.n	800263c <__aeabi_dsub+0x314>
 8002916:	1bdc      	subs	r4, r3, r7
 8002918:	4660      	mov	r0, ip
 800291a:	42a3      	cmp	r3, r4
 800291c:	41b6      	sbcs	r6, r6
 800291e:	1a40      	subs	r0, r0, r1
 8002920:	4276      	negs	r6, r6
 8002922:	1b80      	subs	r0, r0, r6
 8002924:	4681      	mov	r9, r0
 8002926:	0200      	lsls	r0, r0, #8
 8002928:	d560      	bpl.n	80029ec <__aeabi_dsub+0x6c4>
 800292a:	1afc      	subs	r4, r7, r3
 800292c:	42a7      	cmp	r7, r4
 800292e:	41bf      	sbcs	r7, r7
 8002930:	4663      	mov	r3, ip
 8002932:	427f      	negs	r7, r7
 8002934:	1ac9      	subs	r1, r1, r3
 8002936:	1bcb      	subs	r3, r1, r7
 8002938:	4699      	mov	r9, r3
 800293a:	465d      	mov	r5, fp
 800293c:	e576      	b.n	800242c <__aeabi_dsub+0x104>
 800293e:	08ff      	lsrs	r7, r7, #3
 8002940:	074b      	lsls	r3, r1, #29
 8002942:	433b      	orrs	r3, r7
 8002944:	08cc      	lsrs	r4, r1, #3
 8002946:	e667      	b.n	8002618 <__aeabi_dsub+0x2f0>
 8002948:	000a      	movs	r2, r1
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	433a      	orrs	r2, r7
 800294e:	d100      	bne.n	8002952 <__aeabi_dsub+0x62a>
 8002950:	e66f      	b.n	8002632 <__aeabi_dsub+0x30a>
 8002952:	4662      	mov	r2, ip
 8002954:	0752      	lsls	r2, r2, #29
 8002956:	4313      	orrs	r3, r2
 8002958:	4662      	mov	r2, ip
 800295a:	08d4      	lsrs	r4, r2, #3
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	0312      	lsls	r2, r2, #12
 8002960:	4214      	tst	r4, r2
 8002962:	d007      	beq.n	8002974 <__aeabi_dsub+0x64c>
 8002964:	08c8      	lsrs	r0, r1, #3
 8002966:	4210      	tst	r0, r2
 8002968:	d104      	bne.n	8002974 <__aeabi_dsub+0x64c>
 800296a:	465d      	mov	r5, fp
 800296c:	0004      	movs	r4, r0
 800296e:	08fb      	lsrs	r3, r7, #3
 8002970:	0749      	lsls	r1, r1, #29
 8002972:	430b      	orrs	r3, r1
 8002974:	0f5a      	lsrs	r2, r3, #29
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	0752      	lsls	r2, r2, #29
 800297c:	4313      	orrs	r3, r2
 800297e:	e65d      	b.n	800263c <__aeabi_dsub+0x314>
 8002980:	074b      	lsls	r3, r1, #29
 8002982:	08ff      	lsrs	r7, r7, #3
 8002984:	433b      	orrs	r3, r7
 8002986:	08cc      	lsrs	r4, r1, #3
 8002988:	e649      	b.n	800261e <__aeabi_dsub+0x2f6>
 800298a:	19dc      	adds	r4, r3, r7
 800298c:	429c      	cmp	r4, r3
 800298e:	419b      	sbcs	r3, r3
 8002990:	4461      	add	r1, ip
 8002992:	4689      	mov	r9, r1
 8002994:	425b      	negs	r3, r3
 8002996:	4499      	add	r9, r3
 8002998:	464b      	mov	r3, r9
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	d400      	bmi.n	80029a0 <__aeabi_dsub+0x678>
 800299e:	e631      	b.n	8002604 <__aeabi_dsub+0x2dc>
 80029a0:	464a      	mov	r2, r9
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <__aeabi_dsub+0x6d8>)
 80029a4:	401a      	ands	r2, r3
 80029a6:	2301      	movs	r3, #1
 80029a8:	4691      	mov	r9, r2
 80029aa:	4698      	mov	r8, r3
 80029ac:	e62a      	b.n	8002604 <__aeabi_dsub+0x2dc>
 80029ae:	0016      	movs	r6, r2
 80029b0:	4664      	mov	r4, ip
 80029b2:	3e20      	subs	r6, #32
 80029b4:	40f4      	lsrs	r4, r6
 80029b6:	46a0      	mov	r8, r4
 80029b8:	2a20      	cmp	r2, #32
 80029ba:	d005      	beq.n	80029c8 <__aeabi_dsub+0x6a0>
 80029bc:	2640      	movs	r6, #64	; 0x40
 80029be:	4664      	mov	r4, ip
 80029c0:	1ab2      	subs	r2, r6, r2
 80029c2:	4094      	lsls	r4, r2
 80029c4:	4323      	orrs	r3, r4
 80029c6:	469a      	mov	sl, r3
 80029c8:	4654      	mov	r4, sl
 80029ca:	1e63      	subs	r3, r4, #1
 80029cc:	419c      	sbcs	r4, r3
 80029ce:	4643      	mov	r3, r8
 80029d0:	431c      	orrs	r4, r3
 80029d2:	e5db      	b.n	800258c <__aeabi_dsub+0x264>
 80029d4:	0002      	movs	r2, r0
 80029d6:	2400      	movs	r4, #0
 80029d8:	2300      	movs	r3, #0
 80029da:	e548      	b.n	800246e <__aeabi_dsub+0x146>
 80029dc:	19dc      	adds	r4, r3, r7
 80029de:	42bc      	cmp	r4, r7
 80029e0:	41bf      	sbcs	r7, r7
 80029e2:	4461      	add	r1, ip
 80029e4:	4689      	mov	r9, r1
 80029e6:	427f      	negs	r7, r7
 80029e8:	44b9      	add	r9, r7
 80029ea:	e738      	b.n	800285e <__aeabi_dsub+0x536>
 80029ec:	464b      	mov	r3, r9
 80029ee:	4323      	orrs	r3, r4
 80029f0:	d100      	bne.n	80029f4 <__aeabi_dsub+0x6cc>
 80029f2:	e69f      	b.n	8002734 <__aeabi_dsub+0x40c>
 80029f4:	e606      	b.n	8002604 <__aeabi_dsub+0x2dc>
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	000007fe 	.word	0x000007fe
 80029fc:	000007ff 	.word	0x000007ff
 8002a00:	ff7fffff 	.word	0xff7fffff
 8002a04:	08ff      	lsrs	r7, r7, #3
 8002a06:	074b      	lsls	r3, r1, #29
 8002a08:	433b      	orrs	r3, r7
 8002a0a:	08cc      	lsrs	r4, r1, #3
 8002a0c:	e616      	b.n	800263c <__aeabi_dsub+0x314>
 8002a0e:	4662      	mov	r2, ip
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	0752      	lsls	r2, r2, #29
 8002a14:	4313      	orrs	r3, r2
 8002a16:	4662      	mov	r2, ip
 8002a18:	08d4      	lsrs	r4, r2, #3
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	0312      	lsls	r2, r2, #12
 8002a1e:	4214      	tst	r4, r2
 8002a20:	d007      	beq.n	8002a32 <__aeabi_dsub+0x70a>
 8002a22:	08c8      	lsrs	r0, r1, #3
 8002a24:	4210      	tst	r0, r2
 8002a26:	d104      	bne.n	8002a32 <__aeabi_dsub+0x70a>
 8002a28:	465d      	mov	r5, fp
 8002a2a:	0004      	movs	r4, r0
 8002a2c:	08fb      	lsrs	r3, r7, #3
 8002a2e:	0749      	lsls	r1, r1, #29
 8002a30:	430b      	orrs	r3, r1
 8002a32:	0f5a      	lsrs	r2, r3, #29
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	0752      	lsls	r2, r2, #29
 8002a38:	08db      	lsrs	r3, r3, #3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	e5fe      	b.n	800263c <__aeabi_dsub+0x314>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	4a01      	ldr	r2, [pc, #4]	; (8002a48 <__aeabi_dsub+0x720>)
 8002a42:	001c      	movs	r4, r3
 8002a44:	e513      	b.n	800246e <__aeabi_dsub+0x146>
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	000007ff 	.word	0x000007ff

08002a4c <__aeabi_dcmpun>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	0005      	movs	r5, r0
 8002a50:	480c      	ldr	r0, [pc, #48]	; (8002a84 <__aeabi_dcmpun+0x38>)
 8002a52:	031c      	lsls	r4, r3, #12
 8002a54:	0016      	movs	r6, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	030a      	lsls	r2, r1, #12
 8002a5a:	0049      	lsls	r1, r1, #1
 8002a5c:	0b12      	lsrs	r2, r2, #12
 8002a5e:	0d49      	lsrs	r1, r1, #21
 8002a60:	0b24      	lsrs	r4, r4, #12
 8002a62:	0d5b      	lsrs	r3, r3, #21
 8002a64:	4281      	cmp	r1, r0
 8002a66:	d008      	beq.n	8002a7a <__aeabi_dcmpun+0x2e>
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <__aeabi_dcmpun+0x38>)
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <__aeabi_dcmpun+0x2c>
 8002a70:	0020      	movs	r0, r4
 8002a72:	4330      	orrs	r0, r6
 8002a74:	1e43      	subs	r3, r0, #1
 8002a76:	4198      	sbcs	r0, r3
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	432a      	orrs	r2, r5
 8002a7e:	d1fb      	bne.n	8002a78 <__aeabi_dcmpun+0x2c>
 8002a80:	e7f2      	b.n	8002a68 <__aeabi_dcmpun+0x1c>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	000007ff 	.word	0x000007ff

08002a88 <__aeabi_d2iz>:
 8002a88:	000a      	movs	r2, r1
 8002a8a:	b530      	push	{r4, r5, lr}
 8002a8c:	4c13      	ldr	r4, [pc, #76]	; (8002adc <__aeabi_d2iz+0x54>)
 8002a8e:	0053      	lsls	r3, r2, #1
 8002a90:	0309      	lsls	r1, r1, #12
 8002a92:	0005      	movs	r5, r0
 8002a94:	0b09      	lsrs	r1, r1, #12
 8002a96:	2000      	movs	r0, #0
 8002a98:	0d5b      	lsrs	r3, r3, #21
 8002a9a:	0fd2      	lsrs	r2, r2, #31
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	dd04      	ble.n	8002aaa <__aeabi_d2iz+0x22>
 8002aa0:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <__aeabi_d2iz+0x58>)
 8002aa2:	4283      	cmp	r3, r0
 8002aa4:	dd02      	ble.n	8002aac <__aeabi_d2iz+0x24>
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <__aeabi_d2iz+0x5c>)
 8002aa8:	18d0      	adds	r0, r2, r3
 8002aaa:	bd30      	pop	{r4, r5, pc}
 8002aac:	2080      	movs	r0, #128	; 0x80
 8002aae:	0340      	lsls	r0, r0, #13
 8002ab0:	4301      	orrs	r1, r0
 8002ab2:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <__aeabi_d2iz+0x60>)
 8002ab4:	1ac0      	subs	r0, r0, r3
 8002ab6:	281f      	cmp	r0, #31
 8002ab8:	dd08      	ble.n	8002acc <__aeabi_d2iz+0x44>
 8002aba:	480c      	ldr	r0, [pc, #48]	; (8002aec <__aeabi_d2iz+0x64>)
 8002abc:	1ac3      	subs	r3, r0, r3
 8002abe:	40d9      	lsrs	r1, r3
 8002ac0:	000b      	movs	r3, r1
 8002ac2:	4258      	negs	r0, r3
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d1f0      	bne.n	8002aaa <__aeabi_d2iz+0x22>
 8002ac8:	0018      	movs	r0, r3
 8002aca:	e7ee      	b.n	8002aaa <__aeabi_d2iz+0x22>
 8002acc:	4c08      	ldr	r4, [pc, #32]	; (8002af0 <__aeabi_d2iz+0x68>)
 8002ace:	40c5      	lsrs	r5, r0
 8002ad0:	46a4      	mov	ip, r4
 8002ad2:	4463      	add	r3, ip
 8002ad4:	4099      	lsls	r1, r3
 8002ad6:	000b      	movs	r3, r1
 8002ad8:	432b      	orrs	r3, r5
 8002ada:	e7f2      	b.n	8002ac2 <__aeabi_d2iz+0x3a>
 8002adc:	000003fe 	.word	0x000003fe
 8002ae0:	0000041d 	.word	0x0000041d
 8002ae4:	7fffffff 	.word	0x7fffffff
 8002ae8:	00000433 	.word	0x00000433
 8002aec:	00000413 	.word	0x00000413
 8002af0:	fffffbed 	.word	0xfffffbed

08002af4 <__aeabi_i2d>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	2800      	cmp	r0, #0
 8002af8:	d016      	beq.n	8002b28 <__aeabi_i2d+0x34>
 8002afa:	17c3      	asrs	r3, r0, #31
 8002afc:	18c5      	adds	r5, r0, r3
 8002afe:	405d      	eors	r5, r3
 8002b00:	0fc4      	lsrs	r4, r0, #31
 8002b02:	0028      	movs	r0, r5
 8002b04:	f000 f894 	bl	8002c30 <__clzsi2>
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <__aeabi_i2d+0x5c>)
 8002b0a:	1a12      	subs	r2, r2, r0
 8002b0c:	280a      	cmp	r0, #10
 8002b0e:	dc16      	bgt.n	8002b3e <__aeabi_i2d+0x4a>
 8002b10:	0003      	movs	r3, r0
 8002b12:	002e      	movs	r6, r5
 8002b14:	3315      	adds	r3, #21
 8002b16:	409e      	lsls	r6, r3
 8002b18:	230b      	movs	r3, #11
 8002b1a:	1a18      	subs	r0, r3, r0
 8002b1c:	40c5      	lsrs	r5, r0
 8002b1e:	0552      	lsls	r2, r2, #21
 8002b20:	032d      	lsls	r5, r5, #12
 8002b22:	0b2d      	lsrs	r5, r5, #12
 8002b24:	0d53      	lsrs	r3, r2, #21
 8002b26:	e003      	b.n	8002b30 <__aeabi_i2d+0x3c>
 8002b28:	2400      	movs	r4, #0
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2500      	movs	r5, #0
 8002b2e:	2600      	movs	r6, #0
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	432b      	orrs	r3, r5
 8002b34:	07e4      	lsls	r4, r4, #31
 8002b36:	4323      	orrs	r3, r4
 8002b38:	0030      	movs	r0, r6
 8002b3a:	0019      	movs	r1, r3
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
 8002b3e:	380b      	subs	r0, #11
 8002b40:	4085      	lsls	r5, r0
 8002b42:	0552      	lsls	r2, r2, #21
 8002b44:	032d      	lsls	r5, r5, #12
 8002b46:	2600      	movs	r6, #0
 8002b48:	0b2d      	lsrs	r5, r5, #12
 8002b4a:	0d53      	lsrs	r3, r2, #21
 8002b4c:	e7f0      	b.n	8002b30 <__aeabi_i2d+0x3c>
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	0000041e 	.word	0x0000041e

08002b54 <__aeabi_ui2d>:
 8002b54:	b510      	push	{r4, lr}
 8002b56:	1e04      	subs	r4, r0, #0
 8002b58:	d010      	beq.n	8002b7c <__aeabi_ui2d+0x28>
 8002b5a:	f000 f869 	bl	8002c30 <__clzsi2>
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <__aeabi_ui2d+0x48>)
 8002b60:	1a1b      	subs	r3, r3, r0
 8002b62:	280a      	cmp	r0, #10
 8002b64:	dc11      	bgt.n	8002b8a <__aeabi_ui2d+0x36>
 8002b66:	220b      	movs	r2, #11
 8002b68:	0021      	movs	r1, r4
 8002b6a:	1a12      	subs	r2, r2, r0
 8002b6c:	40d1      	lsrs	r1, r2
 8002b6e:	3015      	adds	r0, #21
 8002b70:	030a      	lsls	r2, r1, #12
 8002b72:	055b      	lsls	r3, r3, #21
 8002b74:	4084      	lsls	r4, r0
 8002b76:	0b12      	lsrs	r2, r2, #12
 8002b78:	0d5b      	lsrs	r3, r3, #21
 8002b7a:	e001      	b.n	8002b80 <__aeabi_ui2d+0x2c>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2200      	movs	r2, #0
 8002b80:	051b      	lsls	r3, r3, #20
 8002b82:	4313      	orrs	r3, r2
 8002b84:	0020      	movs	r0, r4
 8002b86:	0019      	movs	r1, r3
 8002b88:	bd10      	pop	{r4, pc}
 8002b8a:	0022      	movs	r2, r4
 8002b8c:	380b      	subs	r0, #11
 8002b8e:	4082      	lsls	r2, r0
 8002b90:	055b      	lsls	r3, r3, #21
 8002b92:	0312      	lsls	r2, r2, #12
 8002b94:	2400      	movs	r4, #0
 8002b96:	0b12      	lsrs	r2, r2, #12
 8002b98:	0d5b      	lsrs	r3, r3, #21
 8002b9a:	e7f1      	b.n	8002b80 <__aeabi_ui2d+0x2c>
 8002b9c:	0000041e 	.word	0x0000041e

08002ba0 <__aeabi_f2d>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	0043      	lsls	r3, r0, #1
 8002ba4:	0246      	lsls	r6, r0, #9
 8002ba6:	0fc4      	lsrs	r4, r0, #31
 8002ba8:	20fe      	movs	r0, #254	; 0xfe
 8002baa:	0e1b      	lsrs	r3, r3, #24
 8002bac:	1c59      	adds	r1, r3, #1
 8002bae:	0a75      	lsrs	r5, r6, #9
 8002bb0:	4208      	tst	r0, r1
 8002bb2:	d00c      	beq.n	8002bce <__aeabi_f2d+0x2e>
 8002bb4:	22e0      	movs	r2, #224	; 0xe0
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4694      	mov	ip, r2
 8002bba:	076d      	lsls	r5, r5, #29
 8002bbc:	0b36      	lsrs	r6, r6, #12
 8002bbe:	4463      	add	r3, ip
 8002bc0:	051b      	lsls	r3, r3, #20
 8002bc2:	4333      	orrs	r3, r6
 8002bc4:	07e4      	lsls	r4, r4, #31
 8002bc6:	4323      	orrs	r3, r4
 8002bc8:	0028      	movs	r0, r5
 8002bca:	0019      	movs	r1, r3
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d114      	bne.n	8002bfc <__aeabi_f2d+0x5c>
 8002bd2:	2d00      	cmp	r5, #0
 8002bd4:	d01b      	beq.n	8002c0e <__aeabi_f2d+0x6e>
 8002bd6:	0028      	movs	r0, r5
 8002bd8:	f000 f82a 	bl	8002c30 <__clzsi2>
 8002bdc:	280a      	cmp	r0, #10
 8002bde:	dc1c      	bgt.n	8002c1a <__aeabi_f2d+0x7a>
 8002be0:	230b      	movs	r3, #11
 8002be2:	002e      	movs	r6, r5
 8002be4:	1a1b      	subs	r3, r3, r0
 8002be6:	40de      	lsrs	r6, r3
 8002be8:	0003      	movs	r3, r0
 8002bea:	3315      	adds	r3, #21
 8002bec:	409d      	lsls	r5, r3
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <__aeabi_f2d+0x88>)
 8002bf0:	0336      	lsls	r6, r6, #12
 8002bf2:	1a12      	subs	r2, r2, r0
 8002bf4:	0552      	lsls	r2, r2, #21
 8002bf6:	0b36      	lsrs	r6, r6, #12
 8002bf8:	0d53      	lsrs	r3, r2, #21
 8002bfa:	e7e1      	b.n	8002bc0 <__aeabi_f2d+0x20>
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d009      	beq.n	8002c14 <__aeabi_f2d+0x74>
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0b36      	lsrs	r6, r6, #12
 8002c04:	0312      	lsls	r2, r2, #12
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <__aeabi_f2d+0x8c>)
 8002c08:	076d      	lsls	r5, r5, #29
 8002c0a:	4316      	orrs	r6, r2
 8002c0c:	e7d8      	b.n	8002bc0 <__aeabi_f2d+0x20>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2600      	movs	r6, #0
 8002c12:	e7d5      	b.n	8002bc0 <__aeabi_f2d+0x20>
 8002c14:	2600      	movs	r6, #0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <__aeabi_f2d+0x8c>)
 8002c18:	e7d2      	b.n	8002bc0 <__aeabi_f2d+0x20>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	3b0b      	subs	r3, #11
 8002c1e:	409d      	lsls	r5, r3
 8002c20:	002e      	movs	r6, r5
 8002c22:	2500      	movs	r5, #0
 8002c24:	e7e3      	b.n	8002bee <__aeabi_f2d+0x4e>
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	00000389 	.word	0x00000389
 8002c2c:	000007ff 	.word	0x000007ff

08002c30 <__clzsi2>:
 8002c30:	211c      	movs	r1, #28
 8002c32:	2301      	movs	r3, #1
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	4298      	cmp	r0, r3
 8002c38:	d301      	bcc.n	8002c3e <__clzsi2+0xe>
 8002c3a:	0c00      	lsrs	r0, r0, #16
 8002c3c:	3910      	subs	r1, #16
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	4298      	cmp	r0, r3
 8002c42:	d301      	bcc.n	8002c48 <__clzsi2+0x18>
 8002c44:	0a00      	lsrs	r0, r0, #8
 8002c46:	3908      	subs	r1, #8
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	4298      	cmp	r0, r3
 8002c4c:	d301      	bcc.n	8002c52 <__clzsi2+0x22>
 8002c4e:	0900      	lsrs	r0, r0, #4
 8002c50:	3904      	subs	r1, #4
 8002c52:	a202      	add	r2, pc, #8	; (adr r2, 8002c5c <__clzsi2+0x2c>)
 8002c54:	5c10      	ldrb	r0, [r2, r0]
 8002c56:	1840      	adds	r0, r0, r1
 8002c58:	4770      	bx	lr
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	02020304 	.word	0x02020304
 8002c60:	01010101 	.word	0x01010101
	...

08002c6c <__clzdi2>:
 8002c6c:	b510      	push	{r4, lr}
 8002c6e:	2900      	cmp	r1, #0
 8002c70:	d103      	bne.n	8002c7a <__clzdi2+0xe>
 8002c72:	f7ff ffdd 	bl	8002c30 <__clzsi2>
 8002c76:	3020      	adds	r0, #32
 8002c78:	e002      	b.n	8002c80 <__clzdi2+0x14>
 8002c7a:	0008      	movs	r0, r1
 8002c7c:	f7ff ffd8 	bl	8002c30 <__clzsi2>
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)

08002c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c84:	b5b0      	push	{r4, r5, r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c8a:	f000 fd61 	bl	8003750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c8e:	f000 f875 	bl	8002d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c92:	f000 f9c1 	bl	8003018 <MX_GPIO_Init>
  MX_ADC_Init();
 8002c96:	f000 f8dd 	bl	8002e54 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8002c9a:	f000 f98d 	bl	8002fb8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002c9e:	f000 f94b 	bl	8002f38 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  int ledVal = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

  //set up sht library
  sht3x_handle_t handle = {
 8002ca6:	2108      	movs	r1, #8
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	4a2f      	ldr	r2, [pc, #188]	; (8002d68 <main+0xe4>)
 8002cac:	ca11      	ldmia	r2!, {r0, r4}
 8002cae:	c311      	stmia	r3!, {r0, r4}
      .i2c_handle = &hi2c2,
      .device_address = SHT3X_I2C_DEVICE_ADDRESS_ADDR_PIN_LOW
  };
  if (!sht3x_init(&handle)) {
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 fa6e 	bl	8003194 <sht3x_init>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	001a      	movs	r2, r3
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4053      	eors	r3, r2
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <main+0x4a>
      printf("SHT3x access failed.\n\r");
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <main+0xe8>)
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f004 fd2b 	bl	8007724 <iprintf>
  }
  // Enable heater for two seconds.
  sht3x_set_header_enable(&handle, true);
 8002cce:	2408      	movs	r4, #8
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 fb3b 	bl	8003350 <sht3x_set_header_enable>
  HAL_Delay(2000);
 8002cda:	23fa      	movs	r3, #250	; 0xfa
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 fda6 	bl	8003830 <HAL_Delay>
  sht3x_set_header_enable(&handle, false);
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fb31 	bl	8003350 <sht3x_set_header_enable>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, ledVal);
	ledVal = !ledVal;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	425a      	negs	r2, r3
 8002cf2:	4153      	adcs	r3, r2
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	617b      	str	r3, [r7, #20]
	HAL_Delay(100);
 8002cf8:	2064      	movs	r0, #100	; 0x64
 8002cfa:	f000 fd99 	bl	8003830 <HAL_Delay>

	//read lightsensor adc
	HAL_ADC_Start(&hadc);
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <main+0xec>)
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 ff2d 	bl	8003b60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <main+0xec>)
 8002d08:	210a      	movs	r1, #10
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 ff7c 	bl	8003c08 <HAL_ADC_PollForConversion>
	uint16_t adcResult = HAL_ADC_GetValue(&hadc);
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <main+0xec>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f001 f814 	bl	8003d40 <HAL_ADC_GetValue>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	2412      	movs	r4, #18
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	801a      	strh	r2, [r3, #0]

	//read temp/hum sensor
	float temp, hum;
	sht3x_read_temperature_and_humidity(&handle, &temp, &hum);
 8002d20:	003a      	movs	r2, r7
 8002d22:	1d39      	adds	r1, r7, #4
 8002d24:	2308      	movs	r3, #8
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 fa77 	bl	800321c <sht3x_read_temperature_and_humidity>

	printf("Light adc : %d \n\r", adcResult);
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <main+0xf0>)
 8002d34:	0011      	movs	r1, r2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f004 fcf4 	bl	8007724 <iprintf>
	printf("Temp %.2f, humidity %.2f \% \n\r", temp, hum);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1c18      	adds	r0, r3, #0
 8002d40:	f7ff ff2e 	bl	8002ba0 <__aeabi_f2d>
 8002d44:	0004      	movs	r4, r0
 8002d46:	000d      	movs	r5, r1
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	1c18      	adds	r0, r3, #0
 8002d4c:	f7ff ff28 	bl	8002ba0 <__aeabi_f2d>
 8002d50:	0002      	movs	r2, r0
 8002d52:	000b      	movs	r3, r1
 8002d54:	4908      	ldr	r1, [pc, #32]	; (8002d78 <main+0xf4>)
 8002d56:	9200      	str	r2, [sp, #0]
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	0022      	movs	r2, r4
 8002d5c:	002b      	movs	r3, r5
 8002d5e:	0008      	movs	r0, r1
 8002d60:	f004 fce0 	bl	8007724 <iprintf>
  {
 8002d64:	e7c3      	b.n	8002cee <main+0x6a>
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	0800975c 	.word	0x0800975c
 8002d6c:	08009710 	.word	0x08009710
 8002d70:	200001f8 	.word	0x200001f8
 8002d74:	08009728 	.word	0x08009728
 8002d78:	0800973c 	.word	0x0800973c

08002d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b09d      	sub	sp, #116	; 0x74
 8002d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d82:	2438      	movs	r4, #56	; 0x38
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	0018      	movs	r0, r3
 8002d88:	2338      	movs	r3, #56	; 0x38
 8002d8a:	001a      	movs	r2, r3
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	f003 fef1 	bl	8006b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d92:	2324      	movs	r3, #36	; 0x24
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	0018      	movs	r0, r3
 8002d98:	2314      	movs	r3, #20
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f003 fee9 	bl	8006b74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da2:	003b      	movs	r3, r7
 8002da4:	0018      	movs	r0, r3
 8002da6:	2324      	movs	r3, #36	; 0x24
 8002da8:	001a      	movs	r2, r3
 8002daa:	2100      	movs	r1, #0
 8002dac:	f003 fee2 	bl	8006b74 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <SystemClock_Config+0xd0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a26      	ldr	r2, [pc, #152]	; (8002e50 <SystemClock_Config+0xd4>)
 8002db6:	401a      	ands	r2, r3
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <SystemClock_Config+0xd0>)
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	0109      	lsls	r1, r1, #4
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002dc2:	0021      	movs	r1, r4
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	2201      	movs	r2, #1
 8002dce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	22a0      	movs	r2, #160	; 0xa0
 8002dda:	0212      	lsls	r2, r2, #8
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	2200      	movs	r2, #0
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	0018      	movs	r0, r3
 8002de8:	f002 f9c2 	bl	8005170 <HAL_RCC_OscConfig>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d001      	beq.n	8002df4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002df0:	f000 f948 	bl	8003084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002df4:	2124      	movs	r1, #36	; 0x24
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	220f      	movs	r2, #15
 8002dfa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	2200      	movs	r2, #0
 8002e12:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	2100      	movs	r1, #0
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f002 fd7d 	bl	8005918 <HAL_RCC_ClockConfig>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d001      	beq.n	8002e26 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002e22:	f000 f92f 	bl	8003084 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e26:	003b      	movs	r3, r7
 8002e28:	2202      	movs	r2, #2
 8002e2a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e2c:	003b      	movs	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e32:	003b      	movs	r3, r7
 8002e34:	0018      	movs	r0, r3
 8002e36:	f002 ff93 	bl	8005d60 <HAL_RCCEx_PeriphCLKConfig>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002e3e:	f000 f921 	bl	8003084 <Error_Handler>
  }
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b01d      	add	sp, #116	; 0x74
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	ffffe7ff 	.word	0xffffe7ff

08002e54 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e5a:	003b      	movs	r3, r7
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	2308      	movs	r3, #8
 8002e60:	001a      	movs	r2, r3
 8002e62:	2100      	movs	r1, #0
 8002e64:	f003 fe86 	bl	8006b74 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e6a:	4a31      	ldr	r2, [pc, #196]	; (8002f30 <MX_ADC_Init+0xdc>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002e6e:	4b2f      	ldr	r3, [pc, #188]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002e74:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e76:	22c0      	movs	r2, #192	; 0xc0
 8002e78:	0612      	lsls	r2, r2, #24
 8002e7a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e84:	2202      	movs	r2, #2
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e96:	2220      	movs	r2, #32
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002e9e:	2221      	movs	r2, #33	; 0x21
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ea4:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002eaa:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002eac:	22c2      	movs	r2, #194	; 0xc2
 8002eae:	32ff      	adds	r2, #255	; 0xff
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002eb4:	222c      	movs	r2, #44	; 0x2c
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 fccc 	bl	8003878 <HAL_ADC_Init>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002ee4:	f000 f8ce 	bl	8003084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ee8:	003b      	movs	r3, r7
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002eee:	003b      	movs	r3, r7
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	0152      	lsls	r2, r2, #5
 8002ef4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ef6:	003a      	movs	r2, r7
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002efa:	0011      	movs	r1, r2
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 ff2b 	bl	8003d58 <HAL_ADC_ConfigChannel>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d001      	beq.n	8002f0a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002f06:	f000 f8bd 	bl	8003084 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f0a:	003b      	movs	r3, r7
 8002f0c:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <MX_ADC_Init+0xe0>)
 8002f0e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002f10:	003a      	movs	r2, r7
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <MX_ADC_Init+0xd8>)
 8002f14:	0011      	movs	r1, r2
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 ff1e 	bl	8003d58 <HAL_ADC_ConfigChannel>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8002f20:	f000 f8b0 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200001f8 	.word	0x200001f8
 8002f30:	40012400 	.word	0x40012400
 8002f34:	10000010 	.word	0x10000010

08002f38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f3e:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <MX_I2C2_Init+0x7c>)
 8002f40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f44:	22e1      	movs	r2, #225	; 0xe1
 8002f46:	00d2      	lsls	r2, r2, #3
 8002f48:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f5c:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f62:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f001 fa2e 	bl	80043d8 <HAL_I2C_Init>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002f80:	f000 f880 	bl	8003084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f86:	2100      	movs	r1, #0
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f002 f859 	bl	8005040 <HAL_I2CEx_ConfigAnalogFilter>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d001      	beq.n	8002f96 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002f92:	f000 f877 	bl	8003084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <MX_I2C2_Init+0x78>)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f002 f89c 	bl	80050d8 <HAL_I2CEx_ConfigDigitalFilter>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002fa4:	f000 f86e 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000254 	.word	0x20000254
 8002fb4:	40005800 	.word	0x40005800

08002fb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <MX_USART2_UART_Init+0x5c>)
 8002fc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fc4:	22e1      	movs	r2, #225	; 0xe1
 8002fc6:	0252      	lsls	r2, r2, #9
 8002fc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fca:	4b11      	ldr	r3, [pc, #68]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fde:	220c      	movs	r2, #12
 8002fe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <MX_USART2_UART_Init+0x58>)
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f003 f805 	bl	800600c <HAL_UART_Init>
 8003002:	1e03      	subs	r3, r0, #0
 8003004:	d001      	beq.n	800300a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003006:	f000 f83d 	bl	8003084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	200002a0 	.word	0x200002a0
 8003014:	40004400 	.word	0x40004400

08003018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_GPIO_Init+0x40>)
 8003020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <MX_GPIO_Init+0x40>)
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_GPIO_Init+0x40>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <MX_GPIO_Init+0x40>)
 8003038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <MX_GPIO_Init+0x40>)
 800303c:	2102      	movs	r1, #2
 800303e:	430a      	orrs	r2, r1
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <MX_GPIO_Init+0x40>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	2202      	movs	r2, #2
 8003048:	4013      	ands	r3, r2
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	683b      	ldr	r3, [r7, #0]

}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	40021000 	.word	0x40021000

0800305c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <__io_putchar+0x20>)
 8003066:	1d39      	adds	r1, r7, #4
 8003068:	4805      	ldr	r0, [pc, #20]	; (8003080 <__io_putchar+0x24>)
 800306a:	2201      	movs	r2, #1
 800306c:	f003 f822 	bl	80060b4 <HAL_UART_Transmit>

  return ch;
 8003070:	687b      	ldr	r3, [r7, #4]
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	0000ffff 	.word	0x0000ffff
 8003080:	200002a0 	.word	0x200002a0

08003084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003088:	b672      	cpsid	i
}
 800308a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800308c:	e7fe      	b.n	800308c <Error_Handler+0x8>

0800308e <calculate_crc>:
	SHT3X_COMMAND_MEASURE_HIGHREP_10HZ = 0x2737,
	SHT3X_COMMAND_MEASURE_LOWREP_10HZ = 0x272a
} sht3x_command_t;

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8003098:	2317      	movs	r3, #23
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	22ff      	movs	r2, #255	; 0xff
 800309e:	701a      	strb	r2, [r3, #0]
	for (size_t i = 0; i < length; i++) {
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e02a      	b.n	80030fc <calculate_crc+0x6e>
		crc ^= data[i];
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	18d3      	adds	r3, r2, r3
 80030ac:	7819      	ldrb	r1, [r3, #0]
 80030ae:	2217      	movs	r2, #23
 80030b0:	18bb      	adds	r3, r7, r2
 80030b2:	18ba      	adds	r2, r7, r2
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	404a      	eors	r2, r1
 80030b8:	701a      	strb	r2, [r3, #0]
		for (size_t j = 0; j < 8; j++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	e017      	b.n	80030f0 <calculate_crc+0x62>
			if ((crc & 0x80u) != 0) {
 80030c0:	2117      	movs	r1, #23
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b25b      	sxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	da08      	bge.n	80030de <calculate_crc+0x50>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	18db      	adds	r3, r3, r3
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	2131      	movs	r1, #49	; 0x31
 80030d8:	404a      	eors	r2, r1
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e005      	b.n	80030ea <calculate_crc+0x5c>
			} else {
				crc <<= 1u;
 80030de:	2317      	movs	r3, #23
 80030e0:	18fa      	adds	r2, r7, r3
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	18db      	adds	r3, r3, r3
 80030e8:	7013      	strb	r3, [r2, #0]
		for (size_t j = 0; j < 8; j++) {
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3301      	adds	r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b07      	cmp	r3, #7
 80030f4:	d9e4      	bls.n	80030c0 <calculate_crc+0x32>
	for (size_t i = 0; i < length; i++) {
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3301      	adds	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3d0      	bcc.n	80030a6 <calculate_crc+0x18>
			}
		}
	}
	return crc;
 8003104:	2317      	movs	r3, #23
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b006      	add	sp, #24
 8003110:	bd80      	pop	{r7, pc}

08003112 <sht3x_send_command>:

static bool sht3x_send_command(sht3x_handle_t *handle, sht3x_command_t command)
{
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b087      	sub	sp, #28
 8003116:	af02      	add	r7, sp, #8
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	000a      	movs	r2, r1
 800311c:	1cbb      	adds	r3, r7, #2
 800311e:	801a      	strh	r2, [r3, #0]
	uint8_t command_buffer[2] = {(command & 0xff00u) >> 8u, command & 0xffu};
 8003120:	1cbb      	adds	r3, r7, #2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	b29b      	uxth	r3, r3
 8003128:	b2da      	uxtb	r2, r3
 800312a:	240c      	movs	r4, #12
 800312c:	193b      	adds	r3, r7, r4
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	1cbb      	adds	r3, r7, #2
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	193b      	adds	r3, r7, r4
 8003138:	705a      	strb	r2, [r3, #1]

	if (HAL_I2C_Master_Transmit(handle->i2c_handle, handle->device_address << 1u, command_buffer, sizeof(command_buffer),
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	889b      	ldrh	r3, [r3, #4]
 8003142:	18db      	adds	r3, r3, r3
 8003144:	b299      	uxth	r1, r3
 8003146:	193a      	adds	r2, r7, r4
 8003148:	231e      	movs	r3, #30
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2302      	movs	r3, #2
 800314e:	f001 f9d9 	bl	8004504 <HAL_I2C_Master_Transmit>
 8003152:	1e03      	subs	r3, r0, #0
 8003154:	d001      	beq.n	800315a <sht3x_send_command+0x48>
	                            SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <sht3x_send_command+0x4a>
	}

	return true;
 800315a:	2301      	movs	r3, #1
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b005      	add	sp, #20
 8003162:	bd90      	pop	{r4, r7, pc}

08003164 <uint8_to_uint16>:

static uint16_t uint8_to_uint16(uint8_t msb, uint8_t lsb)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	0002      	movs	r2, r0
 800316c:	1dfb      	adds	r3, r7, #7
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	1dbb      	adds	r3, r7, #6
 8003172:	1c0a      	adds	r2, r1, #0
 8003174:	701a      	strb	r2, [r3, #0]
	return (uint16_t)((uint16_t)msb << 8u) | lsb;
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	b29a      	uxth	r2, r3
 8003180:	1dbb      	adds	r3, r7, #6
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	4313      	orrs	r3, r2
 8003188:	b29b      	uxth	r3, r3
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b002      	add	sp, #8
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af04      	add	r7, sp, #16
 800319a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <sht3x_init+0x1e>
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <sht3x_init+0x78>)
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <sht3x_init+0x7c>)
 80031aa:	481a      	ldr	r0, [pc, #104]	; (8003214 <sht3x_init+0x80>)
 80031ac:	2138      	movs	r1, #56	; 0x38
 80031ae:	f003 fc89 	bl	8006ac4 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	889b      	ldrh	r3, [r3, #4]
 80031ba:	18db      	adds	r3, r3, r3
 80031bc:	b299      	uxth	r1, r3
 80031be:	4a16      	ldr	r2, [pc, #88]	; (8003218 <sht3x_init+0x84>)
 80031c0:	231e      	movs	r3, #30
 80031c2:	9302      	str	r3, [sp, #8]
 80031c4:	2303      	movs	r3, #3
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	230c      	movs	r3, #12
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2302      	movs	r3, #2
 80031d0:	f001 fba8 	bl	8004924 <HAL_I2C_Mem_Read>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d001      	beq.n	80031dc <sht3x_init+0x48>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 80031d8:	2300      	movs	r3, #0
 80031da:	e012      	b.n	8003202 <sht3x_init+0x6e>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 80031dc:	250f      	movs	r5, #15
 80031de:	197c      	adds	r4, r7, r5
 80031e0:	260c      	movs	r6, #12
 80031e2:	19bb      	adds	r3, r7, r6
 80031e4:	2102      	movs	r1, #2
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff ff51 	bl	800308e <calculate_crc>
 80031ec:	0003      	movs	r3, r0
 80031ee:	7023      	strb	r3, [r4, #0]

	if (calculated_crc != status_reg_and_checksum[2]) {
 80031f0:	19bb      	adds	r3, r7, r6
 80031f2:	789b      	ldrb	r3, [r3, #2]
 80031f4:	197a      	adds	r2, r7, r5
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <sht3x_init+0x6c>
		return false;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e000      	b.n	8003202 <sht3x_init+0x6e>
	}

	return true;
 8003200:	2301      	movs	r3, #1
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b005      	add	sp, #20
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	08009764 	.word	0x08009764
 8003210:	080098f8 	.word	0x080098f8
 8003214:	080097a4 	.word	0x080097a4
 8003218:	0000f32d 	.word	0x0000f32d

0800321c <sht3x_read_temperature_and_humidity>:

bool sht3x_read_temperature_and_humidity(sht3x_handle_t *handle, float *temperature, float *humidity)
{
 800321c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321e:	b08b      	sub	sp, #44	; 0x2c
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
	sht3x_send_command(handle, SHT3X_COMMAND_MEASURE_HIGHREP_STRETCH);
 8003228:	4a44      	ldr	r2, [pc, #272]	; (800333c <sht3x_read_temperature_and_humidity+0x120>)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0011      	movs	r1, r2
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff ff6f 	bl	8003112 <sht3x_send_command>

	HAL_Delay(1);
 8003234:	2001      	movs	r0, #1
 8003236:	f000 fafb 	bl	8003830 <HAL_Delay>

	uint8_t buffer[6];
	if (HAL_I2C_Master_Receive(handle->i2c_handle, handle->device_address << 1u, buffer, sizeof(buffer), SHT3X_I2C_TIMEOUT) != HAL_OK) {
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	889b      	ldrh	r3, [r3, #4]
 8003242:	18db      	adds	r3, r3, r3
 8003244:	b299      	uxth	r1, r3
 8003246:	2314      	movs	r3, #20
 8003248:	18fa      	adds	r2, r7, r3
 800324a:	231e      	movs	r3, #30
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2306      	movs	r3, #6
 8003250:	f001 fa60 	bl	8004714 <HAL_I2C_Master_Receive>
 8003254:	1e03      	subs	r3, r0, #0
 8003256:	d001      	beq.n	800325c <sht3x_read_temperature_and_humidity+0x40>
		return false;
 8003258:	2300      	movs	r3, #0
 800325a:	e06a      	b.n	8003332 <sht3x_read_temperature_and_humidity+0x116>
	}

	uint8_t temperature_crc = calculate_crc(buffer, 2);
 800325c:	261f      	movs	r6, #31
 800325e:	19bc      	adds	r4, r7, r6
 8003260:	2514      	movs	r5, #20
 8003262:	197b      	adds	r3, r7, r5
 8003264:	2102      	movs	r1, #2
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff ff11 	bl	800308e <calculate_crc>
 800326c:	0003      	movs	r3, r0
 800326e:	7023      	strb	r3, [r4, #0]
	uint8_t humidity_crc = calculate_crc(buffer + 3, 2);
 8003270:	197b      	adds	r3, r7, r5
 8003272:	3303      	adds	r3, #3
 8003274:	221e      	movs	r2, #30
 8003276:	18bc      	adds	r4, r7, r2
 8003278:	2102      	movs	r1, #2
 800327a:	0018      	movs	r0, r3
 800327c:	f7ff ff07 	bl	800308e <calculate_crc>
 8003280:	0003      	movs	r3, r0
 8003282:	7023      	strb	r3, [r4, #0]
	if (temperature_crc != buffer[2] || humidity_crc != buffer[5]) {
 8003284:	0029      	movs	r1, r5
 8003286:	187b      	adds	r3, r7, r1
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	19ba      	adds	r2, r7, r6
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d106      	bne.n	80032a0 <sht3x_read_temperature_and_humidity+0x84>
 8003292:	187b      	adds	r3, r7, r1
 8003294:	795b      	ldrb	r3, [r3, #5]
 8003296:	221e      	movs	r2, #30
 8003298:	18ba      	adds	r2, r7, r2
 800329a:	7812      	ldrb	r2, [r2, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <sht3x_read_temperature_and_humidity+0x88>
		return false;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e046      	b.n	8003332 <sht3x_read_temperature_and_humidity+0x116>
	}

	int16_t temperature_raw = (int16_t)uint8_to_uint16(buffer[0], buffer[1]);
 80032a4:	2414      	movs	r4, #20
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	785b      	ldrb	r3, [r3, #1]
 80032ae:	0019      	movs	r1, r3
 80032b0:	0010      	movs	r0, r2
 80032b2:	f7ff ff57 	bl	8003164 <uint8_to_uint16>
 80032b6:	0003      	movs	r3, r0
 80032b8:	001a      	movs	r2, r3
 80032ba:	251c      	movs	r5, #28
 80032bc:	197b      	adds	r3, r7, r5
 80032be:	801a      	strh	r2, [r3, #0]
	uint16_t humidity_raw = uint8_to_uint16(buffer[3], buffer[4]);
 80032c0:	193b      	adds	r3, r7, r4
 80032c2:	78da      	ldrb	r2, [r3, #3]
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	791b      	ldrb	r3, [r3, #4]
 80032c8:	261a      	movs	r6, #26
 80032ca:	19bc      	adds	r4, r7, r6
 80032cc:	0019      	movs	r1, r3
 80032ce:	0010      	movs	r0, r2
 80032d0:	f7ff ff48 	bl	8003164 <uint8_to_uint16>
 80032d4:	0003      	movs	r3, r0
 80032d6:	8023      	strh	r3, [r4, #0]

	*temperature = -45.0f + 175.0f * (float)temperature_raw / 65535.0f;
 80032d8:	197b      	adds	r3, r7, r5
 80032da:	2200      	movs	r2, #0
 80032dc:	5e9b      	ldrsh	r3, [r3, r2]
 80032de:	0018      	movs	r0, r3
 80032e0:	f7fd fde8 	bl	8000eb4 <__aeabi_i2f>
 80032e4:	1c03      	adds	r3, r0, #0
 80032e6:	4916      	ldr	r1, [pc, #88]	; (8003340 <sht3x_read_temperature_and_humidity+0x124>)
 80032e8:	1c18      	adds	r0, r3, #0
 80032ea:	f7fd fb0f 	bl	800090c <__aeabi_fmul>
 80032ee:	1c03      	adds	r3, r0, #0
 80032f0:	4914      	ldr	r1, [pc, #80]	; (8003344 <sht3x_read_temperature_and_humidity+0x128>)
 80032f2:	1c18      	adds	r0, r3, #0
 80032f4:	f7fd f9f2 	bl	80006dc <__aeabi_fdiv>
 80032f8:	1c03      	adds	r3, r0, #0
 80032fa:	4913      	ldr	r1, [pc, #76]	; (8003348 <sht3x_read_temperature_and_humidity+0x12c>)
 80032fc:	1c18      	adds	r0, r3, #0
 80032fe:	f7fd fc2b 	bl	8000b58 <__aeabi_fsub>
 8003302:	1c03      	adds	r3, r0, #0
 8003304:	1c1a      	adds	r2, r3, #0
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	601a      	str	r2, [r3, #0]
	*humidity = 100.0f * (float)humidity_raw / 65535.0f;
 800330a:	19bb      	adds	r3, r7, r6
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	0018      	movs	r0, r3
 8003310:	f7fd fe1e 	bl	8000f50 <__aeabi_ui2f>
 8003314:	1c03      	adds	r3, r0, #0
 8003316:	490d      	ldr	r1, [pc, #52]	; (800334c <sht3x_read_temperature_and_humidity+0x130>)
 8003318:	1c18      	adds	r0, r3, #0
 800331a:	f7fd faf7 	bl	800090c <__aeabi_fmul>
 800331e:	1c03      	adds	r3, r0, #0
 8003320:	4908      	ldr	r1, [pc, #32]	; (8003344 <sht3x_read_temperature_and_humidity+0x128>)
 8003322:	1c18      	adds	r0, r3, #0
 8003324:	f7fd f9da 	bl	80006dc <__aeabi_fdiv>
 8003328:	1c03      	adds	r3, r0, #0
 800332a:	1c1a      	adds	r2, r3, #0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	601a      	str	r2, [r3, #0]

	return true;
 8003330:	2301      	movs	r3, #1
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b009      	add	sp, #36	; 0x24
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	00002c06 	.word	0x00002c06
 8003340:	432f0000 	.word	0x432f0000
 8003344:	477fff00 	.word	0x477fff00
 8003348:	42340000 	.word	0x42340000
 800334c:	42c80000 	.word	0x42c80000

08003350 <sht3x_set_header_enable>:

bool sht3x_set_header_enable(sht3x_handle_t *handle, bool enable)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	000a      	movs	r2, r1
 800335a:	1cfb      	adds	r3, r7, #3
 800335c:	701a      	strb	r2, [r3, #0]
	if (enable) {
 800335e:	1cfb      	adds	r3, r7, #3
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <sht3x_set_header_enable+0x26>
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_ENABLE);
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <sht3x_set_header_enable+0x3c>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0011      	movs	r1, r2
 800336c:	0018      	movs	r0, r3
 800336e:	f7ff fed0 	bl	8003112 <sht3x_send_command>
 8003372:	0003      	movs	r3, r0
 8003374:	e006      	b.n	8003384 <sht3x_set_header_enable+0x34>
	} else {
		return sht3x_send_command(handle, SHT3X_COMMAND_HEATER_DISABLE);
 8003376:	4a06      	ldr	r2, [pc, #24]	; (8003390 <sht3x_set_header_enable+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f7ff fec8 	bl	8003112 <sht3x_send_command>
 8003382:	0003      	movs	r3, r0
	}
}
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}
 800338c:	0000306d 	.word	0x0000306d
 8003390:	00003066 	.word	0x00003066

08003394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <HAL_MspInit+0x24>)
 800339a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_MspInit+0x24>)
 800339e:	2101      	movs	r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_MspInit+0x24>)
 80033a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_MspInit+0x24>)
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	0549      	lsls	r1, r1, #21
 80033ae:	430a      	orrs	r2, r1
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	240c      	movs	r4, #12
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	0018      	movs	r0, r3
 80033ca:	2314      	movs	r3, #20
 80033cc:	001a      	movs	r2, r3
 80033ce:	2100      	movs	r1, #0
 80033d0:	f003 fbd0 	bl	8006b74 <memset>
  if(hadc->Instance==ADC1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <HAL_ADC_MspInit+0x70>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d122      	bne.n	8003424 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_ADC_MspInit+0x74>)
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	4b13      	ldr	r3, [pc, #76]	; (8003430 <HAL_ADC_MspInit+0x74>)
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	0089      	lsls	r1, r1, #2
 80033e8:	430a      	orrs	r2, r1
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_ADC_MspInit+0x74>)
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <HAL_ADC_MspInit+0x74>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	430a      	orrs	r2, r1
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <HAL_ADC_MspInit+0x74>)
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	2201      	movs	r2, #1
 80033fe:	4013      	ands	r3, r2
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8003404:	193b      	adds	r3, r7, r4
 8003406:	2211      	movs	r2, #17
 8003408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800340a:	193b      	adds	r3, r7, r4
 800340c:	2203      	movs	r2, #3
 800340e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003410:	193b      	adds	r3, r7, r4
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003416:	193a      	adds	r2, r7, r4
 8003418:	23a0      	movs	r3, #160	; 0xa0
 800341a:	05db      	lsls	r3, r3, #23
 800341c:	0011      	movs	r1, r2
 800341e:	0018      	movs	r0, r3
 8003420:	f000 fe5c 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b009      	add	sp, #36	; 0x24
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	40012400 	.word	0x40012400
 8003430:	40021000 	.word	0x40021000

08003434 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003434:	b590      	push	{r4, r7, lr}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	240c      	movs	r4, #12
 800343e:	193b      	adds	r3, r7, r4
 8003440:	0018      	movs	r0, r3
 8003442:	2314      	movs	r3, #20
 8003444:	001a      	movs	r2, r3
 8003446:	2100      	movs	r1, #0
 8003448:	f003 fb94 	bl	8006b74 <memset>
  if(hi2c->Instance==I2C2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_I2C_MspInit+0x80>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d129      	bne.n	80034aa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_I2C_MspInit+0x84>)
 8003458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_I2C_MspInit+0x84>)
 800345c:	2102      	movs	r1, #2
 800345e:	430a      	orrs	r2, r1
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_I2C_MspInit+0x84>)
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	2202      	movs	r2, #2
 8003468:	4013      	ands	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB14     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800346e:	193b      	adds	r3, r7, r4
 8003470:	22c0      	movs	r2, #192	; 0xc0
 8003472:	01d2      	lsls	r2, r2, #7
 8003474:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003476:	0021      	movs	r1, r4
 8003478:	187b      	adds	r3, r7, r1
 800347a:	2212      	movs	r2, #18
 800347c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003484:	187b      	adds	r3, r7, r1
 8003486:	2203      	movs	r2, #3
 8003488:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800348a:	187b      	adds	r3, r7, r1
 800348c:	2205      	movs	r2, #5
 800348e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	187b      	adds	r3, r7, r1
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_I2C_MspInit+0x88>)
 8003494:	0019      	movs	r1, r3
 8003496:	0010      	movs	r0, r2
 8003498:	f000 fe20 	bl	80040dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_I2C_MspInit+0x84>)
 800349e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_I2C_MspInit+0x84>)
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	03c9      	lsls	r1, r1, #15
 80034a6:	430a      	orrs	r2, r1
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b009      	add	sp, #36	; 0x24
 80034b0:	bd90      	pop	{r4, r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	40005800 	.word	0x40005800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	50000400 	.word	0x50000400

080034c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c0:	b590      	push	{r4, r7, lr}
 80034c2:	b089      	sub	sp, #36	; 0x24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	240c      	movs	r4, #12
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	0018      	movs	r0, r3
 80034ce:	2314      	movs	r3, #20
 80034d0:	001a      	movs	r2, r3
 80034d2:	2100      	movs	r1, #0
 80034d4:	f003 fb4e 	bl	8006b74 <memset>
  if(huart->Instance==USART2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_UART_MspInit+0x80>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d129      	bne.n	8003536 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_UART_MspInit+0x84>)
 80034e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e6:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_UART_MspInit+0x84>)
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	0289      	lsls	r1, r1, #10
 80034ec:	430a      	orrs	r2, r1
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_UART_MspInit+0x84>)
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	4b13      	ldr	r3, [pc, #76]	; (8003544 <HAL_UART_MspInit+0x84>)
 80034f6:	2101      	movs	r1, #1
 80034f8:	430a      	orrs	r2, r1
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_UART_MspInit+0x84>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	2201      	movs	r2, #1
 8003502:	4013      	ands	r3, r2
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003508:	0021      	movs	r1, r4
 800350a:	187b      	adds	r3, r7, r1
 800350c:	220c      	movs	r2, #12
 800350e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	187b      	adds	r3, r7, r1
 8003512:	2202      	movs	r2, #2
 8003514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2203      	movs	r2, #3
 8003520:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2204      	movs	r2, #4
 8003526:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003528:	187a      	adds	r2, r7, r1
 800352a:	23a0      	movs	r3, #160	; 0xa0
 800352c:	05db      	lsls	r3, r3, #23
 800352e:	0011      	movs	r1, r2
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fdd3 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b009      	add	sp, #36	; 0x24
 800353c:	bd90      	pop	{r4, r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	40004400 	.word	0x40004400
 8003544:	40021000 	.word	0x40021000

08003548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800354c:	e7fe      	b.n	800354c <NMI_Handler+0x4>

0800354e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003552:	e7fe      	b.n	8003552 <HardFault_Handler+0x4>

08003554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800356c:	f000 f944 	bl	80037f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	af00      	add	r7, sp, #0
	return 1;
 800357a:	2301      	movs	r3, #1
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <_kill>:

int _kill(int pid, int sig)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800358c:	f003 fab8 	bl	8006b00 <__errno>
 8003590:	0003      	movs	r3, r0
 8003592:	2216      	movs	r2, #22
 8003594:	601a      	str	r2, [r3, #0]
	return -1;
 8003596:	2301      	movs	r3, #1
 8003598:	425b      	negs	r3, r3
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b002      	add	sp, #8
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <_exit>:

void _exit (int status)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035aa:	2301      	movs	r3, #1
 80035ac:	425a      	negs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0011      	movs	r1, r2
 80035b2:	0018      	movs	r0, r3
 80035b4:	f7ff ffe5 	bl	8003582 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035b8:	e7fe      	b.n	80035b8 <_exit+0x16>

080035ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e00a      	b.n	80035e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035cc:	e000      	b.n	80035d0 <_read+0x16>
 80035ce:	bf00      	nop
 80035d0:	0001      	movs	r1, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	60ba      	str	r2, [r7, #8]
 80035d8:	b2ca      	uxtb	r2, r1
 80035da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3301      	adds	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	dbf0      	blt.n	80035cc <_read+0x12>
	}

return len;
 80035ea:	687b      	ldr	r3, [r7, #4]
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b006      	add	sp, #24
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e009      	b.n	800361a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	60ba      	str	r2, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	0018      	movs	r0, r3
 8003610:	f7ff fd24 	bl	800305c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3301      	adds	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	429a      	cmp	r2, r3
 8003620:	dbf1      	blt.n	8003606 <_write+0x12>
	}
	return len;
 8003622:	687b      	ldr	r3, [r7, #4]
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b006      	add	sp, #24
 800362a:	bd80      	pop	{r7, pc}

0800362c <_close>:

int _close(int file)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	return -1;
 8003634:	2301      	movs	r3, #1
 8003636:	425b      	negs	r3, r3
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}

08003640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	0192      	lsls	r2, r2, #6
 8003650:	605a      	str	r2, [r3, #4]
	return 0;
 8003652:	2300      	movs	r3, #0
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}

0800365c <_isatty>:

int _isatty(int file)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	return 1;
 8003664:	2301      	movs	r3, #1
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}

0800366e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
	return 0;
 800367a:	2300      	movs	r3, #0
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	b004      	add	sp, #16
 8003682:	bd80      	pop	{r7, pc}

08003684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <_sbrk+0x5c>)
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <_sbrk+0x60>)
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <_sbrk+0x64>)
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <_sbrk+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	18d3      	adds	r3, r2, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d207      	bcs.n	80036c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b4:	f003 fa24 	bl	8006b00 <__errno>
 80036b8:	0003      	movs	r3, r0
 80036ba:	220c      	movs	r2, #12
 80036bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036be:	2301      	movs	r3, #1
 80036c0:	425b      	negs	r3, r3
 80036c2:	e009      	b.n	80036d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	18d2      	adds	r2, r2, r3
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <_sbrk+0x64>)
 80036d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b006      	add	sp, #24
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20005000 	.word	0x20005000
 80036e4:	00000400 	.word	0x00000400
 80036e8:	20000324 	.word	0x20000324
 80036ec:	20000340 	.word	0x20000340

080036f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80036fc:	480d      	ldr	r0, [pc, #52]	; (8003734 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80036fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003700:	480d      	ldr	r0, [pc, #52]	; (8003738 <LoopForever+0x6>)
  ldr r1, =_edata
 8003702:	490e      	ldr	r1, [pc, #56]	; (800373c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003704:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <LoopForever+0xe>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a0b      	ldr	r2, [pc, #44]	; (8003744 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003718:	4c0b      	ldr	r4, [pc, #44]	; (8003748 <LoopForever+0x16>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003726:	f7ff ffe3 	bl	80036f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800372a:	f003 f9ff 	bl	8006b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372e:	f7ff faa9 	bl	8002c84 <main>

08003732 <LoopForever>:

LoopForever:
    b LoopForever
 8003732:	e7fe      	b.n	8003732 <LoopForever>
   ldr   r0, =_estack
 8003734:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800373c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003740:	08009d60 	.word	0x08009d60
  ldr r2, =_sbss
 8003744:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003748:	2000033c 	.word	0x2000033c

0800374c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800374c:	e7fe      	b.n	800374c <ADC1_COMP_IRQHandler>
	...

08003750 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_Init+0x3c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_Init+0x3c>)
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003768:	2000      	movs	r0, #0
 800376a:	f000 f811 	bl	8003790 <HAL_InitTick>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d003      	beq.n	800377a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e001      	b.n	800377e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800377a:	f7ff fe0b 	bl	8003394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
}
 8003782:	0018      	movs	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	b002      	add	sp, #8
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	40022000 	.word	0x40022000

08003790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_InitTick+0x5c>)
 800379a:	681c      	ldr	r4, [r3, #0]
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_InitTick+0x60>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	0019      	movs	r1, r3
 80037a2:	23fa      	movs	r3, #250	; 0xfa
 80037a4:	0098      	lsls	r0, r3, #2
 80037a6:	f7fc fccb 	bl	8000140 <__udivsi3>
 80037aa:	0003      	movs	r3, r0
 80037ac:	0019      	movs	r1, r3
 80037ae:	0020      	movs	r0, r4
 80037b0:	f7fc fcc6 	bl	8000140 <__udivsi3>
 80037b4:	0003      	movs	r3, r0
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fc83 	bl	80040c2 <HAL_SYSTICK_Config>
 80037bc:	1e03      	subs	r3, r0, #0
 80037be:	d001      	beq.n	80037c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e00f      	b.n	80037e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d80b      	bhi.n	80037e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	2301      	movs	r3, #1
 80037ce:	425b      	negs	r3, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 fc60 	bl	8004098 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_InitTick+0x64>)
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b003      	add	sp, #12
 80037ea:	bd90      	pop	{r4, r7, pc}
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000008 	.word	0x20000008
 80037f4:	20000004 	.word	0x20000004

080037f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_IncTick+0x1c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	001a      	movs	r2, r3
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <HAL_IncTick+0x20>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	18d2      	adds	r2, r2, r3
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_IncTick+0x20>)
 800380a:	601a      	str	r2, [r3, #0]
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	20000008 	.word	0x20000008
 8003818:	20000328 	.word	0x20000328

0800381c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  return uwTick;
 8003820:	4b02      	ldr	r3, [pc, #8]	; (800382c <HAL_GetTick+0x10>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	20000328 	.word	0x20000328

08003830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7ff fff0 	bl	800381c <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3301      	adds	r3, #1
 8003848:	d005      	beq.n	8003856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_Delay+0x44>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	001a      	movs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	189b      	adds	r3, r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	f7ff ffe0 	bl	800381c <HAL_GetTick>
 800385c:	0002      	movs	r2, r0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d8f7      	bhi.n	8003858 <HAL_Delay+0x28>
  {
  }
}
 8003868:	46c0      	nop			; (mov r8, r8)
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	20000008 	.word	0x20000008

08003878 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e159      	b.n	8003b3e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2250      	movs	r2, #80	; 0x50
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7ff fd8a 	bl	80033bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	2210      	movs	r2, #16
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b10      	cmp	r3, #16
 80038b2:	d005      	beq.n	80038c0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2204      	movs	r2, #4
 80038bc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80038be:	d00b      	beq.n	80038d8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	2210      	movs	r2, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2250      	movs	r2, #80	; 0x50
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e132      	b.n	8003b3e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	4a9a      	ldr	r2, [pc, #616]	; (8003b48 <HAL_ADC_Init+0x2d0>)
 80038de:	4013      	ands	r3, r2
 80038e0:	2202      	movs	r2, #2
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2203      	movs	r2, #3
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d108      	bne.n	8003908 <HAL_ADC_Init+0x90>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_ADC_Init+0x90>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_ADC_Init+0x92>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d149      	bne.n	80039a2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	23c0      	movs	r3, #192	; 0xc0
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	429a      	cmp	r2, r3
 8003918:	d00b      	beq.n	8003932 <HAL_ADC_Init+0xba>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	2380      	movs	r3, #128	; 0x80
 8003920:	05db      	lsls	r3, r3, #23
 8003922:	429a      	cmp	r2, r3
 8003924:	d005      	beq.n	8003932 <HAL_ADC_Init+0xba>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	429a      	cmp	r2, r3
 8003930:	d111      	bne.n	8003956 <HAL_ADC_Init+0xde>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0092      	lsls	r2, r2, #2
 800393e:	0892      	lsrs	r2, r2, #2
 8003940:	611a      	str	r2, [r3, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6919      	ldr	r1, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	611a      	str	r2, [r3, #16]
 8003954:	e014      	b.n	8003980 <HAL_ADC_Init+0x108>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0092      	lsls	r2, r2, #2
 8003962:	0892      	lsrs	r2, r2, #2
 8003964:	611a      	str	r2, [r3, #16]
 8003966:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b78      	ldr	r3, [pc, #480]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 800396c:	4978      	ldr	r1, [pc, #480]	; (8003b50 <HAL_ADC_Init+0x2d8>)
 800396e:	400a      	ands	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4b74      	ldr	r3, [pc, #464]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2118      	movs	r1, #24
 800398c:	438a      	bics	r2, r1
 800398e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80039a2:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 80039a8:	496a      	ldr	r1, [pc, #424]	; (8003b54 <HAL_ADC_Init+0x2dc>)
 80039aa:	400a      	ands	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80039ae:	4b67      	ldr	r3, [pc, #412]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b6:	065a      	lsls	r2, r3, #25
 80039b8:	4b64      	ldr	r3, [pc, #400]	; (8003b4c <HAL_ADC_Init+0x2d4>)
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	055b      	lsls	r3, r3, #21
 80039c8:	4013      	ands	r3, r2
 80039ca:	d108      	bne.n	80039de <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	0549      	lsls	r1, r1, #21
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	495b      	ldr	r1, [pc, #364]	; (8003b58 <HAL_ADC_Init+0x2e0>)
 80039ea:	400a      	ands	r2, r1
 80039ec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68d9      	ldr	r1, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d101      	bne.n	8003a04 <HAL_ADC_Init+0x18c>
 8003a00:	2304      	movs	r3, #4
 8003a02:	e000      	b.n	8003a06 <HAL_ADC_Init+0x18e>
 8003a04:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003a06:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2020      	movs	r0, #32
 8003a0c:	5c1b      	ldrb	r3, [r3, r0]
 8003a0e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003a10:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	202c      	movs	r0, #44	; 0x2c
 8003a16:	5c1b      	ldrb	r3, [r3, r0]
 8003a18:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003a1a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003a20:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003a28:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003a30:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a3e:	23c2      	movs	r3, #194	; 0xc2
 8003a40:	33ff      	adds	r3, #255	; 0xff
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d00b      	beq.n	8003a5e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68d9      	ldr	r1, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2221      	movs	r2, #33	; 0x21
 8003a62:	5c9b      	ldrb	r3, [r3, r2]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d11a      	bne.n	8003a9e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	5c9b      	ldrb	r3, [r3, r2]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	0249      	lsls	r1, r1, #9
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]
 8003a84:	e00b      	b.n	8003a9e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	2201      	movs	r2, #1
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d11f      	bne.n	8003ae6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	492a      	ldr	r1, [pc, #168]	; (8003b5c <HAL_ADC_Init+0x2e4>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6919      	ldr	r1, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ac4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003aca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2101      	movs	r1, #1
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	611a      	str	r2, [r3, #16]
 8003ae4:	e00e      	b.n	8003b04 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d107      	bne.n	8003b04 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2101      	movs	r1, #1
 8003b00:	438a      	bics	r2, r1
 8003b02:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2107      	movs	r1, #7
 8003b10:	438a      	bics	r2, r1
 8003b12:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6959      	ldr	r1, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	2203      	movs	r2, #3
 8003b32:	4393      	bics	r3, r2
 8003b34:	2201      	movs	r2, #1
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	fffffefd 	.word	0xfffffefd
 8003b4c:	40012708 	.word	0x40012708
 8003b50:	ffc3ffff 	.word	0xffc3ffff
 8003b54:	fdffffff 	.word	0xfdffffff
 8003b58:	fffe0219 	.word	0xfffe0219
 8003b5c:	fffffc03 	.word	0xfffffc03

08003b60 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003b60:	b590      	push	{r4, r7, lr}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b68:	230f      	movs	r3, #15
 8003b6a:	18fb      	adds	r3, r7, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2204      	movs	r2, #4
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d138      	bne.n	8003bee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2250      	movs	r2, #80	; 0x50
 8003b80:	5c9b      	ldrb	r3, [r3, r2]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_Start+0x2a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e038      	b.n	8003bfc <HAL_ADC_Start+0x9c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2250      	movs	r2, #80	; 0x50
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d007      	beq.n	8003baa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003b9a:	230f      	movs	r3, #15
 8003b9c:	18fc      	adds	r4, r7, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 f95f 	bl	8003e64 <ADC_Enable>
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003baa:	230f      	movs	r3, #15
 8003bac:	18fb      	adds	r3, r7, r3
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d120      	bne.n	8003bf6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb8:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <HAL_ADC_Start+0xa4>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0052      	lsls	r2, r2, #1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2250      	movs	r2, #80	; 0x50
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	221c      	movs	r2, #28
 8003bda:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2104      	movs	r1, #4
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e003      	b.n	8003bf6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bee:	230f      	movs	r3, #15
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bf6:	230f      	movs	r3, #15
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	781b      	ldrb	r3, [r3, #0]
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b005      	add	sp, #20
 8003c02:	bd90      	pop	{r4, r7, pc}
 8003c04:	fffff0fe 	.word	0xfffff0fe

08003c08 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d102      	bne.n	8003c28 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003c22:	2308      	movs	r3, #8
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e014      	b.n	8003c52 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10b      	bne.n	8003c4e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2250      	movs	r2, #80	; 0x50
 8003c46:	2100      	movs	r1, #0
 8003c48:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e072      	b.n	8003d34 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003c4e:	230c      	movs	r3, #12
 8003c50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c52:	f7ff fde3 	bl	800381c <HAL_GetTick>
 8003c56:	0003      	movs	r3, r0
 8003c58:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003c5a:	e01f      	b.n	8003c9c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	d01c      	beq.n	8003c9c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <HAL_ADC_PollForConversion+0x70>
 8003c68:	f7ff fdd8 	bl	800381c <HAL_GetTick>
 8003c6c:	0002      	movs	r2, r0
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d211      	bcs.n	8003c9c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	d10b      	bne.n	8003c9c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	2204      	movs	r2, #4
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2250      	movs	r2, #80	; 0x50
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e04b      	b.n	8003d34 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d0d9      	beq.n	8003c5c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	0092      	lsls	r2, r2, #2
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68da      	ldr	r2, [r3, #12]
 8003cbc:	23c0      	movs	r3, #192	; 0xc0
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d12e      	bne.n	8003d22 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d129      	bne.n	8003d22 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d122      	bne.n	8003d22 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d110      	bne.n	8003d0a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	210c      	movs	r1, #12
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <HAL_ADC_PollForConversion+0x134>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2201      	movs	r2, #1
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	655a      	str	r2, [r3, #84]	; 0x54
 8003d08:	e00b      	b.n	8003d22 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	2220      	movs	r2, #32
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	220c      	movs	r2, #12
 8003d30:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	fffffefe 	.word	0xfffffefe

08003d40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b002      	add	sp, #8
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2250      	movs	r2, #80	; 0x50
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e06c      	b.n	8003e4a <HAL_ADC_ConfigChannel+0xf2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2250      	movs	r2, #80	; 0x50
 8003d74:	2101      	movs	r1, #1
 8003d76:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	4013      	ands	r3, r2
 8003d82:	d00b      	beq.n	8003d9c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	2220      	movs	r2, #32
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2250      	movs	r2, #80	; 0x50
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e056      	b.n	8003e4a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	4a2c      	ldr	r2, [pc, #176]	; (8003e54 <HAL_ADC_ConfigChannel+0xfc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d028      	beq.n	8003df8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	035b      	lsls	r3, r3, #13
 8003db2:	0b5a      	lsrs	r2, r3, #13
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	02db      	lsls	r3, r3, #11
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	0409      	lsls	r1, r1, #16
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003dd6:	200a      	movs	r0, #10
 8003dd8:	f000 f8ac 	bl	8003f34 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	4013      	ands	r3, r2
 8003de6:	d02b      	beq.n	8003e40 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003dee:	2180      	movs	r1, #128	; 0x80
 8003df0:	03c9      	lsls	r1, r1, #15
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e023      	b.n	8003e40 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	035b      	lsls	r3, r3, #13
 8003e04:	0b5b      	lsrs	r3, r3, #13
 8003e06:	43d9      	mvns	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	02db      	lsls	r3, r3, #11
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d005      	beq.n	8003e28 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003e1c:	4b0e      	ldr	r3, [pc, #56]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003e22:	490e      	ldr	r1, [pc, #56]	; (8003e5c <HAL_ADC_ConfigChannel+0x104>)
 8003e24:	400a      	ands	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	2380      	movs	r3, #128	; 0x80
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	4013      	ands	r3, r2
 8003e32:	d005      	beq.n	8003e40 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <HAL_ADC_ConfigChannel+0x100>)
 8003e3a:	4909      	ldr	r1, [pc, #36]	; (8003e60 <HAL_ADC_ConfigChannel+0x108>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2250      	movs	r2, #80	; 0x50
 8003e44:	2100      	movs	r1, #0
 8003e46:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	00001001 	.word	0x00001001
 8003e58:	40012708 	.word	0x40012708
 8003e5c:	ff7fffff 	.word	0xff7fffff
 8003e60:	ffbfffff 	.word	0xffbfffff

08003e64 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2203      	movs	r2, #3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d108      	bne.n	8003e90 <ADC_Enable+0x2c>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <ADC_Enable+0x2c>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <ADC_Enable+0x2e>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d146      	bne.n	8003f24 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a24      	ldr	r2, [pc, #144]	; (8003f30 <ADC_Enable+0xcc>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d00d      	beq.n	8003ebe <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e033      	b.n	8003f26 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2101      	movs	r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f000 f830 	bl	8003f34 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ed4:	f7ff fca2 	bl	800381c <HAL_GetTick>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003edc:	e01b      	b.n	8003f16 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ede:	f7ff fc9d 	bl	800381c <HAL_GetTick>
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b0a      	cmp	r3, #10
 8003eea:	d914      	bls.n	8003f16 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d00d      	beq.n	8003f16 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	2210      	movs	r2, #16
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e007      	b.n	8003f26 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d1dc      	bne.n	8003ede <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	0018      	movs	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	80000017 	.word	0x80000017

08003f34 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <ADC_DelayMicroSecond+0x38>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	490b      	ldr	r1, [pc, #44]	; (8003f70 <ADC_DelayMicroSecond+0x3c>)
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fc f8fc 	bl	8000140 <__udivsi3>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4353      	muls	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003f52:	e002      	b.n	8003f5a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f9      	bne.n	8003f54 <ADC_DelayMicroSecond+0x20>
  } 
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b004      	add	sp, #16
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	20000000 	.word	0x20000000
 8003f70:	000f4240 	.word	0x000f4240

08003f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b7f      	cmp	r3, #127	; 0x7f
 8003f88:	d828      	bhi.n	8003fdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <__NVIC_SetPriority+0xd4>)
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	33c0      	adds	r3, #192	; 0xc0
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	589b      	ldr	r3, [r3, r2]
 8003f9a:	1dfa      	adds	r2, r7, #7
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	00d2      	lsls	r2, r2, #3
 8003fa6:	21ff      	movs	r1, #255	; 0xff
 8003fa8:	4091      	lsls	r1, r2
 8003faa:	000a      	movs	r2, r1
 8003fac:	43d2      	mvns	r2, r2
 8003fae:	401a      	ands	r2, r3
 8003fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	401a      	ands	r2, r3
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	4003      	ands	r3, r0
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fc8:	481f      	ldr	r0, [pc, #124]	; (8004048 <__NVIC_SetPriority+0xd4>)
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	33c0      	adds	r3, #192	; 0xc0
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fda:	e031      	b.n	8004040 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <__NVIC_SetPriority+0xd8>)
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	400b      	ands	r3, r1
 8003fe8:	3b08      	subs	r3, #8
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3306      	adds	r3, #6
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	18d3      	adds	r3, r2, r3
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1dfa      	adds	r2, r7, #7
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	400a      	ands	r2, r1
 8004000:	00d2      	lsls	r2, r2, #3
 8004002:	21ff      	movs	r1, #255	; 0xff
 8004004:	4091      	lsls	r1, r2
 8004006:	000a      	movs	r2, r1
 8004008:	43d2      	mvns	r2, r2
 800400a:	401a      	ands	r2, r3
 800400c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	22ff      	movs	r2, #255	; 0xff
 8004014:	401a      	ands	r2, r3
 8004016:	1dfb      	adds	r3, r7, #7
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	0018      	movs	r0, r3
 800401c:	2303      	movs	r3, #3
 800401e:	4003      	ands	r3, r0
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004024:	4809      	ldr	r0, [pc, #36]	; (800404c <__NVIC_SetPriority+0xd8>)
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	001c      	movs	r4, r3
 800402c:	230f      	movs	r3, #15
 800402e:	4023      	ands	r3, r4
 8004030:	3b08      	subs	r3, #8
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	430a      	orrs	r2, r1
 8004036:	3306      	adds	r3, #6
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	18c3      	adds	r3, r0, r3
 800403c:	3304      	adds	r3, #4
 800403e:	601a      	str	r2, [r3, #0]
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b003      	add	sp, #12
 8004046:	bd90      	pop	{r4, r7, pc}
 8004048:	e000e100 	.word	0xe000e100
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1e5a      	subs	r2, r3, #1
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	045b      	lsls	r3, r3, #17
 8004060:	429a      	cmp	r2, r3
 8004062:	d301      	bcc.n	8004068 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004064:	2301      	movs	r3, #1
 8004066:	e010      	b.n	800408a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <SysTick_Config+0x44>)
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	3a01      	subs	r2, #1
 800406e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004070:	2301      	movs	r3, #1
 8004072:	425b      	negs	r3, r3
 8004074:	2103      	movs	r1, #3
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff ff7c 	bl	8003f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <SysTick_Config+0x44>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004082:	4b04      	ldr	r3, [pc, #16]	; (8004094 <SysTick_Config+0x44>)
 8004084:	2207      	movs	r2, #7
 8004086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004088:	2300      	movs	r3, #0
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	e000e010 	.word	0xe000e010

08004098 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	210f      	movs	r1, #15
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	1c02      	adds	r2, r0, #0
 80040a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b25b      	sxtb	r3, r3
 80040b2:	0011      	movs	r1, r2
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7ff ff5d 	bl	8003f74 <__NVIC_SetPriority>
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff ffbf 	bl	8004050 <SysTick_Config>
 80040d2:	0003      	movs	r3, r0
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80040f2:	e155      	b.n	80043a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4091      	lsls	r1, r2
 80040fe:	000a      	movs	r2, r1
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d100      	bne.n	800410c <HAL_GPIO_Init+0x30>
 800410a:	e146      	b.n	800439a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2203      	movs	r2, #3
 8004112:	4013      	ands	r3, r2
 8004114:	2b01      	cmp	r3, #1
 8004116:	d005      	beq.n	8004124 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2203      	movs	r2, #3
 800411e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004120:	2b02      	cmp	r3, #2
 8004122:	d130      	bne.n	8004186 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	409a      	lsls	r2, r3
 8004132:	0013      	movs	r3, r2
 8004134:	43da      	mvns	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	409a      	lsls	r2, r3
 8004146:	0013      	movs	r3, r2
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800415a:	2201      	movs	r2, #1
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	2201      	movs	r2, #1
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
 8004178:	0013      	movs	r3, r2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2203      	movs	r2, #3
 800418c:	4013      	ands	r3, r2
 800418e:	2b03      	cmp	r3, #3
 8004190:	d017      	beq.n	80041c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	409a      	lsls	r2, r3
 80041a0:	0013      	movs	r3, r2
 80041a2:	43da      	mvns	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2203      	movs	r2, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d123      	bne.n	8004216 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	08da      	lsrs	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	58d3      	ldr	r3, [r2, r3]
 80041da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2207      	movs	r2, #7
 80041e0:	4013      	ands	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	409a      	lsls	r2, r3
 80041e8:	0013      	movs	r3, r2
 80041ea:	43da      	mvns	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2107      	movs	r1, #7
 80041fa:	400b      	ands	r3, r1
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	08da      	lsrs	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3208      	adds	r2, #8
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	6939      	ldr	r1, [r7, #16]
 8004214:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	409a      	lsls	r2, r3
 8004224:	0013      	movs	r3, r2
 8004226:	43da      	mvns	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2203      	movs	r2, #3
 8004234:	401a      	ands	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	23c0      	movs	r3, #192	; 0xc0
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	4013      	ands	r3, r2
 8004254:	d100      	bne.n	8004258 <HAL_GPIO_Init+0x17c>
 8004256:	e0a0      	b.n	800439a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004258:	4b57      	ldr	r3, [pc, #348]	; (80043b8 <HAL_GPIO_Init+0x2dc>)
 800425a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425c:	4b56      	ldr	r3, [pc, #344]	; (80043b8 <HAL_GPIO_Init+0x2dc>)
 800425e:	2101      	movs	r1, #1
 8004260:	430a      	orrs	r2, r1
 8004262:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004264:	4a55      	ldr	r2, [pc, #340]	; (80043bc <HAL_GPIO_Init+0x2e0>)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	3302      	adds	r3, #2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	589b      	ldr	r3, [r3, r2]
 8004270:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2203      	movs	r2, #3
 8004276:	4013      	ands	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	220f      	movs	r2, #15
 800427c:	409a      	lsls	r2, r3
 800427e:	0013      	movs	r3, r2
 8004280:	43da      	mvns	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	23a0      	movs	r3, #160	; 0xa0
 800428c:	05db      	lsls	r3, r3, #23
 800428e:	429a      	cmp	r2, r3
 8004290:	d01f      	beq.n	80042d2 <HAL_GPIO_Init+0x1f6>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a4a      	ldr	r2, [pc, #296]	; (80043c0 <HAL_GPIO_Init+0x2e4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d019      	beq.n	80042ce <HAL_GPIO_Init+0x1f2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a49      	ldr	r2, [pc, #292]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d013      	beq.n	80042ca <HAL_GPIO_Init+0x1ee>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a48      	ldr	r2, [pc, #288]	; (80043c8 <HAL_GPIO_Init+0x2ec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00d      	beq.n	80042c6 <HAL_GPIO_Init+0x1ea>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a47      	ldr	r2, [pc, #284]	; (80043cc <HAL_GPIO_Init+0x2f0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <HAL_GPIO_Init+0x1e6>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a46      	ldr	r2, [pc, #280]	; (80043d0 <HAL_GPIO_Init+0x2f4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d101      	bne.n	80042be <HAL_GPIO_Init+0x1e2>
 80042ba:	2305      	movs	r3, #5
 80042bc:	e00a      	b.n	80042d4 <HAL_GPIO_Init+0x1f8>
 80042be:	2306      	movs	r3, #6
 80042c0:	e008      	b.n	80042d4 <HAL_GPIO_Init+0x1f8>
 80042c2:	2304      	movs	r3, #4
 80042c4:	e006      	b.n	80042d4 <HAL_GPIO_Init+0x1f8>
 80042c6:	2303      	movs	r3, #3
 80042c8:	e004      	b.n	80042d4 <HAL_GPIO_Init+0x1f8>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e002      	b.n	80042d4 <HAL_GPIO_Init+0x1f8>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_GPIO_Init+0x1f8>
 80042d2:	2300      	movs	r3, #0
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	2103      	movs	r1, #3
 80042d8:	400a      	ands	r2, r1
 80042da:	0092      	lsls	r2, r2, #2
 80042dc:	4093      	lsls	r3, r2
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042e4:	4935      	ldr	r1, [pc, #212]	; (80043bc <HAL_GPIO_Init+0x2e0>)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	089b      	lsrs	r3, r3, #2
 80042ea:	3302      	adds	r3, #2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042f2:	4b38      	ldr	r3, [pc, #224]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	025b      	lsls	r3, r3, #9
 800430a:	4013      	ands	r3, r2
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004316:	4b2f      	ldr	r3, [pc, #188]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800431c:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	43da      	mvns	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4013      	ands	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	4013      	ands	r3, r2
 8004336:	d003      	beq.n	8004340 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004340:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	43da      	mvns	r2, r3
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	035b      	lsls	r3, r3, #13
 800435e:	4013      	ands	r3, r2
 8004360:	d003      	beq.n	800436a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004370:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	43da      	mvns	r2, r3
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4013      	ands	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	039b      	lsls	r3, r3, #14
 8004388:	4013      	ands	r3, r2
 800438a:	d003      	beq.n	8004394 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <HAL_GPIO_Init+0x2f8>)
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3301      	adds	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	40da      	lsrs	r2, r3
 80043a8:	1e13      	subs	r3, r2, #0
 80043aa:	d000      	beq.n	80043ae <HAL_GPIO_Init+0x2d2>
 80043ac:	e6a2      	b.n	80040f4 <HAL_GPIO_Init+0x18>
  }
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b006      	add	sp, #24
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40010000 	.word	0x40010000
 80043c0:	50000400 	.word	0x50000400
 80043c4:	50000800 	.word	0x50000800
 80043c8:	50000c00 	.word	0x50000c00
 80043cc:	50001000 	.word	0x50001000
 80043d0:	50001c00 	.word	0x50001c00
 80043d4:	40010400 	.word	0x40010400

080043d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e082      	b.n	80044f0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2241      	movs	r2, #65	; 0x41
 80043ee:	5c9b      	ldrb	r3, [r3, r2]
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2240      	movs	r2, #64	; 0x40
 80043fa:	2100      	movs	r1, #0
 80043fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	0018      	movs	r0, r3
 8004402:	f7ff f817 	bl	8003434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2241      	movs	r2, #65	; 0x41
 800440a:	2124      	movs	r1, #36	; 0x24
 800440c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	438a      	bics	r2, r1
 800441c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4934      	ldr	r1, [pc, #208]	; (80044f8 <HAL_I2C_Init+0x120>)
 8004428:	400a      	ands	r2, r1
 800442a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4931      	ldr	r1, [pc, #196]	; (80044fc <HAL_I2C_Init+0x124>)
 8004438:	400a      	ands	r2, r1
 800443a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d108      	bne.n	8004456 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2180      	movs	r1, #128	; 0x80
 800444e:	0209      	lsls	r1, r1, #8
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	e007      	b.n	8004466 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2184      	movs	r1, #132	; 0x84
 8004460:	0209      	lsls	r1, r1, #8
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d104      	bne.n	8004478 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	0112      	lsls	r2, r2, #4
 8004476:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	491f      	ldr	r1, [pc, #124]	; (8004500 <HAL_I2C_Init+0x128>)
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	491a      	ldr	r1, [pc, #104]	; (80044fc <HAL_I2C_Init+0x124>)
 8004494:	400a      	ands	r2, r1
 8004496:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69d9      	ldr	r1, [r3, #28]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1a      	ldr	r2, [r3, #32]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	430a      	orrs	r2, r1
 80044d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2241      	movs	r2, #65	; 0x41
 80044dc:	2120      	movs	r1, #32
 80044de:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2242      	movs	r2, #66	; 0x42
 80044ea:	2100      	movs	r1, #0
 80044ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b002      	add	sp, #8
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	f0ffffff 	.word	0xf0ffffff
 80044fc:	ffff7fff 	.word	0xffff7fff
 8004500:	02008000 	.word	0x02008000

08004504 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004504:	b590      	push	{r4, r7, lr}
 8004506:	b089      	sub	sp, #36	; 0x24
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	0008      	movs	r0, r1
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	0019      	movs	r1, r3
 8004512:	230a      	movs	r3, #10
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	1c02      	adds	r2, r0, #0
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	2308      	movs	r3, #8
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	1c0a      	adds	r2, r1, #0
 8004520:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2241      	movs	r2, #65	; 0x41
 8004526:	5c9b      	ldrb	r3, [r3, r2]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b20      	cmp	r3, #32
 800452c:	d000      	beq.n	8004530 <HAL_I2C_Master_Transmit+0x2c>
 800452e:	e0e7      	b.n	8004700 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2240      	movs	r2, #64	; 0x40
 8004534:	5c9b      	ldrb	r3, [r3, r2]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2C_Master_Transmit+0x3a>
 800453a:	2302      	movs	r3, #2
 800453c:	e0e1      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1fe>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	2101      	movs	r1, #1
 8004544:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004546:	f7ff f969 	bl	800381c <HAL_GetTick>
 800454a:	0003      	movs	r3, r0
 800454c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	0219      	lsls	r1, r3, #8
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2319      	movs	r3, #25
 800455a:	2201      	movs	r2, #1
 800455c:	f000 fb9a 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004560:	1e03      	subs	r3, r0, #0
 8004562:	d001      	beq.n	8004568 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0cc      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2241      	movs	r2, #65	; 0x41
 800456c:	2121      	movs	r1, #33	; 0x21
 800456e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2242      	movs	r2, #66	; 0x42
 8004574:	2110      	movs	r1, #16
 8004576:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2208      	movs	r2, #8
 8004588:	18ba      	adds	r2, r7, r2
 800458a:	8812      	ldrh	r2, [r2, #0]
 800458c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	2bff      	cmp	r3, #255	; 0xff
 800459c:	d911      	bls.n	80045c2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	; 0xff
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	2380      	movs	r3, #128	; 0x80
 80045ac:	045c      	lsls	r4, r3, #17
 80045ae:	230a      	movs	r3, #10
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	8819      	ldrh	r1, [r3, #0]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	4b55      	ldr	r3, [pc, #340]	; (800470c <HAL_I2C_Master_Transmit+0x208>)
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	0023      	movs	r3, r4
 80045bc:	f000 fd0a 	bl	8004fd4 <I2C_TransferConfig>
 80045c0:	e075      	b.n	80046ae <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	049c      	lsls	r4, r3, #18
 80045d6:	230a      	movs	r3, #10
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	8819      	ldrh	r1, [r3, #0]
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_I2C_Master_Transmit+0x208>)
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	0023      	movs	r3, r4
 80045e4:	f000 fcf6 	bl	8004fd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045e8:	e061      	b.n	80046ae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 fb8e 	bl	8004d12 <I2C_WaitOnTXISFlagUntilTimeout>
 80045f6:	1e03      	subs	r3, r0, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e081      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d03a      	beq.n	80046ae <HAL_I2C_Master_Transmit+0x1aa>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d136      	bne.n	80046ae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	0013      	movs	r3, r2
 800464a:	2200      	movs	r2, #0
 800464c:	2180      	movs	r1, #128	; 0x80
 800464e:	f000 fb21 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004652:	1e03      	subs	r3, r0, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e053      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2bff      	cmp	r3, #255	; 0xff
 8004662:	d911      	bls.n	8004688 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	22ff      	movs	r2, #255	; 0xff
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	b2da      	uxtb	r2, r3
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	045c      	lsls	r4, r3, #17
 8004674:	230a      	movs	r3, #10
 8004676:	18fb      	adds	r3, r7, r3
 8004678:	8819      	ldrh	r1, [r3, #0]
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	2300      	movs	r3, #0
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	0023      	movs	r3, r4
 8004682:	f000 fca7 	bl	8004fd4 <I2C_TransferConfig>
 8004686:	e012      	b.n	80046ae <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004696:	b2da      	uxtb	r2, r3
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	049c      	lsls	r4, r3, #18
 800469c:	230a      	movs	r3, #10
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	8819      	ldrh	r1, [r3, #0]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	2300      	movs	r3, #0
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	0023      	movs	r3, r4
 80046aa:	f000 fc93 	bl	8004fd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d198      	bne.n	80045ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 fb66 	bl	8004d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d001      	beq.n	80046cc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e01a      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2220      	movs	r2, #32
 80046d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	490c      	ldr	r1, [pc, #48]	; (8004710 <HAL_I2C_Master_Transmit+0x20c>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2241      	movs	r2, #65	; 0x41
 80046e8:	2120      	movs	r1, #32
 80046ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2242      	movs	r2, #66	; 0x42
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e000      	b.n	8004702 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
  }
}
 8004702:	0018      	movs	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	b007      	add	sp, #28
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	80002000 	.word	0x80002000
 8004710:	fe00e800 	.word	0xfe00e800

08004714 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	0008      	movs	r0, r1
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	0019      	movs	r1, r3
 8004722:	230a      	movs	r3, #10
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	1c02      	adds	r2, r0, #0
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	2308      	movs	r3, #8
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	1c0a      	adds	r2, r1, #0
 8004730:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2241      	movs	r2, #65	; 0x41
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b20      	cmp	r3, #32
 800473c:	d000      	beq.n	8004740 <HAL_I2C_Master_Receive+0x2c>
 800473e:	e0e8      	b.n	8004912 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	5c9b      	ldrb	r3, [r3, r2]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <HAL_I2C_Master_Receive+0x3a>
 800474a:	2302      	movs	r3, #2
 800474c:	e0e2      	b.n	8004914 <HAL_I2C_Master_Receive+0x200>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2240      	movs	r2, #64	; 0x40
 8004752:	2101      	movs	r1, #1
 8004754:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004756:	f7ff f861 	bl	800381c <HAL_GetTick>
 800475a:	0003      	movs	r3, r0
 800475c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	0219      	lsls	r1, r3, #8
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2319      	movs	r3, #25
 800476a:	2201      	movs	r2, #1
 800476c:	f000 fa92 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004770:	1e03      	subs	r3, r0, #0
 8004772:	d001      	beq.n	8004778 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0cd      	b.n	8004914 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2241      	movs	r2, #65	; 0x41
 800477c:	2122      	movs	r1, #34	; 0x22
 800477e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2242      	movs	r2, #66	; 0x42
 8004784:	2110      	movs	r1, #16
 8004786:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2208      	movs	r2, #8
 8004798:	18ba      	adds	r2, r7, r2
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2bff      	cmp	r3, #255	; 0xff
 80047ac:	d911      	bls.n	80047d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	22ff      	movs	r2, #255	; 0xff
 80047b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	045c      	lsls	r4, r3, #17
 80047be:	230a      	movs	r3, #10
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	8819      	ldrh	r1, [r3, #0]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	4b55      	ldr	r3, [pc, #340]	; (800491c <HAL_I2C_Master_Receive+0x208>)
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	0023      	movs	r3, r4
 80047cc:	f000 fc02 	bl	8004fd4 <I2C_TransferConfig>
 80047d0:	e076      	b.n	80048c0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	049c      	lsls	r4, r3, #18
 80047e6:	230a      	movs	r3, #10
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	8819      	ldrh	r1, [r3, #0]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	4b4b      	ldr	r3, [pc, #300]	; (800491c <HAL_I2C_Master_Receive+0x208>)
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	0023      	movs	r3, r4
 80047f4:	f000 fbee 	bl	8004fd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047f8:	e062      	b.n	80048c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 fb01 	bl	8004e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e082      	b.n	8004914 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d03a      	beq.n	80048c0 <HAL_I2C_Master_Receive+0x1ac>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d136      	bne.n	80048c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	0013      	movs	r3, r2
 800485c:	2200      	movs	r2, #0
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	f000 fa18 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004864:	1e03      	subs	r3, r0, #0
 8004866:	d001      	beq.n	800486c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e053      	b.n	8004914 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2bff      	cmp	r3, #255	; 0xff
 8004874:	d911      	bls.n	800489a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	22ff      	movs	r2, #255	; 0xff
 800487a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004880:	b2da      	uxtb	r2, r3
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	045c      	lsls	r4, r3, #17
 8004886:	230a      	movs	r3, #10
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	8819      	ldrh	r1, [r3, #0]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	2300      	movs	r3, #0
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	0023      	movs	r3, r4
 8004894:	f000 fb9e 	bl	8004fd4 <I2C_TransferConfig>
 8004898:	e012      	b.n	80048c0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	2380      	movs	r3, #128	; 0x80
 80048ac:	049c      	lsls	r4, r3, #18
 80048ae:	230a      	movs	r3, #10
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	8819      	ldrh	r1, [r3, #0]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	2300      	movs	r3, #0
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	0023      	movs	r3, r4
 80048bc:	f000 fb8a 	bl	8004fd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d197      	bne.n	80047fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 fa5d 	bl	8004d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048d6:	1e03      	subs	r3, r0, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e01a      	b.n	8004914 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2220      	movs	r2, #32
 80048e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	490b      	ldr	r1, [pc, #44]	; (8004920 <HAL_I2C_Master_Receive+0x20c>)
 80048f2:	400a      	ands	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2241      	movs	r2, #65	; 0x41
 80048fa:	2120      	movs	r1, #32
 80048fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2242      	movs	r2, #66	; 0x42
 8004902:	2100      	movs	r1, #0
 8004904:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2240      	movs	r2, #64	; 0x40
 800490a:	2100      	movs	r1, #0
 800490c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e000      	b.n	8004914 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
  }
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	b007      	add	sp, #28
 800491a:	bd90      	pop	{r4, r7, pc}
 800491c:	80002400 	.word	0x80002400
 8004920:	fe00e800 	.word	0xfe00e800

08004924 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b089      	sub	sp, #36	; 0x24
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	000c      	movs	r4, r1
 800492e:	0010      	movs	r0, r2
 8004930:	0019      	movs	r1, r3
 8004932:	230a      	movs	r3, #10
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	1c22      	adds	r2, r4, #0
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	2308      	movs	r3, #8
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	1c02      	adds	r2, r0, #0
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	1dbb      	adds	r3, r7, #6
 8004944:	1c0a      	adds	r2, r1, #0
 8004946:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2241      	movs	r2, #65	; 0x41
 800494c:	5c9b      	ldrb	r3, [r3, r2]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d000      	beq.n	8004956 <HAL_I2C_Mem_Read+0x32>
 8004954:	e110      	b.n	8004b78 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_I2C_Mem_Read+0x42>
 800495c:	232c      	movs	r3, #44	; 0x2c
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2280      	movs	r2, #128	; 0x80
 800496a:	0092      	lsls	r2, r2, #2
 800496c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e103      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_I2C_Mem_Read+0x5c>
 800497c:	2302      	movs	r3, #2
 800497e:	e0fc      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2240      	movs	r2, #64	; 0x40
 8004984:	2101      	movs	r1, #1
 8004986:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004988:	f7fe ff48 	bl	800381c <HAL_GetTick>
 800498c:	0003      	movs	r3, r0
 800498e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	0219      	lsls	r1, r3, #8
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2319      	movs	r3, #25
 800499c:	2201      	movs	r2, #1
 800499e:	f000 f979 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 80049a2:	1e03      	subs	r3, r0, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0e7      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2241      	movs	r2, #65	; 0x41
 80049ae:	2122      	movs	r1, #34	; 0x22
 80049b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2242      	movs	r2, #66	; 0x42
 80049b6:	2140      	movs	r1, #64	; 0x40
 80049b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	222c      	movs	r2, #44	; 0x2c
 80049ca:	18ba      	adds	r2, r7, r2
 80049cc:	8812      	ldrh	r2, [r2, #0]
 80049ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049d6:	1dbb      	adds	r3, r7, #6
 80049d8:	881c      	ldrh	r4, [r3, #0]
 80049da:	2308      	movs	r3, #8
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	230a      	movs	r3, #10
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	8819      	ldrh	r1, [r3, #0]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	0023      	movs	r3, r4
 80049f2:	f000 f8cb 	bl	8004b8c <I2C_RequestMemoryRead>
 80049f6:	1e03      	subs	r3, r0, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	2100      	movs	r1, #0
 8004a00:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0b9      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2bff      	cmp	r3, #255	; 0xff
 8004a0e:	d911      	bls.n	8004a34 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	045c      	lsls	r4, r3, #17
 8004a20:	230a      	movs	r3, #10
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	8819      	ldrh	r1, [r3, #0]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	4b56      	ldr	r3, [pc, #344]	; (8004b84 <HAL_I2C_Mem_Read+0x260>)
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	0023      	movs	r3, r4
 8004a2e:	f000 fad1 	bl	8004fd4 <I2C_TransferConfig>
 8004a32:	e012      	b.n	8004a5a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	049c      	lsls	r4, r3, #18
 8004a48:	230a      	movs	r3, #10
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	8819      	ldrh	r1, [r3, #0]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	4b4c      	ldr	r3, [pc, #304]	; (8004b84 <HAL_I2C_Mem_Read+0x260>)
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	0023      	movs	r3, r4
 8004a56:	f000 fabd 	bl	8004fd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	0013      	movs	r3, r2
 8004a64:	2200      	movs	r2, #0
 8004a66:	2104      	movs	r1, #4
 8004a68:	f000 f914 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e082      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d03a      	beq.n	8004b26 <HAL_I2C_Mem_Read+0x202>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d136      	bne.n	8004b26 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	0013      	movs	r3, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2180      	movs	r1, #128	; 0x80
 8004ac6:	f000 f8e5 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004aca:	1e03      	subs	r3, r0, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e053      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2bff      	cmp	r3, #255	; 0xff
 8004ada:	d911      	bls.n	8004b00 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	22ff      	movs	r2, #255	; 0xff
 8004ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	045c      	lsls	r4, r3, #17
 8004aec:	230a      	movs	r3, #10
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	8819      	ldrh	r1, [r3, #0]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	2300      	movs	r3, #0
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	0023      	movs	r3, r4
 8004afa:	f000 fa6b 	bl	8004fd4 <I2C_TransferConfig>
 8004afe:	e012      	b.n	8004b26 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	049c      	lsls	r4, r3, #18
 8004b14:	230a      	movs	r3, #10
 8004b16:	18fb      	adds	r3, r7, r3
 8004b18:	8819      	ldrh	r1, [r3, #0]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	0023      	movs	r3, r4
 8004b22:	f000 fa57 	bl	8004fd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d194      	bne.n	8004a5a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 f92a 	bl	8004d90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b3c:	1e03      	subs	r3, r0, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e01a      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	490c      	ldr	r1, [pc, #48]	; (8004b88 <HAL_I2C_Mem_Read+0x264>)
 8004b58:	400a      	ands	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2241      	movs	r2, #65	; 0x41
 8004b60:	2120      	movs	r1, #32
 8004b62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2242      	movs	r2, #66	; 0x42
 8004b68:	2100      	movs	r1, #0
 8004b6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2240      	movs	r2, #64	; 0x40
 8004b70:	2100      	movs	r1, #0
 8004b72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	e000      	b.n	8004b7a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004b78:	2302      	movs	r3, #2
  }
}
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b007      	add	sp, #28
 8004b80:	bd90      	pop	{r4, r7, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	80002400 	.word	0x80002400
 8004b88:	fe00e800 	.word	0xfe00e800

08004b8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b8c:	b5b0      	push	{r4, r5, r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	000c      	movs	r4, r1
 8004b96:	0010      	movs	r0, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	250a      	movs	r5, #10
 8004b9c:	197b      	adds	r3, r7, r5
 8004b9e:	1c22      	adds	r2, r4, #0
 8004ba0:	801a      	strh	r2, [r3, #0]
 8004ba2:	2308      	movs	r3, #8
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	1c02      	adds	r2, r0, #0
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	1dbb      	adds	r3, r7, #6
 8004bac:	1c0a      	adds	r2, r1, #0
 8004bae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004bb0:	1dbb      	adds	r3, r7, #6
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	197b      	adds	r3, r7, r5
 8004bb8:	8819      	ldrh	r1, [r3, #0]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	4b23      	ldr	r3, [pc, #140]	; (8004c4c <I2C_RequestMemoryRead+0xc0>)
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f000 fa07 	bl	8004fd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f000 f8a0 	bl	8004d12 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bd2:	1e03      	subs	r3, r0, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e033      	b.n	8004c42 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bda:	1dbb      	adds	r3, r7, #6
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d107      	bne.n	8004bf2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004be2:	2308      	movs	r3, #8
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	881b      	ldrh	r3, [r3, #0]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf0:	e019      	b.n	8004c26 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	0a1b      	lsrs	r3, r3, #8
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c06:	6a39      	ldr	r1, [r7, #32]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 f881 	bl	8004d12 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c10:	1e03      	subs	r3, r0, #0
 8004c12:	d001      	beq.n	8004c18 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e014      	b.n	8004c42 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c18:	2308      	movs	r3, #8
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	0013      	movs	r3, r2
 8004c30:	2200      	movs	r2, #0
 8004c32:	2140      	movs	r1, #64	; 0x40
 8004c34:	f000 f82e 	bl	8004c94 <I2C_WaitOnFlagUntilTimeout>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d001      	beq.n	8004c40 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b004      	add	sp, #16
 8004c48:	bdb0      	pop	{r4, r5, r7, pc}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	80002000 	.word	0x80002000

08004c50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d103      	bne.n	8004c6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2201      	movs	r2, #1
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d007      	beq.n	8004c8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2101      	movs	r1, #1
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	619a      	str	r2, [r3, #24]
  }
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b002      	add	sp, #8
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	1dfb      	adds	r3, r7, #7
 8004ca2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca4:	e021      	b.n	8004cea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	d01e      	beq.n	8004cea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cac:	f7fe fdb6 	bl	800381c <HAL_GetTick>
 8004cb0:	0002      	movs	r2, r0
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d113      	bne.n	8004cea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2241      	movs	r2, #65	; 0x41
 8004cd2:	2120      	movs	r1, #32
 8004cd4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2242      	movs	r2, #66	; 0x42
 8004cda:	2100      	movs	r1, #0
 8004cdc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2240      	movs	r2, #64	; 0x40
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e00f      	b.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	425a      	negs	r2, r3
 8004cfa:	4153      	adcs	r3, r2
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	001a      	movs	r2, r3
 8004d00:	1dfb      	adds	r3, r7, #7
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0ce      	beq.n	8004ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b004      	add	sp, #16
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d1e:	e02b      	b.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f000 f8da 	bl	8004ee0 <I2C_IsAcknowledgeFailed>
 8004d2c:	1e03      	subs	r3, r0, #0
 8004d2e:	d001      	beq.n	8004d34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e029      	b.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	3301      	adds	r3, #1
 8004d38:	d01e      	beq.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7fe fd6f 	bl	800381c <HAL_GetTick>
 8004d3e:	0002      	movs	r2, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d113      	bne.n	8004d78 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	2220      	movs	r2, #32
 8004d56:	431a      	orrs	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2241      	movs	r2, #65	; 0x41
 8004d60:	2120      	movs	r1, #32
 8004d62:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2242      	movs	r2, #66	; 0x42
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	2100      	movs	r1, #0
 8004d72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d1cc      	bne.n	8004d20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	0018      	movs	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	b004      	add	sp, #16
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d9c:	e028      	b.n	8004df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68b9      	ldr	r1, [r7, #8]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 f89b 	bl	8004ee0 <I2C_IsAcknowledgeFailed>
 8004daa:	1e03      	subs	r3, r0, #0
 8004dac:	d001      	beq.n	8004db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e026      	b.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db2:	f7fe fd33 	bl	800381c <HAL_GetTick>
 8004db6:	0002      	movs	r2, r0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d113      	bne.n	8004df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	2220      	movs	r2, #32
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2241      	movs	r2, #65	; 0x41
 8004dd8:	2120      	movs	r1, #32
 8004dda:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2242      	movs	r2, #66	; 0x42
 8004de0:	2100      	movs	r1, #0
 8004de2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2240      	movs	r2, #64	; 0x40
 8004de8:	2100      	movs	r1, #0
 8004dea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e007      	b.n	8004e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2220      	movs	r2, #32
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d1cf      	bne.n	8004d9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b004      	add	sp, #16
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e14:	e055      	b.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 f85f 	bl	8004ee0 <I2C_IsAcknowledgeFailed>
 8004e22:	1e03      	subs	r3, r0, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e053      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2220      	movs	r2, #32
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d129      	bne.n	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d105      	bne.n	8004e52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e03f      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2220      	movs	r2, #32
 8004e58:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	491d      	ldr	r1, [pc, #116]	; (8004edc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2241      	movs	r2, #65	; 0x41
 8004e74:	2120      	movs	r1, #32
 8004e76:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2242      	movs	r2, #66	; 0x42
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2240      	movs	r2, #64	; 0x40
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e022      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8c:	f7fe fcc6 	bl	800381c <HAL_GetTick>
 8004e90:	0002      	movs	r2, r0
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2241      	movs	r2, #65	; 0x41
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2240      	movs	r2, #64	; 0x40
 8004eba:	2100      	movs	r1, #0
 8004ebc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e007      	b.n	8004ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d1a2      	bne.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	fe00e800 	.word	0xfe00e800

08004ee0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d164      	bne.n	8004fc4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	049b      	lsls	r3, r3, #18
 8004f04:	401a      	ands	r2, r3
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	049b      	lsls	r3, r3, #18
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d02b      	beq.n	8004f66 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	01c9      	lsls	r1, r1, #7
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f20:	e021      	b.n	8004f66 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	3301      	adds	r3, #1
 8004f26:	d01e      	beq.n	8004f66 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f28:	f7fe fc78 	bl	800381c <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d302      	bcc.n	8004f3e <I2C_IsAcknowledgeFailed+0x5e>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d113      	bne.n	8004f66 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	2220      	movs	r2, #32
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2241      	movs	r2, #65	; 0x41
 8004f4e:	2120      	movs	r1, #32
 8004f50:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2242      	movs	r2, #66	; 0x42
 8004f56:	2100      	movs	r1, #0
 8004f58:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2240      	movs	r2, #64	; 0x40
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e02f      	b.n	8004fc6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b20      	cmp	r3, #32
 8004f72:	d1d6      	bne.n	8004f22 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2210      	movs	r2, #16
 8004f7a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2220      	movs	r2, #32
 8004f82:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f7ff fe62 	bl	8004c50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	490e      	ldr	r1, [pc, #56]	; (8004fd0 <I2C_IsAcknowledgeFailed+0xf0>)
 8004f98:	400a      	ands	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2241      	movs	r2, #65	; 0x41
 8004fac:	2120      	movs	r1, #32
 8004fae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2242      	movs	r2, #66	; 0x42
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	b004      	add	sp, #16
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	fe00e800 	.word	0xfe00e800

08004fd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	0008      	movs	r0, r1
 8004fde:	0011      	movs	r1, r2
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	240a      	movs	r4, #10
 8004fe4:	193b      	adds	r3, r7, r4
 8004fe6:	1c02      	adds	r2, r0, #0
 8004fe8:	801a      	strh	r2, [r3, #0]
 8004fea:	2009      	movs	r0, #9
 8004fec:	183b      	adds	r3, r7, r0
 8004fee:	1c0a      	adds	r2, r1, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	0d51      	lsrs	r1, r2, #21
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	00d2      	lsls	r2, r2, #3
 8005000:	400a      	ands	r2, r1
 8005002:	490e      	ldr	r1, [pc, #56]	; (800503c <I2C_TransferConfig+0x68>)
 8005004:	430a      	orrs	r2, r1
 8005006:	43d2      	mvns	r2, r2
 8005008:	401a      	ands	r2, r3
 800500a:	0011      	movs	r1, r2
 800500c:	193b      	adds	r3, r7, r4
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	059b      	lsls	r3, r3, #22
 8005012:	0d9a      	lsrs	r2, r3, #22
 8005014:	183b      	adds	r3, r7, r0
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	0418      	lsls	r0, r3, #16
 800501a:	23ff      	movs	r3, #255	; 0xff
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	4003      	ands	r3, r0
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	431a      	orrs	r2, r3
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b005      	add	sp, #20
 8005038:	bd90      	pop	{r4, r7, pc}
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	03ff63ff 	.word	0x03ff63ff

08005040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2241      	movs	r2, #65	; 0x41
 800504e:	5c9b      	ldrb	r3, [r3, r2]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b20      	cmp	r3, #32
 8005054:	d138      	bne.n	80050c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2240      	movs	r2, #64	; 0x40
 800505a:	5c9b      	ldrb	r3, [r3, r2]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005060:	2302      	movs	r3, #2
 8005062:	e032      	b.n	80050ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	2101      	movs	r1, #1
 800506a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2241      	movs	r2, #65	; 0x41
 8005070:	2124      	movs	r1, #36	; 0x24
 8005072:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2101      	movs	r1, #1
 8005080:	438a      	bics	r2, r1
 8005082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4911      	ldr	r1, [pc, #68]	; (80050d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005090:	400a      	ands	r2, r1
 8005092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2101      	movs	r1, #1
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2241      	movs	r2, #65	; 0x41
 80050b8:	2120      	movs	r1, #32
 80050ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2240      	movs	r2, #64	; 0x40
 80050c0:	2100      	movs	r1, #0
 80050c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	0018      	movs	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b002      	add	sp, #8
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	ffffefff 	.word	0xffffefff

080050d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2241      	movs	r2, #65	; 0x41
 80050e6:	5c9b      	ldrb	r3, [r3, r2]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d139      	bne.n	8005162 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2240      	movs	r2, #64	; 0x40
 80050f2:	5c9b      	ldrb	r3, [r3, r2]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e033      	b.n	8005164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2240      	movs	r2, #64	; 0x40
 8005100:	2101      	movs	r1, #1
 8005102:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2241      	movs	r2, #65	; 0x41
 8005108:	2124      	movs	r1, #36	; 0x24
 800510a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2101      	movs	r1, #1
 8005118:	438a      	bics	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a11      	ldr	r2, [pc, #68]	; (800516c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005128:	4013      	ands	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2241      	movs	r2, #65	; 0x41
 8005152:	2120      	movs	r1, #32
 8005154:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2240      	movs	r2, #64	; 0x40
 800515a:	2100      	movs	r1, #0
 800515c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e000      	b.n	8005164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b004      	add	sp, #16
 800516a:	bd80      	pop	{r7, pc}
 800516c:	fffff0ff 	.word	0xfffff0ff

08005170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005170:	b5b0      	push	{r4, r5, r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f000 fbbf 	bl	8005902 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005184:	4bc9      	ldr	r3, [pc, #804]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	220c      	movs	r2, #12
 800518a:	4013      	ands	r3, r2
 800518c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800518e:	4bc7      	ldr	r3, [pc, #796]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	025b      	lsls	r3, r3, #9
 8005196:	4013      	ands	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	4013      	ands	r3, r2
 80051a2:	d100      	bne.n	80051a6 <HAL_RCC_OscConfig+0x36>
 80051a4:	e07e      	b.n	80052a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	d007      	beq.n	80051bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d112      	bne.n	80051d8 <HAL_RCC_OscConfig+0x68>
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	025b      	lsls	r3, r3, #9
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d10d      	bne.n	80051d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	4bbb      	ldr	r3, [pc, #748]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	029b      	lsls	r3, r3, #10
 80051c4:	4013      	ands	r3, r2
 80051c6:	d100      	bne.n	80051ca <HAL_RCC_OscConfig+0x5a>
 80051c8:	e06b      	b.n	80052a2 <HAL_RCC_OscConfig+0x132>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d167      	bne.n	80052a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f000 fb95 	bl	8005902 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	025b      	lsls	r3, r3, #9
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_OscConfig+0x84>
 80051e4:	4bb1      	ldr	r3, [pc, #708]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4bb0      	ldr	r3, [pc, #704]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80051ea:	2180      	movs	r1, #128	; 0x80
 80051ec:	0249      	lsls	r1, r1, #9
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e027      	b.n	8005244 <HAL_RCC_OscConfig+0xd4>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	23a0      	movs	r3, #160	; 0xa0
 80051fa:	02db      	lsls	r3, r3, #11
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d10e      	bne.n	800521e <HAL_RCC_OscConfig+0xae>
 8005200:	4baa      	ldr	r3, [pc, #680]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4ba9      	ldr	r3, [pc, #676]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	02c9      	lsls	r1, r1, #11
 800520a:	430a      	orrs	r2, r1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	4ba7      	ldr	r3, [pc, #668]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4ba6      	ldr	r3, [pc, #664]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005214:	2180      	movs	r1, #128	; 0x80
 8005216:	0249      	lsls	r1, r1, #9
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	e012      	b.n	8005244 <HAL_RCC_OscConfig+0xd4>
 800521e:	4ba3      	ldr	r3, [pc, #652]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4ba2      	ldr	r3, [pc, #648]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005224:	49a2      	ldr	r1, [pc, #648]	; (80054b0 <HAL_RCC_OscConfig+0x340>)
 8005226:	400a      	ands	r2, r1
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	4ba0      	ldr	r3, [pc, #640]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	025b      	lsls	r3, r3, #9
 8005232:	4013      	ands	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4b9c      	ldr	r3, [pc, #624]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b9b      	ldr	r3, [pc, #620]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800523e:	499d      	ldr	r1, [pc, #628]	; (80054b4 <HAL_RCC_OscConfig+0x344>)
 8005240:	400a      	ands	r2, r1
 8005242:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d015      	beq.n	8005278 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fe fae6 	bl	800381c <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005254:	e009      	b.n	800526a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005256:	f7fe fae1 	bl	800381c <HAL_GetTick>
 800525a:	0002      	movs	r2, r0
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b64      	cmp	r3, #100	; 0x64
 8005262:	d902      	bls.n	800526a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	f000 fb4c 	bl	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800526a:	4b90      	ldr	r3, [pc, #576]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	029b      	lsls	r3, r3, #10
 8005272:	4013      	ands	r3, r2
 8005274:	d0ef      	beq.n	8005256 <HAL_RCC_OscConfig+0xe6>
 8005276:	e015      	b.n	80052a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fe fad0 	bl	800381c <HAL_GetTick>
 800527c:	0003      	movs	r3, r0
 800527e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005282:	f7fe facb 	bl	800381c <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b64      	cmp	r3, #100	; 0x64
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e336      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005294:	4b85      	ldr	r3, [pc, #532]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	2380      	movs	r3, #128	; 0x80
 800529a:	029b      	lsls	r3, r3, #10
 800529c:	4013      	ands	r3, r2
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x112>
 80052a0:	e000      	b.n	80052a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052a2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2202      	movs	r2, #2
 80052aa:	4013      	ands	r3, r2
 80052ac:	d100      	bne.n	80052b0 <HAL_RCC_OscConfig+0x140>
 80052ae:	e099      	b.n	80053e4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	2220      	movs	r2, #32
 80052ba:	4013      	ands	r3, r2
 80052bc:	d009      	beq.n	80052d2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80052be:	4b7b      	ldr	r3, [pc, #492]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b7a      	ldr	r3, [pc, #488]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80052c4:	2120      	movs	r1, #32
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	2220      	movs	r2, #32
 80052ce:	4393      	bics	r3, r2
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	d13e      	bne.n	800535c <HAL_RCC_OscConfig+0x1ec>
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d13b      	bne.n	800535c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80052e4:	4b71      	ldr	r3, [pc, #452]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2204      	movs	r2, #4
 80052ea:	4013      	ands	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_RCC_OscConfig+0x188>
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e304      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f8:	4b6c      	ldr	r3, [pc, #432]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a6e      	ldr	r2, [pc, #440]	; (80054b8 <HAL_RCC_OscConfig+0x348>)
 80052fe:	4013      	ands	r3, r2
 8005300:	0019      	movs	r1, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	021a      	lsls	r2, r3, #8
 8005308:	4b68      	ldr	r3, [pc, #416]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800530a:	430a      	orrs	r2, r1
 800530c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800530e:	4b67      	ldr	r3, [pc, #412]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2209      	movs	r2, #9
 8005314:	4393      	bics	r3, r2
 8005316:	0019      	movs	r1, r3
 8005318:	4b64      	ldr	r3, [pc, #400]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800531a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005320:	f000 fc42 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005324:	0001      	movs	r1, r0
 8005326:	4b61      	ldr	r3, [pc, #388]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	220f      	movs	r2, #15
 800532e:	4013      	ands	r3, r2
 8005330:	4a62      	ldr	r2, [pc, #392]	; (80054bc <HAL_RCC_OscConfig+0x34c>)
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	000a      	movs	r2, r1
 8005336:	40da      	lsrs	r2, r3
 8005338:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <HAL_RCC_OscConfig+0x350>)
 800533a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800533c:	4b61      	ldr	r3, [pc, #388]	; (80054c4 <HAL_RCC_OscConfig+0x354>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2513      	movs	r5, #19
 8005342:	197c      	adds	r4, r7, r5
 8005344:	0018      	movs	r0, r3
 8005346:	f7fe fa23 	bl	8003790 <HAL_InitTick>
 800534a:	0003      	movs	r3, r0
 800534c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800534e:	197b      	adds	r3, r7, r5
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d046      	beq.n	80053e4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005356:	197b      	adds	r3, r7, r5
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	e2d2      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d027      	beq.n	80053b2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005362:	4b52      	ldr	r3, [pc, #328]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2209      	movs	r2, #9
 8005368:	4393      	bics	r3, r2
 800536a:	0019      	movs	r1, r3
 800536c:	4b4f      	ldr	r3, [pc, #316]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7fe fa52 	bl	800381c <HAL_GetTick>
 8005378:	0003      	movs	r3, r0
 800537a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537e:	f7fe fa4d 	bl	800381c <HAL_GetTick>
 8005382:	0002      	movs	r2, r0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e2b8      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005390:	4b46      	ldr	r3, [pc, #280]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2204      	movs	r2, #4
 8005396:	4013      	ands	r3, r2
 8005398:	d0f1      	beq.n	800537e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539a:	4b44      	ldr	r3, [pc, #272]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	4a46      	ldr	r2, [pc, #280]	; (80054b8 <HAL_RCC_OscConfig+0x348>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	0019      	movs	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	021a      	lsls	r2, r3, #8
 80053aa:	4b40      	ldr	r3, [pc, #256]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	e018      	b.n	80053e4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b2:	4b3e      	ldr	r3, [pc, #248]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b3d      	ldr	r3, [pc, #244]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80053b8:	2101      	movs	r1, #1
 80053ba:	438a      	bics	r2, r1
 80053bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053be:	f7fe fa2d 	bl	800381c <HAL_GetTick>
 80053c2:	0003      	movs	r3, r0
 80053c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c8:	f7fe fa28 	bl	800381c <HAL_GetTick>
 80053cc:	0002      	movs	r2, r0
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e293      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053da:	4b34      	ldr	r3, [pc, #208]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2204      	movs	r2, #4
 80053e0:	4013      	ands	r3, r2
 80053e2:	d1f1      	bne.n	80053c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2210      	movs	r2, #16
 80053ea:	4013      	ands	r3, r2
 80053ec:	d100      	bne.n	80053f0 <HAL_RCC_OscConfig+0x280>
 80053ee:	e0a2      	b.n	8005536 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d140      	bne.n	8005478 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053f6:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	2380      	movs	r3, #128	; 0x80
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4013      	ands	r3, r2
 8005400:	d005      	beq.n	800540e <HAL_RCC_OscConfig+0x29e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e279      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	4a2d      	ldr	r2, [pc, #180]	; (80054c8 <HAL_RCC_OscConfig+0x358>)
 8005414:	4013      	ands	r3, r2
 8005416:	0019      	movs	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800541c:	4b23      	ldr	r3, [pc, #140]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	0a19      	lsrs	r1, r3, #8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	061a      	lsls	r2, r3, #24
 8005430:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	0b5b      	lsrs	r3, r3, #13
 800543c:	3301      	adds	r3, #1
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	0212      	lsls	r2, r2, #8
 8005442:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005444:	4b19      	ldr	r3, [pc, #100]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	210f      	movs	r1, #15
 800544c:	400b      	ands	r3, r1
 800544e:	491b      	ldr	r1, [pc, #108]	; (80054bc <HAL_RCC_OscConfig+0x34c>)
 8005450:	5ccb      	ldrb	r3, [r1, r3]
 8005452:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <HAL_RCC_OscConfig+0x350>)
 8005456:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005458:	4b1a      	ldr	r3, [pc, #104]	; (80054c4 <HAL_RCC_OscConfig+0x354>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2513      	movs	r5, #19
 800545e:	197c      	adds	r4, r7, r5
 8005460:	0018      	movs	r0, r3
 8005462:	f7fe f995 	bl	8003790 <HAL_InitTick>
 8005466:	0003      	movs	r3, r0
 8005468:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800546a:	197b      	adds	r3, r7, r5
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d061      	beq.n	8005536 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005472:	197b      	adds	r3, r7, r5
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	e244      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d040      	beq.n	8005502 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_OscConfig+0x33c>)
 8005486:	2180      	movs	r1, #128	; 0x80
 8005488:	0049      	lsls	r1, r1, #1
 800548a:	430a      	orrs	r2, r1
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fe f9c5 	bl	800381c <HAL_GetTick>
 8005492:	0003      	movs	r3, r0
 8005494:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005496:	e019      	b.n	80054cc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005498:	f7fe f9c0 	bl	800381c <HAL_GetTick>
 800549c:	0002      	movs	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d912      	bls.n	80054cc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e22b      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	40021000 	.word	0x40021000
 80054b0:	fffeffff 	.word	0xfffeffff
 80054b4:	fffbffff 	.word	0xfffbffff
 80054b8:	ffffe0ff 	.word	0xffffe0ff
 80054bc:	08009904 	.word	0x08009904
 80054c0:	20000000 	.word	0x20000000
 80054c4:	20000004 	.word	0x20000004
 80054c8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054cc:	4bca      	ldr	r3, [pc, #808]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4013      	ands	r3, r2
 80054d6:	d0df      	beq.n	8005498 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d8:	4bc7      	ldr	r3, [pc, #796]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4ac7      	ldr	r2, [pc, #796]	; (80057fc <HAL_RCC_OscConfig+0x68c>)
 80054de:	4013      	ands	r3, r2
 80054e0:	0019      	movs	r1, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e6:	4bc4      	ldr	r3, [pc, #784]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80054e8:	430a      	orrs	r2, r1
 80054ea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ec:	4bc2      	ldr	r3, [pc, #776]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	021b      	lsls	r3, r3, #8
 80054f2:	0a19      	lsrs	r1, r3, #8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	061a      	lsls	r2, r3, #24
 80054fa:	4bbf      	ldr	r3, [pc, #764]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80054fc:	430a      	orrs	r2, r1
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	e019      	b.n	8005536 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005502:	4bbd      	ldr	r3, [pc, #756]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4bbc      	ldr	r3, [pc, #752]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005508:	49bd      	ldr	r1, [pc, #756]	; (8005800 <HAL_RCC_OscConfig+0x690>)
 800550a:	400a      	ands	r2, r1
 800550c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550e:	f7fe f985 	bl	800381c <HAL_GetTick>
 8005512:	0003      	movs	r3, r0
 8005514:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005518:	f7fe f980 	bl	800381c <HAL_GetTick>
 800551c:	0002      	movs	r2, r0
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e1eb      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800552a:	4bb3      	ldr	r3, [pc, #716]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	2380      	movs	r3, #128	; 0x80
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4013      	ands	r3, r2
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2208      	movs	r2, #8
 800553c:	4013      	ands	r3, r2
 800553e:	d036      	beq.n	80055ae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d019      	beq.n	800557c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005548:	4bab      	ldr	r3, [pc, #684]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800554a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800554c:	4baa      	ldr	r3, [pc, #680]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800554e:	2101      	movs	r1, #1
 8005550:	430a      	orrs	r2, r1
 8005552:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005554:	f7fe f962 	bl	800381c <HAL_GetTick>
 8005558:	0003      	movs	r3, r0
 800555a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800555e:	f7fe f95d 	bl	800381c <HAL_GetTick>
 8005562:	0002      	movs	r2, r0
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e1c8      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005570:	4ba1      	ldr	r3, [pc, #644]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005574:	2202      	movs	r2, #2
 8005576:	4013      	ands	r3, r2
 8005578:	d0f1      	beq.n	800555e <HAL_RCC_OscConfig+0x3ee>
 800557a:	e018      	b.n	80055ae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557c:	4b9e      	ldr	r3, [pc, #632]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800557e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005580:	4b9d      	ldr	r3, [pc, #628]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005582:	2101      	movs	r1, #1
 8005584:	438a      	bics	r2, r1
 8005586:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005588:	f7fe f948 	bl	800381c <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005592:	f7fe f943 	bl	800381c <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1ae      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a4:	4b94      	ldr	r3, [pc, #592]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80055a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a8:	2202      	movs	r2, #2
 80055aa:	4013      	ands	r3, r2
 80055ac:	d1f1      	bne.n	8005592 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2204      	movs	r2, #4
 80055b4:	4013      	ands	r3, r2
 80055b6:	d100      	bne.n	80055ba <HAL_RCC_OscConfig+0x44a>
 80055b8:	e0ae      	b.n	8005718 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ba:	2023      	movs	r0, #35	; 0x23
 80055bc:	183b      	adds	r3, r7, r0
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c2:	4b8d      	ldr	r3, [pc, #564]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80055c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c6:	2380      	movs	r3, #128	; 0x80
 80055c8:	055b      	lsls	r3, r3, #21
 80055ca:	4013      	ands	r3, r2
 80055cc:	d109      	bne.n	80055e2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ce:	4b8a      	ldr	r3, [pc, #552]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80055d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d2:	4b89      	ldr	r3, [pc, #548]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80055d4:	2180      	movs	r1, #128	; 0x80
 80055d6:	0549      	lsls	r1, r1, #21
 80055d8:	430a      	orrs	r2, r1
 80055da:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80055dc:	183b      	adds	r3, r7, r0
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e2:	4b88      	ldr	r3, [pc, #544]	; (8005804 <HAL_RCC_OscConfig+0x694>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4013      	ands	r3, r2
 80055ec:	d11a      	bne.n	8005624 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ee:	4b85      	ldr	r3, [pc, #532]	; (8005804 <HAL_RCC_OscConfig+0x694>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b84      	ldr	r3, [pc, #528]	; (8005804 <HAL_RCC_OscConfig+0x694>)
 80055f4:	2180      	movs	r1, #128	; 0x80
 80055f6:	0049      	lsls	r1, r1, #1
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fc:	f7fe f90e 	bl	800381c <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fe f909 	bl	800381c <HAL_GetTick>
 800560a:	0002      	movs	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b64      	cmp	r3, #100	; 0x64
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e174      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	4b7a      	ldr	r3, [pc, #488]	; (8005804 <HAL_RCC_OscConfig+0x694>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4013      	ands	r3, r2
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	2380      	movs	r3, #128	; 0x80
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	429a      	cmp	r2, r3
 800562e:	d107      	bne.n	8005640 <HAL_RCC_OscConfig+0x4d0>
 8005630:	4b71      	ldr	r3, [pc, #452]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005634:	4b70      	ldr	r3, [pc, #448]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	0049      	lsls	r1, r1, #1
 800563a:	430a      	orrs	r2, r1
 800563c:	651a      	str	r2, [r3, #80]	; 0x50
 800563e:	e031      	b.n	80056a4 <HAL_RCC_OscConfig+0x534>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10c      	bne.n	8005662 <HAL_RCC_OscConfig+0x4f2>
 8005648:	4b6b      	ldr	r3, [pc, #428]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800564a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800564c:	4b6a      	ldr	r3, [pc, #424]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800564e:	496c      	ldr	r1, [pc, #432]	; (8005800 <HAL_RCC_OscConfig+0x690>)
 8005650:	400a      	ands	r2, r1
 8005652:	651a      	str	r2, [r3, #80]	; 0x50
 8005654:	4b68      	ldr	r3, [pc, #416]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005658:	4b67      	ldr	r3, [pc, #412]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800565a:	496b      	ldr	r1, [pc, #428]	; (8005808 <HAL_RCC_OscConfig+0x698>)
 800565c:	400a      	ands	r2, r1
 800565e:	651a      	str	r2, [r3, #80]	; 0x50
 8005660:	e020      	b.n	80056a4 <HAL_RCC_OscConfig+0x534>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	23a0      	movs	r3, #160	; 0xa0
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	429a      	cmp	r2, r3
 800566c:	d10e      	bne.n	800568c <HAL_RCC_OscConfig+0x51c>
 800566e:	4b62      	ldr	r3, [pc, #392]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	00c9      	lsls	r1, r1, #3
 8005678:	430a      	orrs	r2, r1
 800567a:	651a      	str	r2, [r3, #80]	; 0x50
 800567c:	4b5e      	ldr	r3, [pc, #376]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800567e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005680:	4b5d      	ldr	r3, [pc, #372]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005682:	2180      	movs	r1, #128	; 0x80
 8005684:	0049      	lsls	r1, r1, #1
 8005686:	430a      	orrs	r2, r1
 8005688:	651a      	str	r2, [r3, #80]	; 0x50
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0x534>
 800568c:	4b5a      	ldr	r3, [pc, #360]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800568e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005690:	4b59      	ldr	r3, [pc, #356]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005692:	495b      	ldr	r1, [pc, #364]	; (8005800 <HAL_RCC_OscConfig+0x690>)
 8005694:	400a      	ands	r2, r1
 8005696:	651a      	str	r2, [r3, #80]	; 0x50
 8005698:	4b57      	ldr	r3, [pc, #348]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800569a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569c:	4b56      	ldr	r3, [pc, #344]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800569e:	495a      	ldr	r1, [pc, #360]	; (8005808 <HAL_RCC_OscConfig+0x698>)
 80056a0:	400a      	ands	r2, r1
 80056a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ac:	f7fe f8b6 	bl	800381c <HAL_GetTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b4:	e009      	b.n	80056ca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b6:	f7fe f8b1 	bl	800381c <HAL_GetTick>
 80056ba:	0002      	movs	r2, r0
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	4a52      	ldr	r2, [pc, #328]	; (800580c <HAL_RCC_OscConfig+0x69c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e11b      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ca:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80056cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0ef      	beq.n	80056b6 <HAL_RCC_OscConfig+0x546>
 80056d6:	e014      	b.n	8005702 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fe f8a0 	bl	800381c <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056e0:	e009      	b.n	80056f6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fe f89b 	bl	800381c <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	4a47      	ldr	r2, [pc, #284]	; (800580c <HAL_RCC_OscConfig+0x69c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e105      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056f6:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80056f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056fa:	2380      	movs	r3, #128	; 0x80
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	d1ef      	bne.n	80056e2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005702:	2323      	movs	r3, #35	; 0x23
 8005704:	18fb      	adds	r3, r7, r3
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d105      	bne.n	8005718 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570c:	4b3a      	ldr	r3, [pc, #232]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800570e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005710:	4b39      	ldr	r3, [pc, #228]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005712:	493f      	ldr	r1, [pc, #252]	; (8005810 <HAL_RCC_OscConfig+0x6a0>)
 8005714:	400a      	ands	r2, r1
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2220      	movs	r2, #32
 800571e:	4013      	ands	r3, r2
 8005720:	d049      	beq.n	80057b6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d026      	beq.n	8005778 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800572a:	4b33      	ldr	r3, [pc, #204]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	4b32      	ldr	r3, [pc, #200]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005730:	2101      	movs	r1, #1
 8005732:	430a      	orrs	r2, r1
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 8005738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573a:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800573c:	2101      	movs	r1, #1
 800573e:	430a      	orrs	r2, r1
 8005740:	635a      	str	r2, [r3, #52]	; 0x34
 8005742:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_RCC_OscConfig+0x6a4>)
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	4b33      	ldr	r3, [pc, #204]	; (8005814 <HAL_RCC_OscConfig+0x6a4>)
 8005748:	2180      	movs	r1, #128	; 0x80
 800574a:	0189      	lsls	r1, r1, #6
 800574c:	430a      	orrs	r2, r1
 800574e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005750:	f7fe f864 	bl	800381c <HAL_GetTick>
 8005754:	0003      	movs	r3, r0
 8005756:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800575a:	f7fe f85f 	bl	800381c <HAL_GetTick>
 800575e:	0002      	movs	r2, r0
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e0ca      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800576c:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2202      	movs	r2, #2
 8005772:	4013      	ands	r3, r2
 8005774:	d0f1      	beq.n	800575a <HAL_RCC_OscConfig+0x5ea>
 8005776:	e01e      	b.n	80057b6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005778:	4b1f      	ldr	r3, [pc, #124]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 800577e:	2101      	movs	r1, #1
 8005780:	438a      	bics	r2, r1
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	4b23      	ldr	r3, [pc, #140]	; (8005814 <HAL_RCC_OscConfig+0x6a4>)
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <HAL_RCC_OscConfig+0x6a4>)
 800578a:	4923      	ldr	r1, [pc, #140]	; (8005818 <HAL_RCC_OscConfig+0x6a8>)
 800578c:	400a      	ands	r2, r1
 800578e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fe f844 	bl	800381c <HAL_GetTick>
 8005794:	0003      	movs	r3, r0
 8005796:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005798:	e008      	b.n	80057ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800579a:	f7fe f83f 	bl	800381c <HAL_GetTick>
 800579e:	0002      	movs	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e0aa      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2202      	movs	r2, #2
 80057b2:	4013      	ands	r3, r2
 80057b4:	d1f1      	bne.n	800579a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d100      	bne.n	80057c0 <HAL_RCC_OscConfig+0x650>
 80057be:	e09f      	b.n	8005900 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b0c      	cmp	r3, #12
 80057c4:	d100      	bne.n	80057c8 <HAL_RCC_OscConfig+0x658>
 80057c6:	e078      	b.n	80058ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d159      	bne.n	8005884 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d0:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_RCC_OscConfig+0x688>)
 80057d6:	4911      	ldr	r1, [pc, #68]	; (800581c <HAL_RCC_OscConfig+0x6ac>)
 80057d8:	400a      	ands	r2, r1
 80057da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fe f81e 	bl	800381c <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057e4:	e01c      	b.n	8005820 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fe f819 	bl	800381c <HAL_GetTick>
 80057ea:	0002      	movs	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d915      	bls.n	8005820 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e084      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	ffff1fff 	.word	0xffff1fff
 8005800:	fffffeff 	.word	0xfffffeff
 8005804:	40007000 	.word	0x40007000
 8005808:	fffffbff 	.word	0xfffffbff
 800580c:	00001388 	.word	0x00001388
 8005810:	efffffff 	.word	0xefffffff
 8005814:	40010000 	.word	0x40010000
 8005818:	ffffdfff 	.word	0xffffdfff
 800581c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005820:	4b3a      	ldr	r3, [pc, #232]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	049b      	lsls	r3, r3, #18
 8005828:	4013      	ands	r3, r2
 800582a:	d1dc      	bne.n	80057e6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800582c:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a37      	ldr	r2, [pc, #220]	; (8005910 <HAL_RCC_OscConfig+0x7a0>)
 8005832:	4013      	ands	r3, r2
 8005834:	0019      	movs	r1, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005844:	431a      	orrs	r2, r3
 8005846:	4b31      	ldr	r3, [pc, #196]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 8005848:	430a      	orrs	r2, r1
 800584a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b2e      	ldr	r3, [pc, #184]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 8005852:	2180      	movs	r1, #128	; 0x80
 8005854:	0449      	lsls	r1, r1, #17
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585a:	f7fd ffdf 	bl	800381c <HAL_GetTick>
 800585e:	0003      	movs	r3, r0
 8005860:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005864:	f7fd ffda 	bl	800381c <HAL_GetTick>
 8005868:	0002      	movs	r2, r0
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e045      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005876:	4b25      	ldr	r3, [pc, #148]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	2380      	movs	r3, #128	; 0x80
 800587c:	049b      	lsls	r3, r3, #18
 800587e:	4013      	ands	r3, r2
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x6f4>
 8005882:	e03d      	b.n	8005900 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	4b20      	ldr	r3, [pc, #128]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 800588a:	4922      	ldr	r1, [pc, #136]	; (8005914 <HAL_RCC_OscConfig+0x7a4>)
 800588c:	400a      	ands	r2, r1
 800588e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005890:	f7fd ffc4 	bl	800381c <HAL_GetTick>
 8005894:	0003      	movs	r3, r0
 8005896:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589a:	f7fd ffbf 	bl	800381c <HAL_GetTick>
 800589e:	0002      	movs	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e02a      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	049b      	lsls	r3, r3, #18
 80058b4:	4013      	ands	r3, r2
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x72a>
 80058b8:	e022      	b.n	8005900 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e01d      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058c6:	4b11      	ldr	r3, [pc, #68]	; (800590c <HAL_RCC_OscConfig+0x79c>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	025b      	lsls	r3, r3, #9
 80058d2:	401a      	ands	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d10f      	bne.n	80058fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	23f0      	movs	r3, #240	; 0xf0
 80058e0:	039b      	lsls	r3, r3, #14
 80058e2:	401a      	ands	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d107      	bne.n	80058fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	23c0      	movs	r3, #192	; 0xc0
 80058f0:	041b      	lsls	r3, r3, #16
 80058f2:	401a      	ands	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e000      	b.n	8005902 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	0018      	movs	r0, r3
 8005904:	46bd      	mov	sp, r7
 8005906:	b00a      	add	sp, #40	; 0x28
 8005908:	bdb0      	pop	{r4, r5, r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	40021000 	.word	0x40021000
 8005910:	ff02ffff 	.word	0xff02ffff
 8005914:	feffffff 	.word	0xfeffffff

08005918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005918:	b5b0      	push	{r4, r5, r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e128      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4b96      	ldr	r3, [pc, #600]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	4013      	ands	r3, r2
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d91e      	bls.n	8005978 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b93      	ldr	r3, [pc, #588]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2201      	movs	r2, #1
 8005940:	4393      	bics	r3, r2
 8005942:	0019      	movs	r1, r3
 8005944:	4b90      	ldr	r3, [pc, #576]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800594c:	f7fd ff66 	bl	800381c <HAL_GetTick>
 8005950:	0003      	movs	r3, r0
 8005952:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005954:	e009      	b.n	800596a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005956:	f7fd ff61 	bl	800381c <HAL_GetTick>
 800595a:	0002      	movs	r2, r0
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	4a8a      	ldr	r2, [pc, #552]	; (8005b8c <HAL_RCC_ClockConfig+0x274>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e109      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b87      	ldr	r3, [pc, #540]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2201      	movs	r2, #1
 8005970:	4013      	ands	r3, r2
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d1ee      	bne.n	8005956 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2202      	movs	r2, #2
 800597e:	4013      	ands	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005982:	4b83      	ldr	r3, [pc, #524]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	22f0      	movs	r2, #240	; 0xf0
 8005988:	4393      	bics	r3, r2
 800598a:	0019      	movs	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	4b7f      	ldr	r3, [pc, #508]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005992:	430a      	orrs	r2, r1
 8005994:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2201      	movs	r2, #1
 800599c:	4013      	ands	r3, r2
 800599e:	d100      	bne.n	80059a2 <HAL_RCC_ClockConfig+0x8a>
 80059a0:	e089      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059aa:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	2380      	movs	r3, #128	; 0x80
 80059b0:	029b      	lsls	r3, r3, #10
 80059b2:	4013      	ands	r3, r2
 80059b4:	d120      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e0e1      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059c2:	4b73      	ldr	r3, [pc, #460]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	049b      	lsls	r3, r3, #18
 80059ca:	4013      	ands	r3, r2
 80059cc:	d114      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0d5      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d106      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059da:	4b6d      	ldr	r3, [pc, #436]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2204      	movs	r2, #4
 80059e0:	4013      	ands	r3, r2
 80059e2:	d109      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e0ca      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80059e8:	4b69      	ldr	r3, [pc, #420]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4013      	ands	r3, r2
 80059f2:	d101      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0c2      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059f8:	4b65      	ldr	r3, [pc, #404]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	2203      	movs	r2, #3
 80059fe:	4393      	bics	r3, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	4b62      	ldr	r3, [pc, #392]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a0c:	f7fd ff06 	bl	800381c <HAL_GetTick>
 8005a10:	0003      	movs	r3, r0
 8005a12:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d111      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a1c:	e009      	b.n	8005a32 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a1e:	f7fd fefd 	bl	800381c <HAL_GetTick>
 8005a22:	0002      	movs	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	4a58      	ldr	r2, [pc, #352]	; (8005b8c <HAL_RCC_ClockConfig+0x274>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e0a5      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a32:	4b57      	ldr	r3, [pc, #348]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	220c      	movs	r2, #12
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d1ef      	bne.n	8005a1e <HAL_RCC_ClockConfig+0x106>
 8005a3e:	e03a      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d111      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a48:	e009      	b.n	8005a5e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4a:	f7fd fee7 	bl	800381c <HAL_GetTick>
 8005a4e:	0002      	movs	r2, r0
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	4a4d      	ldr	r2, [pc, #308]	; (8005b8c <HAL_RCC_ClockConfig+0x274>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e08f      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a5e:	4b4c      	ldr	r3, [pc, #304]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	220c      	movs	r2, #12
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d1ef      	bne.n	8005a4a <HAL_RCC_ClockConfig+0x132>
 8005a6a:	e024      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d11b      	bne.n	8005aac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a74:	e009      	b.n	8005a8a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a76:	f7fd fed1 	bl	800381c <HAL_GetTick>
 8005a7a:	0002      	movs	r2, r0
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	4a42      	ldr	r2, [pc, #264]	; (8005b8c <HAL_RCC_ClockConfig+0x274>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e079      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a8a:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	220c      	movs	r2, #12
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d1ef      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x15e>
 8005a96:	e00e      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a98:	f7fd fec0 	bl	800381c <HAL_GetTick>
 8005a9c:	0002      	movs	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	4a3a      	ldr	r2, [pc, #232]	; (8005b8c <HAL_RCC_ClockConfig+0x274>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e068      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005aac:	4b38      	ldr	r3, [pc, #224]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	220c      	movs	r2, #12
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	d1f0      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab6:	4b34      	ldr	r3, [pc, #208]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2201      	movs	r2, #1
 8005abc:	4013      	ands	r3, r2
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d21e      	bcs.n	8005b02 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac4:	4b30      	ldr	r3, [pc, #192]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	4393      	bics	r3, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ad6:	f7fd fea1 	bl	800381c <HAL_GetTick>
 8005ada:	0003      	movs	r3, r0
 8005adc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ade:	e009      	b.n	8005af4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae0:	f7fd fe9c 	bl	800381c <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <HAL_RCC_ClockConfig+0x274>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e044      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af4:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <HAL_RCC_ClockConfig+0x270>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2201      	movs	r2, #1
 8005afa:	4013      	ands	r3, r2
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d1ee      	bne.n	8005ae0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2204      	movs	r2, #4
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d009      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b0c:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_RCC_ClockConfig+0x27c>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	0019      	movs	r1, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2208      	movs	r2, #8
 8005b26:	4013      	ands	r3, r2
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b2a:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	4a1a      	ldr	r2, [pc, #104]	; (8005b98 <HAL_RCC_ClockConfig+0x280>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	00da      	lsls	r2, r3, #3
 8005b3a:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b40:	f000 f832 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 8005b44:	0001      	movs	r1, r0
 8005b46:	4b12      	ldr	r3, [pc, #72]	; (8005b90 <HAL_RCC_ClockConfig+0x278>)
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	4013      	ands	r3, r2
 8005b50:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <HAL_RCC_ClockConfig+0x284>)
 8005b52:	5cd3      	ldrb	r3, [r2, r3]
 8005b54:	000a      	movs	r2, r1
 8005b56:	40da      	lsrs	r2, r3
 8005b58:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <HAL_RCC_ClockConfig+0x288>)
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b5c:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <HAL_RCC_ClockConfig+0x28c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	250b      	movs	r5, #11
 8005b62:	197c      	adds	r4, r7, r5
 8005b64:	0018      	movs	r0, r3
 8005b66:	f7fd fe13 	bl	8003790 <HAL_InitTick>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005b6e:	197b      	adds	r3, r7, r5
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005b76:	197b      	adds	r3, r7, r5
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	e000      	b.n	8005b7e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b004      	add	sp, #16
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	40022000 	.word	0x40022000
 8005b8c:	00001388 	.word	0x00001388
 8005b90:	40021000 	.word	0x40021000
 8005b94:	fffff8ff 	.word	0xfffff8ff
 8005b98:	ffffc7ff 	.word	0xffffc7ff
 8005b9c:	08009904 	.word	0x08009904
 8005ba0:	20000000 	.word	0x20000000
 8005ba4:	20000004 	.word	0x20000004

08005ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b08e      	sub	sp, #56	; 0x38
 8005bac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005bae:	4b4c      	ldr	r3, [pc, #304]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d014      	beq.n	8005be8 <HAL_RCC_GetSysClockFreq+0x40>
 8005bbe:	d900      	bls.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x1a>
 8005bc0:	e07b      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x112>
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x24>
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d00b      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bca:	e076      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005bcc:	4b44      	ldr	r3, [pc, #272]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d002      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005bd6:	4b43      	ldr	r3, [pc, #268]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005bda:	e07c      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005bdc:	4b42      	ldr	r3, [pc, #264]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x140>)
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005be0:	e079      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005be2:	4b42      	ldr	r3, [pc, #264]	; (8005cec <HAL_RCC_GetSysClockFreq+0x144>)
 8005be4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005be6:	e076      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bea:	0c9a      	lsrs	r2, r3, #18
 8005bec:	230f      	movs	r3, #15
 8005bee:	401a      	ands	r2, r3
 8005bf0:	4b3f      	ldr	r3, [pc, #252]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x148>)
 8005bf2:	5c9b      	ldrb	r3, [r3, r2]
 8005bf4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	0d9a      	lsrs	r2, r3, #22
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	3301      	adds	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c02:	4b37      	ldr	r3, [pc, #220]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	2380      	movs	r3, #128	; 0x80
 8005c08:	025b      	lsls	r3, r3, #9
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	d01a      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	61bb      	str	r3, [r7, #24]
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
 8005c16:	4a35      	ldr	r2, [pc, #212]	; (8005cec <HAL_RCC_GetSysClockFreq+0x144>)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	69b8      	ldr	r0, [r7, #24]
 8005c1c:	69f9      	ldr	r1, [r7, #28]
 8005c1e:	f7fa fc63 	bl	80004e8 <__aeabi_lmul>
 8005c22:	0002      	movs	r2, r0
 8005c24:	000b      	movs	r3, r1
 8005c26:	0010      	movs	r0, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f7fa fc37 	bl	80004a8 <__aeabi_uldivmod>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	000b      	movs	r3, r1
 8005c3e:	0013      	movs	r3, r2
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
 8005c42:	e037      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c44:	4b26      	ldr	r3, [pc, #152]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2210      	movs	r2, #16
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	d01a      	beq.n	8005c84 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c50:	60bb      	str	r3, [r7, #8]
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c58:	2300      	movs	r3, #0
 8005c5a:	68b8      	ldr	r0, [r7, #8]
 8005c5c:	68f9      	ldr	r1, [r7, #12]
 8005c5e:	f7fa fc43 	bl	80004e8 <__aeabi_lmul>
 8005c62:	0002      	movs	r2, r0
 8005c64:	000b      	movs	r3, r1
 8005c66:	0010      	movs	r0, r2
 8005c68:	0019      	movs	r1, r3
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	603b      	str	r3, [r7, #0]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	607b      	str	r3, [r7, #4]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f7fa fc17 	bl	80004a8 <__aeabi_uldivmod>
 8005c7a:	0002      	movs	r2, r0
 8005c7c:	000b      	movs	r3, r1
 8005c7e:	0013      	movs	r3, r2
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
 8005c82:	e017      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	0018      	movs	r0, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x140>)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	f7fa fc2a 	bl	80004e8 <__aeabi_lmul>
 8005c94:	0002      	movs	r2, r0
 8005c96:	000b      	movs	r3, r1
 8005c98:	0010      	movs	r0, r2
 8005c9a:	0019      	movs	r1, r3
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	001c      	movs	r4, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	001d      	movs	r5, r3
 8005ca4:	0022      	movs	r2, r4
 8005ca6:	002b      	movs	r3, r5
 8005ca8:	f7fa fbfe 	bl	80004a8 <__aeabi_uldivmod>
 8005cac:	0002      	movs	r2, r0
 8005cae:	000b      	movs	r3, r1
 8005cb0:	0013      	movs	r3, r2
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cb8:	e00d      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	0b5b      	lsrs	r3, r3, #13
 8005cc0:	2207      	movs	r2, #7
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	2280      	movs	r2, #128	; 0x80
 8005ccc:	0212      	lsls	r2, r2, #8
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	0013      	movs	r3, r2
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cd4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b00e      	add	sp, #56	; 0x38
 8005cde:	bdb0      	pop	{r4, r5, r7, pc}
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	003d0900 	.word	0x003d0900
 8005ce8:	00f42400 	.word	0x00f42400
 8005cec:	007a1200 	.word	0x007a1200
 8005cf0:	0800991c 	.word	0x0800991c

08005cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf8:	4b02      	ldr	r3, [pc, #8]	; (8005d04 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
}
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	20000000 	.word	0x20000000

08005d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d0c:	f7ff fff2 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8005d10:	0001      	movs	r1, r0
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	2207      	movs	r2, #7
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d1e:	5cd3      	ldrb	r3, [r2, r3]
 8005d20:	40d9      	lsrs	r1, r3
 8005d22:	000b      	movs	r3, r1
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	08009914 	.word	0x08009914

08005d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d38:	f7ff ffdc 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8005d3c:	0001      	movs	r1, r0
 8005d3e:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	0adb      	lsrs	r3, r3, #11
 8005d44:	2207      	movs	r2, #7
 8005d46:	4013      	ands	r3, r2
 8005d48:	4a04      	ldr	r2, [pc, #16]	; (8005d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d4a:	5cd3      	ldrb	r3, [r2, r3]
 8005d4c:	40d9      	lsrs	r1, r3
 8005d4e:	000b      	movs	r3, r1
}
 8005d50:	0018      	movs	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	08009914 	.word	0x08009914

08005d60 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005d68:	2017      	movs	r0, #23
 8005d6a:	183b      	adds	r3, r7, r0
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2220      	movs	r2, #32
 8005d76:	4013      	ands	r3, r2
 8005d78:	d100      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005d7a:	e0c2      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d7c:	4b98      	ldr	r3, [pc, #608]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	055b      	lsls	r3, r3, #21
 8005d84:	4013      	ands	r3, r2
 8005d86:	d109      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d88:	4b95      	ldr	r3, [pc, #596]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8c:	4b94      	ldr	r3, [pc, #592]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d8e:	2180      	movs	r1, #128	; 0x80
 8005d90:	0549      	lsls	r1, r1, #21
 8005d92:	430a      	orrs	r2, r1
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005d96:	183b      	adds	r3, r7, r0
 8005d98:	2201      	movs	r2, #1
 8005d9a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d9c:	4b91      	ldr	r3, [pc, #580]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4013      	ands	r3, r2
 8005da6:	d11a      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005da8:	4b8e      	ldr	r3, [pc, #568]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b8d      	ldr	r3, [pc, #564]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	0049      	lsls	r1, r1, #1
 8005db2:	430a      	orrs	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005db6:	f7fd fd31 	bl	800381c <HAL_GetTick>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc0:	f7fd fd2c 	bl	800381c <HAL_GetTick>
 8005dc4:	0002      	movs	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	; 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e102      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd2:	4b84      	ldr	r3, [pc, #528]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	2380      	movs	r3, #128	; 0x80
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005dde:	4b80      	ldr	r3, [pc, #512]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	23c0      	movs	r3, #192	; 0xc0
 8005de4:	039b      	lsls	r3, r3, #14
 8005de6:	4013      	ands	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	23c0      	movs	r3, #192	; 0xc0
 8005df0:	039b      	lsls	r3, r3, #14
 8005df2:	4013      	ands	r3, r2
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d013      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	23c0      	movs	r3, #192	; 0xc0
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	401a      	ands	r2, r3
 8005e04:	23c0      	movs	r3, #192	; 0xc0
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d10a      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e0c:	4b74      	ldr	r3, [pc, #464]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	029b      	lsls	r3, r3, #10
 8005e14:	401a      	ands	r2, r3
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	029b      	lsls	r3, r3, #10
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d101      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e0da      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005e22:	4b6f      	ldr	r3, [pc, #444]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e26:	23c0      	movs	r3, #192	; 0xc0
 8005e28:	029b      	lsls	r3, r3, #10
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d03b      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	23c0      	movs	r3, #192	; 0xc0
 8005e3a:	029b      	lsls	r3, r3, #10
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d033      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d02e      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005e4e:	4b64      	ldr	r3, [pc, #400]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e52:	4a65      	ldr	r2, [pc, #404]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e58:	4b61      	ldr	r3, [pc, #388]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e5c:	4b60      	ldr	r3, [pc, #384]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	0309      	lsls	r1, r1, #12
 8005e62:	430a      	orrs	r2, r1
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e66:	4b5e      	ldr	r3, [pc, #376]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e6a:	4b5d      	ldr	r3, [pc, #372]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e6c:	495f      	ldr	r1, [pc, #380]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005e6e:	400a      	ands	r2, r1
 8005e70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005e72:	4b5b      	ldr	r3, [pc, #364]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d014      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e82:	f7fd fccb 	bl	800381c <HAL_GetTick>
 8005e86:	0003      	movs	r3, r0
 8005e88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e8a:	e009      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8c:	f7fd fcc6 	bl	800381c <HAL_GetTick>
 8005e90:	0002      	movs	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	4a56      	ldr	r2, [pc, #344]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e09b      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea0:	4b4f      	ldr	r3, [pc, #316]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d0ef      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	23c0      	movs	r3, #192	; 0xc0
 8005eb2:	029b      	lsls	r3, r3, #10
 8005eb4:	401a      	ands	r2, r3
 8005eb6:	23c0      	movs	r3, #192	; 0xc0
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8005ebe:	4b48      	ldr	r3, [pc, #288]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a4c      	ldr	r2, [pc, #304]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	0019      	movs	r1, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	23c0      	movs	r3, #192	; 0xc0
 8005ece:	039b      	lsls	r3, r3, #14
 8005ed0:	401a      	ands	r2, r3
 8005ed2:	4b43      	ldr	r3, [pc, #268]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005eda:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	23c0      	movs	r3, #192	; 0xc0
 8005ee2:	029b      	lsls	r3, r3, #10
 8005ee4:	401a      	ands	r2, r3
 8005ee6:	4b3e      	ldr	r3, [pc, #248]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005eec:	2317      	movs	r3, #23
 8005eee:	18fb      	adds	r3, r7, r3
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d105      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ef6:	4b3a      	ldr	r3, [pc, #232]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efa:	4b39      	ldr	r3, [pc, #228]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005efc:	493e      	ldr	r1, [pc, #248]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005efe:	400a      	ands	r2, r1
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2201      	movs	r2, #1
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f0c:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f10:	2203      	movs	r2, #3
 8005f12:	4393      	bics	r3, r2
 8005f14:	0019      	movs	r1, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2202      	movs	r2, #2
 8005f26:	4013      	ands	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f2a:	4b2d      	ldr	r3, [pc, #180]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2e:	220c      	movs	r2, #12
 8005f30:	4393      	bics	r3, r2
 8005f32:	0019      	movs	r1, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	4b29      	ldr	r3, [pc, #164]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2204      	movs	r2, #4
 8005f44:	4013      	ands	r3, r2
 8005f46:	d009      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f48:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4c:	4a2b      	ldr	r2, [pc, #172]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005f4e:	4013      	ands	r3, r2
 8005f50:	0019      	movs	r1, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2208      	movs	r2, #8
 8005f62:	4013      	ands	r3, r2
 8005f64:	d009      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f66:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6a:	4a25      	ldr	r2, [pc, #148]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	0019      	movs	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f76:	430a      	orrs	r2, r1
 8005f78:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	2380      	movs	r3, #128	; 0x80
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	4013      	ands	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f86:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8a:	4a17      	ldr	r2, [pc, #92]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	0019      	movs	r1, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f96:	430a      	orrs	r2, r1
 8005f98:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2240      	movs	r2, #64	; 0x40
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa8:	4a16      	ldr	r2, [pc, #88]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	0019      	movs	r1, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1a      	ldr	r2, [r3, #32]
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2280      	movs	r2, #128	; 0x80
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005fc2:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	4a10      	ldr	r2, [pc, #64]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	0019      	movs	r1, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	4b03      	ldr	r3, [pc, #12]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b006      	add	sp, #24
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	40007000 	.word	0x40007000
 8005fe8:	fffcffff 	.word	0xfffcffff
 8005fec:	fff7ffff 	.word	0xfff7ffff
 8005ff0:	00001388 	.word	0x00001388
 8005ff4:	ffcfffff 	.word	0xffcfffff
 8005ff8:	efffffff 	.word	0xefffffff
 8005ffc:	fffff3ff 	.word	0xfffff3ff
 8006000:	ffffcfff 	.word	0xffffcfff
 8006004:	fbffffff 	.word	0xfbffffff
 8006008:	fff3ffff 	.word	0xfff3ffff

0800600c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e044      	b.n	80060a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006022:	2b00      	cmp	r3, #0
 8006024:	d107      	bne.n	8006036 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2274      	movs	r2, #116	; 0x74
 800602a:	2100      	movs	r1, #0
 800602c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	0018      	movs	r0, r3
 8006032:	f7fd fa45 	bl	80034c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2224      	movs	r2, #36	; 0x24
 800603a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2101      	movs	r1, #1
 8006048:	438a      	bics	r2, r1
 800604a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0018      	movs	r0, r3
 8006050:	f000 f8d8 	bl	8006204 <UART_SetConfig>
 8006054:	0003      	movs	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e024      	b.n	80060a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 fb6b 	bl	8006744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	490d      	ldr	r1, [pc, #52]	; (80060b0 <HAL_UART_Init+0xa4>)
 800607a:	400a      	ands	r2, r1
 800607c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	212a      	movs	r1, #42	; 0x2a
 800608a:	438a      	bics	r2, r1
 800608c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2101      	movs	r1, #1
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f000 fc03 	bl	80068ac <UART_CheckIdleState>
 80060a6:	0003      	movs	r3, r0
}
 80060a8:	0018      	movs	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	ffffb7ff 	.word	0xffffb7ff

080060b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	; 0x28
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	1dbb      	adds	r3, r7, #6
 80060c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d000      	beq.n	80060ce <HAL_UART_Transmit+0x1a>
 80060cc:	e095      	b.n	80061fa <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_UART_Transmit+0x28>
 80060d4:	1dbb      	adds	r3, r7, #6
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e08d      	b.n	80061fc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	015b      	lsls	r3, r3, #5
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d109      	bne.n	8006100 <HAL_UART_Transmit+0x4c>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d105      	bne.n	8006100 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2201      	movs	r2, #1
 80060f8:	4013      	ands	r3, r2
 80060fa:	d001      	beq.n	8006100 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e07d      	b.n	80061fc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2274      	movs	r2, #116	; 0x74
 8006104:	5c9b      	ldrb	r3, [r3, r2]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_UART_Transmit+0x5a>
 800610a:	2302      	movs	r3, #2
 800610c:	e076      	b.n	80061fc <HAL_UART_Transmit+0x148>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2274      	movs	r2, #116	; 0x74
 8006112:	2101      	movs	r1, #1
 8006114:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2280      	movs	r2, #128	; 0x80
 800611a:	2100      	movs	r1, #0
 800611c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2221      	movs	r2, #33	; 0x21
 8006122:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006124:	f7fd fb7a 	bl	800381c <HAL_GetTick>
 8006128:	0003      	movs	r3, r0
 800612a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1dba      	adds	r2, r7, #6
 8006130:	2150      	movs	r1, #80	; 0x50
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1dba      	adds	r2, r7, #6
 800613a:	2152      	movs	r1, #82	; 0x52
 800613c:	8812      	ldrh	r2, [r2, #0]
 800613e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	015b      	lsls	r3, r3, #5
 8006148:	429a      	cmp	r2, r3
 800614a:	d108      	bne.n	800615e <HAL_UART_Transmit+0xaa>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d104      	bne.n	800615e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	e003      	b.n	8006166 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2274      	movs	r2, #116	; 0x74
 800616a:	2100      	movs	r1, #0
 800616c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800616e:	e02c      	b.n	80061ca <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	0013      	movs	r3, r2
 800617a:	2200      	movs	r2, #0
 800617c:	2180      	movs	r1, #128	; 0x80
 800617e:	f000 fbdd 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 8006182:	1e03      	subs	r3, r0, #0
 8006184:	d001      	beq.n	800618a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e038      	b.n	80061fc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	001a      	movs	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	05d2      	lsls	r2, r2, #23
 800619c:	0dd2      	lsrs	r2, r2, #23
 800619e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	3302      	adds	r3, #2
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e007      	b.n	80061b8 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	781a      	ldrb	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3301      	adds	r3, #1
 80061b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2252      	movs	r2, #82	; 0x52
 80061bc:	5a9b      	ldrh	r3, [r3, r2]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b299      	uxth	r1, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2252      	movs	r2, #82	; 0x52
 80061c8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2252      	movs	r2, #82	; 0x52
 80061ce:	5a9b      	ldrh	r3, [r3, r2]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1cc      	bne.n	8006170 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	0013      	movs	r3, r2
 80061e0:	2200      	movs	r2, #0
 80061e2:	2140      	movs	r1, #64	; 0x40
 80061e4:	f000 fbaa 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 80061e8:	1e03      	subs	r3, r0, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e005      	b.n	80061fc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e000      	b.n	80061fc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80061fa:	2302      	movs	r3, #2
  }
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b008      	add	sp, #32
 8006202:	bd80      	pop	{r7, pc}

08006204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006204:	b5b0      	push	{r4, r5, r7, lr}
 8006206:	b08e      	sub	sp, #56	; 0x38
 8006208:	af00      	add	r7, sp, #0
 800620a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800620c:	231a      	movs	r3, #26
 800620e:	2218      	movs	r2, #24
 8006210:	189b      	adds	r3, r3, r2
 8006212:	19db      	adds	r3, r3, r7
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	431a      	orrs	r2, r3
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	431a      	orrs	r2, r3
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4313      	orrs	r3, r2
 800622e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4ac3      	ldr	r2, [pc, #780]	; (8006544 <UART_SetConfig+0x340>)
 8006238:	4013      	ands	r3, r2
 800623a:	0019      	movs	r1, r3
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006242:	430a      	orrs	r2, r1
 8006244:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4abe      	ldr	r2, [pc, #760]	; (8006548 <UART_SetConfig+0x344>)
 800624e:	4013      	ands	r3, r2
 8006250:	0019      	movs	r1, r3
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4ab8      	ldr	r2, [pc, #736]	; (800654c <UART_SetConfig+0x348>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006274:	4313      	orrs	r3, r2
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4ab4      	ldr	r2, [pc, #720]	; (8006550 <UART_SetConfig+0x34c>)
 8006280:	4013      	ands	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4ab0      	ldr	r2, [pc, #704]	; (8006554 <UART_SetConfig+0x350>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d131      	bne.n	80062fc <UART_SetConfig+0xf8>
 8006298:	4baf      	ldr	r3, [pc, #700]	; (8006558 <UART_SetConfig+0x354>)
 800629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629c:	2203      	movs	r2, #3
 800629e:	4013      	ands	r3, r2
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d01d      	beq.n	80062e0 <UART_SetConfig+0xdc>
 80062a4:	d823      	bhi.n	80062ee <UART_SetConfig+0xea>
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d00c      	beq.n	80062c4 <UART_SetConfig+0xc0>
 80062aa:	d820      	bhi.n	80062ee <UART_SetConfig+0xea>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <UART_SetConfig+0xb2>
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d00e      	beq.n	80062d2 <UART_SetConfig+0xce>
 80062b4:	e01b      	b.n	80062ee <UART_SetConfig+0xea>
 80062b6:	231b      	movs	r3, #27
 80062b8:	2218      	movs	r2, #24
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	19db      	adds	r3, r3, r7
 80062be:	2201      	movs	r2, #1
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e0b4      	b.n	800642e <UART_SetConfig+0x22a>
 80062c4:	231b      	movs	r3, #27
 80062c6:	2218      	movs	r2, #24
 80062c8:	189b      	adds	r3, r3, r2
 80062ca:	19db      	adds	r3, r3, r7
 80062cc:	2202      	movs	r2, #2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e0ad      	b.n	800642e <UART_SetConfig+0x22a>
 80062d2:	231b      	movs	r3, #27
 80062d4:	2218      	movs	r2, #24
 80062d6:	189b      	adds	r3, r3, r2
 80062d8:	19db      	adds	r3, r3, r7
 80062da:	2204      	movs	r2, #4
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	e0a6      	b.n	800642e <UART_SetConfig+0x22a>
 80062e0:	231b      	movs	r3, #27
 80062e2:	2218      	movs	r2, #24
 80062e4:	189b      	adds	r3, r3, r2
 80062e6:	19db      	adds	r3, r3, r7
 80062e8:	2208      	movs	r2, #8
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e09f      	b.n	800642e <UART_SetConfig+0x22a>
 80062ee:	231b      	movs	r3, #27
 80062f0:	2218      	movs	r2, #24
 80062f2:	189b      	adds	r3, r3, r2
 80062f4:	19db      	adds	r3, r3, r7
 80062f6:	2210      	movs	r2, #16
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e098      	b.n	800642e <UART_SetConfig+0x22a>
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a96      	ldr	r2, [pc, #600]	; (800655c <UART_SetConfig+0x358>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d131      	bne.n	800636a <UART_SetConfig+0x166>
 8006306:	4b94      	ldr	r3, [pc, #592]	; (8006558 <UART_SetConfig+0x354>)
 8006308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630a:	220c      	movs	r2, #12
 800630c:	4013      	ands	r3, r2
 800630e:	2b0c      	cmp	r3, #12
 8006310:	d01d      	beq.n	800634e <UART_SetConfig+0x14a>
 8006312:	d823      	bhi.n	800635c <UART_SetConfig+0x158>
 8006314:	2b08      	cmp	r3, #8
 8006316:	d00c      	beq.n	8006332 <UART_SetConfig+0x12e>
 8006318:	d820      	bhi.n	800635c <UART_SetConfig+0x158>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <UART_SetConfig+0x120>
 800631e:	2b04      	cmp	r3, #4
 8006320:	d00e      	beq.n	8006340 <UART_SetConfig+0x13c>
 8006322:	e01b      	b.n	800635c <UART_SetConfig+0x158>
 8006324:	231b      	movs	r3, #27
 8006326:	2218      	movs	r2, #24
 8006328:	189b      	adds	r3, r3, r2
 800632a:	19db      	adds	r3, r3, r7
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e07d      	b.n	800642e <UART_SetConfig+0x22a>
 8006332:	231b      	movs	r3, #27
 8006334:	2218      	movs	r2, #24
 8006336:	189b      	adds	r3, r3, r2
 8006338:	19db      	adds	r3, r3, r7
 800633a:	2202      	movs	r2, #2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	e076      	b.n	800642e <UART_SetConfig+0x22a>
 8006340:	231b      	movs	r3, #27
 8006342:	2218      	movs	r2, #24
 8006344:	189b      	adds	r3, r3, r2
 8006346:	19db      	adds	r3, r3, r7
 8006348:	2204      	movs	r2, #4
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	e06f      	b.n	800642e <UART_SetConfig+0x22a>
 800634e:	231b      	movs	r3, #27
 8006350:	2218      	movs	r2, #24
 8006352:	189b      	adds	r3, r3, r2
 8006354:	19db      	adds	r3, r3, r7
 8006356:	2208      	movs	r2, #8
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	e068      	b.n	800642e <UART_SetConfig+0x22a>
 800635c:	231b      	movs	r3, #27
 800635e:	2218      	movs	r2, #24
 8006360:	189b      	adds	r3, r3, r2
 8006362:	19db      	adds	r3, r3, r7
 8006364:	2210      	movs	r2, #16
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	e061      	b.n	800642e <UART_SetConfig+0x22a>
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a7c      	ldr	r2, [pc, #496]	; (8006560 <UART_SetConfig+0x35c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d106      	bne.n	8006382 <UART_SetConfig+0x17e>
 8006374:	231b      	movs	r3, #27
 8006376:	2218      	movs	r2, #24
 8006378:	189b      	adds	r3, r3, r2
 800637a:	19db      	adds	r3, r3, r7
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	e055      	b.n	800642e <UART_SetConfig+0x22a>
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a77      	ldr	r2, [pc, #476]	; (8006564 <UART_SetConfig+0x360>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d106      	bne.n	800639a <UART_SetConfig+0x196>
 800638c:	231b      	movs	r3, #27
 800638e:	2218      	movs	r2, #24
 8006390:	189b      	adds	r3, r3, r2
 8006392:	19db      	adds	r3, r3, r7
 8006394:	2200      	movs	r2, #0
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e049      	b.n	800642e <UART_SetConfig+0x22a>
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a6b      	ldr	r2, [pc, #428]	; (800654c <UART_SetConfig+0x348>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d13e      	bne.n	8006422 <UART_SetConfig+0x21e>
 80063a4:	4b6c      	ldr	r3, [pc, #432]	; (8006558 <UART_SetConfig+0x354>)
 80063a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063a8:	23c0      	movs	r3, #192	; 0xc0
 80063aa:	011b      	lsls	r3, r3, #4
 80063ac:	4013      	ands	r3, r2
 80063ae:	22c0      	movs	r2, #192	; 0xc0
 80063b0:	0112      	lsls	r2, r2, #4
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d027      	beq.n	8006406 <UART_SetConfig+0x202>
 80063b6:	22c0      	movs	r2, #192	; 0xc0
 80063b8:	0112      	lsls	r2, r2, #4
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d82a      	bhi.n	8006414 <UART_SetConfig+0x210>
 80063be:	2280      	movs	r2, #128	; 0x80
 80063c0:	0112      	lsls	r2, r2, #4
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d011      	beq.n	80063ea <UART_SetConfig+0x1e6>
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	0112      	lsls	r2, r2, #4
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d822      	bhi.n	8006414 <UART_SetConfig+0x210>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <UART_SetConfig+0x1d8>
 80063d2:	2280      	movs	r2, #128	; 0x80
 80063d4:	00d2      	lsls	r2, r2, #3
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <UART_SetConfig+0x1f4>
 80063da:	e01b      	b.n	8006414 <UART_SetConfig+0x210>
 80063dc:	231b      	movs	r3, #27
 80063de:	2218      	movs	r2, #24
 80063e0:	189b      	adds	r3, r3, r2
 80063e2:	19db      	adds	r3, r3, r7
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	e021      	b.n	800642e <UART_SetConfig+0x22a>
 80063ea:	231b      	movs	r3, #27
 80063ec:	2218      	movs	r2, #24
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	19db      	adds	r3, r3, r7
 80063f2:	2202      	movs	r2, #2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e01a      	b.n	800642e <UART_SetConfig+0x22a>
 80063f8:	231b      	movs	r3, #27
 80063fa:	2218      	movs	r2, #24
 80063fc:	189b      	adds	r3, r3, r2
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	2204      	movs	r2, #4
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e013      	b.n	800642e <UART_SetConfig+0x22a>
 8006406:	231b      	movs	r3, #27
 8006408:	2218      	movs	r2, #24
 800640a:	189b      	adds	r3, r3, r2
 800640c:	19db      	adds	r3, r3, r7
 800640e:	2208      	movs	r2, #8
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e00c      	b.n	800642e <UART_SetConfig+0x22a>
 8006414:	231b      	movs	r3, #27
 8006416:	2218      	movs	r2, #24
 8006418:	189b      	adds	r3, r3, r2
 800641a:	19db      	adds	r3, r3, r7
 800641c:	2210      	movs	r2, #16
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e005      	b.n	800642e <UART_SetConfig+0x22a>
 8006422:	231b      	movs	r3, #27
 8006424:	2218      	movs	r2, #24
 8006426:	189b      	adds	r3, r3, r2
 8006428:	19db      	adds	r3, r3, r7
 800642a:	2210      	movs	r2, #16
 800642c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a46      	ldr	r2, [pc, #280]	; (800654c <UART_SetConfig+0x348>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d000      	beq.n	800643a <UART_SetConfig+0x236>
 8006438:	e09a      	b.n	8006570 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800643a:	231b      	movs	r3, #27
 800643c:	2218      	movs	r2, #24
 800643e:	189b      	adds	r3, r3, r2
 8006440:	19db      	adds	r3, r3, r7
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b08      	cmp	r3, #8
 8006446:	d01d      	beq.n	8006484 <UART_SetConfig+0x280>
 8006448:	dc20      	bgt.n	800648c <UART_SetConfig+0x288>
 800644a:	2b04      	cmp	r3, #4
 800644c:	d015      	beq.n	800647a <UART_SetConfig+0x276>
 800644e:	dc1d      	bgt.n	800648c <UART_SetConfig+0x288>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <UART_SetConfig+0x256>
 8006454:	2b02      	cmp	r3, #2
 8006456:	d005      	beq.n	8006464 <UART_SetConfig+0x260>
 8006458:	e018      	b.n	800648c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800645a:	f7ff fc55 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 800645e:	0003      	movs	r3, r0
 8006460:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006462:	e01c      	b.n	800649e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006464:	4b3c      	ldr	r3, [pc, #240]	; (8006558 <UART_SetConfig+0x354>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2210      	movs	r2, #16
 800646a:	4013      	ands	r3, r2
 800646c:	d002      	beq.n	8006474 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800646e:	4b3e      	ldr	r3, [pc, #248]	; (8006568 <UART_SetConfig+0x364>)
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006472:	e014      	b.n	800649e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006474:	4b3d      	ldr	r3, [pc, #244]	; (800656c <UART_SetConfig+0x368>)
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006478:	e011      	b.n	800649e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647a:	f7ff fb95 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 800647e:	0003      	movs	r3, r0
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006482:	e00c      	b.n	800649e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006484:	2380      	movs	r3, #128	; 0x80
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800648a:	e008      	b.n	800649e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006490:	231a      	movs	r3, #26
 8006492:	2218      	movs	r2, #24
 8006494:	189b      	adds	r3, r3, r2
 8006496:	19db      	adds	r3, r3, r7
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
        break;
 800649c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d100      	bne.n	80064a6 <UART_SetConfig+0x2a2>
 80064a4:	e134      	b.n	8006710 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	0013      	movs	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d305      	bcc.n	80064c2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064be:	429a      	cmp	r2, r3
 80064c0:	d906      	bls.n	80064d0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80064c2:	231a      	movs	r3, #26
 80064c4:	2218      	movs	r2, #24
 80064c6:	189b      	adds	r3, r3, r2
 80064c8:	19db      	adds	r3, r3, r7
 80064ca:	2201      	movs	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e11f      	b.n	8006710 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	6939      	ldr	r1, [r7, #16]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	000b      	movs	r3, r1
 80064de:	0e1b      	lsrs	r3, r3, #24
 80064e0:	0010      	movs	r0, r2
 80064e2:	0205      	lsls	r5, r0, #8
 80064e4:	431d      	orrs	r5, r3
 80064e6:	000b      	movs	r3, r1
 80064e8:	021c      	lsls	r4, r3, #8
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	60bb      	str	r3, [r7, #8]
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68b8      	ldr	r0, [r7, #8]
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	1900      	adds	r0, r0, r4
 80064fc:	4169      	adcs	r1, r5
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f7f9 ffcc 	bl	80004a8 <__aeabi_uldivmod>
 8006510:	0002      	movs	r2, r0
 8006512:	000b      	movs	r3, r1
 8006514:	0013      	movs	r3, r2
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651a:	23c0      	movs	r3, #192	; 0xc0
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	429a      	cmp	r2, r3
 8006520:	d309      	bcc.n	8006536 <UART_SetConfig+0x332>
 8006522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	035b      	lsls	r3, r3, #13
 8006528:	429a      	cmp	r2, r3
 800652a:	d204      	bcs.n	8006536 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	e0ec      	b.n	8006710 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006536:	231a      	movs	r3, #26
 8006538:	2218      	movs	r2, #24
 800653a:	189b      	adds	r3, r3, r2
 800653c:	19db      	adds	r3, r3, r7
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	e0e5      	b.n	8006710 <UART_SetConfig+0x50c>
 8006544:	efff69f3 	.word	0xefff69f3
 8006548:	ffffcfff 	.word	0xffffcfff
 800654c:	40004800 	.word	0x40004800
 8006550:	fffff4ff 	.word	0xfffff4ff
 8006554:	40013800 	.word	0x40013800
 8006558:	40021000 	.word	0x40021000
 800655c:	40004400 	.word	0x40004400
 8006560:	40004c00 	.word	0x40004c00
 8006564:	40005000 	.word	0x40005000
 8006568:	003d0900 	.word	0x003d0900
 800656c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	2380      	movs	r3, #128	; 0x80
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	429a      	cmp	r2, r3
 800657a:	d000      	beq.n	800657e <UART_SetConfig+0x37a>
 800657c:	e071      	b.n	8006662 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800657e:	231b      	movs	r3, #27
 8006580:	2218      	movs	r2, #24
 8006582:	189b      	adds	r3, r3, r2
 8006584:	19db      	adds	r3, r3, r7
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d822      	bhi.n	80065d2 <UART_SetConfig+0x3ce>
 800658c:	009a      	lsls	r2, r3, #2
 800658e:	4b68      	ldr	r3, [pc, #416]	; (8006730 <UART_SetConfig+0x52c>)
 8006590:	18d3      	adds	r3, r2, r3
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006596:	f7ff fbb7 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 800659a:	0003      	movs	r3, r0
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800659e:	e021      	b.n	80065e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a0:	f7ff fbc8 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
 80065a4:	0003      	movs	r3, r0
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a8:	e01c      	b.n	80065e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065aa:	4b62      	ldr	r3, [pc, #392]	; (8006734 <UART_SetConfig+0x530>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2210      	movs	r2, #16
 80065b0:	4013      	ands	r3, r2
 80065b2:	d002      	beq.n	80065ba <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80065b4:	4b60      	ldr	r3, [pc, #384]	; (8006738 <UART_SetConfig+0x534>)
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065b8:	e014      	b.n	80065e4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80065ba:	4b60      	ldr	r3, [pc, #384]	; (800673c <UART_SetConfig+0x538>)
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065be:	e011      	b.n	80065e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c0:	f7ff faf2 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 80065c4:	0003      	movs	r3, r0
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065c8:	e00c      	b.n	80065e4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ca:	2380      	movs	r3, #128	; 0x80
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065d0:	e008      	b.n	80065e4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065d6:	231a      	movs	r3, #26
 80065d8:	2218      	movs	r2, #24
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	19db      	adds	r3, r3, r7
 80065de:	2201      	movs	r2, #1
 80065e0:	701a      	strb	r2, [r3, #0]
        break;
 80065e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d100      	bne.n	80065ec <UART_SetConfig+0x3e8>
 80065ea:	e091      	b.n	8006710 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	005a      	lsls	r2, r3, #1
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	18d2      	adds	r2, r2, r3
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	0019      	movs	r1, r3
 80065fe:	0010      	movs	r0, r2
 8006600:	f7f9 fd9e 	bl	8000140 <__udivsi3>
 8006604:	0003      	movs	r3, r0
 8006606:	b29b      	uxth	r3, r3
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b0f      	cmp	r3, #15
 800660e:	d921      	bls.n	8006654 <UART_SetConfig+0x450>
 8006610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	025b      	lsls	r3, r3, #9
 8006616:	429a      	cmp	r2, r3
 8006618:	d21c      	bcs.n	8006654 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	b29a      	uxth	r2, r3
 800661e:	200e      	movs	r0, #14
 8006620:	2418      	movs	r4, #24
 8006622:	1903      	adds	r3, r0, r4
 8006624:	19db      	adds	r3, r3, r7
 8006626:	210f      	movs	r1, #15
 8006628:	438a      	bics	r2, r1
 800662a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	b29b      	uxth	r3, r3
 8006632:	2207      	movs	r2, #7
 8006634:	4013      	ands	r3, r2
 8006636:	b299      	uxth	r1, r3
 8006638:	1903      	adds	r3, r0, r4
 800663a:	19db      	adds	r3, r3, r7
 800663c:	1902      	adds	r2, r0, r4
 800663e:	19d2      	adds	r2, r2, r7
 8006640:	8812      	ldrh	r2, [r2, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	1902      	adds	r2, r0, r4
 800664c:	19d2      	adds	r2, r2, r7
 800664e:	8812      	ldrh	r2, [r2, #0]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	e05d      	b.n	8006710 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006654:	231a      	movs	r3, #26
 8006656:	2218      	movs	r2, #24
 8006658:	189b      	adds	r3, r3, r2
 800665a:	19db      	adds	r3, r3, r7
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e056      	b.n	8006710 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006662:	231b      	movs	r3, #27
 8006664:	2218      	movs	r2, #24
 8006666:	189b      	adds	r3, r3, r2
 8006668:	19db      	adds	r3, r3, r7
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d822      	bhi.n	80066b6 <UART_SetConfig+0x4b2>
 8006670:	009a      	lsls	r2, r3, #2
 8006672:	4b33      	ldr	r3, [pc, #204]	; (8006740 <UART_SetConfig+0x53c>)
 8006674:	18d3      	adds	r3, r2, r3
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667a:	f7ff fb45 	bl	8005d08 <HAL_RCC_GetPCLK1Freq>
 800667e:	0003      	movs	r3, r0
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006682:	e021      	b.n	80066c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7ff fb56 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
 8006688:	0003      	movs	r3, r0
 800668a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800668c:	e01c      	b.n	80066c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800668e:	4b29      	ldr	r3, [pc, #164]	; (8006734 <UART_SetConfig+0x530>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2210      	movs	r2, #16
 8006694:	4013      	ands	r3, r2
 8006696:	d002      	beq.n	800669e <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006698:	4b27      	ldr	r3, [pc, #156]	; (8006738 <UART_SetConfig+0x534>)
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800669c:	e014      	b.n	80066c8 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800669e:	4b27      	ldr	r3, [pc, #156]	; (800673c <UART_SetConfig+0x538>)
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066a2:	e011      	b.n	80066c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a4:	f7ff fa80 	bl	8005ba8 <HAL_RCC_GetSysClockFreq>
 80066a8:	0003      	movs	r3, r0
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066ac:	e00c      	b.n	80066c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066b4:	e008      	b.n	80066c8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80066ba:	231a      	movs	r3, #26
 80066bc:	2218      	movs	r2, #24
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	19db      	adds	r3, r3, r7
 80066c2:	2201      	movs	r2, #1
 80066c4:	701a      	strb	r2, [r3, #0]
        break;
 80066c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d020      	beq.n	8006710 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	085a      	lsrs	r2, r3, #1
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	18d2      	adds	r2, r2, r3
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	0019      	movs	r1, r3
 80066de:	0010      	movs	r0, r2
 80066e0:	f7f9 fd2e 	bl	8000140 <__udivsi3>
 80066e4:	0003      	movs	r3, r0
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	2b0f      	cmp	r3, #15
 80066ee:	d909      	bls.n	8006704 <UART_SetConfig+0x500>
 80066f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	025b      	lsls	r3, r3, #9
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d204      	bcs.n	8006704 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006700:	60da      	str	r2, [r3, #12]
 8006702:	e005      	b.n	8006710 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006704:	231a      	movs	r3, #26
 8006706:	2218      	movs	r2, #24
 8006708:	189b      	adds	r3, r3, r2
 800670a:	19db      	adds	r3, r3, r7
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2200      	movs	r2, #0
 8006714:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2200      	movs	r2, #0
 800671a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800671c:	231a      	movs	r3, #26
 800671e:	2218      	movs	r2, #24
 8006720:	189b      	adds	r3, r3, r2
 8006722:	19db      	adds	r3, r3, r7
 8006724:	781b      	ldrb	r3, [r3, #0]
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b00e      	add	sp, #56	; 0x38
 800672c:	bdb0      	pop	{r4, r5, r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	08009928 	.word	0x08009928
 8006734:	40021000 	.word	0x40021000
 8006738:	003d0900 	.word	0x003d0900
 800673c:	00f42400 	.word	0x00f42400
 8006740:	0800994c 	.word	0x0800994c

08006744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	2201      	movs	r2, #1
 8006752:	4013      	ands	r3, r2
 8006754:	d00b      	beq.n	800676e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4a4a      	ldr	r2, [pc, #296]	; (8006888 <UART_AdvFeatureConfig+0x144>)
 800675e:	4013      	ands	r3, r2
 8006760:	0019      	movs	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2202      	movs	r2, #2
 8006774:	4013      	ands	r3, r2
 8006776:	d00b      	beq.n	8006790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	4a43      	ldr	r2, [pc, #268]	; (800688c <UART_AdvFeatureConfig+0x148>)
 8006780:	4013      	ands	r3, r2
 8006782:	0019      	movs	r1, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2204      	movs	r2, #4
 8006796:	4013      	ands	r3, r2
 8006798:	d00b      	beq.n	80067b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	4a3b      	ldr	r2, [pc, #236]	; (8006890 <UART_AdvFeatureConfig+0x14c>)
 80067a2:	4013      	ands	r3, r2
 80067a4:	0019      	movs	r1, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	2208      	movs	r2, #8
 80067b8:	4013      	ands	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4a34      	ldr	r2, [pc, #208]	; (8006894 <UART_AdvFeatureConfig+0x150>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	0019      	movs	r1, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	2210      	movs	r2, #16
 80067da:	4013      	ands	r3, r2
 80067dc:	d00b      	beq.n	80067f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	4a2c      	ldr	r2, [pc, #176]	; (8006898 <UART_AdvFeatureConfig+0x154>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	0019      	movs	r1, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	2220      	movs	r2, #32
 80067fc:	4013      	ands	r3, r2
 80067fe:	d00b      	beq.n	8006818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	4a25      	ldr	r2, [pc, #148]	; (800689c <UART_AdvFeatureConfig+0x158>)
 8006808:	4013      	ands	r3, r2
 800680a:	0019      	movs	r1, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	2240      	movs	r2, #64	; 0x40
 800681e:	4013      	ands	r3, r2
 8006820:	d01d      	beq.n	800685e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	4a1d      	ldr	r2, [pc, #116]	; (80068a0 <UART_AdvFeatureConfig+0x15c>)
 800682a:	4013      	ands	r3, r2
 800682c:	0019      	movs	r1, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	035b      	lsls	r3, r3, #13
 8006842:	429a      	cmp	r2, r3
 8006844:	d10b      	bne.n	800685e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4a15      	ldr	r2, [pc, #84]	; (80068a4 <UART_AdvFeatureConfig+0x160>)
 800684e:	4013      	ands	r3, r2
 8006850:	0019      	movs	r1, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	2280      	movs	r2, #128	; 0x80
 8006864:	4013      	ands	r3, r2
 8006866:	d00b      	beq.n	8006880 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	4a0e      	ldr	r2, [pc, #56]	; (80068a8 <UART_AdvFeatureConfig+0x164>)
 8006870:	4013      	ands	r3, r2
 8006872:	0019      	movs	r1, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }
}
 8006880:	46c0      	nop			; (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b002      	add	sp, #8
 8006886:	bd80      	pop	{r7, pc}
 8006888:	fffdffff 	.word	0xfffdffff
 800688c:	fffeffff 	.word	0xfffeffff
 8006890:	fffbffff 	.word	0xfffbffff
 8006894:	ffff7fff 	.word	0xffff7fff
 8006898:	ffffefff 	.word	0xffffefff
 800689c:	ffffdfff 	.word	0xffffdfff
 80068a0:	ffefffff 	.word	0xffefffff
 80068a4:	ff9fffff 	.word	0xff9fffff
 80068a8:	fff7ffff 	.word	0xfff7ffff

080068ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2280      	movs	r2, #128	; 0x80
 80068b8:	2100      	movs	r1, #0
 80068ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068bc:	f7fc ffae 	bl	800381c <HAL_GetTick>
 80068c0:	0003      	movs	r3, r0
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2208      	movs	r2, #8
 80068cc:	4013      	ands	r3, r2
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d10c      	bne.n	80068ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2280      	movs	r2, #128	; 0x80
 80068d6:	0391      	lsls	r1, r2, #14
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <UART_CheckIdleState+0x8c>)
 80068dc:	9200      	str	r2, [sp, #0]
 80068de:	2200      	movs	r2, #0
 80068e0:	f000 f82c 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 80068e4:	1e03      	subs	r3, r0, #0
 80068e6:	d001      	beq.n	80068ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e021      	b.n	8006930 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2204      	movs	r2, #4
 80068f4:	4013      	ands	r3, r2
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d10c      	bne.n	8006914 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2280      	movs	r2, #128	; 0x80
 80068fe:	03d1      	lsls	r1, r2, #15
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	4a0d      	ldr	r2, [pc, #52]	; (8006938 <UART_CheckIdleState+0x8c>)
 8006904:	9200      	str	r2, [sp, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	f000 f818 	bl	800693c <UART_WaitOnFlagUntilTimeout>
 800690c:	1e03      	subs	r3, r0, #0
 800690e:	d001      	beq.n	8006914 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e00d      	b.n	8006930 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2274      	movs	r2, #116	; 0x74
 800692a:	2100      	movs	r1, #0
 800692c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	0018      	movs	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	b004      	add	sp, #16
 8006936:	bd80      	pop	{r7, pc}
 8006938:	01ffffff 	.word	0x01ffffff

0800693c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b094      	sub	sp, #80	; 0x50
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	1dfb      	adds	r3, r7, #7
 800694a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694c:	e0a3      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006950:	3301      	adds	r3, #1
 8006952:	d100      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006954:	e09f      	b.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fc ff61 	bl	800381c <HAL_GetTick>
 800695a:	0002      	movs	r2, r0
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <UART_WaitOnFlagUntilTimeout+0x30>
 8006966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006968:	2b00      	cmp	r3, #0
 800696a:	d13d      	bne.n	80069e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696c:	f3ef 8310 	mrs	r3, PRIMASK
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006974:	647b      	str	r3, [r7, #68]	; 0x44
 8006976:	2301      	movs	r3, #1
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	f383 8810 	msr	PRIMASK, r3
}
 8006980:	46c0      	nop			; (mov r8, r8)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	494c      	ldr	r1, [pc, #304]	; (8006ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800698e:	400a      	ands	r2, r1
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006994:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f383 8810 	msr	PRIMASK, r3
}
 800699c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699e:	f3ef 8310 	mrs	r3, PRIMASK
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80069a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a6:	643b      	str	r3, [r7, #64]	; 0x40
 80069a8:	2301      	movs	r3, #1
 80069aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	f383 8810 	msr	PRIMASK, r3
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2101      	movs	r1, #1
 80069c0:	438a      	bics	r2, r1
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ca:	f383 8810 	msr	PRIMASK, r3
}
 80069ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2220      	movs	r2, #32
 80069da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2274      	movs	r2, #116	; 0x74
 80069e0:	2100      	movs	r1, #0
 80069e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e067      	b.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2204      	movs	r2, #4
 80069f0:	4013      	ands	r3, r2
 80069f2:	d050      	beq.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	2380      	movs	r3, #128	; 0x80
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	401a      	ands	r2, r3
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d146      	bne.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	0112      	lsls	r2, r2, #4
 8006a10:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a12:	f3ef 8310 	mrs	r3, PRIMASK
 8006a16:	613b      	str	r3, [r7, #16]
  return(result);
 8006a18:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f383 8810 	msr	PRIMASK, r3
}
 8006a26:	46c0      	nop			; (mov r8, r8)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4923      	ldr	r1, [pc, #140]	; (8006ac0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006a34:	400a      	ands	r2, r1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f383 8810 	msr	PRIMASK, r3
}
 8006a42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a44:	f3ef 8310 	mrs	r3, PRIMASK
 8006a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a4e:	2301      	movs	r3, #1
 8006a50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f383 8810 	msr	PRIMASK, r3
}
 8006a58:	46c0      	nop			; (mov r8, r8)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2101      	movs	r1, #1
 8006a66:	438a      	bics	r2, r1
 8006a68:	609a      	str	r2, [r3, #8]
 8006a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	f383 8810 	msr	PRIMASK, r3
}
 8006a74:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2280      	movs	r2, #128	; 0x80
 8006a86:	2120      	movs	r1, #32
 8006a88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2274      	movs	r2, #116	; 0x74
 8006a8e:	2100      	movs	r1, #0
 8006a90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e010      	b.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	425a      	negs	r2, r3
 8006aa6:	4153      	adcs	r3, r2
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	001a      	movs	r2, r3
 8006aac:	1dfb      	adds	r3, r7, #7
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d100      	bne.n	8006ab6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006ab4:	e74b      	b.n	800694e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	0018      	movs	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b014      	add	sp, #80	; 0x50
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	fffffe5f 	.word	0xfffffe5f

08006ac4 <__assert_func>:
 8006ac4:	b530      	push	{r4, r5, lr}
 8006ac6:	0014      	movs	r4, r2
 8006ac8:	001a      	movs	r2, r3
 8006aca:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <__assert_func+0x2c>)
 8006acc:	0005      	movs	r5, r0
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	68d8      	ldr	r0, [r3, #12]
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <__assert_func+0x30>)
 8006ad6:	2c00      	cmp	r4, #0
 8006ad8:	d101      	bne.n	8006ade <__assert_func+0x1a>
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <__assert_func+0x34>)
 8006adc:	001c      	movs	r4, r3
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	9100      	str	r1, [sp, #0]
 8006ae2:	002b      	movs	r3, r5
 8006ae4:	4905      	ldr	r1, [pc, #20]	; (8006afc <__assert_func+0x38>)
 8006ae6:	9402      	str	r4, [sp, #8]
 8006ae8:	f000 f810 	bl	8006b0c <fiprintf>
 8006aec:	f000 ff02 	bl	80078f4 <abort>
 8006af0:	2000000c 	.word	0x2000000c
 8006af4:	08009970 	.word	0x08009970
 8006af8:	080099ab 	.word	0x080099ab
 8006afc:	0800997d 	.word	0x0800997d

08006b00 <__errno>:
 8006b00:	4b01      	ldr	r3, [pc, #4]	; (8006b08 <__errno+0x8>)
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	4770      	bx	lr
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	2000000c 	.word	0x2000000c

08006b0c <fiprintf>:
 8006b0c:	b40e      	push	{r1, r2, r3}
 8006b0e:	b503      	push	{r0, r1, lr}
 8006b10:	0001      	movs	r1, r0
 8006b12:	ab03      	add	r3, sp, #12
 8006b14:	4804      	ldr	r0, [pc, #16]	; (8006b28 <fiprintf+0x1c>)
 8006b16:	cb04      	ldmia	r3!, {r2}
 8006b18:	6800      	ldr	r0, [r0, #0]
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	f000 f85a 	bl	8006bd4 <_vfiprintf_r>
 8006b20:	b002      	add	sp, #8
 8006b22:	bc08      	pop	{r3}
 8006b24:	b003      	add	sp, #12
 8006b26:	4718      	bx	r3
 8006b28:	2000000c 	.word	0x2000000c

08006b2c <__libc_init_array>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	2600      	movs	r6, #0
 8006b30:	4d0c      	ldr	r5, [pc, #48]	; (8006b64 <__libc_init_array+0x38>)
 8006b32:	4c0d      	ldr	r4, [pc, #52]	; (8006b68 <__libc_init_array+0x3c>)
 8006b34:	1b64      	subs	r4, r4, r5
 8006b36:	10a4      	asrs	r4, r4, #2
 8006b38:	42a6      	cmp	r6, r4
 8006b3a:	d109      	bne.n	8006b50 <__libc_init_array+0x24>
 8006b3c:	2600      	movs	r6, #0
 8006b3e:	f002 fdd9 	bl	80096f4 <_init>
 8006b42:	4d0a      	ldr	r5, [pc, #40]	; (8006b6c <__libc_init_array+0x40>)
 8006b44:	4c0a      	ldr	r4, [pc, #40]	; (8006b70 <__libc_init_array+0x44>)
 8006b46:	1b64      	subs	r4, r4, r5
 8006b48:	10a4      	asrs	r4, r4, #2
 8006b4a:	42a6      	cmp	r6, r4
 8006b4c:	d105      	bne.n	8006b5a <__libc_init_array+0x2e>
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	00b3      	lsls	r3, r6, #2
 8006b52:	58eb      	ldr	r3, [r5, r3]
 8006b54:	4798      	blx	r3
 8006b56:	3601      	adds	r6, #1
 8006b58:	e7ee      	b.n	8006b38 <__libc_init_array+0xc>
 8006b5a:	00b3      	lsls	r3, r6, #2
 8006b5c:	58eb      	ldr	r3, [r5, r3]
 8006b5e:	4798      	blx	r3
 8006b60:	3601      	adds	r6, #1
 8006b62:	e7f2      	b.n	8006b4a <__libc_init_array+0x1e>
 8006b64:	08009d58 	.word	0x08009d58
 8006b68:	08009d58 	.word	0x08009d58
 8006b6c:	08009d58 	.word	0x08009d58
 8006b70:	08009d5c 	.word	0x08009d5c

08006b74 <memset>:
 8006b74:	0003      	movs	r3, r0
 8006b76:	1882      	adds	r2, r0, r2
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d100      	bne.n	8006b7e <memset+0xa>
 8006b7c:	4770      	bx	lr
 8006b7e:	7019      	strb	r1, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	e7f9      	b.n	8006b78 <memset+0x4>

08006b84 <__sfputc_r>:
 8006b84:	6893      	ldr	r3, [r2, #8]
 8006b86:	b510      	push	{r4, lr}
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	6093      	str	r3, [r2, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	da04      	bge.n	8006b9a <__sfputc_r+0x16>
 8006b90:	6994      	ldr	r4, [r2, #24]
 8006b92:	42a3      	cmp	r3, r4
 8006b94:	db07      	blt.n	8006ba6 <__sfputc_r+0x22>
 8006b96:	290a      	cmp	r1, #10
 8006b98:	d005      	beq.n	8006ba6 <__sfputc_r+0x22>
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	1c58      	adds	r0, r3, #1
 8006b9e:	6010      	str	r0, [r2, #0]
 8006ba0:	7019      	strb	r1, [r3, #0]
 8006ba2:	0008      	movs	r0, r1
 8006ba4:	bd10      	pop	{r4, pc}
 8006ba6:	f000 fdd7 	bl	8007758 <__swbuf_r>
 8006baa:	0001      	movs	r1, r0
 8006bac:	e7f9      	b.n	8006ba2 <__sfputc_r+0x1e>

08006bae <__sfputs_r>:
 8006bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb0:	0006      	movs	r6, r0
 8006bb2:	000f      	movs	r7, r1
 8006bb4:	0014      	movs	r4, r2
 8006bb6:	18d5      	adds	r5, r2, r3
 8006bb8:	42ac      	cmp	r4, r5
 8006bba:	d101      	bne.n	8006bc0 <__sfputs_r+0x12>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e007      	b.n	8006bd0 <__sfputs_r+0x22>
 8006bc0:	7821      	ldrb	r1, [r4, #0]
 8006bc2:	003a      	movs	r2, r7
 8006bc4:	0030      	movs	r0, r6
 8006bc6:	f7ff ffdd 	bl	8006b84 <__sfputc_r>
 8006bca:	3401      	adds	r4, #1
 8006bcc:	1c43      	adds	r3, r0, #1
 8006bce:	d1f3      	bne.n	8006bb8 <__sfputs_r+0xa>
 8006bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bd4 <_vfiprintf_r>:
 8006bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd6:	b0a1      	sub	sp, #132	; 0x84
 8006bd8:	0006      	movs	r6, r0
 8006bda:	000c      	movs	r4, r1
 8006bdc:	001f      	movs	r7, r3
 8006bde:	9203      	str	r2, [sp, #12]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d004      	beq.n	8006bee <_vfiprintf_r+0x1a>
 8006be4:	6983      	ldr	r3, [r0, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <_vfiprintf_r+0x1a>
 8006bea:	f001 fe5d 	bl	80088a8 <__sinit>
 8006bee:	4b8e      	ldr	r3, [pc, #568]	; (8006e28 <_vfiprintf_r+0x254>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d11c      	bne.n	8006c2e <_vfiprintf_r+0x5a>
 8006bf4:	6874      	ldr	r4, [r6, #4]
 8006bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf8:	07db      	lsls	r3, r3, #31
 8006bfa:	d405      	bmi.n	8006c08 <_vfiprintf_r+0x34>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	059b      	lsls	r3, r3, #22
 8006c00:	d402      	bmi.n	8006c08 <_vfiprintf_r+0x34>
 8006c02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c04:	f001 fef5 	bl	80089f2 <__retarget_lock_acquire_recursive>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	071b      	lsls	r3, r3, #28
 8006c0c:	d502      	bpl.n	8006c14 <_vfiprintf_r+0x40>
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d11d      	bne.n	8006c50 <_vfiprintf_r+0x7c>
 8006c14:	0021      	movs	r1, r4
 8006c16:	0030      	movs	r0, r6
 8006c18:	f000 fdf4 	bl	8007804 <__swsetup_r>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d017      	beq.n	8006c50 <_vfiprintf_r+0x7c>
 8006c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c22:	07db      	lsls	r3, r3, #31
 8006c24:	d50d      	bpl.n	8006c42 <_vfiprintf_r+0x6e>
 8006c26:	2001      	movs	r0, #1
 8006c28:	4240      	negs	r0, r0
 8006c2a:	b021      	add	sp, #132	; 0x84
 8006c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2e:	4b7f      	ldr	r3, [pc, #508]	; (8006e2c <_vfiprintf_r+0x258>)
 8006c30:	429c      	cmp	r4, r3
 8006c32:	d101      	bne.n	8006c38 <_vfiprintf_r+0x64>
 8006c34:	68b4      	ldr	r4, [r6, #8]
 8006c36:	e7de      	b.n	8006bf6 <_vfiprintf_r+0x22>
 8006c38:	4b7d      	ldr	r3, [pc, #500]	; (8006e30 <_vfiprintf_r+0x25c>)
 8006c3a:	429c      	cmp	r4, r3
 8006c3c:	d1db      	bne.n	8006bf6 <_vfiprintf_r+0x22>
 8006c3e:	68f4      	ldr	r4, [r6, #12]
 8006c40:	e7d9      	b.n	8006bf6 <_vfiprintf_r+0x22>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	059b      	lsls	r3, r3, #22
 8006c46:	d4ee      	bmi.n	8006c26 <_vfiprintf_r+0x52>
 8006c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c4a:	f001 fed3 	bl	80089f4 <__retarget_lock_release_recursive>
 8006c4e:	e7ea      	b.n	8006c26 <_vfiprintf_r+0x52>
 8006c50:	2300      	movs	r3, #0
 8006c52:	ad08      	add	r5, sp, #32
 8006c54:	616b      	str	r3, [r5, #20]
 8006c56:	3320      	adds	r3, #32
 8006c58:	766b      	strb	r3, [r5, #25]
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	76ab      	strb	r3, [r5, #26]
 8006c5e:	9707      	str	r7, [sp, #28]
 8006c60:	9f03      	ldr	r7, [sp, #12]
 8006c62:	783b      	ldrb	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <_vfiprintf_r+0x98>
 8006c68:	2b25      	cmp	r3, #37	; 0x25
 8006c6a:	d14e      	bne.n	8006d0a <_vfiprintf_r+0x136>
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	1afb      	subs	r3, r7, r3
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	429f      	cmp	r7, r3
 8006c76:	d00d      	beq.n	8006c94 <_vfiprintf_r+0xc0>
 8006c78:	9b05      	ldr	r3, [sp, #20]
 8006c7a:	0021      	movs	r1, r4
 8006c7c:	0030      	movs	r0, r6
 8006c7e:	9a03      	ldr	r2, [sp, #12]
 8006c80:	f7ff ff95 	bl	8006bae <__sfputs_r>
 8006c84:	1c43      	adds	r3, r0, #1
 8006c86:	d100      	bne.n	8006c8a <_vfiprintf_r+0xb6>
 8006c88:	e0b5      	b.n	8006df6 <_vfiprintf_r+0x222>
 8006c8a:	696a      	ldr	r2, [r5, #20]
 8006c8c:	9b05      	ldr	r3, [sp, #20]
 8006c8e:	4694      	mov	ip, r2
 8006c90:	4463      	add	r3, ip
 8006c92:	616b      	str	r3, [r5, #20]
 8006c94:	783b      	ldrb	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d100      	bne.n	8006c9c <_vfiprintf_r+0xc8>
 8006c9a:	e0ac      	b.n	8006df6 <_vfiprintf_r+0x222>
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	1c7b      	adds	r3, r7, #1
 8006ca0:	9303      	str	r3, [sp, #12]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4252      	negs	r2, r2
 8006ca6:	606a      	str	r2, [r5, #4]
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	3254      	adds	r2, #84	; 0x54
 8006cac:	1852      	adds	r2, r2, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	60eb      	str	r3, [r5, #12]
 8006cb2:	60ab      	str	r3, [r5, #8]
 8006cb4:	7013      	strb	r3, [r2, #0]
 8006cb6:	65ab      	str	r3, [r5, #88]	; 0x58
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	2205      	movs	r2, #5
 8006cbc:	7819      	ldrb	r1, [r3, #0]
 8006cbe:	485d      	ldr	r0, [pc, #372]	; (8006e34 <_vfiprintf_r+0x260>)
 8006cc0:	f001 ff10 	bl	8008ae4 <memchr>
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	1c5f      	adds	r7, r3, #1
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d120      	bne.n	8006d0e <_vfiprintf_r+0x13a>
 8006ccc:	682a      	ldr	r2, [r5, #0]
 8006cce:	06d3      	lsls	r3, r2, #27
 8006cd0:	d504      	bpl.n	8006cdc <_vfiprintf_r+0x108>
 8006cd2:	2353      	movs	r3, #83	; 0x53
 8006cd4:	a904      	add	r1, sp, #16
 8006cd6:	185b      	adds	r3, r3, r1
 8006cd8:	2120      	movs	r1, #32
 8006cda:	7019      	strb	r1, [r3, #0]
 8006cdc:	0713      	lsls	r3, r2, #28
 8006cde:	d504      	bpl.n	8006cea <_vfiprintf_r+0x116>
 8006ce0:	2353      	movs	r3, #83	; 0x53
 8006ce2:	a904      	add	r1, sp, #16
 8006ce4:	185b      	adds	r3, r3, r1
 8006ce6:	212b      	movs	r1, #43	; 0x2b
 8006ce8:	7019      	strb	r1, [r3, #0]
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf0:	d016      	beq.n	8006d20 <_vfiprintf_r+0x14c>
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	68eb      	ldr	r3, [r5, #12]
 8006cf6:	9f03      	ldr	r7, [sp, #12]
 8006cf8:	783a      	ldrb	r2, [r7, #0]
 8006cfa:	1c78      	adds	r0, r7, #1
 8006cfc:	3a30      	subs	r2, #48	; 0x30
 8006cfe:	4684      	mov	ip, r0
 8006d00:	2a09      	cmp	r2, #9
 8006d02:	d94f      	bls.n	8006da4 <_vfiprintf_r+0x1d0>
 8006d04:	2900      	cmp	r1, #0
 8006d06:	d111      	bne.n	8006d2c <_vfiprintf_r+0x158>
 8006d08:	e017      	b.n	8006d3a <_vfiprintf_r+0x166>
 8006d0a:	3701      	adds	r7, #1
 8006d0c:	e7a9      	b.n	8006c62 <_vfiprintf_r+0x8e>
 8006d0e:	4b49      	ldr	r3, [pc, #292]	; (8006e34 <_vfiprintf_r+0x260>)
 8006d10:	682a      	ldr	r2, [r5, #0]
 8006d12:	1ac0      	subs	r0, r0, r3
 8006d14:	2301      	movs	r3, #1
 8006d16:	4083      	lsls	r3, r0
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	9703      	str	r7, [sp, #12]
 8006d1e:	e7cb      	b.n	8006cb8 <_vfiprintf_r+0xe4>
 8006d20:	9b07      	ldr	r3, [sp, #28]
 8006d22:	1d19      	adds	r1, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	9107      	str	r1, [sp, #28]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	db01      	blt.n	8006d30 <_vfiprintf_r+0x15c>
 8006d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d2e:	e004      	b.n	8006d3a <_vfiprintf_r+0x166>
 8006d30:	425b      	negs	r3, r3
 8006d32:	60eb      	str	r3, [r5, #12]
 8006d34:	2302      	movs	r3, #2
 8006d36:	4313      	orrs	r3, r2
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	783b      	ldrb	r3, [r7, #0]
 8006d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3e:	d10a      	bne.n	8006d56 <_vfiprintf_r+0x182>
 8006d40:	787b      	ldrb	r3, [r7, #1]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d137      	bne.n	8006db6 <_vfiprintf_r+0x1e2>
 8006d46:	9b07      	ldr	r3, [sp, #28]
 8006d48:	3702      	adds	r7, #2
 8006d4a:	1d1a      	adds	r2, r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	9207      	str	r2, [sp, #28]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	db2d      	blt.n	8006db0 <_vfiprintf_r+0x1dc>
 8006d54:	9309      	str	r3, [sp, #36]	; 0x24
 8006d56:	2203      	movs	r2, #3
 8006d58:	7839      	ldrb	r1, [r7, #0]
 8006d5a:	4837      	ldr	r0, [pc, #220]	; (8006e38 <_vfiprintf_r+0x264>)
 8006d5c:	f001 fec2 	bl	8008ae4 <memchr>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d007      	beq.n	8006d74 <_vfiprintf_r+0x1a0>
 8006d64:	4b34      	ldr	r3, [pc, #208]	; (8006e38 <_vfiprintf_r+0x264>)
 8006d66:	682a      	ldr	r2, [r5, #0]
 8006d68:	1ac0      	subs	r0, r0, r3
 8006d6a:	2340      	movs	r3, #64	; 0x40
 8006d6c:	4083      	lsls	r3, r0
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	3701      	adds	r7, #1
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	7839      	ldrb	r1, [r7, #0]
 8006d76:	1c7b      	adds	r3, r7, #1
 8006d78:	2206      	movs	r2, #6
 8006d7a:	4830      	ldr	r0, [pc, #192]	; (8006e3c <_vfiprintf_r+0x268>)
 8006d7c:	9303      	str	r3, [sp, #12]
 8006d7e:	7629      	strb	r1, [r5, #24]
 8006d80:	f001 feb0 	bl	8008ae4 <memchr>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d045      	beq.n	8006e14 <_vfiprintf_r+0x240>
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <_vfiprintf_r+0x26c>)
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d127      	bne.n	8006dde <_vfiprintf_r+0x20a>
 8006d8e:	2207      	movs	r2, #7
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	3307      	adds	r3, #7
 8006d94:	4393      	bics	r3, r2
 8006d96:	3308      	adds	r3, #8
 8006d98:	9307      	str	r3, [sp, #28]
 8006d9a:	696b      	ldr	r3, [r5, #20]
 8006d9c:	9a04      	ldr	r2, [sp, #16]
 8006d9e:	189b      	adds	r3, r3, r2
 8006da0:	616b      	str	r3, [r5, #20]
 8006da2:	e75d      	b.n	8006c60 <_vfiprintf_r+0x8c>
 8006da4:	210a      	movs	r1, #10
 8006da6:	434b      	muls	r3, r1
 8006da8:	4667      	mov	r7, ip
 8006daa:	189b      	adds	r3, r3, r2
 8006dac:	3909      	subs	r1, #9
 8006dae:	e7a3      	b.n	8006cf8 <_vfiprintf_r+0x124>
 8006db0:	2301      	movs	r3, #1
 8006db2:	425b      	negs	r3, r3
 8006db4:	e7ce      	b.n	8006d54 <_vfiprintf_r+0x180>
 8006db6:	2300      	movs	r3, #0
 8006db8:	001a      	movs	r2, r3
 8006dba:	3701      	adds	r7, #1
 8006dbc:	606b      	str	r3, [r5, #4]
 8006dbe:	7839      	ldrb	r1, [r7, #0]
 8006dc0:	1c78      	adds	r0, r7, #1
 8006dc2:	3930      	subs	r1, #48	; 0x30
 8006dc4:	4684      	mov	ip, r0
 8006dc6:	2909      	cmp	r1, #9
 8006dc8:	d903      	bls.n	8006dd2 <_vfiprintf_r+0x1fe>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0c3      	beq.n	8006d56 <_vfiprintf_r+0x182>
 8006dce:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd0:	e7c1      	b.n	8006d56 <_vfiprintf_r+0x182>
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	435a      	muls	r2, r3
 8006dd6:	4667      	mov	r7, ip
 8006dd8:	1852      	adds	r2, r2, r1
 8006dda:	3b09      	subs	r3, #9
 8006ddc:	e7ef      	b.n	8006dbe <_vfiprintf_r+0x1ea>
 8006dde:	ab07      	add	r3, sp, #28
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	0022      	movs	r2, r4
 8006de4:	0029      	movs	r1, r5
 8006de6:	0030      	movs	r0, r6
 8006de8:	4b16      	ldr	r3, [pc, #88]	; (8006e44 <_vfiprintf_r+0x270>)
 8006dea:	f000 f8d7 	bl	8006f9c <_printf_float>
 8006dee:	9004      	str	r0, [sp, #16]
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	3301      	adds	r3, #1
 8006df4:	d1d1      	bne.n	8006d9a <_vfiprintf_r+0x1c6>
 8006df6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df8:	07db      	lsls	r3, r3, #31
 8006dfa:	d405      	bmi.n	8006e08 <_vfiprintf_r+0x234>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	059b      	lsls	r3, r3, #22
 8006e00:	d402      	bmi.n	8006e08 <_vfiprintf_r+0x234>
 8006e02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e04:	f001 fdf6 	bl	80089f4 <__retarget_lock_release_recursive>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	065b      	lsls	r3, r3, #25
 8006e0c:	d500      	bpl.n	8006e10 <_vfiprintf_r+0x23c>
 8006e0e:	e70a      	b.n	8006c26 <_vfiprintf_r+0x52>
 8006e10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e12:	e70a      	b.n	8006c2a <_vfiprintf_r+0x56>
 8006e14:	ab07      	add	r3, sp, #28
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	0022      	movs	r2, r4
 8006e1a:	0029      	movs	r1, r5
 8006e1c:	0030      	movs	r0, r6
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <_vfiprintf_r+0x270>)
 8006e20:	f000 fb6e 	bl	8007500 <_printf_i>
 8006e24:	e7e3      	b.n	8006dee <_vfiprintf_r+0x21a>
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	08009aa8 	.word	0x08009aa8
 8006e2c:	08009ac8 	.word	0x08009ac8
 8006e30:	08009a88 	.word	0x08009a88
 8006e34:	080099b0 	.word	0x080099b0
 8006e38:	080099b6 	.word	0x080099b6
 8006e3c:	080099ba 	.word	0x080099ba
 8006e40:	08006f9d 	.word	0x08006f9d
 8006e44:	08006baf 	.word	0x08006baf

08006e48 <__cvt>:
 8006e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4a:	001e      	movs	r6, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	0014      	movs	r4, r2
 8006e50:	b08b      	sub	sp, #44	; 0x2c
 8006e52:	429e      	cmp	r6, r3
 8006e54:	da04      	bge.n	8006e60 <__cvt+0x18>
 8006e56:	2180      	movs	r1, #128	; 0x80
 8006e58:	0609      	lsls	r1, r1, #24
 8006e5a:	1873      	adds	r3, r6, r1
 8006e5c:	001e      	movs	r6, r3
 8006e5e:	232d      	movs	r3, #45	; 0x2d
 8006e60:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e64:	7013      	strb	r3, [r2, #0]
 8006e66:	2320      	movs	r3, #32
 8006e68:	2203      	movs	r2, #3
 8006e6a:	439f      	bics	r7, r3
 8006e6c:	2f46      	cmp	r7, #70	; 0x46
 8006e6e:	d007      	beq.n	8006e80 <__cvt+0x38>
 8006e70:	003b      	movs	r3, r7
 8006e72:	3b45      	subs	r3, #69	; 0x45
 8006e74:	4259      	negs	r1, r3
 8006e76:	414b      	adcs	r3, r1
 8006e78:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006e7a:	3a01      	subs	r2, #1
 8006e7c:	18cb      	adds	r3, r1, r3
 8006e7e:	9310      	str	r3, [sp, #64]	; 0x40
 8006e80:	ab09      	add	r3, sp, #36	; 0x24
 8006e82:	9304      	str	r3, [sp, #16]
 8006e84:	ab08      	add	r3, sp, #32
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e8a:	9200      	str	r2, [sp, #0]
 8006e8c:	9302      	str	r3, [sp, #8]
 8006e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e90:	0022      	movs	r2, r4
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	0033      	movs	r3, r6
 8006e96:	f000 fdbf 	bl	8007a18 <_dtoa_r>
 8006e9a:	0005      	movs	r5, r0
 8006e9c:	2f47      	cmp	r7, #71	; 0x47
 8006e9e:	d102      	bne.n	8006ea6 <__cvt+0x5e>
 8006ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ea2:	07db      	lsls	r3, r3, #31
 8006ea4:	d528      	bpl.n	8006ef8 <__cvt+0xb0>
 8006ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ea8:	18eb      	adds	r3, r5, r3
 8006eaa:	9307      	str	r3, [sp, #28]
 8006eac:	2f46      	cmp	r7, #70	; 0x46
 8006eae:	d114      	bne.n	8006eda <__cvt+0x92>
 8006eb0:	782b      	ldrb	r3, [r5, #0]
 8006eb2:	2b30      	cmp	r3, #48	; 0x30
 8006eb4:	d10c      	bne.n	8006ed0 <__cvt+0x88>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2300      	movs	r3, #0
 8006eba:	0020      	movs	r0, r4
 8006ebc:	0031      	movs	r1, r6
 8006ebe:	f7f9 fac5 	bl	800044c <__aeabi_dcmpeq>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d104      	bne.n	8006ed0 <__cvt+0x88>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006eca:	1a9b      	subs	r3, r3, r2
 8006ecc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ed2:	9a07      	ldr	r2, [sp, #28]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	18d3      	adds	r3, r2, r3
 8006ed8:	9307      	str	r3, [sp, #28]
 8006eda:	2200      	movs	r2, #0
 8006edc:	2300      	movs	r3, #0
 8006ede:	0020      	movs	r0, r4
 8006ee0:	0031      	movs	r1, r6
 8006ee2:	f7f9 fab3 	bl	800044c <__aeabi_dcmpeq>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d001      	beq.n	8006eee <__cvt+0xa6>
 8006eea:	9b07      	ldr	r3, [sp, #28]
 8006eec:	9309      	str	r3, [sp, #36]	; 0x24
 8006eee:	2230      	movs	r2, #48	; 0x30
 8006ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef2:	9907      	ldr	r1, [sp, #28]
 8006ef4:	428b      	cmp	r3, r1
 8006ef6:	d306      	bcc.n	8006f06 <__cvt+0xbe>
 8006ef8:	0028      	movs	r0, r5
 8006efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006efe:	1b5b      	subs	r3, r3, r5
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	b00b      	add	sp, #44	; 0x2c
 8006f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	9109      	str	r1, [sp, #36]	; 0x24
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e7f0      	b.n	8006ef0 <__cvt+0xa8>

08006f0e <__exponent>:
 8006f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f10:	1c83      	adds	r3, r0, #2
 8006f12:	b087      	sub	sp, #28
 8006f14:	9303      	str	r3, [sp, #12]
 8006f16:	0005      	movs	r5, r0
 8006f18:	000c      	movs	r4, r1
 8006f1a:	232b      	movs	r3, #43	; 0x2b
 8006f1c:	7002      	strb	r2, [r0, #0]
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	da01      	bge.n	8006f26 <__exponent+0x18>
 8006f22:	424c      	negs	r4, r1
 8006f24:	3302      	adds	r3, #2
 8006f26:	706b      	strb	r3, [r5, #1]
 8006f28:	2c09      	cmp	r4, #9
 8006f2a:	dd31      	ble.n	8006f90 <__exponent+0x82>
 8006f2c:	270a      	movs	r7, #10
 8006f2e:	ab04      	add	r3, sp, #16
 8006f30:	1dde      	adds	r6, r3, #7
 8006f32:	0020      	movs	r0, r4
 8006f34:	0039      	movs	r1, r7
 8006f36:	9601      	str	r6, [sp, #4]
 8006f38:	f7f9 fa72 	bl	8000420 <__aeabi_idivmod>
 8006f3c:	3e01      	subs	r6, #1
 8006f3e:	3130      	adds	r1, #48	; 0x30
 8006f40:	0020      	movs	r0, r4
 8006f42:	7031      	strb	r1, [r6, #0]
 8006f44:	0039      	movs	r1, r7
 8006f46:	9402      	str	r4, [sp, #8]
 8006f48:	f7f9 f984 	bl	8000254 <__divsi3>
 8006f4c:	9b02      	ldr	r3, [sp, #8]
 8006f4e:	0004      	movs	r4, r0
 8006f50:	2b63      	cmp	r3, #99	; 0x63
 8006f52:	dcee      	bgt.n	8006f32 <__exponent+0x24>
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	3430      	adds	r4, #48	; 0x30
 8006f58:	1e9a      	subs	r2, r3, #2
 8006f5a:	0013      	movs	r3, r2
 8006f5c:	9903      	ldr	r1, [sp, #12]
 8006f5e:	7014      	strb	r4, [r2, #0]
 8006f60:	a804      	add	r0, sp, #16
 8006f62:	3007      	adds	r0, #7
 8006f64:	4298      	cmp	r0, r3
 8006f66:	d80e      	bhi.n	8006f86 <__exponent+0x78>
 8006f68:	ab04      	add	r3, sp, #16
 8006f6a:	3307      	adds	r3, #7
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d804      	bhi.n	8006f7c <__exponent+0x6e>
 8006f72:	ab04      	add	r3, sp, #16
 8006f74:	3009      	adds	r0, #9
 8006f76:	18c0      	adds	r0, r0, r3
 8006f78:	9b01      	ldr	r3, [sp, #4]
 8006f7a:	1ac0      	subs	r0, r0, r3
 8006f7c:	9b03      	ldr	r3, [sp, #12]
 8006f7e:	1818      	adds	r0, r3, r0
 8006f80:	1b40      	subs	r0, r0, r5
 8006f82:	b007      	add	sp, #28
 8006f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f86:	7818      	ldrb	r0, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	7008      	strb	r0, [r1, #0]
 8006f8c:	3101      	adds	r1, #1
 8006f8e:	e7e7      	b.n	8006f60 <__exponent+0x52>
 8006f90:	2330      	movs	r3, #48	; 0x30
 8006f92:	18e4      	adds	r4, r4, r3
 8006f94:	70ab      	strb	r3, [r5, #2]
 8006f96:	1d28      	adds	r0, r5, #4
 8006f98:	70ec      	strb	r4, [r5, #3]
 8006f9a:	e7f1      	b.n	8006f80 <__exponent+0x72>

08006f9c <_printf_float>:
 8006f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9e:	b095      	sub	sp, #84	; 0x54
 8006fa0:	000c      	movs	r4, r1
 8006fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa4:	001e      	movs	r6, r3
 8006fa6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006fa8:	0007      	movs	r7, r0
 8006faa:	f001 fd1d 	bl	80089e8 <_localeconv_r>
 8006fae:	6803      	ldr	r3, [r0, #0]
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8006fb4:	f7f9 f8a8 	bl	8000108 <strlen>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	9312      	str	r3, [sp, #72]	; 0x48
 8006fbc:	7e23      	ldrb	r3, [r4, #24]
 8006fbe:	2207      	movs	r2, #7
 8006fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	900e      	str	r0, [sp, #56]	; 0x38
 8006fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8006fc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	05c9      	lsls	r1, r1, #23
 8006fce:	d547      	bpl.n	8007060 <_printf_float+0xc4>
 8006fd0:	189b      	adds	r3, r3, r2
 8006fd2:	4393      	bics	r3, r2
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	3208      	adds	r2, #8
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	64a2      	str	r2, [r4, #72]	; 0x48
 8006fe0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006fe6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fea:	006b      	lsls	r3, r5, #1
 8006fec:	085b      	lsrs	r3, r3, #1
 8006fee:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ff0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ff2:	4ba7      	ldr	r3, [pc, #668]	; (8007290 <_printf_float+0x2f4>)
 8006ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ff6:	4252      	negs	r2, r2
 8006ff8:	f7fb fd28 	bl	8002a4c <__aeabi_dcmpun>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d131      	bne.n	8007064 <_printf_float+0xc8>
 8007000:	2201      	movs	r2, #1
 8007002:	4ba3      	ldr	r3, [pc, #652]	; (8007290 <_printf_float+0x2f4>)
 8007004:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007006:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007008:	4252      	negs	r2, r2
 800700a:	f7f9 fa2f 	bl	800046c <__aeabi_dcmple>
 800700e:	2800      	cmp	r0, #0
 8007010:	d128      	bne.n	8007064 <_printf_float+0xc8>
 8007012:	2200      	movs	r2, #0
 8007014:	2300      	movs	r3, #0
 8007016:	0029      	movs	r1, r5
 8007018:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800701a:	f7f9 fa1d 	bl	8000458 <__aeabi_dcmplt>
 800701e:	2800      	cmp	r0, #0
 8007020:	d003      	beq.n	800702a <_printf_float+0x8e>
 8007022:	0023      	movs	r3, r4
 8007024:	222d      	movs	r2, #45	; 0x2d
 8007026:	3343      	adds	r3, #67	; 0x43
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702c:	4d99      	ldr	r5, [pc, #612]	; (8007294 <_printf_float+0x2f8>)
 800702e:	2b47      	cmp	r3, #71	; 0x47
 8007030:	d900      	bls.n	8007034 <_printf_float+0x98>
 8007032:	4d99      	ldr	r5, [pc, #612]	; (8007298 <_printf_float+0x2fc>)
 8007034:	2303      	movs	r3, #3
 8007036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	439a      	bics	r2, r3
 800703e:	2300      	movs	r3, #0
 8007040:	6022      	str	r2, [r4, #0]
 8007042:	930b      	str	r3, [sp, #44]	; 0x2c
 8007044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007046:	0021      	movs	r1, r4
 8007048:	0038      	movs	r0, r7
 800704a:	9600      	str	r6, [sp, #0]
 800704c:	aa13      	add	r2, sp, #76	; 0x4c
 800704e:	f000 f9e7 	bl	8007420 <_printf_common>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d000      	beq.n	8007058 <_printf_float+0xbc>
 8007056:	e0a2      	b.n	800719e <_printf_float+0x202>
 8007058:	2001      	movs	r0, #1
 800705a:	4240      	negs	r0, r0
 800705c:	b015      	add	sp, #84	; 0x54
 800705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007060:	3307      	adds	r3, #7
 8007062:	e7b6      	b.n	8006fd2 <_printf_float+0x36>
 8007064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007066:	002b      	movs	r3, r5
 8007068:	0010      	movs	r0, r2
 800706a:	0029      	movs	r1, r5
 800706c:	f7fb fcee 	bl	8002a4c <__aeabi_dcmpun>
 8007070:	2800      	cmp	r0, #0
 8007072:	d00b      	beq.n	800708c <_printf_float+0xf0>
 8007074:	2d00      	cmp	r5, #0
 8007076:	da03      	bge.n	8007080 <_printf_float+0xe4>
 8007078:	0023      	movs	r3, r4
 800707a:	222d      	movs	r2, #45	; 0x2d
 800707c:	3343      	adds	r3, #67	; 0x43
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007082:	4d86      	ldr	r5, [pc, #536]	; (800729c <_printf_float+0x300>)
 8007084:	2b47      	cmp	r3, #71	; 0x47
 8007086:	d9d5      	bls.n	8007034 <_printf_float+0x98>
 8007088:	4d85      	ldr	r5, [pc, #532]	; (80072a0 <_printf_float+0x304>)
 800708a:	e7d3      	b.n	8007034 <_printf_float+0x98>
 800708c:	2220      	movs	r2, #32
 800708e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	4391      	bics	r1, r2
 8007094:	910f      	str	r1, [sp, #60]	; 0x3c
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	d149      	bne.n	800712e <_printf_float+0x192>
 800709a:	3307      	adds	r3, #7
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	2380      	movs	r3, #128	; 0x80
 80070a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4313      	orrs	r3, r2
 80070a6:	2200      	movs	r2, #0
 80070a8:	9206      	str	r2, [sp, #24]
 80070aa:	aa12      	add	r2, sp, #72	; 0x48
 80070ac:	9205      	str	r2, [sp, #20]
 80070ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b0:	a908      	add	r1, sp, #32
 80070b2:	9204      	str	r2, [sp, #16]
 80070b4:	aa11      	add	r2, sp, #68	; 0x44
 80070b6:	9203      	str	r2, [sp, #12]
 80070b8:	2223      	movs	r2, #35	; 0x23
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	9301      	str	r3, [sp, #4]
 80070be:	6863      	ldr	r3, [r4, #4]
 80070c0:	1852      	adds	r2, r2, r1
 80070c2:	9202      	str	r2, [sp, #8]
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	0038      	movs	r0, r7
 80070c8:	002b      	movs	r3, r5
 80070ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070cc:	f7ff febc 	bl	8006e48 <__cvt>
 80070d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070d2:	0005      	movs	r5, r0
 80070d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80070d6:	2b47      	cmp	r3, #71	; 0x47
 80070d8:	d108      	bne.n	80070ec <_printf_float+0x150>
 80070da:	1ccb      	adds	r3, r1, #3
 80070dc:	db02      	blt.n	80070e4 <_printf_float+0x148>
 80070de:	6863      	ldr	r3, [r4, #4]
 80070e0:	4299      	cmp	r1, r3
 80070e2:	dd48      	ble.n	8007176 <_printf_float+0x1da>
 80070e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e6:	3b02      	subs	r3, #2
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	930a      	str	r3, [sp, #40]	; 0x28
 80070ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ee:	2b65      	cmp	r3, #101	; 0x65
 80070f0:	d824      	bhi.n	800713c <_printf_float+0x1a0>
 80070f2:	0020      	movs	r0, r4
 80070f4:	001a      	movs	r2, r3
 80070f6:	3901      	subs	r1, #1
 80070f8:	3050      	adds	r0, #80	; 0x50
 80070fa:	9111      	str	r1, [sp, #68]	; 0x44
 80070fc:	f7ff ff07 	bl	8006f0e <__exponent>
 8007100:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007102:	900b      	str	r0, [sp, #44]	; 0x2c
 8007104:	1813      	adds	r3, r2, r0
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	2a01      	cmp	r2, #1
 800710a:	dc02      	bgt.n	8007112 <_printf_float+0x176>
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	07d2      	lsls	r2, r2, #31
 8007110:	d501      	bpl.n	8007116 <_printf_float+0x17a>
 8007112:	3301      	adds	r3, #1
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	2323      	movs	r3, #35	; 0x23
 8007118:	aa08      	add	r2, sp, #32
 800711a:	189b      	adds	r3, r3, r2
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d100      	bne.n	8007124 <_printf_float+0x188>
 8007122:	e78f      	b.n	8007044 <_printf_float+0xa8>
 8007124:	0023      	movs	r3, r4
 8007126:	222d      	movs	r2, #45	; 0x2d
 8007128:	3343      	adds	r3, #67	; 0x43
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e78a      	b.n	8007044 <_printf_float+0xa8>
 800712e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007130:	2a47      	cmp	r2, #71	; 0x47
 8007132:	d1b4      	bne.n	800709e <_printf_float+0x102>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1b2      	bne.n	800709e <_printf_float+0x102>
 8007138:	3301      	adds	r3, #1
 800713a:	e7af      	b.n	800709c <_printf_float+0x100>
 800713c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800713e:	2b66      	cmp	r3, #102	; 0x66
 8007140:	d11b      	bne.n	800717a <_printf_float+0x1de>
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	2900      	cmp	r1, #0
 8007146:	dd0d      	ble.n	8007164 <_printf_float+0x1c8>
 8007148:	6121      	str	r1, [r4, #16]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <_printf_float+0x1b8>
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	07d2      	lsls	r2, r2, #31
 8007152:	d502      	bpl.n	800715a <_printf_float+0x1be>
 8007154:	3301      	adds	r3, #1
 8007156:	1859      	adds	r1, r3, r1
 8007158:	6121      	str	r1, [r4, #16]
 800715a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800715c:	65a3      	str	r3, [r4, #88]	; 0x58
 800715e:	2300      	movs	r3, #0
 8007160:	930b      	str	r3, [sp, #44]	; 0x2c
 8007162:	e7d8      	b.n	8007116 <_printf_float+0x17a>
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <_printf_float+0x1d4>
 8007168:	2201      	movs	r2, #1
 800716a:	6821      	ldr	r1, [r4, #0]
 800716c:	4211      	tst	r1, r2
 800716e:	d000      	beq.n	8007172 <_printf_float+0x1d6>
 8007170:	1c9a      	adds	r2, r3, #2
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	e7f1      	b.n	800715a <_printf_float+0x1be>
 8007176:	2367      	movs	r3, #103	; 0x67
 8007178:	930a      	str	r3, [sp, #40]	; 0x28
 800717a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800717c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800717e:	4293      	cmp	r3, r2
 8007180:	db06      	blt.n	8007190 <_printf_float+0x1f4>
 8007182:	6822      	ldr	r2, [r4, #0]
 8007184:	6123      	str	r3, [r4, #16]
 8007186:	07d2      	lsls	r2, r2, #31
 8007188:	d5e7      	bpl.n	800715a <_printf_float+0x1be>
 800718a:	3301      	adds	r3, #1
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	e7e4      	b.n	800715a <_printf_float+0x1be>
 8007190:	2101      	movs	r1, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	dc01      	bgt.n	800719a <_printf_float+0x1fe>
 8007196:	1849      	adds	r1, r1, r1
 8007198:	1ac9      	subs	r1, r1, r3
 800719a:	1852      	adds	r2, r2, r1
 800719c:	e7e9      	b.n	8007172 <_printf_float+0x1d6>
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	0553      	lsls	r3, r2, #21
 80071a2:	d407      	bmi.n	80071b4 <_printf_float+0x218>
 80071a4:	6923      	ldr	r3, [r4, #16]
 80071a6:	002a      	movs	r2, r5
 80071a8:	0038      	movs	r0, r7
 80071aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071ac:	47b0      	blx	r6
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	d128      	bne.n	8007204 <_printf_float+0x268>
 80071b2:	e751      	b.n	8007058 <_printf_float+0xbc>
 80071b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b6:	2b65      	cmp	r3, #101	; 0x65
 80071b8:	d800      	bhi.n	80071bc <_printf_float+0x220>
 80071ba:	e0e1      	b.n	8007380 <_printf_float+0x3e4>
 80071bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80071be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80071c0:	2200      	movs	r2, #0
 80071c2:	2300      	movs	r3, #0
 80071c4:	f7f9 f942 	bl	800044c <__aeabi_dcmpeq>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d031      	beq.n	8007230 <_printf_float+0x294>
 80071cc:	2301      	movs	r3, #1
 80071ce:	0038      	movs	r0, r7
 80071d0:	4a34      	ldr	r2, [pc, #208]	; (80072a4 <_printf_float+0x308>)
 80071d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071d4:	47b0      	blx	r6
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	d100      	bne.n	80071dc <_printf_float+0x240>
 80071da:	e73d      	b.n	8007058 <_printf_float+0xbc>
 80071dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071e0:	4293      	cmp	r3, r2
 80071e2:	db02      	blt.n	80071ea <_printf_float+0x24e>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	07db      	lsls	r3, r3, #31
 80071e8:	d50c      	bpl.n	8007204 <_printf_float+0x268>
 80071ea:	0038      	movs	r0, r7
 80071ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071f2:	47b0      	blx	r6
 80071f4:	2500      	movs	r5, #0
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d100      	bne.n	80071fc <_printf_float+0x260>
 80071fa:	e72d      	b.n	8007058 <_printf_float+0xbc>
 80071fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071fe:	3b01      	subs	r3, #1
 8007200:	42ab      	cmp	r3, r5
 8007202:	dc0a      	bgt.n	800721a <_printf_float+0x27e>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	079b      	lsls	r3, r3, #30
 8007208:	d500      	bpl.n	800720c <_printf_float+0x270>
 800720a:	e106      	b.n	800741a <_printf_float+0x47e>
 800720c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800720e:	68e0      	ldr	r0, [r4, #12]
 8007210:	4298      	cmp	r0, r3
 8007212:	db00      	blt.n	8007216 <_printf_float+0x27a>
 8007214:	e722      	b.n	800705c <_printf_float+0xc0>
 8007216:	0018      	movs	r0, r3
 8007218:	e720      	b.n	800705c <_printf_float+0xc0>
 800721a:	0022      	movs	r2, r4
 800721c:	2301      	movs	r3, #1
 800721e:	0038      	movs	r0, r7
 8007220:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007222:	321a      	adds	r2, #26
 8007224:	47b0      	blx	r6
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	d100      	bne.n	800722c <_printf_float+0x290>
 800722a:	e715      	b.n	8007058 <_printf_float+0xbc>
 800722c:	3501      	adds	r5, #1
 800722e:	e7e5      	b.n	80071fc <_printf_float+0x260>
 8007230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007232:	2b00      	cmp	r3, #0
 8007234:	dc38      	bgt.n	80072a8 <_printf_float+0x30c>
 8007236:	2301      	movs	r3, #1
 8007238:	0038      	movs	r0, r7
 800723a:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <_printf_float+0x308>)
 800723c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800723e:	47b0      	blx	r6
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d100      	bne.n	8007246 <_printf_float+0x2aa>
 8007244:	e708      	b.n	8007058 <_printf_float+0xbc>
 8007246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007248:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800724a:	4313      	orrs	r3, r2
 800724c:	d102      	bne.n	8007254 <_printf_float+0x2b8>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	07db      	lsls	r3, r3, #31
 8007252:	d5d7      	bpl.n	8007204 <_printf_float+0x268>
 8007254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007256:	0038      	movs	r0, r7
 8007258:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800725a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800725c:	47b0      	blx	r6
 800725e:	1c43      	adds	r3, r0, #1
 8007260:	d100      	bne.n	8007264 <_printf_float+0x2c8>
 8007262:	e6f9      	b.n	8007058 <_printf_float+0xbc>
 8007264:	2300      	movs	r3, #0
 8007266:	930a      	str	r3, [sp, #40]	; 0x28
 8007268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800726a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800726c:	425b      	negs	r3, r3
 800726e:	4293      	cmp	r3, r2
 8007270:	dc01      	bgt.n	8007276 <_printf_float+0x2da>
 8007272:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007274:	e797      	b.n	80071a6 <_printf_float+0x20a>
 8007276:	0022      	movs	r2, r4
 8007278:	2301      	movs	r3, #1
 800727a:	0038      	movs	r0, r7
 800727c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800727e:	321a      	adds	r2, #26
 8007280:	47b0      	blx	r6
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d100      	bne.n	8007288 <_printf_float+0x2ec>
 8007286:	e6e7      	b.n	8007058 <_printf_float+0xbc>
 8007288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728a:	3301      	adds	r3, #1
 800728c:	e7eb      	b.n	8007266 <_printf_float+0x2ca>
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	7fefffff 	.word	0x7fefffff
 8007294:	080099c1 	.word	0x080099c1
 8007298:	080099c5 	.word	0x080099c5
 800729c:	080099c9 	.word	0x080099c9
 80072a0:	080099cd 	.word	0x080099cd
 80072a4:	080099d1 	.word	0x080099d1
 80072a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072ac:	920a      	str	r2, [sp, #40]	; 0x28
 80072ae:	429a      	cmp	r2, r3
 80072b0:	dd00      	ble.n	80072b4 <_printf_float+0x318>
 80072b2:	930a      	str	r3, [sp, #40]	; 0x28
 80072b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dc3c      	bgt.n	8007334 <_printf_float+0x398>
 80072ba:	2300      	movs	r3, #0
 80072bc:	930d      	str	r3, [sp, #52]	; 0x34
 80072be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c0:	43db      	mvns	r3, r3
 80072c2:	17db      	asrs	r3, r3, #31
 80072c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80072c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80072cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ce:	4013      	ands	r3, r2
 80072d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072d6:	4293      	cmp	r3, r2
 80072d8:	dc34      	bgt.n	8007344 <_printf_float+0x3a8>
 80072da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072de:	4293      	cmp	r3, r2
 80072e0:	db3d      	blt.n	800735e <_printf_float+0x3c2>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	07db      	lsls	r3, r3, #31
 80072e6:	d43a      	bmi.n	800735e <_printf_float+0x3c2>
 80072e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	1a52      	subs	r2, r2, r1
 80072f2:	920a      	str	r2, [sp, #40]	; 0x28
 80072f4:	429a      	cmp	r2, r3
 80072f6:	dd00      	ble.n	80072fa <_printf_float+0x35e>
 80072f8:	930a      	str	r3, [sp, #40]	; 0x28
 80072fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dc36      	bgt.n	800736e <_printf_float+0x3d2>
 8007300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007302:	2500      	movs	r5, #0
 8007304:	43db      	mvns	r3, r3
 8007306:	17db      	asrs	r3, r3, #31
 8007308:	930b      	str	r3, [sp, #44]	; 0x2c
 800730a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800730c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800730e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007310:	1a9b      	subs	r3, r3, r2
 8007312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007314:	400a      	ands	r2, r1
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	42ab      	cmp	r3, r5
 800731a:	dc00      	bgt.n	800731e <_printf_float+0x382>
 800731c:	e772      	b.n	8007204 <_printf_float+0x268>
 800731e:	0022      	movs	r2, r4
 8007320:	2301      	movs	r3, #1
 8007322:	0038      	movs	r0, r7
 8007324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007326:	321a      	adds	r2, #26
 8007328:	47b0      	blx	r6
 800732a:	1c43      	adds	r3, r0, #1
 800732c:	d100      	bne.n	8007330 <_printf_float+0x394>
 800732e:	e693      	b.n	8007058 <_printf_float+0xbc>
 8007330:	3501      	adds	r5, #1
 8007332:	e7ea      	b.n	800730a <_printf_float+0x36e>
 8007334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007336:	002a      	movs	r2, r5
 8007338:	0038      	movs	r0, r7
 800733a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800733c:	47b0      	blx	r6
 800733e:	1c43      	adds	r3, r0, #1
 8007340:	d1bb      	bne.n	80072ba <_printf_float+0x31e>
 8007342:	e689      	b.n	8007058 <_printf_float+0xbc>
 8007344:	0022      	movs	r2, r4
 8007346:	2301      	movs	r3, #1
 8007348:	0038      	movs	r0, r7
 800734a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800734c:	321a      	adds	r2, #26
 800734e:	47b0      	blx	r6
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d100      	bne.n	8007356 <_printf_float+0x3ba>
 8007354:	e680      	b.n	8007058 <_printf_float+0xbc>
 8007356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007358:	3301      	adds	r3, #1
 800735a:	930d      	str	r3, [sp, #52]	; 0x34
 800735c:	e7b3      	b.n	80072c6 <_printf_float+0x32a>
 800735e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007360:	0038      	movs	r0, r7
 8007362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007366:	47b0      	blx	r6
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	d1bd      	bne.n	80072e8 <_printf_float+0x34c>
 800736c:	e674      	b.n	8007058 <_printf_float+0xbc>
 800736e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007370:	0038      	movs	r0, r7
 8007372:	18ea      	adds	r2, r5, r3
 8007374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007378:	47b0      	blx	r6
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	d1c0      	bne.n	8007300 <_printf_float+0x364>
 800737e:	e66b      	b.n	8007058 <_printf_float+0xbc>
 8007380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007382:	2b01      	cmp	r3, #1
 8007384:	dc02      	bgt.n	800738c <_printf_float+0x3f0>
 8007386:	2301      	movs	r3, #1
 8007388:	421a      	tst	r2, r3
 800738a:	d034      	beq.n	80073f6 <_printf_float+0x45a>
 800738c:	2301      	movs	r3, #1
 800738e:	002a      	movs	r2, r5
 8007390:	0038      	movs	r0, r7
 8007392:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007394:	47b0      	blx	r6
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	d100      	bne.n	800739c <_printf_float+0x400>
 800739a:	e65d      	b.n	8007058 <_printf_float+0xbc>
 800739c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800739e:	0038      	movs	r0, r7
 80073a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a4:	47b0      	blx	r6
 80073a6:	1c43      	adds	r3, r0, #1
 80073a8:	d100      	bne.n	80073ac <_printf_float+0x410>
 80073aa:	e655      	b.n	8007058 <_printf_float+0xbc>
 80073ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80073ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80073b0:	2200      	movs	r2, #0
 80073b2:	2300      	movs	r3, #0
 80073b4:	f7f9 f84a 	bl	800044c <__aeabi_dcmpeq>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d11a      	bne.n	80073f2 <_printf_float+0x456>
 80073bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073be:	1c6a      	adds	r2, r5, #1
 80073c0:	3b01      	subs	r3, #1
 80073c2:	0038      	movs	r0, r7
 80073c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073c6:	47b0      	blx	r6
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d10e      	bne.n	80073ea <_printf_float+0x44e>
 80073cc:	e644      	b.n	8007058 <_printf_float+0xbc>
 80073ce:	0022      	movs	r2, r4
 80073d0:	2301      	movs	r3, #1
 80073d2:	0038      	movs	r0, r7
 80073d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073d6:	321a      	adds	r2, #26
 80073d8:	47b0      	blx	r6
 80073da:	1c43      	adds	r3, r0, #1
 80073dc:	d100      	bne.n	80073e0 <_printf_float+0x444>
 80073de:	e63b      	b.n	8007058 <_printf_float+0xbc>
 80073e0:	3501      	adds	r5, #1
 80073e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073e4:	3b01      	subs	r3, #1
 80073e6:	42ab      	cmp	r3, r5
 80073e8:	dcf1      	bgt.n	80073ce <_printf_float+0x432>
 80073ea:	0022      	movs	r2, r4
 80073ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ee:	3250      	adds	r2, #80	; 0x50
 80073f0:	e6da      	b.n	80071a8 <_printf_float+0x20c>
 80073f2:	2500      	movs	r5, #0
 80073f4:	e7f5      	b.n	80073e2 <_printf_float+0x446>
 80073f6:	002a      	movs	r2, r5
 80073f8:	e7e3      	b.n	80073c2 <_printf_float+0x426>
 80073fa:	0022      	movs	r2, r4
 80073fc:	2301      	movs	r3, #1
 80073fe:	0038      	movs	r0, r7
 8007400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007402:	3219      	adds	r2, #25
 8007404:	47b0      	blx	r6
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d100      	bne.n	800740c <_printf_float+0x470>
 800740a:	e625      	b.n	8007058 <_printf_float+0xbc>
 800740c:	3501      	adds	r5, #1
 800740e:	68e3      	ldr	r3, [r4, #12]
 8007410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007412:	1a9b      	subs	r3, r3, r2
 8007414:	42ab      	cmp	r3, r5
 8007416:	dcf0      	bgt.n	80073fa <_printf_float+0x45e>
 8007418:	e6f8      	b.n	800720c <_printf_float+0x270>
 800741a:	2500      	movs	r5, #0
 800741c:	e7f7      	b.n	800740e <_printf_float+0x472>
 800741e:	46c0      	nop			; (mov r8, r8)

08007420 <_printf_common>:
 8007420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007422:	0015      	movs	r5, r2
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	688a      	ldr	r2, [r1, #8]
 8007428:	690b      	ldr	r3, [r1, #16]
 800742a:	000c      	movs	r4, r1
 800742c:	9000      	str	r0, [sp, #0]
 800742e:	4293      	cmp	r3, r2
 8007430:	da00      	bge.n	8007434 <_printf_common+0x14>
 8007432:	0013      	movs	r3, r2
 8007434:	0022      	movs	r2, r4
 8007436:	602b      	str	r3, [r5, #0]
 8007438:	3243      	adds	r2, #67	; 0x43
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	2a00      	cmp	r2, #0
 800743e:	d001      	beq.n	8007444 <_printf_common+0x24>
 8007440:	3301      	adds	r3, #1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	069b      	lsls	r3, r3, #26
 8007448:	d502      	bpl.n	8007450 <_printf_common+0x30>
 800744a:	682b      	ldr	r3, [r5, #0]
 800744c:	3302      	adds	r3, #2
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	2306      	movs	r3, #6
 8007454:	0017      	movs	r7, r2
 8007456:	401f      	ands	r7, r3
 8007458:	421a      	tst	r2, r3
 800745a:	d027      	beq.n	80074ac <_printf_common+0x8c>
 800745c:	0023      	movs	r3, r4
 800745e:	3343      	adds	r3, #67	; 0x43
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	1e5a      	subs	r2, r3, #1
 8007464:	4193      	sbcs	r3, r2
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	0692      	lsls	r2, r2, #26
 800746a:	d430      	bmi.n	80074ce <_printf_common+0xae>
 800746c:	0022      	movs	r2, r4
 800746e:	9901      	ldr	r1, [sp, #4]
 8007470:	9800      	ldr	r0, [sp, #0]
 8007472:	9e08      	ldr	r6, [sp, #32]
 8007474:	3243      	adds	r2, #67	; 0x43
 8007476:	47b0      	blx	r6
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d025      	beq.n	80074c8 <_printf_common+0xa8>
 800747c:	2306      	movs	r3, #6
 800747e:	6820      	ldr	r0, [r4, #0]
 8007480:	682a      	ldr	r2, [r5, #0]
 8007482:	68e1      	ldr	r1, [r4, #12]
 8007484:	2500      	movs	r5, #0
 8007486:	4003      	ands	r3, r0
 8007488:	2b04      	cmp	r3, #4
 800748a:	d103      	bne.n	8007494 <_printf_common+0x74>
 800748c:	1a8d      	subs	r5, r1, r2
 800748e:	43eb      	mvns	r3, r5
 8007490:	17db      	asrs	r3, r3, #31
 8007492:	401d      	ands	r5, r3
 8007494:	68a3      	ldr	r3, [r4, #8]
 8007496:	6922      	ldr	r2, [r4, #16]
 8007498:	4293      	cmp	r3, r2
 800749a:	dd01      	ble.n	80074a0 <_printf_common+0x80>
 800749c:	1a9b      	subs	r3, r3, r2
 800749e:	18ed      	adds	r5, r5, r3
 80074a0:	2700      	movs	r7, #0
 80074a2:	42bd      	cmp	r5, r7
 80074a4:	d120      	bne.n	80074e8 <_printf_common+0xc8>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e010      	b.n	80074cc <_printf_common+0xac>
 80074aa:	3701      	adds	r7, #1
 80074ac:	68e3      	ldr	r3, [r4, #12]
 80074ae:	682a      	ldr	r2, [r5, #0]
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	42bb      	cmp	r3, r7
 80074b4:	ddd2      	ble.n	800745c <_printf_common+0x3c>
 80074b6:	0022      	movs	r2, r4
 80074b8:	2301      	movs	r3, #1
 80074ba:	9901      	ldr	r1, [sp, #4]
 80074bc:	9800      	ldr	r0, [sp, #0]
 80074be:	9e08      	ldr	r6, [sp, #32]
 80074c0:	3219      	adds	r2, #25
 80074c2:	47b0      	blx	r6
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d1f0      	bne.n	80074aa <_printf_common+0x8a>
 80074c8:	2001      	movs	r0, #1
 80074ca:	4240      	negs	r0, r0
 80074cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80074ce:	2030      	movs	r0, #48	; 0x30
 80074d0:	18e1      	adds	r1, r4, r3
 80074d2:	3143      	adds	r1, #67	; 0x43
 80074d4:	7008      	strb	r0, [r1, #0]
 80074d6:	0021      	movs	r1, r4
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	3145      	adds	r1, #69	; 0x45
 80074dc:	7809      	ldrb	r1, [r1, #0]
 80074de:	18a2      	adds	r2, r4, r2
 80074e0:	3243      	adds	r2, #67	; 0x43
 80074e2:	3302      	adds	r3, #2
 80074e4:	7011      	strb	r1, [r2, #0]
 80074e6:	e7c1      	b.n	800746c <_printf_common+0x4c>
 80074e8:	0022      	movs	r2, r4
 80074ea:	2301      	movs	r3, #1
 80074ec:	9901      	ldr	r1, [sp, #4]
 80074ee:	9800      	ldr	r0, [sp, #0]
 80074f0:	9e08      	ldr	r6, [sp, #32]
 80074f2:	321a      	adds	r2, #26
 80074f4:	47b0      	blx	r6
 80074f6:	1c43      	adds	r3, r0, #1
 80074f8:	d0e6      	beq.n	80074c8 <_printf_common+0xa8>
 80074fa:	3701      	adds	r7, #1
 80074fc:	e7d1      	b.n	80074a2 <_printf_common+0x82>
	...

08007500 <_printf_i>:
 8007500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007502:	b08b      	sub	sp, #44	; 0x2c
 8007504:	9206      	str	r2, [sp, #24]
 8007506:	000a      	movs	r2, r1
 8007508:	3243      	adds	r2, #67	; 0x43
 800750a:	9307      	str	r3, [sp, #28]
 800750c:	9005      	str	r0, [sp, #20]
 800750e:	9204      	str	r2, [sp, #16]
 8007510:	7e0a      	ldrb	r2, [r1, #24]
 8007512:	000c      	movs	r4, r1
 8007514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007516:	2a78      	cmp	r2, #120	; 0x78
 8007518:	d807      	bhi.n	800752a <_printf_i+0x2a>
 800751a:	2a62      	cmp	r2, #98	; 0x62
 800751c:	d809      	bhi.n	8007532 <_printf_i+0x32>
 800751e:	2a00      	cmp	r2, #0
 8007520:	d100      	bne.n	8007524 <_printf_i+0x24>
 8007522:	e0c1      	b.n	80076a8 <_printf_i+0x1a8>
 8007524:	2a58      	cmp	r2, #88	; 0x58
 8007526:	d100      	bne.n	800752a <_printf_i+0x2a>
 8007528:	e08c      	b.n	8007644 <_printf_i+0x144>
 800752a:	0026      	movs	r6, r4
 800752c:	3642      	adds	r6, #66	; 0x42
 800752e:	7032      	strb	r2, [r6, #0]
 8007530:	e022      	b.n	8007578 <_printf_i+0x78>
 8007532:	0010      	movs	r0, r2
 8007534:	3863      	subs	r0, #99	; 0x63
 8007536:	2815      	cmp	r0, #21
 8007538:	d8f7      	bhi.n	800752a <_printf_i+0x2a>
 800753a:	f7f8 fdf7 	bl	800012c <__gnu_thumb1_case_shi>
 800753e:	0016      	.short	0x0016
 8007540:	fff6001f 	.word	0xfff6001f
 8007544:	fff6fff6 	.word	0xfff6fff6
 8007548:	001ffff6 	.word	0x001ffff6
 800754c:	fff6fff6 	.word	0xfff6fff6
 8007550:	fff6fff6 	.word	0xfff6fff6
 8007554:	003600a8 	.word	0x003600a8
 8007558:	fff6009a 	.word	0xfff6009a
 800755c:	00b9fff6 	.word	0x00b9fff6
 8007560:	0036fff6 	.word	0x0036fff6
 8007564:	fff6fff6 	.word	0xfff6fff6
 8007568:	009e      	.short	0x009e
 800756a:	0026      	movs	r6, r4
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	3642      	adds	r6, #66	; 0x42
 8007570:	1d11      	adds	r1, r2, #4
 8007572:	6019      	str	r1, [r3, #0]
 8007574:	6813      	ldr	r3, [r2, #0]
 8007576:	7033      	strb	r3, [r6, #0]
 8007578:	2301      	movs	r3, #1
 800757a:	e0a7      	b.n	80076cc <_printf_i+0x1cc>
 800757c:	6808      	ldr	r0, [r1, #0]
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	1d0a      	adds	r2, r1, #4
 8007582:	0605      	lsls	r5, r0, #24
 8007584:	d50b      	bpl.n	800759e <_printf_i+0x9e>
 8007586:	680d      	ldr	r5, [r1, #0]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	2d00      	cmp	r5, #0
 800758c:	da03      	bge.n	8007596 <_printf_i+0x96>
 800758e:	232d      	movs	r3, #45	; 0x2d
 8007590:	9a04      	ldr	r2, [sp, #16]
 8007592:	426d      	negs	r5, r5
 8007594:	7013      	strb	r3, [r2, #0]
 8007596:	4b61      	ldr	r3, [pc, #388]	; (800771c <_printf_i+0x21c>)
 8007598:	270a      	movs	r7, #10
 800759a:	9303      	str	r3, [sp, #12]
 800759c:	e01b      	b.n	80075d6 <_printf_i+0xd6>
 800759e:	680d      	ldr	r5, [r1, #0]
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	0641      	lsls	r1, r0, #25
 80075a4:	d5f1      	bpl.n	800758a <_printf_i+0x8a>
 80075a6:	b22d      	sxth	r5, r5
 80075a8:	e7ef      	b.n	800758a <_printf_i+0x8a>
 80075aa:	680d      	ldr	r5, [r1, #0]
 80075ac:	6819      	ldr	r1, [r3, #0]
 80075ae:	1d08      	adds	r0, r1, #4
 80075b0:	6018      	str	r0, [r3, #0]
 80075b2:	062e      	lsls	r6, r5, #24
 80075b4:	d501      	bpl.n	80075ba <_printf_i+0xba>
 80075b6:	680d      	ldr	r5, [r1, #0]
 80075b8:	e003      	b.n	80075c2 <_printf_i+0xc2>
 80075ba:	066d      	lsls	r5, r5, #25
 80075bc:	d5fb      	bpl.n	80075b6 <_printf_i+0xb6>
 80075be:	680d      	ldr	r5, [r1, #0]
 80075c0:	b2ad      	uxth	r5, r5
 80075c2:	4b56      	ldr	r3, [pc, #344]	; (800771c <_printf_i+0x21c>)
 80075c4:	2708      	movs	r7, #8
 80075c6:	9303      	str	r3, [sp, #12]
 80075c8:	2a6f      	cmp	r2, #111	; 0x6f
 80075ca:	d000      	beq.n	80075ce <_printf_i+0xce>
 80075cc:	3702      	adds	r7, #2
 80075ce:	0023      	movs	r3, r4
 80075d0:	2200      	movs	r2, #0
 80075d2:	3343      	adds	r3, #67	; 0x43
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	60a3      	str	r3, [r4, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	db03      	blt.n	80075e6 <_printf_i+0xe6>
 80075de:	2204      	movs	r2, #4
 80075e0:	6821      	ldr	r1, [r4, #0]
 80075e2:	4391      	bics	r1, r2
 80075e4:	6021      	str	r1, [r4, #0]
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	d102      	bne.n	80075f0 <_printf_i+0xf0>
 80075ea:	9e04      	ldr	r6, [sp, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00c      	beq.n	800760a <_printf_i+0x10a>
 80075f0:	9e04      	ldr	r6, [sp, #16]
 80075f2:	0028      	movs	r0, r5
 80075f4:	0039      	movs	r1, r7
 80075f6:	f7f8 fe29 	bl	800024c <__aeabi_uidivmod>
 80075fa:	9b03      	ldr	r3, [sp, #12]
 80075fc:	3e01      	subs	r6, #1
 80075fe:	5c5b      	ldrb	r3, [r3, r1]
 8007600:	7033      	strb	r3, [r6, #0]
 8007602:	002b      	movs	r3, r5
 8007604:	0005      	movs	r5, r0
 8007606:	429f      	cmp	r7, r3
 8007608:	d9f3      	bls.n	80075f2 <_printf_i+0xf2>
 800760a:	2f08      	cmp	r7, #8
 800760c:	d109      	bne.n	8007622 <_printf_i+0x122>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	07db      	lsls	r3, r3, #31
 8007612:	d506      	bpl.n	8007622 <_printf_i+0x122>
 8007614:	6863      	ldr	r3, [r4, #4]
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	4293      	cmp	r3, r2
 800761a:	dc02      	bgt.n	8007622 <_printf_i+0x122>
 800761c:	2330      	movs	r3, #48	; 0x30
 800761e:	3e01      	subs	r6, #1
 8007620:	7033      	strb	r3, [r6, #0]
 8007622:	9b04      	ldr	r3, [sp, #16]
 8007624:	1b9b      	subs	r3, r3, r6
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	9b07      	ldr	r3, [sp, #28]
 800762a:	0021      	movs	r1, r4
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	9805      	ldr	r0, [sp, #20]
 8007630:	9b06      	ldr	r3, [sp, #24]
 8007632:	aa09      	add	r2, sp, #36	; 0x24
 8007634:	f7ff fef4 	bl	8007420 <_printf_common>
 8007638:	1c43      	adds	r3, r0, #1
 800763a:	d14c      	bne.n	80076d6 <_printf_i+0x1d6>
 800763c:	2001      	movs	r0, #1
 800763e:	4240      	negs	r0, r0
 8007640:	b00b      	add	sp, #44	; 0x2c
 8007642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007644:	3145      	adds	r1, #69	; 0x45
 8007646:	700a      	strb	r2, [r1, #0]
 8007648:	4a34      	ldr	r2, [pc, #208]	; (800771c <_printf_i+0x21c>)
 800764a:	9203      	str	r2, [sp, #12]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	6821      	ldr	r1, [r4, #0]
 8007650:	ca20      	ldmia	r2!, {r5}
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	0608      	lsls	r0, r1, #24
 8007656:	d516      	bpl.n	8007686 <_printf_i+0x186>
 8007658:	07cb      	lsls	r3, r1, #31
 800765a:	d502      	bpl.n	8007662 <_printf_i+0x162>
 800765c:	2320      	movs	r3, #32
 800765e:	4319      	orrs	r1, r3
 8007660:	6021      	str	r1, [r4, #0]
 8007662:	2710      	movs	r7, #16
 8007664:	2d00      	cmp	r5, #0
 8007666:	d1b2      	bne.n	80075ce <_printf_i+0xce>
 8007668:	2320      	movs	r3, #32
 800766a:	6822      	ldr	r2, [r4, #0]
 800766c:	439a      	bics	r2, r3
 800766e:	6022      	str	r2, [r4, #0]
 8007670:	e7ad      	b.n	80075ce <_printf_i+0xce>
 8007672:	2220      	movs	r2, #32
 8007674:	6809      	ldr	r1, [r1, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	6022      	str	r2, [r4, #0]
 800767a:	0022      	movs	r2, r4
 800767c:	2178      	movs	r1, #120	; 0x78
 800767e:	3245      	adds	r2, #69	; 0x45
 8007680:	7011      	strb	r1, [r2, #0]
 8007682:	4a27      	ldr	r2, [pc, #156]	; (8007720 <_printf_i+0x220>)
 8007684:	e7e1      	b.n	800764a <_printf_i+0x14a>
 8007686:	0648      	lsls	r0, r1, #25
 8007688:	d5e6      	bpl.n	8007658 <_printf_i+0x158>
 800768a:	b2ad      	uxth	r5, r5
 800768c:	e7e4      	b.n	8007658 <_printf_i+0x158>
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	680d      	ldr	r5, [r1, #0]
 8007692:	1d10      	adds	r0, r2, #4
 8007694:	6949      	ldr	r1, [r1, #20]
 8007696:	6018      	str	r0, [r3, #0]
 8007698:	6813      	ldr	r3, [r2, #0]
 800769a:	062e      	lsls	r6, r5, #24
 800769c:	d501      	bpl.n	80076a2 <_printf_i+0x1a2>
 800769e:	6019      	str	r1, [r3, #0]
 80076a0:	e002      	b.n	80076a8 <_printf_i+0x1a8>
 80076a2:	066d      	lsls	r5, r5, #25
 80076a4:	d5fb      	bpl.n	800769e <_printf_i+0x19e>
 80076a6:	8019      	strh	r1, [r3, #0]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9e04      	ldr	r6, [sp, #16]
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	e7bb      	b.n	8007628 <_printf_i+0x128>
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	1d11      	adds	r1, r2, #4
 80076b4:	6019      	str	r1, [r3, #0]
 80076b6:	6816      	ldr	r6, [r2, #0]
 80076b8:	2100      	movs	r1, #0
 80076ba:	0030      	movs	r0, r6
 80076bc:	6862      	ldr	r2, [r4, #4]
 80076be:	f001 fa11 	bl	8008ae4 <memchr>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d001      	beq.n	80076ca <_printf_i+0x1ca>
 80076c6:	1b80      	subs	r0, r0, r6
 80076c8:	6060      	str	r0, [r4, #4]
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	2300      	movs	r3, #0
 80076d0:	9a04      	ldr	r2, [sp, #16]
 80076d2:	7013      	strb	r3, [r2, #0]
 80076d4:	e7a8      	b.n	8007628 <_printf_i+0x128>
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	0032      	movs	r2, r6
 80076da:	9906      	ldr	r1, [sp, #24]
 80076dc:	9805      	ldr	r0, [sp, #20]
 80076de:	9d07      	ldr	r5, [sp, #28]
 80076e0:	47a8      	blx	r5
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d0aa      	beq.n	800763c <_printf_i+0x13c>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	079b      	lsls	r3, r3, #30
 80076ea:	d415      	bmi.n	8007718 <_printf_i+0x218>
 80076ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ee:	68e0      	ldr	r0, [r4, #12]
 80076f0:	4298      	cmp	r0, r3
 80076f2:	daa5      	bge.n	8007640 <_printf_i+0x140>
 80076f4:	0018      	movs	r0, r3
 80076f6:	e7a3      	b.n	8007640 <_printf_i+0x140>
 80076f8:	0022      	movs	r2, r4
 80076fa:	2301      	movs	r3, #1
 80076fc:	9906      	ldr	r1, [sp, #24]
 80076fe:	9805      	ldr	r0, [sp, #20]
 8007700:	9e07      	ldr	r6, [sp, #28]
 8007702:	3219      	adds	r2, #25
 8007704:	47b0      	blx	r6
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d098      	beq.n	800763c <_printf_i+0x13c>
 800770a:	3501      	adds	r5, #1
 800770c:	68e3      	ldr	r3, [r4, #12]
 800770e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	42ab      	cmp	r3, r5
 8007714:	dcf0      	bgt.n	80076f8 <_printf_i+0x1f8>
 8007716:	e7e9      	b.n	80076ec <_printf_i+0x1ec>
 8007718:	2500      	movs	r5, #0
 800771a:	e7f7      	b.n	800770c <_printf_i+0x20c>
 800771c:	080099d3 	.word	0x080099d3
 8007720:	080099e4 	.word	0x080099e4

08007724 <iprintf>:
 8007724:	b40f      	push	{r0, r1, r2, r3}
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <iprintf+0x30>)
 8007728:	b513      	push	{r0, r1, r4, lr}
 800772a:	681c      	ldr	r4, [r3, #0]
 800772c:	2c00      	cmp	r4, #0
 800772e:	d005      	beq.n	800773c <iprintf+0x18>
 8007730:	69a3      	ldr	r3, [r4, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <iprintf+0x18>
 8007736:	0020      	movs	r0, r4
 8007738:	f001 f8b6 	bl	80088a8 <__sinit>
 800773c:	ab05      	add	r3, sp, #20
 800773e:	0020      	movs	r0, r4
 8007740:	9a04      	ldr	r2, [sp, #16]
 8007742:	68a1      	ldr	r1, [r4, #8]
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	f7ff fa45 	bl	8006bd4 <_vfiprintf_r>
 800774a:	bc16      	pop	{r1, r2, r4}
 800774c:	bc08      	pop	{r3}
 800774e:	b004      	add	sp, #16
 8007750:	4718      	bx	r3
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	2000000c 	.word	0x2000000c

08007758 <__swbuf_r>:
 8007758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775a:	0005      	movs	r5, r0
 800775c:	000e      	movs	r6, r1
 800775e:	0014      	movs	r4, r2
 8007760:	2800      	cmp	r0, #0
 8007762:	d004      	beq.n	800776e <__swbuf_r+0x16>
 8007764:	6983      	ldr	r3, [r0, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <__swbuf_r+0x16>
 800776a:	f001 f89d 	bl	80088a8 <__sinit>
 800776e:	4b22      	ldr	r3, [pc, #136]	; (80077f8 <__swbuf_r+0xa0>)
 8007770:	429c      	cmp	r4, r3
 8007772:	d12e      	bne.n	80077d2 <__swbuf_r+0x7a>
 8007774:	686c      	ldr	r4, [r5, #4]
 8007776:	69a3      	ldr	r3, [r4, #24]
 8007778:	60a3      	str	r3, [r4, #8]
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	071b      	lsls	r3, r3, #28
 800777e:	d532      	bpl.n	80077e6 <__swbuf_r+0x8e>
 8007780:	6923      	ldr	r3, [r4, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d02f      	beq.n	80077e6 <__swbuf_r+0x8e>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	6922      	ldr	r2, [r4, #16]
 800778a:	b2f7      	uxtb	r7, r6
 800778c:	1a98      	subs	r0, r3, r2
 800778e:	6963      	ldr	r3, [r4, #20]
 8007790:	b2f6      	uxtb	r6, r6
 8007792:	4283      	cmp	r3, r0
 8007794:	dc05      	bgt.n	80077a2 <__swbuf_r+0x4a>
 8007796:	0021      	movs	r1, r4
 8007798:	0028      	movs	r0, r5
 800779a:	f000 ffe3 	bl	8008764 <_fflush_r>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d127      	bne.n	80077f2 <__swbuf_r+0x9a>
 80077a2:	68a3      	ldr	r3, [r4, #8]
 80077a4:	3001      	adds	r0, #1
 80077a6:	3b01      	subs	r3, #1
 80077a8:	60a3      	str	r3, [r4, #8]
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	6022      	str	r2, [r4, #0]
 80077b0:	701f      	strb	r7, [r3, #0]
 80077b2:	6963      	ldr	r3, [r4, #20]
 80077b4:	4283      	cmp	r3, r0
 80077b6:	d004      	beq.n	80077c2 <__swbuf_r+0x6a>
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	07db      	lsls	r3, r3, #31
 80077bc:	d507      	bpl.n	80077ce <__swbuf_r+0x76>
 80077be:	2e0a      	cmp	r6, #10
 80077c0:	d105      	bne.n	80077ce <__swbuf_r+0x76>
 80077c2:	0021      	movs	r1, r4
 80077c4:	0028      	movs	r0, r5
 80077c6:	f000 ffcd 	bl	8008764 <_fflush_r>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d111      	bne.n	80077f2 <__swbuf_r+0x9a>
 80077ce:	0030      	movs	r0, r6
 80077d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <__swbuf_r+0xa4>)
 80077d4:	429c      	cmp	r4, r3
 80077d6:	d101      	bne.n	80077dc <__swbuf_r+0x84>
 80077d8:	68ac      	ldr	r4, [r5, #8]
 80077da:	e7cc      	b.n	8007776 <__swbuf_r+0x1e>
 80077dc:	4b08      	ldr	r3, [pc, #32]	; (8007800 <__swbuf_r+0xa8>)
 80077de:	429c      	cmp	r4, r3
 80077e0:	d1c9      	bne.n	8007776 <__swbuf_r+0x1e>
 80077e2:	68ec      	ldr	r4, [r5, #12]
 80077e4:	e7c7      	b.n	8007776 <__swbuf_r+0x1e>
 80077e6:	0021      	movs	r1, r4
 80077e8:	0028      	movs	r0, r5
 80077ea:	f000 f80b 	bl	8007804 <__swsetup_r>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d0c9      	beq.n	8007786 <__swbuf_r+0x2e>
 80077f2:	2601      	movs	r6, #1
 80077f4:	4276      	negs	r6, r6
 80077f6:	e7ea      	b.n	80077ce <__swbuf_r+0x76>
 80077f8:	08009aa8 	.word	0x08009aa8
 80077fc:	08009ac8 	.word	0x08009ac8
 8007800:	08009a88 	.word	0x08009a88

08007804 <__swsetup_r>:
 8007804:	4b37      	ldr	r3, [pc, #220]	; (80078e4 <__swsetup_r+0xe0>)
 8007806:	b570      	push	{r4, r5, r6, lr}
 8007808:	681d      	ldr	r5, [r3, #0]
 800780a:	0006      	movs	r6, r0
 800780c:	000c      	movs	r4, r1
 800780e:	2d00      	cmp	r5, #0
 8007810:	d005      	beq.n	800781e <__swsetup_r+0x1a>
 8007812:	69ab      	ldr	r3, [r5, #24]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <__swsetup_r+0x1a>
 8007818:	0028      	movs	r0, r5
 800781a:	f001 f845 	bl	80088a8 <__sinit>
 800781e:	4b32      	ldr	r3, [pc, #200]	; (80078e8 <__swsetup_r+0xe4>)
 8007820:	429c      	cmp	r4, r3
 8007822:	d10f      	bne.n	8007844 <__swsetup_r+0x40>
 8007824:	686c      	ldr	r4, [r5, #4]
 8007826:	230c      	movs	r3, #12
 8007828:	5ee2      	ldrsh	r2, [r4, r3]
 800782a:	b293      	uxth	r3, r2
 800782c:	0711      	lsls	r1, r2, #28
 800782e:	d42d      	bmi.n	800788c <__swsetup_r+0x88>
 8007830:	06d9      	lsls	r1, r3, #27
 8007832:	d411      	bmi.n	8007858 <__swsetup_r+0x54>
 8007834:	2309      	movs	r3, #9
 8007836:	2001      	movs	r0, #1
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	3337      	adds	r3, #55	; 0x37
 800783c:	4313      	orrs	r3, r2
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	4240      	negs	r0, r0
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	4b29      	ldr	r3, [pc, #164]	; (80078ec <__swsetup_r+0xe8>)
 8007846:	429c      	cmp	r4, r3
 8007848:	d101      	bne.n	800784e <__swsetup_r+0x4a>
 800784a:	68ac      	ldr	r4, [r5, #8]
 800784c:	e7eb      	b.n	8007826 <__swsetup_r+0x22>
 800784e:	4b28      	ldr	r3, [pc, #160]	; (80078f0 <__swsetup_r+0xec>)
 8007850:	429c      	cmp	r4, r3
 8007852:	d1e8      	bne.n	8007826 <__swsetup_r+0x22>
 8007854:	68ec      	ldr	r4, [r5, #12]
 8007856:	e7e6      	b.n	8007826 <__swsetup_r+0x22>
 8007858:	075b      	lsls	r3, r3, #29
 800785a:	d513      	bpl.n	8007884 <__swsetup_r+0x80>
 800785c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800785e:	2900      	cmp	r1, #0
 8007860:	d008      	beq.n	8007874 <__swsetup_r+0x70>
 8007862:	0023      	movs	r3, r4
 8007864:	3344      	adds	r3, #68	; 0x44
 8007866:	4299      	cmp	r1, r3
 8007868:	d002      	beq.n	8007870 <__swsetup_r+0x6c>
 800786a:	0030      	movs	r0, r6
 800786c:	f001 fd16 	bl	800929c <_free_r>
 8007870:	2300      	movs	r3, #0
 8007872:	6363      	str	r3, [r4, #52]	; 0x34
 8007874:	2224      	movs	r2, #36	; 0x24
 8007876:	89a3      	ldrh	r3, [r4, #12]
 8007878:	4393      	bics	r3, r2
 800787a:	81a3      	strh	r3, [r4, #12]
 800787c:	2300      	movs	r3, #0
 800787e:	6063      	str	r3, [r4, #4]
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	2308      	movs	r3, #8
 8007886:	89a2      	ldrh	r2, [r4, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <__swsetup_r+0xa6>
 8007892:	21a0      	movs	r1, #160	; 0xa0
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	89a3      	ldrh	r3, [r4, #12]
 8007898:	0089      	lsls	r1, r1, #2
 800789a:	0092      	lsls	r2, r2, #2
 800789c:	400b      	ands	r3, r1
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <__swsetup_r+0xa6>
 80078a2:	0021      	movs	r1, r4
 80078a4:	0030      	movs	r0, r6
 80078a6:	f001 f8cf 	bl	8008a48 <__smakebuf_r>
 80078aa:	220c      	movs	r2, #12
 80078ac:	5ea3      	ldrsh	r3, [r4, r2]
 80078ae:	2001      	movs	r0, #1
 80078b0:	001a      	movs	r2, r3
 80078b2:	b299      	uxth	r1, r3
 80078b4:	4002      	ands	r2, r0
 80078b6:	4203      	tst	r3, r0
 80078b8:	d00f      	beq.n	80078da <__swsetup_r+0xd6>
 80078ba:	2200      	movs	r2, #0
 80078bc:	60a2      	str	r2, [r4, #8]
 80078be:	6962      	ldr	r2, [r4, #20]
 80078c0:	4252      	negs	r2, r2
 80078c2:	61a2      	str	r2, [r4, #24]
 80078c4:	2000      	movs	r0, #0
 80078c6:	6922      	ldr	r2, [r4, #16]
 80078c8:	4282      	cmp	r2, r0
 80078ca:	d1ba      	bne.n	8007842 <__swsetup_r+0x3e>
 80078cc:	060a      	lsls	r2, r1, #24
 80078ce:	d5b8      	bpl.n	8007842 <__swsetup_r+0x3e>
 80078d0:	2240      	movs	r2, #64	; 0x40
 80078d2:	4313      	orrs	r3, r2
 80078d4:	81a3      	strh	r3, [r4, #12]
 80078d6:	3801      	subs	r0, #1
 80078d8:	e7b3      	b.n	8007842 <__swsetup_r+0x3e>
 80078da:	0788      	lsls	r0, r1, #30
 80078dc:	d400      	bmi.n	80078e0 <__swsetup_r+0xdc>
 80078de:	6962      	ldr	r2, [r4, #20]
 80078e0:	60a2      	str	r2, [r4, #8]
 80078e2:	e7ef      	b.n	80078c4 <__swsetup_r+0xc0>
 80078e4:	2000000c 	.word	0x2000000c
 80078e8:	08009aa8 	.word	0x08009aa8
 80078ec:	08009ac8 	.word	0x08009ac8
 80078f0:	08009a88 	.word	0x08009a88

080078f4 <abort>:
 80078f4:	2006      	movs	r0, #6
 80078f6:	b510      	push	{r4, lr}
 80078f8:	f001 fdee 	bl	80094d8 <raise>
 80078fc:	2001      	movs	r0, #1
 80078fe:	f7fb fe50 	bl	80035a2 <_exit>

08007902 <quorem>:
 8007902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007904:	0006      	movs	r6, r0
 8007906:	690b      	ldr	r3, [r1, #16]
 8007908:	6932      	ldr	r2, [r6, #16]
 800790a:	b087      	sub	sp, #28
 800790c:	2000      	movs	r0, #0
 800790e:	9103      	str	r1, [sp, #12]
 8007910:	429a      	cmp	r2, r3
 8007912:	db65      	blt.n	80079e0 <quorem+0xde>
 8007914:	3b01      	subs	r3, #1
 8007916:	009c      	lsls	r4, r3, #2
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	000b      	movs	r3, r1
 800791c:	3314      	adds	r3, #20
 800791e:	9305      	str	r3, [sp, #20]
 8007920:	191b      	adds	r3, r3, r4
 8007922:	9304      	str	r3, [sp, #16]
 8007924:	0033      	movs	r3, r6
 8007926:	3314      	adds	r3, #20
 8007928:	9302      	str	r3, [sp, #8]
 800792a:	191c      	adds	r4, r3, r4
 800792c:	9b04      	ldr	r3, [sp, #16]
 800792e:	6827      	ldr	r7, [r4, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	0038      	movs	r0, r7
 8007934:	1c5d      	adds	r5, r3, #1
 8007936:	0029      	movs	r1, r5
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	f7f8 fc01 	bl	8000140 <__udivsi3>
 800793e:	9001      	str	r0, [sp, #4]
 8007940:	42af      	cmp	r7, r5
 8007942:	d324      	bcc.n	800798e <quorem+0x8c>
 8007944:	2500      	movs	r5, #0
 8007946:	46ac      	mov	ip, r5
 8007948:	9802      	ldr	r0, [sp, #8]
 800794a:	9f05      	ldr	r7, [sp, #20]
 800794c:	cf08      	ldmia	r7!, {r3}
 800794e:	9a01      	ldr	r2, [sp, #4]
 8007950:	b299      	uxth	r1, r3
 8007952:	4351      	muls	r1, r2
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	4353      	muls	r3, r2
 8007958:	1949      	adds	r1, r1, r5
 800795a:	0c0a      	lsrs	r2, r1, #16
 800795c:	189b      	adds	r3, r3, r2
 800795e:	6802      	ldr	r2, [r0, #0]
 8007960:	b289      	uxth	r1, r1
 8007962:	b292      	uxth	r2, r2
 8007964:	4462      	add	r2, ip
 8007966:	1a52      	subs	r2, r2, r1
 8007968:	6801      	ldr	r1, [r0, #0]
 800796a:	0c1d      	lsrs	r5, r3, #16
 800796c:	0c09      	lsrs	r1, r1, #16
 800796e:	b29b      	uxth	r3, r3
 8007970:	1acb      	subs	r3, r1, r3
 8007972:	1411      	asrs	r1, r2, #16
 8007974:	185b      	adds	r3, r3, r1
 8007976:	1419      	asrs	r1, r3, #16
 8007978:	b292      	uxth	r2, r2
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	431a      	orrs	r2, r3
 800797e:	9b04      	ldr	r3, [sp, #16]
 8007980:	468c      	mov	ip, r1
 8007982:	c004      	stmia	r0!, {r2}
 8007984:	42bb      	cmp	r3, r7
 8007986:	d2e1      	bcs.n	800794c <quorem+0x4a>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d030      	beq.n	80079f0 <quorem+0xee>
 800798e:	0030      	movs	r0, r6
 8007990:	9903      	ldr	r1, [sp, #12]
 8007992:	f001 fb3f 	bl	8009014 <__mcmp>
 8007996:	2800      	cmp	r0, #0
 8007998:	db21      	blt.n	80079de <quorem+0xdc>
 800799a:	0030      	movs	r0, r6
 800799c:	2400      	movs	r4, #0
 800799e:	9b01      	ldr	r3, [sp, #4]
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	3301      	adds	r3, #1
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	3014      	adds	r0, #20
 80079a8:	3114      	adds	r1, #20
 80079aa:	6803      	ldr	r3, [r0, #0]
 80079ac:	c920      	ldmia	r1!, {r5}
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	1914      	adds	r4, r2, r4
 80079b2:	b2aa      	uxth	r2, r5
 80079b4:	1aa2      	subs	r2, r4, r2
 80079b6:	0c1b      	lsrs	r3, r3, #16
 80079b8:	0c2d      	lsrs	r5, r5, #16
 80079ba:	1414      	asrs	r4, r2, #16
 80079bc:	1b5b      	subs	r3, r3, r5
 80079be:	191b      	adds	r3, r3, r4
 80079c0:	141c      	asrs	r4, r3, #16
 80079c2:	b292      	uxth	r2, r2
 80079c4:	041b      	lsls	r3, r3, #16
 80079c6:	4313      	orrs	r3, r2
 80079c8:	c008      	stmia	r0!, {r3}
 80079ca:	9b04      	ldr	r3, [sp, #16]
 80079cc:	428b      	cmp	r3, r1
 80079ce:	d2ec      	bcs.n	80079aa <quorem+0xa8>
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	9a02      	ldr	r2, [sp, #8]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	18d3      	adds	r3, r2, r3
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	2a00      	cmp	r2, #0
 80079dc:	d015      	beq.n	8007a0a <quorem+0x108>
 80079de:	9801      	ldr	r0, [sp, #4]
 80079e0:	b007      	add	sp, #28
 80079e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <quorem+0xf6>
 80079ea:	9b00      	ldr	r3, [sp, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	3c04      	subs	r4, #4
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d3f5      	bcc.n	80079e4 <quorem+0xe2>
 80079f8:	9b00      	ldr	r3, [sp, #0]
 80079fa:	6133      	str	r3, [r6, #16]
 80079fc:	e7c7      	b.n	800798e <quorem+0x8c>
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	2a00      	cmp	r2, #0
 8007a02:	d106      	bne.n	8007a12 <quorem+0x110>
 8007a04:	9a00      	ldr	r2, [sp, #0]
 8007a06:	3a01      	subs	r2, #1
 8007a08:	9200      	str	r2, [sp, #0]
 8007a0a:	9a02      	ldr	r2, [sp, #8]
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d3f5      	bcc.n	80079fe <quorem+0xfc>
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	6133      	str	r3, [r6, #16]
 8007a16:	e7e2      	b.n	80079de <quorem+0xdc>

08007a18 <_dtoa_r>:
 8007a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1a:	b09d      	sub	sp, #116	; 0x74
 8007a1c:	9202      	str	r2, [sp, #8]
 8007a1e:	9303      	str	r3, [sp, #12]
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	9c03      	ldr	r4, [sp, #12]
 8007a24:	9308      	str	r3, [sp, #32]
 8007a26:	9409      	str	r4, [sp, #36]	; 0x24
 8007a28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a2a:	0007      	movs	r7, r0
 8007a2c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007a2e:	2c00      	cmp	r4, #0
 8007a30:	d10e      	bne.n	8007a50 <_dtoa_r+0x38>
 8007a32:	2010      	movs	r0, #16
 8007a34:	f001 f84c 	bl	8008ad0 <malloc>
 8007a38:	1e02      	subs	r2, r0, #0
 8007a3a:	6278      	str	r0, [r7, #36]	; 0x24
 8007a3c:	d104      	bne.n	8007a48 <_dtoa_r+0x30>
 8007a3e:	21ea      	movs	r1, #234	; 0xea
 8007a40:	4bc7      	ldr	r3, [pc, #796]	; (8007d60 <_dtoa_r+0x348>)
 8007a42:	48c8      	ldr	r0, [pc, #800]	; (8007d64 <_dtoa_r+0x34c>)
 8007a44:	f7ff f83e 	bl	8006ac4 <__assert_func>
 8007a48:	6044      	str	r4, [r0, #4]
 8007a4a:	6084      	str	r4, [r0, #8]
 8007a4c:	6004      	str	r4, [r0, #0]
 8007a4e:	60c4      	str	r4, [r0, #12]
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	6819      	ldr	r1, [r3, #0]
 8007a54:	2900      	cmp	r1, #0
 8007a56:	d00a      	beq.n	8007a6e <_dtoa_r+0x56>
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4093      	lsls	r3, r2
 8007a5e:	604a      	str	r2, [r1, #4]
 8007a60:	608b      	str	r3, [r1, #8]
 8007a62:	0038      	movs	r0, r7
 8007a64:	f001 f896 	bl	8008b94 <_Bfree>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da20      	bge.n	8007ab6 <_dtoa_r+0x9e>
 8007a74:	2301      	movs	r3, #1
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	9b03      	ldr	r3, [sp, #12]
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	085b      	lsrs	r3, r3, #1
 8007a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a82:	4bb9      	ldr	r3, [pc, #740]	; (8007d68 <_dtoa_r+0x350>)
 8007a84:	4ab8      	ldr	r2, [pc, #736]	; (8007d68 <_dtoa_r+0x350>)
 8007a86:	402b      	ands	r3, r5
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d117      	bne.n	8007abc <_dtoa_r+0xa4>
 8007a8c:	4bb7      	ldr	r3, [pc, #732]	; (8007d6c <_dtoa_r+0x354>)
 8007a8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007a90:	0328      	lsls	r0, r5, #12
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	0b00      	lsrs	r0, r0, #12
 8007a98:	4318      	orrs	r0, r3
 8007a9a:	d101      	bne.n	8007aa0 <_dtoa_r+0x88>
 8007a9c:	f000 fdbf 	bl	800861e <_dtoa_r+0xc06>
 8007aa0:	48b3      	ldr	r0, [pc, #716]	; (8007d70 <_dtoa_r+0x358>)
 8007aa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007aa4:	9006      	str	r0, [sp, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <_dtoa_r+0x98>
 8007aaa:	4bb2      	ldr	r3, [pc, #712]	; (8007d74 <_dtoa_r+0x35c>)
 8007aac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	9806      	ldr	r0, [sp, #24]
 8007ab2:	b01d      	add	sp, #116	; 0x74
 8007ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	e7e1      	b.n	8007a80 <_dtoa_r+0x68>
 8007abc:	9b08      	ldr	r3, [sp, #32]
 8007abe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007ac0:	9312      	str	r3, [sp, #72]	; 0x48
 8007ac2:	9413      	str	r4, [sp, #76]	; 0x4c
 8007ac4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007ac6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ac8:	2200      	movs	r2, #0
 8007aca:	2300      	movs	r3, #0
 8007acc:	f7f8 fcbe 	bl	800044c <__aeabi_dcmpeq>
 8007ad0:	1e04      	subs	r4, r0, #0
 8007ad2:	d009      	beq.n	8007ae8 <_dtoa_r+0xd0>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	4ba7      	ldr	r3, [pc, #668]	; (8007d78 <_dtoa_r+0x360>)
 8007adc:	9306      	str	r3, [sp, #24]
 8007ade:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0e5      	beq.n	8007ab0 <_dtoa_r+0x98>
 8007ae4:	4ba5      	ldr	r3, [pc, #660]	; (8007d7c <_dtoa_r+0x364>)
 8007ae6:	e7e1      	b.n	8007aac <_dtoa_r+0x94>
 8007ae8:	ab1a      	add	r3, sp, #104	; 0x68
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	ab1b      	add	r3, sp, #108	; 0x6c
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	0038      	movs	r0, r7
 8007af2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007af4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007af6:	f001 fb41 	bl	800917c <__d2b>
 8007afa:	006e      	lsls	r6, r5, #1
 8007afc:	9005      	str	r0, [sp, #20]
 8007afe:	0d76      	lsrs	r6, r6, #21
 8007b00:	d100      	bne.n	8007b04 <_dtoa_r+0xec>
 8007b02:	e07c      	b.n	8007bfe <_dtoa_r+0x1e6>
 8007b04:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b06:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b0a:	4a9d      	ldr	r2, [pc, #628]	; (8007d80 <_dtoa_r+0x368>)
 8007b0c:	031b      	lsls	r3, r3, #12
 8007b0e:	0b1b      	lsrs	r3, r3, #12
 8007b10:	431a      	orrs	r2, r3
 8007b12:	0011      	movs	r1, r2
 8007b14:	4b9b      	ldr	r3, [pc, #620]	; (8007d84 <_dtoa_r+0x36c>)
 8007b16:	9418      	str	r4, [sp, #96]	; 0x60
 8007b18:	18f6      	adds	r6, r6, r3
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4b9a      	ldr	r3, [pc, #616]	; (8007d88 <_dtoa_r+0x370>)
 8007b1e:	f7fa fc03 	bl	8002328 <__aeabi_dsub>
 8007b22:	4a9a      	ldr	r2, [pc, #616]	; (8007d8c <_dtoa_r+0x374>)
 8007b24:	4b9a      	ldr	r3, [pc, #616]	; (8007d90 <_dtoa_r+0x378>)
 8007b26:	f7fa f993 	bl	8001e50 <__aeabi_dmul>
 8007b2a:	4a9a      	ldr	r2, [pc, #616]	; (8007d94 <_dtoa_r+0x37c>)
 8007b2c:	4b9a      	ldr	r3, [pc, #616]	; (8007d98 <_dtoa_r+0x380>)
 8007b2e:	f7f9 fa51 	bl	8000fd4 <__aeabi_dadd>
 8007b32:	0004      	movs	r4, r0
 8007b34:	0030      	movs	r0, r6
 8007b36:	000d      	movs	r5, r1
 8007b38:	f7fa ffdc 	bl	8002af4 <__aeabi_i2d>
 8007b3c:	4a97      	ldr	r2, [pc, #604]	; (8007d9c <_dtoa_r+0x384>)
 8007b3e:	4b98      	ldr	r3, [pc, #608]	; (8007da0 <_dtoa_r+0x388>)
 8007b40:	f7fa f986 	bl	8001e50 <__aeabi_dmul>
 8007b44:	0002      	movs	r2, r0
 8007b46:	000b      	movs	r3, r1
 8007b48:	0020      	movs	r0, r4
 8007b4a:	0029      	movs	r1, r5
 8007b4c:	f7f9 fa42 	bl	8000fd4 <__aeabi_dadd>
 8007b50:	0004      	movs	r4, r0
 8007b52:	000d      	movs	r5, r1
 8007b54:	f7fa ff98 	bl	8002a88 <__aeabi_d2iz>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	9002      	str	r0, [sp, #8]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	0020      	movs	r0, r4
 8007b60:	0029      	movs	r1, r5
 8007b62:	f7f8 fc79 	bl	8000458 <__aeabi_dcmplt>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d00b      	beq.n	8007b82 <_dtoa_r+0x16a>
 8007b6a:	9802      	ldr	r0, [sp, #8]
 8007b6c:	f7fa ffc2 	bl	8002af4 <__aeabi_i2d>
 8007b70:	002b      	movs	r3, r5
 8007b72:	0022      	movs	r2, r4
 8007b74:	f7f8 fc6a 	bl	800044c <__aeabi_dcmpeq>
 8007b78:	4243      	negs	r3, r0
 8007b7a:	4158      	adcs	r0, r3
 8007b7c:	9b02      	ldr	r3, [sp, #8]
 8007b7e:	1a1b      	subs	r3, r3, r0
 8007b80:	9302      	str	r3, [sp, #8]
 8007b82:	2301      	movs	r3, #1
 8007b84:	9316      	str	r3, [sp, #88]	; 0x58
 8007b86:	9b02      	ldr	r3, [sp, #8]
 8007b88:	2b16      	cmp	r3, #22
 8007b8a:	d80f      	bhi.n	8007bac <_dtoa_r+0x194>
 8007b8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007b90:	00da      	lsls	r2, r3, #3
 8007b92:	4b84      	ldr	r3, [pc, #528]	; (8007da4 <_dtoa_r+0x38c>)
 8007b94:	189b      	adds	r3, r3, r2
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f7f8 fc5d 	bl	8000458 <__aeabi_dcmplt>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d049      	beq.n	8007c36 <_dtoa_r+0x21e>
 8007ba2:	9b02      	ldr	r3, [sp, #8]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9316      	str	r3, [sp, #88]	; 0x58
 8007bac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007bae:	1b9e      	subs	r6, r3, r6
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb4:	0033      	movs	r3, r6
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8007bba:	d504      	bpl.n	8007bc6 <_dtoa_r+0x1ae>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	1b9b      	subs	r3, r3, r6
 8007bc0:	930a      	str	r3, [sp, #40]	; 0x28
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	930d      	str	r3, [sp, #52]	; 0x34
 8007bc6:	9b02      	ldr	r3, [sp, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	db36      	blt.n	8007c3a <_dtoa_r+0x222>
 8007bcc:	9a02      	ldr	r2, [sp, #8]
 8007bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bd0:	4694      	mov	ip, r2
 8007bd2:	4463      	add	r3, ip
 8007bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9215      	str	r2, [sp, #84]	; 0x54
 8007bda:	930e      	str	r3, [sp, #56]	; 0x38
 8007bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bde:	2401      	movs	r4, #1
 8007be0:	2b09      	cmp	r3, #9
 8007be2:	d864      	bhi.n	8007cae <_dtoa_r+0x296>
 8007be4:	2b05      	cmp	r3, #5
 8007be6:	dd02      	ble.n	8007bee <_dtoa_r+0x1d6>
 8007be8:	2400      	movs	r4, #0
 8007bea:	3b04      	subs	r3, #4
 8007bec:	9322      	str	r3, [sp, #136]	; 0x88
 8007bee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bf0:	1e98      	subs	r0, r3, #2
 8007bf2:	2803      	cmp	r0, #3
 8007bf4:	d864      	bhi.n	8007cc0 <_dtoa_r+0x2a8>
 8007bf6:	f7f8 fa8f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007bfa:	3829      	.short	0x3829
 8007bfc:	5836      	.short	0x5836
 8007bfe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007c00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c02:	189e      	adds	r6, r3, r2
 8007c04:	4b68      	ldr	r3, [pc, #416]	; (8007da8 <_dtoa_r+0x390>)
 8007c06:	18f2      	adds	r2, r6, r3
 8007c08:	2a20      	cmp	r2, #32
 8007c0a:	dd0f      	ble.n	8007c2c <_dtoa_r+0x214>
 8007c0c:	2340      	movs	r3, #64	; 0x40
 8007c0e:	1a9b      	subs	r3, r3, r2
 8007c10:	409d      	lsls	r5, r3
 8007c12:	4b66      	ldr	r3, [pc, #408]	; (8007dac <_dtoa_r+0x394>)
 8007c14:	9802      	ldr	r0, [sp, #8]
 8007c16:	18f3      	adds	r3, r6, r3
 8007c18:	40d8      	lsrs	r0, r3
 8007c1a:	4328      	orrs	r0, r5
 8007c1c:	f7fa ff9a 	bl	8002b54 <__aeabi_ui2d>
 8007c20:	2301      	movs	r3, #1
 8007c22:	4c63      	ldr	r4, [pc, #396]	; (8007db0 <_dtoa_r+0x398>)
 8007c24:	3e01      	subs	r6, #1
 8007c26:	1909      	adds	r1, r1, r4
 8007c28:	9318      	str	r3, [sp, #96]	; 0x60
 8007c2a:	e776      	b.n	8007b1a <_dtoa_r+0x102>
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	9802      	ldr	r0, [sp, #8]
 8007c30:	1a9b      	subs	r3, r3, r2
 8007c32:	4098      	lsls	r0, r3
 8007c34:	e7f2      	b.n	8007c1c <_dtoa_r+0x204>
 8007c36:	9016      	str	r0, [sp, #88]	; 0x58
 8007c38:	e7b8      	b.n	8007bac <_dtoa_r+0x194>
 8007c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3c:	9a02      	ldr	r2, [sp, #8]
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	930a      	str	r3, [sp, #40]	; 0x28
 8007c42:	4253      	negs	r3, r2
 8007c44:	930e      	str	r3, [sp, #56]	; 0x38
 8007c46:	2300      	movs	r3, #0
 8007c48:	9315      	str	r3, [sp, #84]	; 0x54
 8007c4a:	e7c7      	b.n	8007bdc <_dtoa_r+0x1c4>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c52:	930c      	str	r3, [sp, #48]	; 0x30
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dc13      	bgt.n	8007c82 <_dtoa_r+0x26a>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	001a      	movs	r2, r3
 8007c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	9223      	str	r2, [sp, #140]	; 0x8c
 8007c64:	e00d      	b.n	8007c82 <_dtoa_r+0x26a>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e7f1      	b.n	8007c4e <_dtoa_r+0x236>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c70:	4694      	mov	ip, r2
 8007c72:	9b02      	ldr	r3, [sp, #8]
 8007c74:	4463      	add	r3, ip
 8007c76:	930c      	str	r3, [sp, #48]	; 0x30
 8007c78:	3301      	adds	r3, #1
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dc00      	bgt.n	8007c82 <_dtoa_r+0x26a>
 8007c80:	2301      	movs	r3, #1
 8007c82:	2200      	movs	r2, #0
 8007c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c86:	6042      	str	r2, [r0, #4]
 8007c88:	3204      	adds	r2, #4
 8007c8a:	0015      	movs	r5, r2
 8007c8c:	3514      	adds	r5, #20
 8007c8e:	6841      	ldr	r1, [r0, #4]
 8007c90:	429d      	cmp	r5, r3
 8007c92:	d919      	bls.n	8007cc8 <_dtoa_r+0x2b0>
 8007c94:	0038      	movs	r0, r7
 8007c96:	f000 ff39 	bl	8008b0c <_Balloc>
 8007c9a:	9006      	str	r0, [sp, #24]
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d117      	bne.n	8007cd0 <_dtoa_r+0x2b8>
 8007ca0:	21d5      	movs	r1, #213	; 0xd5
 8007ca2:	0002      	movs	r2, r0
 8007ca4:	4b43      	ldr	r3, [pc, #268]	; (8007db4 <_dtoa_r+0x39c>)
 8007ca6:	0049      	lsls	r1, r1, #1
 8007ca8:	e6cb      	b.n	8007a42 <_dtoa_r+0x2a>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e7de      	b.n	8007c6c <_dtoa_r+0x254>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	940f      	str	r4, [sp, #60]	; 0x3c
 8007cb2:	9322      	str	r3, [sp, #136]	; 0x88
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cb8:	9307      	str	r3, [sp, #28]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	3313      	adds	r3, #19
 8007cbe:	e7d0      	b.n	8007c62 <_dtoa_r+0x24a>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cc4:	3b02      	subs	r3, #2
 8007cc6:	e7f6      	b.n	8007cb6 <_dtoa_r+0x29e>
 8007cc8:	3101      	adds	r1, #1
 8007cca:	6041      	str	r1, [r0, #4]
 8007ccc:	0052      	lsls	r2, r2, #1
 8007cce:	e7dc      	b.n	8007c8a <_dtoa_r+0x272>
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	9a06      	ldr	r2, [sp, #24]
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	9b07      	ldr	r3, [sp, #28]
 8007cd8:	2b0e      	cmp	r3, #14
 8007cda:	d900      	bls.n	8007cde <_dtoa_r+0x2c6>
 8007cdc:	e0eb      	b.n	8007eb6 <_dtoa_r+0x49e>
 8007cde:	2c00      	cmp	r4, #0
 8007ce0:	d100      	bne.n	8007ce4 <_dtoa_r+0x2cc>
 8007ce2:	e0e8      	b.n	8007eb6 <_dtoa_r+0x49e>
 8007ce4:	9b02      	ldr	r3, [sp, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dd68      	ble.n	8007dbc <_dtoa_r+0x3a4>
 8007cea:	001a      	movs	r2, r3
 8007cec:	210f      	movs	r1, #15
 8007cee:	4b2d      	ldr	r3, [pc, #180]	; (8007da4 <_dtoa_r+0x38c>)
 8007cf0:	400a      	ands	r2, r1
 8007cf2:	00d2      	lsls	r2, r2, #3
 8007cf4:	189b      	adds	r3, r3, r2
 8007cf6:	681d      	ldr	r5, [r3, #0]
 8007cf8:	685e      	ldr	r6, [r3, #4]
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	111c      	asrs	r4, r3, #4
 8007cfe:	2302      	movs	r3, #2
 8007d00:	9310      	str	r3, [sp, #64]	; 0x40
 8007d02:	9b02      	ldr	r3, [sp, #8]
 8007d04:	05db      	lsls	r3, r3, #23
 8007d06:	d50b      	bpl.n	8007d20 <_dtoa_r+0x308>
 8007d08:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <_dtoa_r+0x3a0>)
 8007d0a:	400c      	ands	r4, r1
 8007d0c:	6a1a      	ldr	r2, [r3, #32]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007d12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007d14:	f7f9 fc9a 	bl	800164c <__aeabi_ddiv>
 8007d18:	2303      	movs	r3, #3
 8007d1a:	9008      	str	r0, [sp, #32]
 8007d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d1e:	9310      	str	r3, [sp, #64]	; 0x40
 8007d20:	4b25      	ldr	r3, [pc, #148]	; (8007db8 <_dtoa_r+0x3a0>)
 8007d22:	9314      	str	r3, [sp, #80]	; 0x50
 8007d24:	2c00      	cmp	r4, #0
 8007d26:	d108      	bne.n	8007d3a <_dtoa_r+0x322>
 8007d28:	9808      	ldr	r0, [sp, #32]
 8007d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d2c:	002a      	movs	r2, r5
 8007d2e:	0033      	movs	r3, r6
 8007d30:	f7f9 fc8c 	bl	800164c <__aeabi_ddiv>
 8007d34:	9008      	str	r0, [sp, #32]
 8007d36:	9109      	str	r1, [sp, #36]	; 0x24
 8007d38:	e05c      	b.n	8007df4 <_dtoa_r+0x3dc>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	421c      	tst	r4, r3
 8007d3e:	d00b      	beq.n	8007d58 <_dtoa_r+0x340>
 8007d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d42:	0028      	movs	r0, r5
 8007d44:	3301      	adds	r3, #1
 8007d46:	9310      	str	r3, [sp, #64]	; 0x40
 8007d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d4a:	0031      	movs	r1, r6
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f7fa f87e 	bl	8001e50 <__aeabi_dmul>
 8007d54:	0005      	movs	r5, r0
 8007d56:	000e      	movs	r6, r1
 8007d58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d5a:	1064      	asrs	r4, r4, #1
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	e7e0      	b.n	8007d22 <_dtoa_r+0x30a>
 8007d60:	08009a02 	.word	0x08009a02
 8007d64:	08009a19 	.word	0x08009a19
 8007d68:	7ff00000 	.word	0x7ff00000
 8007d6c:	0000270f 	.word	0x0000270f
 8007d70:	080099fe 	.word	0x080099fe
 8007d74:	08009a01 	.word	0x08009a01
 8007d78:	080099d1 	.word	0x080099d1
 8007d7c:	080099d2 	.word	0x080099d2
 8007d80:	3ff00000 	.word	0x3ff00000
 8007d84:	fffffc01 	.word	0xfffffc01
 8007d88:	3ff80000 	.word	0x3ff80000
 8007d8c:	636f4361 	.word	0x636f4361
 8007d90:	3fd287a7 	.word	0x3fd287a7
 8007d94:	8b60c8b3 	.word	0x8b60c8b3
 8007d98:	3fc68a28 	.word	0x3fc68a28
 8007d9c:	509f79fb 	.word	0x509f79fb
 8007da0:	3fd34413 	.word	0x3fd34413
 8007da4:	08009b70 	.word	0x08009b70
 8007da8:	00000432 	.word	0x00000432
 8007dac:	00000412 	.word	0x00000412
 8007db0:	fe100000 	.word	0xfe100000
 8007db4:	08009a74 	.word	0x08009a74
 8007db8:	08009b48 	.word	0x08009b48
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d016      	beq.n	8007df4 <_dtoa_r+0x3dc>
 8007dc6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007dc8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007dca:	425c      	negs	r4, r3
 8007dcc:	230f      	movs	r3, #15
 8007dce:	4ab6      	ldr	r2, [pc, #728]	; (80080a8 <_dtoa_r+0x690>)
 8007dd0:	4023      	ands	r3, r4
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	18d3      	adds	r3, r2, r3
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f7fa f839 	bl	8001e50 <__aeabi_dmul>
 8007dde:	2601      	movs	r6, #1
 8007de0:	2300      	movs	r3, #0
 8007de2:	9008      	str	r0, [sp, #32]
 8007de4:	9109      	str	r1, [sp, #36]	; 0x24
 8007de6:	4db1      	ldr	r5, [pc, #708]	; (80080ac <_dtoa_r+0x694>)
 8007de8:	1124      	asrs	r4, r4, #4
 8007dea:	2c00      	cmp	r4, #0
 8007dec:	d000      	beq.n	8007df0 <_dtoa_r+0x3d8>
 8007dee:	e094      	b.n	8007f1a <_dtoa_r+0x502>
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d19f      	bne.n	8007d34 <_dtoa_r+0x31c>
 8007df4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d100      	bne.n	8007dfc <_dtoa_r+0x3e4>
 8007dfa:	e09b      	b.n	8007f34 <_dtoa_r+0x51c>
 8007dfc:	9c08      	ldr	r4, [sp, #32]
 8007dfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e00:	2200      	movs	r2, #0
 8007e02:	0020      	movs	r0, r4
 8007e04:	0029      	movs	r1, r5
 8007e06:	4baa      	ldr	r3, [pc, #680]	; (80080b0 <_dtoa_r+0x698>)
 8007e08:	f7f8 fb26 	bl	8000458 <__aeabi_dcmplt>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d100      	bne.n	8007e12 <_dtoa_r+0x3fa>
 8007e10:	e090      	b.n	8007f34 <_dtoa_r+0x51c>
 8007e12:	9b07      	ldr	r3, [sp, #28]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d100      	bne.n	8007e1a <_dtoa_r+0x402>
 8007e18:	e08c      	b.n	8007f34 <_dtoa_r+0x51c>
 8007e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	dd46      	ble.n	8007eae <_dtoa_r+0x496>
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	2200      	movs	r2, #0
 8007e24:	0020      	movs	r0, r4
 8007e26:	0029      	movs	r1, r5
 8007e28:	1e5e      	subs	r6, r3, #1
 8007e2a:	4ba2      	ldr	r3, [pc, #648]	; (80080b4 <_dtoa_r+0x69c>)
 8007e2c:	f7fa f810 	bl	8001e50 <__aeabi_dmul>
 8007e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e32:	9008      	str	r0, [sp, #32]
 8007e34:	9109      	str	r1, [sp, #36]	; 0x24
 8007e36:	3301      	adds	r3, #1
 8007e38:	9310      	str	r3, [sp, #64]	; 0x40
 8007e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007e3e:	9c08      	ldr	r4, [sp, #32]
 8007e40:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e42:	9314      	str	r3, [sp, #80]	; 0x50
 8007e44:	f7fa fe56 	bl	8002af4 <__aeabi_i2d>
 8007e48:	0022      	movs	r2, r4
 8007e4a:	002b      	movs	r3, r5
 8007e4c:	f7fa f800 	bl	8001e50 <__aeabi_dmul>
 8007e50:	2200      	movs	r2, #0
 8007e52:	4b99      	ldr	r3, [pc, #612]	; (80080b8 <_dtoa_r+0x6a0>)
 8007e54:	f7f9 f8be 	bl	8000fd4 <__aeabi_dadd>
 8007e58:	9010      	str	r0, [sp, #64]	; 0x40
 8007e5a:	9111      	str	r1, [sp, #68]	; 0x44
 8007e5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e60:	9208      	str	r2, [sp, #32]
 8007e62:	9309      	str	r3, [sp, #36]	; 0x24
 8007e64:	4a95      	ldr	r2, [pc, #596]	; (80080bc <_dtoa_r+0x6a4>)
 8007e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e68:	4694      	mov	ip, r2
 8007e6a:	4463      	add	r3, ip
 8007e6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d161      	bne.n	8007f3a <_dtoa_r+0x522>
 8007e76:	2200      	movs	r2, #0
 8007e78:	0020      	movs	r0, r4
 8007e7a:	0029      	movs	r1, r5
 8007e7c:	4b90      	ldr	r3, [pc, #576]	; (80080c0 <_dtoa_r+0x6a8>)
 8007e7e:	f7fa fa53 	bl	8002328 <__aeabi_dsub>
 8007e82:	9a08      	ldr	r2, [sp, #32]
 8007e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e86:	0004      	movs	r4, r0
 8007e88:	000d      	movs	r5, r1
 8007e8a:	f7f8 faf9 	bl	8000480 <__aeabi_dcmpgt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d000      	beq.n	8007e94 <_dtoa_r+0x47c>
 8007e92:	e2af      	b.n	80083f4 <_dtoa_r+0x9dc>
 8007e94:	488b      	ldr	r0, [pc, #556]	; (80080c4 <_dtoa_r+0x6ac>)
 8007e96:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007e98:	4684      	mov	ip, r0
 8007e9a:	4461      	add	r1, ip
 8007e9c:	000b      	movs	r3, r1
 8007e9e:	0020      	movs	r0, r4
 8007ea0:	0029      	movs	r1, r5
 8007ea2:	9a08      	ldr	r2, [sp, #32]
 8007ea4:	f7f8 fad8 	bl	8000458 <__aeabi_dcmplt>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d000      	beq.n	8007eae <_dtoa_r+0x496>
 8007eac:	e29f      	b.n	80083ee <_dtoa_r+0x9d6>
 8007eae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007eb0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007eb2:	9308      	str	r3, [sp, #32]
 8007eb4:	9409      	str	r4, [sp, #36]	; 0x24
 8007eb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da00      	bge.n	8007ebe <_dtoa_r+0x4a6>
 8007ebc:	e172      	b.n	80081a4 <_dtoa_r+0x78c>
 8007ebe:	9a02      	ldr	r2, [sp, #8]
 8007ec0:	2a0e      	cmp	r2, #14
 8007ec2:	dd00      	ble.n	8007ec6 <_dtoa_r+0x4ae>
 8007ec4:	e16e      	b.n	80081a4 <_dtoa_r+0x78c>
 8007ec6:	4b78      	ldr	r3, [pc, #480]	; (80080a8 <_dtoa_r+0x690>)
 8007ec8:	00d2      	lsls	r2, r2, #3
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	685c      	ldr	r4, [r3, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed2:	940b      	str	r4, [sp, #44]	; 0x2c
 8007ed4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	db00      	blt.n	8007edc <_dtoa_r+0x4c4>
 8007eda:	e0f7      	b.n	80080cc <_dtoa_r+0x6b4>
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd00      	ble.n	8007ee4 <_dtoa_r+0x4cc>
 8007ee2:	e0f3      	b.n	80080cc <_dtoa_r+0x6b4>
 8007ee4:	d000      	beq.n	8007ee8 <_dtoa_r+0x4d0>
 8007ee6:	e282      	b.n	80083ee <_dtoa_r+0x9d6>
 8007ee8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007eea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007eec:	2200      	movs	r2, #0
 8007eee:	4b74      	ldr	r3, [pc, #464]	; (80080c0 <_dtoa_r+0x6a8>)
 8007ef0:	f7f9 ffae 	bl	8001e50 <__aeabi_dmul>
 8007ef4:	9a08      	ldr	r2, [sp, #32]
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	f7f8 facc 	bl	8000494 <__aeabi_dcmpge>
 8007efc:	9e07      	ldr	r6, [sp, #28]
 8007efe:	0035      	movs	r5, r6
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d000      	beq.n	8007f06 <_dtoa_r+0x4ee>
 8007f04:	e259      	b.n	80083ba <_dtoa_r+0x9a2>
 8007f06:	9b06      	ldr	r3, [sp, #24]
 8007f08:	9a06      	ldr	r2, [sp, #24]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	9308      	str	r3, [sp, #32]
 8007f0e:	2331      	movs	r3, #49	; 0x31
 8007f10:	7013      	strb	r3, [r2, #0]
 8007f12:	9b02      	ldr	r3, [sp, #8]
 8007f14:	3301      	adds	r3, #1
 8007f16:	9302      	str	r3, [sp, #8]
 8007f18:	e254      	b.n	80083c4 <_dtoa_r+0x9ac>
 8007f1a:	4234      	tst	r4, r6
 8007f1c:	d007      	beq.n	8007f2e <_dtoa_r+0x516>
 8007f1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f20:	3301      	adds	r3, #1
 8007f22:	9310      	str	r3, [sp, #64]	; 0x40
 8007f24:	682a      	ldr	r2, [r5, #0]
 8007f26:	686b      	ldr	r3, [r5, #4]
 8007f28:	f7f9 ff92 	bl	8001e50 <__aeabi_dmul>
 8007f2c:	0033      	movs	r3, r6
 8007f2e:	1064      	asrs	r4, r4, #1
 8007f30:	3508      	adds	r5, #8
 8007f32:	e75a      	b.n	8007dea <_dtoa_r+0x3d2>
 8007f34:	9e02      	ldr	r6, [sp, #8]
 8007f36:	9b07      	ldr	r3, [sp, #28]
 8007f38:	e780      	b.n	8007e3c <_dtoa_r+0x424>
 8007f3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	4b59      	ldr	r3, [pc, #356]	; (80080a8 <_dtoa_r+0x690>)
 8007f42:	00d2      	lsls	r2, r2, #3
 8007f44:	189b      	adds	r3, r3, r2
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2900      	cmp	r1, #0
 8007f4c:	d051      	beq.n	8007ff2 <_dtoa_r+0x5da>
 8007f4e:	2000      	movs	r0, #0
 8007f50:	495d      	ldr	r1, [pc, #372]	; (80080c8 <_dtoa_r+0x6b0>)
 8007f52:	f7f9 fb7b 	bl	800164c <__aeabi_ddiv>
 8007f56:	9a08      	ldr	r2, [sp, #32]
 8007f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5a:	f7fa f9e5 	bl	8002328 <__aeabi_dsub>
 8007f5e:	9a06      	ldr	r2, [sp, #24]
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	4694      	mov	ip, r2
 8007f64:	9317      	str	r3, [sp, #92]	; 0x5c
 8007f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f68:	9010      	str	r0, [sp, #64]	; 0x40
 8007f6a:	9111      	str	r1, [sp, #68]	; 0x44
 8007f6c:	4463      	add	r3, ip
 8007f6e:	9319      	str	r3, [sp, #100]	; 0x64
 8007f70:	0029      	movs	r1, r5
 8007f72:	0020      	movs	r0, r4
 8007f74:	f7fa fd88 	bl	8002a88 <__aeabi_d2iz>
 8007f78:	9014      	str	r0, [sp, #80]	; 0x50
 8007f7a:	f7fa fdbb 	bl	8002af4 <__aeabi_i2d>
 8007f7e:	0002      	movs	r2, r0
 8007f80:	000b      	movs	r3, r1
 8007f82:	0020      	movs	r0, r4
 8007f84:	0029      	movs	r1, r5
 8007f86:	f7fa f9cf 	bl	8002328 <__aeabi_dsub>
 8007f8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f8e:	3301      	adds	r3, #1
 8007f90:	9308      	str	r3, [sp, #32]
 8007f92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f94:	0004      	movs	r4, r0
 8007f96:	3330      	adds	r3, #48	; 0x30
 8007f98:	7013      	strb	r3, [r2, #0]
 8007f9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f9e:	000d      	movs	r5, r1
 8007fa0:	f7f8 fa5a 	bl	8000458 <__aeabi_dcmplt>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d175      	bne.n	8008094 <_dtoa_r+0x67c>
 8007fa8:	0022      	movs	r2, r4
 8007faa:	002b      	movs	r3, r5
 8007fac:	2000      	movs	r0, #0
 8007fae:	4940      	ldr	r1, [pc, #256]	; (80080b0 <_dtoa_r+0x698>)
 8007fb0:	f7fa f9ba 	bl	8002328 <__aeabi_dsub>
 8007fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fb8:	f7f8 fa4e 	bl	8000458 <__aeabi_dcmplt>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d000      	beq.n	8007fc2 <_dtoa_r+0x5aa>
 8007fc0:	e0d2      	b.n	8008168 <_dtoa_r+0x750>
 8007fc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fc4:	9a08      	ldr	r2, [sp, #32]
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d100      	bne.n	8007fcc <_dtoa_r+0x5b4>
 8007fca:	e770      	b.n	8007eae <_dtoa_r+0x496>
 8007fcc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007fce:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4b38      	ldr	r3, [pc, #224]	; (80080b4 <_dtoa_r+0x69c>)
 8007fd4:	f7f9 ff3c 	bl	8001e50 <__aeabi_dmul>
 8007fd8:	4b36      	ldr	r3, [pc, #216]	; (80080b4 <_dtoa_r+0x69c>)
 8007fda:	9010      	str	r0, [sp, #64]	; 0x40
 8007fdc:	9111      	str	r1, [sp, #68]	; 0x44
 8007fde:	2200      	movs	r2, #0
 8007fe0:	0020      	movs	r0, r4
 8007fe2:	0029      	movs	r1, r5
 8007fe4:	f7f9 ff34 	bl	8001e50 <__aeabi_dmul>
 8007fe8:	9b08      	ldr	r3, [sp, #32]
 8007fea:	0004      	movs	r4, r0
 8007fec:	000d      	movs	r5, r1
 8007fee:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ff0:	e7be      	b.n	8007f70 <_dtoa_r+0x558>
 8007ff2:	9808      	ldr	r0, [sp, #32]
 8007ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ff6:	f7f9 ff2b 	bl	8001e50 <__aeabi_dmul>
 8007ffa:	9a06      	ldr	r2, [sp, #24]
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	4694      	mov	ip, r2
 8008000:	9308      	str	r3, [sp, #32]
 8008002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008004:	9010      	str	r0, [sp, #64]	; 0x40
 8008006:	9111      	str	r1, [sp, #68]	; 0x44
 8008008:	4463      	add	r3, ip
 800800a:	9319      	str	r3, [sp, #100]	; 0x64
 800800c:	0029      	movs	r1, r5
 800800e:	0020      	movs	r0, r4
 8008010:	f7fa fd3a 	bl	8002a88 <__aeabi_d2iz>
 8008014:	9017      	str	r0, [sp, #92]	; 0x5c
 8008016:	f7fa fd6d 	bl	8002af4 <__aeabi_i2d>
 800801a:	0002      	movs	r2, r0
 800801c:	000b      	movs	r3, r1
 800801e:	0020      	movs	r0, r4
 8008020:	0029      	movs	r1, r5
 8008022:	f7fa f981 	bl	8002328 <__aeabi_dsub>
 8008026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008028:	9a08      	ldr	r2, [sp, #32]
 800802a:	3330      	adds	r3, #48	; 0x30
 800802c:	7013      	strb	r3, [r2, #0]
 800802e:	0013      	movs	r3, r2
 8008030:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008032:	3301      	adds	r3, #1
 8008034:	0004      	movs	r4, r0
 8008036:	000d      	movs	r5, r1
 8008038:	9308      	str	r3, [sp, #32]
 800803a:	4293      	cmp	r3, r2
 800803c:	d12c      	bne.n	8008098 <_dtoa_r+0x680>
 800803e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008040:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008042:	9a06      	ldr	r2, [sp, #24]
 8008044:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008046:	4694      	mov	ip, r2
 8008048:	4463      	add	r3, ip
 800804a:	2200      	movs	r2, #0
 800804c:	9308      	str	r3, [sp, #32]
 800804e:	4b1e      	ldr	r3, [pc, #120]	; (80080c8 <_dtoa_r+0x6b0>)
 8008050:	f7f8 ffc0 	bl	8000fd4 <__aeabi_dadd>
 8008054:	0002      	movs	r2, r0
 8008056:	000b      	movs	r3, r1
 8008058:	0020      	movs	r0, r4
 800805a:	0029      	movs	r1, r5
 800805c:	f7f8 fa10 	bl	8000480 <__aeabi_dcmpgt>
 8008060:	2800      	cmp	r0, #0
 8008062:	d000      	beq.n	8008066 <_dtoa_r+0x64e>
 8008064:	e080      	b.n	8008168 <_dtoa_r+0x750>
 8008066:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800806a:	2000      	movs	r0, #0
 800806c:	4916      	ldr	r1, [pc, #88]	; (80080c8 <_dtoa_r+0x6b0>)
 800806e:	f7fa f95b 	bl	8002328 <__aeabi_dsub>
 8008072:	0002      	movs	r2, r0
 8008074:	000b      	movs	r3, r1
 8008076:	0020      	movs	r0, r4
 8008078:	0029      	movs	r1, r5
 800807a:	f7f8 f9ed 	bl	8000458 <__aeabi_dcmplt>
 800807e:	2800      	cmp	r0, #0
 8008080:	d100      	bne.n	8008084 <_dtoa_r+0x66c>
 8008082:	e714      	b.n	8007eae <_dtoa_r+0x496>
 8008084:	9b08      	ldr	r3, [sp, #32]
 8008086:	001a      	movs	r2, r3
 8008088:	3a01      	subs	r2, #1
 800808a:	9208      	str	r2, [sp, #32]
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	2a30      	cmp	r2, #48	; 0x30
 8008090:	d0f8      	beq.n	8008084 <_dtoa_r+0x66c>
 8008092:	9308      	str	r3, [sp, #32]
 8008094:	9602      	str	r6, [sp, #8]
 8008096:	e055      	b.n	8008144 <_dtoa_r+0x72c>
 8008098:	2200      	movs	r2, #0
 800809a:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <_dtoa_r+0x69c>)
 800809c:	f7f9 fed8 	bl	8001e50 <__aeabi_dmul>
 80080a0:	0004      	movs	r4, r0
 80080a2:	000d      	movs	r5, r1
 80080a4:	e7b2      	b.n	800800c <_dtoa_r+0x5f4>
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	08009b70 	.word	0x08009b70
 80080ac:	08009b48 	.word	0x08009b48
 80080b0:	3ff00000 	.word	0x3ff00000
 80080b4:	40240000 	.word	0x40240000
 80080b8:	401c0000 	.word	0x401c0000
 80080bc:	fcc00000 	.word	0xfcc00000
 80080c0:	40140000 	.word	0x40140000
 80080c4:	7cc00000 	.word	0x7cc00000
 80080c8:	3fe00000 	.word	0x3fe00000
 80080cc:	9b07      	ldr	r3, [sp, #28]
 80080ce:	9e06      	ldr	r6, [sp, #24]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	199b      	adds	r3, r3, r6
 80080d4:	930c      	str	r3, [sp, #48]	; 0x30
 80080d6:	9c08      	ldr	r4, [sp, #32]
 80080d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80080da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080de:	0020      	movs	r0, r4
 80080e0:	0029      	movs	r1, r5
 80080e2:	f7f9 fab3 	bl	800164c <__aeabi_ddiv>
 80080e6:	f7fa fccf 	bl	8002a88 <__aeabi_d2iz>
 80080ea:	9007      	str	r0, [sp, #28]
 80080ec:	f7fa fd02 	bl	8002af4 <__aeabi_i2d>
 80080f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f4:	f7f9 feac 	bl	8001e50 <__aeabi_dmul>
 80080f8:	0002      	movs	r2, r0
 80080fa:	000b      	movs	r3, r1
 80080fc:	0020      	movs	r0, r4
 80080fe:	0029      	movs	r1, r5
 8008100:	f7fa f912 	bl	8002328 <__aeabi_dsub>
 8008104:	0033      	movs	r3, r6
 8008106:	9a07      	ldr	r2, [sp, #28]
 8008108:	3601      	adds	r6, #1
 800810a:	3230      	adds	r2, #48	; 0x30
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008110:	9608      	str	r6, [sp, #32]
 8008112:	429a      	cmp	r2, r3
 8008114:	d139      	bne.n	800818a <_dtoa_r+0x772>
 8008116:	0002      	movs	r2, r0
 8008118:	000b      	movs	r3, r1
 800811a:	f7f8 ff5b 	bl	8000fd4 <__aeabi_dadd>
 800811e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008122:	0004      	movs	r4, r0
 8008124:	000d      	movs	r5, r1
 8008126:	f7f8 f9ab 	bl	8000480 <__aeabi_dcmpgt>
 800812a:	2800      	cmp	r0, #0
 800812c:	d11b      	bne.n	8008166 <_dtoa_r+0x74e>
 800812e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008132:	0020      	movs	r0, r4
 8008134:	0029      	movs	r1, r5
 8008136:	f7f8 f989 	bl	800044c <__aeabi_dcmpeq>
 800813a:	2800      	cmp	r0, #0
 800813c:	d002      	beq.n	8008144 <_dtoa_r+0x72c>
 800813e:	9b07      	ldr	r3, [sp, #28]
 8008140:	07db      	lsls	r3, r3, #31
 8008142:	d410      	bmi.n	8008166 <_dtoa_r+0x74e>
 8008144:	0038      	movs	r0, r7
 8008146:	9905      	ldr	r1, [sp, #20]
 8008148:	f000 fd24 	bl	8008b94 <_Bfree>
 800814c:	2300      	movs	r3, #0
 800814e:	9a08      	ldr	r2, [sp, #32]
 8008150:	9802      	ldr	r0, [sp, #8]
 8008152:	7013      	strb	r3, [r2, #0]
 8008154:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008156:	3001      	adds	r0, #1
 8008158:	6018      	str	r0, [r3, #0]
 800815a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800815c:	2b00      	cmp	r3, #0
 800815e:	d100      	bne.n	8008162 <_dtoa_r+0x74a>
 8008160:	e4a6      	b.n	8007ab0 <_dtoa_r+0x98>
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	e4a4      	b.n	8007ab0 <_dtoa_r+0x98>
 8008166:	9e02      	ldr	r6, [sp, #8]
 8008168:	9b08      	ldr	r3, [sp, #32]
 800816a:	9308      	str	r3, [sp, #32]
 800816c:	3b01      	subs	r3, #1
 800816e:	781a      	ldrb	r2, [r3, #0]
 8008170:	2a39      	cmp	r2, #57	; 0x39
 8008172:	d106      	bne.n	8008182 <_dtoa_r+0x76a>
 8008174:	9a06      	ldr	r2, [sp, #24]
 8008176:	429a      	cmp	r2, r3
 8008178:	d1f7      	bne.n	800816a <_dtoa_r+0x752>
 800817a:	2230      	movs	r2, #48	; 0x30
 800817c:	9906      	ldr	r1, [sp, #24]
 800817e:	3601      	adds	r6, #1
 8008180:	700a      	strb	r2, [r1, #0]
 8008182:	781a      	ldrb	r2, [r3, #0]
 8008184:	3201      	adds	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	e784      	b.n	8008094 <_dtoa_r+0x67c>
 800818a:	2200      	movs	r2, #0
 800818c:	4baa      	ldr	r3, [pc, #680]	; (8008438 <_dtoa_r+0xa20>)
 800818e:	f7f9 fe5f 	bl	8001e50 <__aeabi_dmul>
 8008192:	2200      	movs	r2, #0
 8008194:	2300      	movs	r3, #0
 8008196:	0004      	movs	r4, r0
 8008198:	000d      	movs	r5, r1
 800819a:	f7f8 f957 	bl	800044c <__aeabi_dcmpeq>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d09b      	beq.n	80080da <_dtoa_r+0x6c2>
 80081a2:	e7cf      	b.n	8008144 <_dtoa_r+0x72c>
 80081a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80081a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081aa:	2d00      	cmp	r5, #0
 80081ac:	d012      	beq.n	80081d4 <_dtoa_r+0x7bc>
 80081ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081b0:	2a01      	cmp	r2, #1
 80081b2:	dc66      	bgt.n	8008282 <_dtoa_r+0x86a>
 80081b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	d05d      	beq.n	8008276 <_dtoa_r+0x85e>
 80081ba:	4aa0      	ldr	r2, [pc, #640]	; (800843c <_dtoa_r+0xa24>)
 80081bc:	189b      	adds	r3, r3, r2
 80081be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081c0:	2101      	movs	r1, #1
 80081c2:	18d2      	adds	r2, r2, r3
 80081c4:	920a      	str	r2, [sp, #40]	; 0x28
 80081c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081c8:	0038      	movs	r0, r7
 80081ca:	18d3      	adds	r3, r2, r3
 80081cc:	930d      	str	r3, [sp, #52]	; 0x34
 80081ce:	f000 fd91 	bl	8008cf4 <__i2b>
 80081d2:	0005      	movs	r5, r0
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	dd0e      	ble.n	80081f6 <_dtoa_r+0x7de>
 80081d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081da:	2b00      	cmp	r3, #0
 80081dc:	dd0b      	ble.n	80081f6 <_dtoa_r+0x7de>
 80081de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081e0:	0023      	movs	r3, r4
 80081e2:	4294      	cmp	r4, r2
 80081e4:	dd00      	ble.n	80081e8 <_dtoa_r+0x7d0>
 80081e6:	0013      	movs	r3, r2
 80081e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ea:	1ae4      	subs	r4, r4, r3
 80081ec:	1ad2      	subs	r2, r2, r3
 80081ee:	920a      	str	r2, [sp, #40]	; 0x28
 80081f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	930d      	str	r3, [sp, #52]	; 0x34
 80081f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01f      	beq.n	800823c <_dtoa_r+0x824>
 80081fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d054      	beq.n	80082ac <_dtoa_r+0x894>
 8008202:	2e00      	cmp	r6, #0
 8008204:	dd11      	ble.n	800822a <_dtoa_r+0x812>
 8008206:	0029      	movs	r1, r5
 8008208:	0032      	movs	r2, r6
 800820a:	0038      	movs	r0, r7
 800820c:	f000 fe38 	bl	8008e80 <__pow5mult>
 8008210:	9a05      	ldr	r2, [sp, #20]
 8008212:	0001      	movs	r1, r0
 8008214:	0005      	movs	r5, r0
 8008216:	0038      	movs	r0, r7
 8008218:	f000 fd82 	bl	8008d20 <__multiply>
 800821c:	9905      	ldr	r1, [sp, #20]
 800821e:	9014      	str	r0, [sp, #80]	; 0x50
 8008220:	0038      	movs	r0, r7
 8008222:	f000 fcb7 	bl	8008b94 <_Bfree>
 8008226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008228:	9305      	str	r3, [sp, #20]
 800822a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800822c:	1b9a      	subs	r2, r3, r6
 800822e:	42b3      	cmp	r3, r6
 8008230:	d004      	beq.n	800823c <_dtoa_r+0x824>
 8008232:	0038      	movs	r0, r7
 8008234:	9905      	ldr	r1, [sp, #20]
 8008236:	f000 fe23 	bl	8008e80 <__pow5mult>
 800823a:	9005      	str	r0, [sp, #20]
 800823c:	2101      	movs	r1, #1
 800823e:	0038      	movs	r0, r7
 8008240:	f000 fd58 	bl	8008cf4 <__i2b>
 8008244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008246:	0006      	movs	r6, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	dd31      	ble.n	80082b0 <_dtoa_r+0x898>
 800824c:	001a      	movs	r2, r3
 800824e:	0001      	movs	r1, r0
 8008250:	0038      	movs	r0, r7
 8008252:	f000 fe15 	bl	8008e80 <__pow5mult>
 8008256:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008258:	0006      	movs	r6, r0
 800825a:	2b01      	cmp	r3, #1
 800825c:	dd2d      	ble.n	80082ba <_dtoa_r+0x8a2>
 800825e:	2300      	movs	r3, #0
 8008260:	930e      	str	r3, [sp, #56]	; 0x38
 8008262:	6933      	ldr	r3, [r6, #16]
 8008264:	3303      	adds	r3, #3
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	18f3      	adds	r3, r6, r3
 800826a:	6858      	ldr	r0, [r3, #4]
 800826c:	f000 fcfa 	bl	8008c64 <__hi0bits>
 8008270:	2320      	movs	r3, #32
 8008272:	1a18      	subs	r0, r3, r0
 8008274:	e039      	b.n	80082ea <_dtoa_r+0x8d2>
 8008276:	2336      	movs	r3, #54	; 0x36
 8008278:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800827a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800827c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	e79d      	b.n	80081be <_dtoa_r+0x7a6>
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	1e5e      	subs	r6, r3, #1
 8008286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008288:	42b3      	cmp	r3, r6
 800828a:	db07      	blt.n	800829c <_dtoa_r+0x884>
 800828c:	1b9e      	subs	r6, r3, r6
 800828e:	9b07      	ldr	r3, [sp, #28]
 8008290:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008292:	2b00      	cmp	r3, #0
 8008294:	da93      	bge.n	80081be <_dtoa_r+0x7a6>
 8008296:	1ae4      	subs	r4, r4, r3
 8008298:	2300      	movs	r3, #0
 800829a:	e790      	b.n	80081be <_dtoa_r+0x7a6>
 800829c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800829e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082a0:	1af3      	subs	r3, r6, r3
 80082a2:	18d3      	adds	r3, r2, r3
 80082a4:	960e      	str	r6, [sp, #56]	; 0x38
 80082a6:	9315      	str	r3, [sp, #84]	; 0x54
 80082a8:	2600      	movs	r6, #0
 80082aa:	e7f0      	b.n	800828e <_dtoa_r+0x876>
 80082ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ae:	e7c0      	b.n	8008232 <_dtoa_r+0x81a>
 80082b0:	2300      	movs	r3, #0
 80082b2:	930e      	str	r3, [sp, #56]	; 0x38
 80082b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	dc13      	bgt.n	80082e2 <_dtoa_r+0x8ca>
 80082ba:	2300      	movs	r3, #0
 80082bc:	930e      	str	r3, [sp, #56]	; 0x38
 80082be:	9b08      	ldr	r3, [sp, #32]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d10e      	bne.n	80082e2 <_dtoa_r+0x8ca>
 80082c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c6:	031b      	lsls	r3, r3, #12
 80082c8:	d10b      	bne.n	80082e2 <_dtoa_r+0x8ca>
 80082ca:	4b5d      	ldr	r3, [pc, #372]	; (8008440 <_dtoa_r+0xa28>)
 80082cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ce:	4213      	tst	r3, r2
 80082d0:	d007      	beq.n	80082e2 <_dtoa_r+0x8ca>
 80082d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d4:	3301      	adds	r3, #1
 80082d6:	930a      	str	r3, [sp, #40]	; 0x28
 80082d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082da:	3301      	adds	r3, #1
 80082dc:	930d      	str	r3, [sp, #52]	; 0x34
 80082de:	2301      	movs	r3, #1
 80082e0:	930e      	str	r3, [sp, #56]	; 0x38
 80082e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e4:	2001      	movs	r0, #1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1bb      	bne.n	8008262 <_dtoa_r+0x84a>
 80082ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082ec:	221f      	movs	r2, #31
 80082ee:	1818      	adds	r0, r3, r0
 80082f0:	0003      	movs	r3, r0
 80082f2:	4013      	ands	r3, r2
 80082f4:	4210      	tst	r0, r2
 80082f6:	d046      	beq.n	8008386 <_dtoa_r+0x96e>
 80082f8:	3201      	adds	r2, #1
 80082fa:	1ad2      	subs	r2, r2, r3
 80082fc:	2a04      	cmp	r2, #4
 80082fe:	dd3f      	ble.n	8008380 <_dtoa_r+0x968>
 8008300:	221c      	movs	r2, #28
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008306:	18e4      	adds	r4, r4, r3
 8008308:	18d2      	adds	r2, r2, r3
 800830a:	920a      	str	r2, [sp, #40]	; 0x28
 800830c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800830e:	18d3      	adds	r3, r2, r3
 8008310:	930d      	str	r3, [sp, #52]	; 0x34
 8008312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008314:	2b00      	cmp	r3, #0
 8008316:	dd05      	ble.n	8008324 <_dtoa_r+0x90c>
 8008318:	001a      	movs	r2, r3
 800831a:	0038      	movs	r0, r7
 800831c:	9905      	ldr	r1, [sp, #20]
 800831e:	f000 fe0b 	bl	8008f38 <__lshift>
 8008322:	9005      	str	r0, [sp, #20]
 8008324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008326:	2b00      	cmp	r3, #0
 8008328:	dd05      	ble.n	8008336 <_dtoa_r+0x91e>
 800832a:	0031      	movs	r1, r6
 800832c:	001a      	movs	r2, r3
 800832e:	0038      	movs	r0, r7
 8008330:	f000 fe02 	bl	8008f38 <__lshift>
 8008334:	0006      	movs	r6, r0
 8008336:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008338:	2b00      	cmp	r3, #0
 800833a:	d026      	beq.n	800838a <_dtoa_r+0x972>
 800833c:	0031      	movs	r1, r6
 800833e:	9805      	ldr	r0, [sp, #20]
 8008340:	f000 fe68 	bl	8009014 <__mcmp>
 8008344:	2800      	cmp	r0, #0
 8008346:	da20      	bge.n	800838a <_dtoa_r+0x972>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	220a      	movs	r2, #10
 800834c:	3b01      	subs	r3, #1
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	0038      	movs	r0, r7
 8008352:	2300      	movs	r3, #0
 8008354:	9905      	ldr	r1, [sp, #20]
 8008356:	f000 fc41 	bl	8008bdc <__multadd>
 800835a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800835c:	9005      	str	r0, [sp, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d100      	bne.n	8008364 <_dtoa_r+0x94c>
 8008362:	e166      	b.n	8008632 <_dtoa_r+0xc1a>
 8008364:	2300      	movs	r3, #0
 8008366:	0029      	movs	r1, r5
 8008368:	220a      	movs	r2, #10
 800836a:	0038      	movs	r0, r7
 800836c:	f000 fc36 	bl	8008bdc <__multadd>
 8008370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008372:	0005      	movs	r5, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	dc47      	bgt.n	8008408 <_dtoa_r+0x9f0>
 8008378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800837a:	2b02      	cmp	r3, #2
 800837c:	dc0d      	bgt.n	800839a <_dtoa_r+0x982>
 800837e:	e043      	b.n	8008408 <_dtoa_r+0x9f0>
 8008380:	2a04      	cmp	r2, #4
 8008382:	d0c6      	beq.n	8008312 <_dtoa_r+0x8fa>
 8008384:	0013      	movs	r3, r2
 8008386:	331c      	adds	r3, #28
 8008388:	e7bc      	b.n	8008304 <_dtoa_r+0x8ec>
 800838a:	9b07      	ldr	r3, [sp, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	dc35      	bgt.n	80083fc <_dtoa_r+0x9e4>
 8008390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008392:	2b02      	cmp	r3, #2
 8008394:	dd32      	ble.n	80083fc <_dtoa_r+0x9e4>
 8008396:	9b07      	ldr	r3, [sp, #28]
 8008398:	930c      	str	r3, [sp, #48]	; 0x30
 800839a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10c      	bne.n	80083ba <_dtoa_r+0x9a2>
 80083a0:	0031      	movs	r1, r6
 80083a2:	2205      	movs	r2, #5
 80083a4:	0038      	movs	r0, r7
 80083a6:	f000 fc19 	bl	8008bdc <__multadd>
 80083aa:	0006      	movs	r6, r0
 80083ac:	0001      	movs	r1, r0
 80083ae:	9805      	ldr	r0, [sp, #20]
 80083b0:	f000 fe30 	bl	8009014 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	dd00      	ble.n	80083ba <_dtoa_r+0x9a2>
 80083b8:	e5a5      	b.n	8007f06 <_dtoa_r+0x4ee>
 80083ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083bc:	43db      	mvns	r3, r3
 80083be:	9302      	str	r3, [sp, #8]
 80083c0:	9b06      	ldr	r3, [sp, #24]
 80083c2:	9308      	str	r3, [sp, #32]
 80083c4:	2400      	movs	r4, #0
 80083c6:	0031      	movs	r1, r6
 80083c8:	0038      	movs	r0, r7
 80083ca:	f000 fbe3 	bl	8008b94 <_Bfree>
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	d100      	bne.n	80083d4 <_dtoa_r+0x9bc>
 80083d2:	e6b7      	b.n	8008144 <_dtoa_r+0x72c>
 80083d4:	2c00      	cmp	r4, #0
 80083d6:	d005      	beq.n	80083e4 <_dtoa_r+0x9cc>
 80083d8:	42ac      	cmp	r4, r5
 80083da:	d003      	beq.n	80083e4 <_dtoa_r+0x9cc>
 80083dc:	0021      	movs	r1, r4
 80083de:	0038      	movs	r0, r7
 80083e0:	f000 fbd8 	bl	8008b94 <_Bfree>
 80083e4:	0029      	movs	r1, r5
 80083e6:	0038      	movs	r0, r7
 80083e8:	f000 fbd4 	bl	8008b94 <_Bfree>
 80083ec:	e6aa      	b.n	8008144 <_dtoa_r+0x72c>
 80083ee:	2600      	movs	r6, #0
 80083f0:	0035      	movs	r5, r6
 80083f2:	e7e2      	b.n	80083ba <_dtoa_r+0x9a2>
 80083f4:	9602      	str	r6, [sp, #8]
 80083f6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80083f8:	0035      	movs	r5, r6
 80083fa:	e584      	b.n	8007f06 <_dtoa_r+0x4ee>
 80083fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d100      	bne.n	8008404 <_dtoa_r+0x9ec>
 8008402:	e0ce      	b.n	80085a2 <_dtoa_r+0xb8a>
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	930c      	str	r3, [sp, #48]	; 0x30
 8008408:	2c00      	cmp	r4, #0
 800840a:	dd05      	ble.n	8008418 <_dtoa_r+0xa00>
 800840c:	0029      	movs	r1, r5
 800840e:	0022      	movs	r2, r4
 8008410:	0038      	movs	r0, r7
 8008412:	f000 fd91 	bl	8008f38 <__lshift>
 8008416:	0005      	movs	r5, r0
 8008418:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800841a:	0028      	movs	r0, r5
 800841c:	2b00      	cmp	r3, #0
 800841e:	d022      	beq.n	8008466 <_dtoa_r+0xa4e>
 8008420:	0038      	movs	r0, r7
 8008422:	6869      	ldr	r1, [r5, #4]
 8008424:	f000 fb72 	bl	8008b0c <_Balloc>
 8008428:	1e04      	subs	r4, r0, #0
 800842a:	d10f      	bne.n	800844c <_dtoa_r+0xa34>
 800842c:	0002      	movs	r2, r0
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <_dtoa_r+0xa2c>)
 8008430:	4905      	ldr	r1, [pc, #20]	; (8008448 <_dtoa_r+0xa30>)
 8008432:	f7ff fb06 	bl	8007a42 <_dtoa_r+0x2a>
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	40240000 	.word	0x40240000
 800843c:	00000433 	.word	0x00000433
 8008440:	7ff00000 	.word	0x7ff00000
 8008444:	08009a74 	.word	0x08009a74
 8008448:	000002ea 	.word	0x000002ea
 800844c:	0029      	movs	r1, r5
 800844e:	692b      	ldr	r3, [r5, #16]
 8008450:	310c      	adds	r1, #12
 8008452:	1c9a      	adds	r2, r3, #2
 8008454:	0092      	lsls	r2, r2, #2
 8008456:	300c      	adds	r0, #12
 8008458:	f000 fb4f 	bl	8008afa <memcpy>
 800845c:	2201      	movs	r2, #1
 800845e:	0021      	movs	r1, r4
 8008460:	0038      	movs	r0, r7
 8008462:	f000 fd69 	bl	8008f38 <__lshift>
 8008466:	9b06      	ldr	r3, [sp, #24]
 8008468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800846a:	930a      	str	r3, [sp, #40]	; 0x28
 800846c:	3b01      	subs	r3, #1
 800846e:	189b      	adds	r3, r3, r2
 8008470:	2201      	movs	r2, #1
 8008472:	002c      	movs	r4, r5
 8008474:	0005      	movs	r5, r0
 8008476:	9314      	str	r3, [sp, #80]	; 0x50
 8008478:	9b08      	ldr	r3, [sp, #32]
 800847a:	4013      	ands	r3, r2
 800847c:	930f      	str	r3, [sp, #60]	; 0x3c
 800847e:	0031      	movs	r1, r6
 8008480:	9805      	ldr	r0, [sp, #20]
 8008482:	f7ff fa3e 	bl	8007902 <quorem>
 8008486:	0003      	movs	r3, r0
 8008488:	0021      	movs	r1, r4
 800848a:	3330      	adds	r3, #48	; 0x30
 800848c:	900d      	str	r0, [sp, #52]	; 0x34
 800848e:	9805      	ldr	r0, [sp, #20]
 8008490:	9307      	str	r3, [sp, #28]
 8008492:	f000 fdbf 	bl	8009014 <__mcmp>
 8008496:	002a      	movs	r2, r5
 8008498:	900e      	str	r0, [sp, #56]	; 0x38
 800849a:	0031      	movs	r1, r6
 800849c:	0038      	movs	r0, r7
 800849e:	f000 fdd5 	bl	800904c <__mdiff>
 80084a2:	68c3      	ldr	r3, [r0, #12]
 80084a4:	9008      	str	r0, [sp, #32]
 80084a6:	9310      	str	r3, [sp, #64]	; 0x40
 80084a8:	2301      	movs	r3, #1
 80084aa:	930c      	str	r3, [sp, #48]	; 0x30
 80084ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d104      	bne.n	80084bc <_dtoa_r+0xaa4>
 80084b2:	0001      	movs	r1, r0
 80084b4:	9805      	ldr	r0, [sp, #20]
 80084b6:	f000 fdad 	bl	8009014 <__mcmp>
 80084ba:	900c      	str	r0, [sp, #48]	; 0x30
 80084bc:	0038      	movs	r0, r7
 80084be:	9908      	ldr	r1, [sp, #32]
 80084c0:	f000 fb68 	bl	8008b94 <_Bfree>
 80084c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084c8:	3301      	adds	r3, #1
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084ce:	4313      	orrs	r3, r2
 80084d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084d2:	4313      	orrs	r3, r2
 80084d4:	d10c      	bne.n	80084f0 <_dtoa_r+0xad8>
 80084d6:	9b07      	ldr	r3, [sp, #28]
 80084d8:	2b39      	cmp	r3, #57	; 0x39
 80084da:	d026      	beq.n	800852a <_dtoa_r+0xb12>
 80084dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dd02      	ble.n	80084e8 <_dtoa_r+0xad0>
 80084e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e4:	3331      	adds	r3, #49	; 0x31
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ea:	9a07      	ldr	r2, [sp, #28]
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	e76a      	b.n	80083c6 <_dtoa_r+0x9ae>
 80084f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	db04      	blt.n	8008500 <_dtoa_r+0xae8>
 80084f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80084f8:	4313      	orrs	r3, r2
 80084fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d11f      	bne.n	8008540 <_dtoa_r+0xb28>
 8008500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008502:	2b00      	cmp	r3, #0
 8008504:	ddf0      	ble.n	80084e8 <_dtoa_r+0xad0>
 8008506:	9905      	ldr	r1, [sp, #20]
 8008508:	2201      	movs	r2, #1
 800850a:	0038      	movs	r0, r7
 800850c:	f000 fd14 	bl	8008f38 <__lshift>
 8008510:	0031      	movs	r1, r6
 8008512:	9005      	str	r0, [sp, #20]
 8008514:	f000 fd7e 	bl	8009014 <__mcmp>
 8008518:	2800      	cmp	r0, #0
 800851a:	dc03      	bgt.n	8008524 <_dtoa_r+0xb0c>
 800851c:	d1e4      	bne.n	80084e8 <_dtoa_r+0xad0>
 800851e:	9b07      	ldr	r3, [sp, #28]
 8008520:	07db      	lsls	r3, r3, #31
 8008522:	d5e1      	bpl.n	80084e8 <_dtoa_r+0xad0>
 8008524:	9b07      	ldr	r3, [sp, #28]
 8008526:	2b39      	cmp	r3, #57	; 0x39
 8008528:	d1db      	bne.n	80084e2 <_dtoa_r+0xaca>
 800852a:	2339      	movs	r3, #57	; 0x39
 800852c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800852e:	7013      	strb	r3, [r2, #0]
 8008530:	9b08      	ldr	r3, [sp, #32]
 8008532:	9308      	str	r3, [sp, #32]
 8008534:	3b01      	subs	r3, #1
 8008536:	781a      	ldrb	r2, [r3, #0]
 8008538:	2a39      	cmp	r2, #57	; 0x39
 800853a:	d068      	beq.n	800860e <_dtoa_r+0xbf6>
 800853c:	3201      	adds	r2, #1
 800853e:	e7d5      	b.n	80084ec <_dtoa_r+0xad4>
 8008540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd07      	ble.n	8008556 <_dtoa_r+0xb3e>
 8008546:	9b07      	ldr	r3, [sp, #28]
 8008548:	2b39      	cmp	r3, #57	; 0x39
 800854a:	d0ee      	beq.n	800852a <_dtoa_r+0xb12>
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008550:	3301      	adds	r3, #1
 8008552:	7013      	strb	r3, [r2, #0]
 8008554:	e737      	b.n	80083c6 <_dtoa_r+0x9ae>
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	9a07      	ldr	r2, [sp, #28]
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800855e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008560:	4293      	cmp	r3, r2
 8008562:	d03e      	beq.n	80085e2 <_dtoa_r+0xbca>
 8008564:	2300      	movs	r3, #0
 8008566:	220a      	movs	r2, #10
 8008568:	9905      	ldr	r1, [sp, #20]
 800856a:	0038      	movs	r0, r7
 800856c:	f000 fb36 	bl	8008bdc <__multadd>
 8008570:	2300      	movs	r3, #0
 8008572:	9005      	str	r0, [sp, #20]
 8008574:	220a      	movs	r2, #10
 8008576:	0021      	movs	r1, r4
 8008578:	0038      	movs	r0, r7
 800857a:	42ac      	cmp	r4, r5
 800857c:	d106      	bne.n	800858c <_dtoa_r+0xb74>
 800857e:	f000 fb2d 	bl	8008bdc <__multadd>
 8008582:	0004      	movs	r4, r0
 8008584:	0005      	movs	r5, r0
 8008586:	9b08      	ldr	r3, [sp, #32]
 8008588:	930a      	str	r3, [sp, #40]	; 0x28
 800858a:	e778      	b.n	800847e <_dtoa_r+0xa66>
 800858c:	f000 fb26 	bl	8008bdc <__multadd>
 8008590:	0029      	movs	r1, r5
 8008592:	0004      	movs	r4, r0
 8008594:	2300      	movs	r3, #0
 8008596:	220a      	movs	r2, #10
 8008598:	0038      	movs	r0, r7
 800859a:	f000 fb1f 	bl	8008bdc <__multadd>
 800859e:	0005      	movs	r5, r0
 80085a0:	e7f1      	b.n	8008586 <_dtoa_r+0xb6e>
 80085a2:	9b07      	ldr	r3, [sp, #28]
 80085a4:	930c      	str	r3, [sp, #48]	; 0x30
 80085a6:	2400      	movs	r4, #0
 80085a8:	0031      	movs	r1, r6
 80085aa:	9805      	ldr	r0, [sp, #20]
 80085ac:	f7ff f9a9 	bl	8007902 <quorem>
 80085b0:	9b06      	ldr	r3, [sp, #24]
 80085b2:	3030      	adds	r0, #48	; 0x30
 80085b4:	5518      	strb	r0, [r3, r4]
 80085b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b8:	3401      	adds	r4, #1
 80085ba:	9007      	str	r0, [sp, #28]
 80085bc:	42a3      	cmp	r3, r4
 80085be:	dd07      	ble.n	80085d0 <_dtoa_r+0xbb8>
 80085c0:	2300      	movs	r3, #0
 80085c2:	220a      	movs	r2, #10
 80085c4:	0038      	movs	r0, r7
 80085c6:	9905      	ldr	r1, [sp, #20]
 80085c8:	f000 fb08 	bl	8008bdc <__multadd>
 80085cc:	9005      	str	r0, [sp, #20]
 80085ce:	e7eb      	b.n	80085a8 <_dtoa_r+0xb90>
 80085d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085d2:	2001      	movs	r0, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	dd00      	ble.n	80085da <_dtoa_r+0xbc2>
 80085d8:	0018      	movs	r0, r3
 80085da:	2400      	movs	r4, #0
 80085dc:	9b06      	ldr	r3, [sp, #24]
 80085de:	181b      	adds	r3, r3, r0
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	9905      	ldr	r1, [sp, #20]
 80085e4:	2201      	movs	r2, #1
 80085e6:	0038      	movs	r0, r7
 80085e8:	f000 fca6 	bl	8008f38 <__lshift>
 80085ec:	0031      	movs	r1, r6
 80085ee:	9005      	str	r0, [sp, #20]
 80085f0:	f000 fd10 	bl	8009014 <__mcmp>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	dc9b      	bgt.n	8008530 <_dtoa_r+0xb18>
 80085f8:	d102      	bne.n	8008600 <_dtoa_r+0xbe8>
 80085fa:	9b07      	ldr	r3, [sp, #28]
 80085fc:	07db      	lsls	r3, r3, #31
 80085fe:	d497      	bmi.n	8008530 <_dtoa_r+0xb18>
 8008600:	9b08      	ldr	r3, [sp, #32]
 8008602:	9308      	str	r3, [sp, #32]
 8008604:	3b01      	subs	r3, #1
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	2a30      	cmp	r2, #48	; 0x30
 800860a:	d0fa      	beq.n	8008602 <_dtoa_r+0xbea>
 800860c:	e6db      	b.n	80083c6 <_dtoa_r+0x9ae>
 800860e:	9a06      	ldr	r2, [sp, #24]
 8008610:	429a      	cmp	r2, r3
 8008612:	d18e      	bne.n	8008532 <_dtoa_r+0xb1a>
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	3301      	adds	r3, #1
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	2331      	movs	r3, #49	; 0x31
 800861c:	e799      	b.n	8008552 <_dtoa_r+0xb3a>
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <_dtoa_r+0xc2c>)
 8008620:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	4b08      	ldr	r3, [pc, #32]	; (8008648 <_dtoa_r+0xc30>)
 8008626:	2a00      	cmp	r2, #0
 8008628:	d001      	beq.n	800862e <_dtoa_r+0xc16>
 800862a:	f7ff fa3f 	bl	8007aac <_dtoa_r+0x94>
 800862e:	f7ff fa3f 	bl	8007ab0 <_dtoa_r+0x98>
 8008632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008634:	2b00      	cmp	r3, #0
 8008636:	dcb6      	bgt.n	80085a6 <_dtoa_r+0xb8e>
 8008638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800863a:	2b02      	cmp	r3, #2
 800863c:	dd00      	ble.n	8008640 <_dtoa_r+0xc28>
 800863e:	e6ac      	b.n	800839a <_dtoa_r+0x982>
 8008640:	e7b1      	b.n	80085a6 <_dtoa_r+0xb8e>
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	080099f5 	.word	0x080099f5
 8008648:	080099fd 	.word	0x080099fd

0800864c <__sflush_r>:
 800864c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800864e:	898b      	ldrh	r3, [r1, #12]
 8008650:	0005      	movs	r5, r0
 8008652:	000c      	movs	r4, r1
 8008654:	071a      	lsls	r2, r3, #28
 8008656:	d45f      	bmi.n	8008718 <__sflush_r+0xcc>
 8008658:	684a      	ldr	r2, [r1, #4]
 800865a:	2a00      	cmp	r2, #0
 800865c:	dc04      	bgt.n	8008668 <__sflush_r+0x1c>
 800865e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008660:	2a00      	cmp	r2, #0
 8008662:	dc01      	bgt.n	8008668 <__sflush_r+0x1c>
 8008664:	2000      	movs	r0, #0
 8008666:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008668:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800866a:	2f00      	cmp	r7, #0
 800866c:	d0fa      	beq.n	8008664 <__sflush_r+0x18>
 800866e:	2200      	movs	r2, #0
 8008670:	2180      	movs	r1, #128	; 0x80
 8008672:	682e      	ldr	r6, [r5, #0]
 8008674:	602a      	str	r2, [r5, #0]
 8008676:	001a      	movs	r2, r3
 8008678:	0149      	lsls	r1, r1, #5
 800867a:	400a      	ands	r2, r1
 800867c:	420b      	tst	r3, r1
 800867e:	d034      	beq.n	80086ea <__sflush_r+0x9e>
 8008680:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	075b      	lsls	r3, r3, #29
 8008686:	d506      	bpl.n	8008696 <__sflush_r+0x4a>
 8008688:	6863      	ldr	r3, [r4, #4]
 800868a:	1ac0      	subs	r0, r0, r3
 800868c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <__sflush_r+0x4a>
 8008692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008694:	1ac0      	subs	r0, r0, r3
 8008696:	0002      	movs	r2, r0
 8008698:	6a21      	ldr	r1, [r4, #32]
 800869a:	2300      	movs	r3, #0
 800869c:	0028      	movs	r0, r5
 800869e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80086a0:	47b8      	blx	r7
 80086a2:	89a1      	ldrh	r1, [r4, #12]
 80086a4:	1c43      	adds	r3, r0, #1
 80086a6:	d106      	bne.n	80086b6 <__sflush_r+0x6a>
 80086a8:	682b      	ldr	r3, [r5, #0]
 80086aa:	2b1d      	cmp	r3, #29
 80086ac:	d831      	bhi.n	8008712 <__sflush_r+0xc6>
 80086ae:	4a2c      	ldr	r2, [pc, #176]	; (8008760 <__sflush_r+0x114>)
 80086b0:	40da      	lsrs	r2, r3
 80086b2:	07d3      	lsls	r3, r2, #31
 80086b4:	d52d      	bpl.n	8008712 <__sflush_r+0xc6>
 80086b6:	2300      	movs	r3, #0
 80086b8:	6063      	str	r3, [r4, #4]
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	04cb      	lsls	r3, r1, #19
 80086c0:	d505      	bpl.n	80086ce <__sflush_r+0x82>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d102      	bne.n	80086cc <__sflush_r+0x80>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d100      	bne.n	80086ce <__sflush_r+0x82>
 80086cc:	6560      	str	r0, [r4, #84]	; 0x54
 80086ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086d0:	602e      	str	r6, [r5, #0]
 80086d2:	2900      	cmp	r1, #0
 80086d4:	d0c6      	beq.n	8008664 <__sflush_r+0x18>
 80086d6:	0023      	movs	r3, r4
 80086d8:	3344      	adds	r3, #68	; 0x44
 80086da:	4299      	cmp	r1, r3
 80086dc:	d002      	beq.n	80086e4 <__sflush_r+0x98>
 80086de:	0028      	movs	r0, r5
 80086e0:	f000 fddc 	bl	800929c <_free_r>
 80086e4:	2000      	movs	r0, #0
 80086e6:	6360      	str	r0, [r4, #52]	; 0x34
 80086e8:	e7bd      	b.n	8008666 <__sflush_r+0x1a>
 80086ea:	2301      	movs	r3, #1
 80086ec:	0028      	movs	r0, r5
 80086ee:	6a21      	ldr	r1, [r4, #32]
 80086f0:	47b8      	blx	r7
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d1c5      	bne.n	8008682 <__sflush_r+0x36>
 80086f6:	682b      	ldr	r3, [r5, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0c2      	beq.n	8008682 <__sflush_r+0x36>
 80086fc:	2b1d      	cmp	r3, #29
 80086fe:	d001      	beq.n	8008704 <__sflush_r+0xb8>
 8008700:	2b16      	cmp	r3, #22
 8008702:	d101      	bne.n	8008708 <__sflush_r+0xbc>
 8008704:	602e      	str	r6, [r5, #0]
 8008706:	e7ad      	b.n	8008664 <__sflush_r+0x18>
 8008708:	2340      	movs	r3, #64	; 0x40
 800870a:	89a2      	ldrh	r2, [r4, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	e7a9      	b.n	8008666 <__sflush_r+0x1a>
 8008712:	2340      	movs	r3, #64	; 0x40
 8008714:	430b      	orrs	r3, r1
 8008716:	e7fa      	b.n	800870e <__sflush_r+0xc2>
 8008718:	690f      	ldr	r7, [r1, #16]
 800871a:	2f00      	cmp	r7, #0
 800871c:	d0a2      	beq.n	8008664 <__sflush_r+0x18>
 800871e:	680a      	ldr	r2, [r1, #0]
 8008720:	600f      	str	r7, [r1, #0]
 8008722:	1bd2      	subs	r2, r2, r7
 8008724:	9201      	str	r2, [sp, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	079b      	lsls	r3, r3, #30
 800872a:	d100      	bne.n	800872e <__sflush_r+0xe2>
 800872c:	694a      	ldr	r2, [r1, #20]
 800872e:	60a2      	str	r2, [r4, #8]
 8008730:	9b01      	ldr	r3, [sp, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	dc00      	bgt.n	8008738 <__sflush_r+0xec>
 8008736:	e795      	b.n	8008664 <__sflush_r+0x18>
 8008738:	003a      	movs	r2, r7
 800873a:	0028      	movs	r0, r5
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	6a21      	ldr	r1, [r4, #32]
 8008740:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008742:	47b0      	blx	r6
 8008744:	2800      	cmp	r0, #0
 8008746:	dc06      	bgt.n	8008756 <__sflush_r+0x10a>
 8008748:	2340      	movs	r3, #64	; 0x40
 800874a:	2001      	movs	r0, #1
 800874c:	89a2      	ldrh	r2, [r4, #12]
 800874e:	4240      	negs	r0, r0
 8008750:	4313      	orrs	r3, r2
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	e787      	b.n	8008666 <__sflush_r+0x1a>
 8008756:	9b01      	ldr	r3, [sp, #4]
 8008758:	183f      	adds	r7, r7, r0
 800875a:	1a1b      	subs	r3, r3, r0
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	e7e7      	b.n	8008730 <__sflush_r+0xe4>
 8008760:	20400001 	.word	0x20400001

08008764 <_fflush_r>:
 8008764:	690b      	ldr	r3, [r1, #16]
 8008766:	b570      	push	{r4, r5, r6, lr}
 8008768:	0005      	movs	r5, r0
 800876a:	000c      	movs	r4, r1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <_fflush_r+0x12>
 8008770:	2500      	movs	r5, #0
 8008772:	0028      	movs	r0, r5
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	2800      	cmp	r0, #0
 8008778:	d004      	beq.n	8008784 <_fflush_r+0x20>
 800877a:	6983      	ldr	r3, [r0, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <_fflush_r+0x20>
 8008780:	f000 f892 	bl	80088a8 <__sinit>
 8008784:	4b14      	ldr	r3, [pc, #80]	; (80087d8 <_fflush_r+0x74>)
 8008786:	429c      	cmp	r4, r3
 8008788:	d11b      	bne.n	80087c2 <_fflush_r+0x5e>
 800878a:	686c      	ldr	r4, [r5, #4]
 800878c:	220c      	movs	r2, #12
 800878e:	5ea3      	ldrsh	r3, [r4, r2]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0ed      	beq.n	8008770 <_fflush_r+0xc>
 8008794:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008796:	07d2      	lsls	r2, r2, #31
 8008798:	d404      	bmi.n	80087a4 <_fflush_r+0x40>
 800879a:	059b      	lsls	r3, r3, #22
 800879c:	d402      	bmi.n	80087a4 <_fflush_r+0x40>
 800879e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087a0:	f000 f927 	bl	80089f2 <__retarget_lock_acquire_recursive>
 80087a4:	0028      	movs	r0, r5
 80087a6:	0021      	movs	r1, r4
 80087a8:	f7ff ff50 	bl	800864c <__sflush_r>
 80087ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087ae:	0005      	movs	r5, r0
 80087b0:	07db      	lsls	r3, r3, #31
 80087b2:	d4de      	bmi.n	8008772 <_fflush_r+0xe>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	059b      	lsls	r3, r3, #22
 80087b8:	d4db      	bmi.n	8008772 <_fflush_r+0xe>
 80087ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087bc:	f000 f91a 	bl	80089f4 <__retarget_lock_release_recursive>
 80087c0:	e7d7      	b.n	8008772 <_fflush_r+0xe>
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <_fflush_r+0x78>)
 80087c4:	429c      	cmp	r4, r3
 80087c6:	d101      	bne.n	80087cc <_fflush_r+0x68>
 80087c8:	68ac      	ldr	r4, [r5, #8]
 80087ca:	e7df      	b.n	800878c <_fflush_r+0x28>
 80087cc:	4b04      	ldr	r3, [pc, #16]	; (80087e0 <_fflush_r+0x7c>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d1dc      	bne.n	800878c <_fflush_r+0x28>
 80087d2:	68ec      	ldr	r4, [r5, #12]
 80087d4:	e7da      	b.n	800878c <_fflush_r+0x28>
 80087d6:	46c0      	nop			; (mov r8, r8)
 80087d8:	08009aa8 	.word	0x08009aa8
 80087dc:	08009ac8 	.word	0x08009ac8
 80087e0:	08009a88 	.word	0x08009a88

080087e4 <std>:
 80087e4:	2300      	movs	r3, #0
 80087e6:	b510      	push	{r4, lr}
 80087e8:	0004      	movs	r4, r0
 80087ea:	6003      	str	r3, [r0, #0]
 80087ec:	6043      	str	r3, [r0, #4]
 80087ee:	6083      	str	r3, [r0, #8]
 80087f0:	8181      	strh	r1, [r0, #12]
 80087f2:	6643      	str	r3, [r0, #100]	; 0x64
 80087f4:	0019      	movs	r1, r3
 80087f6:	81c2      	strh	r2, [r0, #14]
 80087f8:	6103      	str	r3, [r0, #16]
 80087fa:	6143      	str	r3, [r0, #20]
 80087fc:	6183      	str	r3, [r0, #24]
 80087fe:	2208      	movs	r2, #8
 8008800:	305c      	adds	r0, #92	; 0x5c
 8008802:	f7fe f9b7 	bl	8006b74 <memset>
 8008806:	4b05      	ldr	r3, [pc, #20]	; (800881c <std+0x38>)
 8008808:	6224      	str	r4, [r4, #32]
 800880a:	6263      	str	r3, [r4, #36]	; 0x24
 800880c:	4b04      	ldr	r3, [pc, #16]	; (8008820 <std+0x3c>)
 800880e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008810:	4b04      	ldr	r3, [pc, #16]	; (8008824 <std+0x40>)
 8008812:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008814:	4b04      	ldr	r3, [pc, #16]	; (8008828 <std+0x44>)
 8008816:	6323      	str	r3, [r4, #48]	; 0x30
 8008818:	bd10      	pop	{r4, pc}
 800881a:	46c0      	nop			; (mov r8, r8)
 800881c:	08009519 	.word	0x08009519
 8008820:	08009541 	.word	0x08009541
 8008824:	08009579 	.word	0x08009579
 8008828:	080095a5 	.word	0x080095a5

0800882c <_cleanup_r>:
 800882c:	b510      	push	{r4, lr}
 800882e:	4902      	ldr	r1, [pc, #8]	; (8008838 <_cleanup_r+0xc>)
 8008830:	f000 f8ba 	bl	80089a8 <_fwalk_reent>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	08008765 	.word	0x08008765

0800883c <__sfmoreglue>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	2568      	movs	r5, #104	; 0x68
 8008840:	1e4a      	subs	r2, r1, #1
 8008842:	4355      	muls	r5, r2
 8008844:	000e      	movs	r6, r1
 8008846:	0029      	movs	r1, r5
 8008848:	3174      	adds	r1, #116	; 0x74
 800884a:	f000 fd93 	bl	8009374 <_malloc_r>
 800884e:	1e04      	subs	r4, r0, #0
 8008850:	d008      	beq.n	8008864 <__sfmoreglue+0x28>
 8008852:	2100      	movs	r1, #0
 8008854:	002a      	movs	r2, r5
 8008856:	6001      	str	r1, [r0, #0]
 8008858:	6046      	str	r6, [r0, #4]
 800885a:	300c      	adds	r0, #12
 800885c:	60a0      	str	r0, [r4, #8]
 800885e:	3268      	adds	r2, #104	; 0x68
 8008860:	f7fe f988 	bl	8006b74 <memset>
 8008864:	0020      	movs	r0, r4
 8008866:	bd70      	pop	{r4, r5, r6, pc}

08008868 <__sfp_lock_acquire>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4802      	ldr	r0, [pc, #8]	; (8008874 <__sfp_lock_acquire+0xc>)
 800886c:	f000 f8c1 	bl	80089f2 <__retarget_lock_acquire_recursive>
 8008870:	bd10      	pop	{r4, pc}
 8008872:	46c0      	nop			; (mov r8, r8)
 8008874:	2000032d 	.word	0x2000032d

08008878 <__sfp_lock_release>:
 8008878:	b510      	push	{r4, lr}
 800887a:	4802      	ldr	r0, [pc, #8]	; (8008884 <__sfp_lock_release+0xc>)
 800887c:	f000 f8ba 	bl	80089f4 <__retarget_lock_release_recursive>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	2000032d 	.word	0x2000032d

08008888 <__sinit_lock_acquire>:
 8008888:	b510      	push	{r4, lr}
 800888a:	4802      	ldr	r0, [pc, #8]	; (8008894 <__sinit_lock_acquire+0xc>)
 800888c:	f000 f8b1 	bl	80089f2 <__retarget_lock_acquire_recursive>
 8008890:	bd10      	pop	{r4, pc}
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	2000032e 	.word	0x2000032e

08008898 <__sinit_lock_release>:
 8008898:	b510      	push	{r4, lr}
 800889a:	4802      	ldr	r0, [pc, #8]	; (80088a4 <__sinit_lock_release+0xc>)
 800889c:	f000 f8aa 	bl	80089f4 <__retarget_lock_release_recursive>
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	2000032e 	.word	0x2000032e

080088a8 <__sinit>:
 80088a8:	b513      	push	{r0, r1, r4, lr}
 80088aa:	0004      	movs	r4, r0
 80088ac:	f7ff ffec 	bl	8008888 <__sinit_lock_acquire>
 80088b0:	69a3      	ldr	r3, [r4, #24]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <__sinit+0x14>
 80088b6:	f7ff ffef 	bl	8008898 <__sinit_lock_release>
 80088ba:	bd13      	pop	{r0, r1, r4, pc}
 80088bc:	64a3      	str	r3, [r4, #72]	; 0x48
 80088be:	64e3      	str	r3, [r4, #76]	; 0x4c
 80088c0:	6523      	str	r3, [r4, #80]	; 0x50
 80088c2:	4b13      	ldr	r3, [pc, #76]	; (8008910 <__sinit+0x68>)
 80088c4:	4a13      	ldr	r2, [pc, #76]	; (8008914 <__sinit+0x6c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d101      	bne.n	80088d4 <__sinit+0x2c>
 80088d0:	2301      	movs	r3, #1
 80088d2:	61a3      	str	r3, [r4, #24]
 80088d4:	0020      	movs	r0, r4
 80088d6:	f000 f81f 	bl	8008918 <__sfp>
 80088da:	6060      	str	r0, [r4, #4]
 80088dc:	0020      	movs	r0, r4
 80088de:	f000 f81b 	bl	8008918 <__sfp>
 80088e2:	60a0      	str	r0, [r4, #8]
 80088e4:	0020      	movs	r0, r4
 80088e6:	f000 f817 	bl	8008918 <__sfp>
 80088ea:	2200      	movs	r2, #0
 80088ec:	2104      	movs	r1, #4
 80088ee:	60e0      	str	r0, [r4, #12]
 80088f0:	6860      	ldr	r0, [r4, #4]
 80088f2:	f7ff ff77 	bl	80087e4 <std>
 80088f6:	2201      	movs	r2, #1
 80088f8:	2109      	movs	r1, #9
 80088fa:	68a0      	ldr	r0, [r4, #8]
 80088fc:	f7ff ff72 	bl	80087e4 <std>
 8008900:	2202      	movs	r2, #2
 8008902:	2112      	movs	r1, #18
 8008904:	68e0      	ldr	r0, [r4, #12]
 8008906:	f7ff ff6d 	bl	80087e4 <std>
 800890a:	2301      	movs	r3, #1
 800890c:	61a3      	str	r3, [r4, #24]
 800890e:	e7d2      	b.n	80088b6 <__sinit+0xe>
 8008910:	080099ac 	.word	0x080099ac
 8008914:	0800882d 	.word	0x0800882d

08008918 <__sfp>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	0007      	movs	r7, r0
 800891c:	f7ff ffa4 	bl	8008868 <__sfp_lock_acquire>
 8008920:	4b1f      	ldr	r3, [pc, #124]	; (80089a0 <__sfp+0x88>)
 8008922:	681e      	ldr	r6, [r3, #0]
 8008924:	69b3      	ldr	r3, [r6, #24]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <__sfp+0x18>
 800892a:	0030      	movs	r0, r6
 800892c:	f7ff ffbc 	bl	80088a8 <__sinit>
 8008930:	3648      	adds	r6, #72	; 0x48
 8008932:	68b4      	ldr	r4, [r6, #8]
 8008934:	6873      	ldr	r3, [r6, #4]
 8008936:	3b01      	subs	r3, #1
 8008938:	d504      	bpl.n	8008944 <__sfp+0x2c>
 800893a:	6833      	ldr	r3, [r6, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d022      	beq.n	8008986 <__sfp+0x6e>
 8008940:	6836      	ldr	r6, [r6, #0]
 8008942:	e7f6      	b.n	8008932 <__sfp+0x1a>
 8008944:	220c      	movs	r2, #12
 8008946:	5ea5      	ldrsh	r5, [r4, r2]
 8008948:	2d00      	cmp	r5, #0
 800894a:	d11a      	bne.n	8008982 <__sfp+0x6a>
 800894c:	0020      	movs	r0, r4
 800894e:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <__sfp+0x8c>)
 8008950:	3058      	adds	r0, #88	; 0x58
 8008952:	60e3      	str	r3, [r4, #12]
 8008954:	6665      	str	r5, [r4, #100]	; 0x64
 8008956:	f000 f84b 	bl	80089f0 <__retarget_lock_init_recursive>
 800895a:	f7ff ff8d 	bl	8008878 <__sfp_lock_release>
 800895e:	0020      	movs	r0, r4
 8008960:	2208      	movs	r2, #8
 8008962:	0029      	movs	r1, r5
 8008964:	6025      	str	r5, [r4, #0]
 8008966:	60a5      	str	r5, [r4, #8]
 8008968:	6065      	str	r5, [r4, #4]
 800896a:	6125      	str	r5, [r4, #16]
 800896c:	6165      	str	r5, [r4, #20]
 800896e:	61a5      	str	r5, [r4, #24]
 8008970:	305c      	adds	r0, #92	; 0x5c
 8008972:	f7fe f8ff 	bl	8006b74 <memset>
 8008976:	6365      	str	r5, [r4, #52]	; 0x34
 8008978:	63a5      	str	r5, [r4, #56]	; 0x38
 800897a:	64a5      	str	r5, [r4, #72]	; 0x48
 800897c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800897e:	0020      	movs	r0, r4
 8008980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008982:	3468      	adds	r4, #104	; 0x68
 8008984:	e7d7      	b.n	8008936 <__sfp+0x1e>
 8008986:	2104      	movs	r1, #4
 8008988:	0038      	movs	r0, r7
 800898a:	f7ff ff57 	bl	800883c <__sfmoreglue>
 800898e:	1e04      	subs	r4, r0, #0
 8008990:	6030      	str	r0, [r6, #0]
 8008992:	d1d5      	bne.n	8008940 <__sfp+0x28>
 8008994:	f7ff ff70 	bl	8008878 <__sfp_lock_release>
 8008998:	230c      	movs	r3, #12
 800899a:	603b      	str	r3, [r7, #0]
 800899c:	e7ef      	b.n	800897e <__sfp+0x66>
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	080099ac 	.word	0x080099ac
 80089a4:	ffff0001 	.word	0xffff0001

080089a8 <_fwalk_reent>:
 80089a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089aa:	0004      	movs	r4, r0
 80089ac:	0006      	movs	r6, r0
 80089ae:	2700      	movs	r7, #0
 80089b0:	9101      	str	r1, [sp, #4]
 80089b2:	3448      	adds	r4, #72	; 0x48
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	68a5      	ldr	r5, [r4, #8]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	9b00      	ldr	r3, [sp, #0]
 80089bc:	3b01      	subs	r3, #1
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	d504      	bpl.n	80089cc <_fwalk_reent+0x24>
 80089c2:	6824      	ldr	r4, [r4, #0]
 80089c4:	2c00      	cmp	r4, #0
 80089c6:	d1f5      	bne.n	80089b4 <_fwalk_reent+0xc>
 80089c8:	0038      	movs	r0, r7
 80089ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089cc:	89ab      	ldrh	r3, [r5, #12]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d908      	bls.n	80089e4 <_fwalk_reent+0x3c>
 80089d2:	220e      	movs	r2, #14
 80089d4:	5eab      	ldrsh	r3, [r5, r2]
 80089d6:	3301      	adds	r3, #1
 80089d8:	d004      	beq.n	80089e4 <_fwalk_reent+0x3c>
 80089da:	0029      	movs	r1, r5
 80089dc:	0030      	movs	r0, r6
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	4798      	blx	r3
 80089e2:	4307      	orrs	r7, r0
 80089e4:	3568      	adds	r5, #104	; 0x68
 80089e6:	e7e8      	b.n	80089ba <_fwalk_reent+0x12>

080089e8 <_localeconv_r>:
 80089e8:	4800      	ldr	r0, [pc, #0]	; (80089ec <_localeconv_r+0x4>)
 80089ea:	4770      	bx	lr
 80089ec:	20000160 	.word	0x20000160

080089f0 <__retarget_lock_init_recursive>:
 80089f0:	4770      	bx	lr

080089f2 <__retarget_lock_acquire_recursive>:
 80089f2:	4770      	bx	lr

080089f4 <__retarget_lock_release_recursive>:
 80089f4:	4770      	bx	lr
	...

080089f8 <__swhatbuf_r>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	000e      	movs	r6, r1
 80089fc:	001d      	movs	r5, r3
 80089fe:	230e      	movs	r3, #14
 8008a00:	5ec9      	ldrsh	r1, [r1, r3]
 8008a02:	0014      	movs	r4, r2
 8008a04:	b096      	sub	sp, #88	; 0x58
 8008a06:	2900      	cmp	r1, #0
 8008a08:	da08      	bge.n	8008a1c <__swhatbuf_r+0x24>
 8008a0a:	220c      	movs	r2, #12
 8008a0c:	5eb3      	ldrsh	r3, [r6, r2]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	602a      	str	r2, [r5, #0]
 8008a12:	061b      	lsls	r3, r3, #24
 8008a14:	d411      	bmi.n	8008a3a <__swhatbuf_r+0x42>
 8008a16:	2380      	movs	r3, #128	; 0x80
 8008a18:	00db      	lsls	r3, r3, #3
 8008a1a:	e00f      	b.n	8008a3c <__swhatbuf_r+0x44>
 8008a1c:	466a      	mov	r2, sp
 8008a1e:	f000 fded 	bl	80095fc <_fstat_r>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	dbf1      	blt.n	8008a0a <__swhatbuf_r+0x12>
 8008a26:	23f0      	movs	r3, #240	; 0xf0
 8008a28:	9901      	ldr	r1, [sp, #4]
 8008a2a:	021b      	lsls	r3, r3, #8
 8008a2c:	4019      	ands	r1, r3
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <__swhatbuf_r+0x4c>)
 8008a30:	18c9      	adds	r1, r1, r3
 8008a32:	424b      	negs	r3, r1
 8008a34:	4159      	adcs	r1, r3
 8008a36:	6029      	str	r1, [r5, #0]
 8008a38:	e7ed      	b.n	8008a16 <__swhatbuf_r+0x1e>
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	b016      	add	sp, #88	; 0x58
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	ffffe000 	.word	0xffffe000

08008a48 <__smakebuf_r>:
 8008a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a4a:	2602      	movs	r6, #2
 8008a4c:	898b      	ldrh	r3, [r1, #12]
 8008a4e:	0005      	movs	r5, r0
 8008a50:	000c      	movs	r4, r1
 8008a52:	4233      	tst	r3, r6
 8008a54:	d006      	beq.n	8008a64 <__smakebuf_r+0x1c>
 8008a56:	0023      	movs	r3, r4
 8008a58:	3347      	adds	r3, #71	; 0x47
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	2301      	movs	r3, #1
 8008a60:	6163      	str	r3, [r4, #20]
 8008a62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008a64:	466a      	mov	r2, sp
 8008a66:	ab01      	add	r3, sp, #4
 8008a68:	f7ff ffc6 	bl	80089f8 <__swhatbuf_r>
 8008a6c:	9900      	ldr	r1, [sp, #0]
 8008a6e:	0007      	movs	r7, r0
 8008a70:	0028      	movs	r0, r5
 8008a72:	f000 fc7f 	bl	8009374 <_malloc_r>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d108      	bne.n	8008a8c <__smakebuf_r+0x44>
 8008a7a:	220c      	movs	r2, #12
 8008a7c:	5ea3      	ldrsh	r3, [r4, r2]
 8008a7e:	059a      	lsls	r2, r3, #22
 8008a80:	d4ef      	bmi.n	8008a62 <__smakebuf_r+0x1a>
 8008a82:	2203      	movs	r2, #3
 8008a84:	4393      	bics	r3, r2
 8008a86:	431e      	orrs	r6, r3
 8008a88:	81a6      	strh	r6, [r4, #12]
 8008a8a:	e7e4      	b.n	8008a56 <__smakebuf_r+0xe>
 8008a8c:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <__smakebuf_r+0x84>)
 8008a8e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008a90:	2380      	movs	r3, #128	; 0x80
 8008a92:	89a2      	ldrh	r2, [r4, #12]
 8008a94:	6020      	str	r0, [r4, #0]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	9b00      	ldr	r3, [sp, #0]
 8008a9c:	6120      	str	r0, [r4, #16]
 8008a9e:	6163      	str	r3, [r4, #20]
 8008aa0:	9b01      	ldr	r3, [sp, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00d      	beq.n	8008ac2 <__smakebuf_r+0x7a>
 8008aa6:	0028      	movs	r0, r5
 8008aa8:	230e      	movs	r3, #14
 8008aaa:	5ee1      	ldrsh	r1, [r4, r3]
 8008aac:	f000 fdb8 	bl	8009620 <_isatty_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d006      	beq.n	8008ac2 <__smakebuf_r+0x7a>
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	4393      	bics	r3, r2
 8008aba:	001a      	movs	r2, r3
 8008abc:	2301      	movs	r3, #1
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	81a3      	strh	r3, [r4, #12]
 8008ac2:	89a0      	ldrh	r0, [r4, #12]
 8008ac4:	4307      	orrs	r7, r0
 8008ac6:	81a7      	strh	r7, [r4, #12]
 8008ac8:	e7cb      	b.n	8008a62 <__smakebuf_r+0x1a>
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	0800882d 	.word	0x0800882d

08008ad0 <malloc>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <malloc+0x10>)
 8008ad4:	0001      	movs	r1, r0
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	f000 fc4c 	bl	8009374 <_malloc_r>
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	46c0      	nop			; (mov r8, r8)
 8008ae0:	2000000c 	.word	0x2000000c

08008ae4 <memchr>:
 8008ae4:	b2c9      	uxtb	r1, r1
 8008ae6:	1882      	adds	r2, r0, r2
 8008ae8:	4290      	cmp	r0, r2
 8008aea:	d101      	bne.n	8008af0 <memchr+0xc>
 8008aec:	2000      	movs	r0, #0
 8008aee:	4770      	bx	lr
 8008af0:	7803      	ldrb	r3, [r0, #0]
 8008af2:	428b      	cmp	r3, r1
 8008af4:	d0fb      	beq.n	8008aee <memchr+0xa>
 8008af6:	3001      	adds	r0, #1
 8008af8:	e7f6      	b.n	8008ae8 <memchr+0x4>

08008afa <memcpy>:
 8008afa:	2300      	movs	r3, #0
 8008afc:	b510      	push	{r4, lr}
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d100      	bne.n	8008b04 <memcpy+0xa>
 8008b02:	bd10      	pop	{r4, pc}
 8008b04:	5ccc      	ldrb	r4, [r1, r3]
 8008b06:	54c4      	strb	r4, [r0, r3]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	e7f8      	b.n	8008afe <memcpy+0x4>

08008b0c <_Balloc>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b10:	0006      	movs	r6, r0
 8008b12:	000c      	movs	r4, r1
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	d10e      	bne.n	8008b36 <_Balloc+0x2a>
 8008b18:	2010      	movs	r0, #16
 8008b1a:	f7ff ffd9 	bl	8008ad0 <malloc>
 8008b1e:	1e02      	subs	r2, r0, #0
 8008b20:	6270      	str	r0, [r6, #36]	; 0x24
 8008b22:	d104      	bne.n	8008b2e <_Balloc+0x22>
 8008b24:	2166      	movs	r1, #102	; 0x66
 8008b26:	4b19      	ldr	r3, [pc, #100]	; (8008b8c <_Balloc+0x80>)
 8008b28:	4819      	ldr	r0, [pc, #100]	; (8008b90 <_Balloc+0x84>)
 8008b2a:	f7fd ffcb 	bl	8006ac4 <__assert_func>
 8008b2e:	6045      	str	r5, [r0, #4]
 8008b30:	6085      	str	r5, [r0, #8]
 8008b32:	6005      	str	r5, [r0, #0]
 8008b34:	60c5      	str	r5, [r0, #12]
 8008b36:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008b38:	68eb      	ldr	r3, [r5, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d013      	beq.n	8008b66 <_Balloc+0x5a>
 8008b3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b40:	00a2      	lsls	r2, r4, #2
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	189b      	adds	r3, r3, r2
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d118      	bne.n	8008b7e <_Balloc+0x72>
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	000d      	movs	r5, r1
 8008b50:	40a5      	lsls	r5, r4
 8008b52:	1d6a      	adds	r2, r5, #5
 8008b54:	0030      	movs	r0, r6
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	f000 fb74 	bl	8009244 <_calloc_r>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d00c      	beq.n	8008b7a <_Balloc+0x6e>
 8008b60:	6044      	str	r4, [r0, #4]
 8008b62:	6085      	str	r5, [r0, #8]
 8008b64:	e00d      	b.n	8008b82 <_Balloc+0x76>
 8008b66:	2221      	movs	r2, #33	; 0x21
 8008b68:	2104      	movs	r1, #4
 8008b6a:	0030      	movs	r0, r6
 8008b6c:	f000 fb6a 	bl	8009244 <_calloc_r>
 8008b70:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008b72:	60e8      	str	r0, [r5, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e1      	bne.n	8008b3e <_Balloc+0x32>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	bd70      	pop	{r4, r5, r6, pc}
 8008b7e:	6802      	ldr	r2, [r0, #0]
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	2300      	movs	r3, #0
 8008b84:	6103      	str	r3, [r0, #16]
 8008b86:	60c3      	str	r3, [r0, #12]
 8008b88:	e7f8      	b.n	8008b7c <_Balloc+0x70>
 8008b8a:	46c0      	nop			; (mov r8, r8)
 8008b8c:	08009a02 	.word	0x08009a02
 8008b90:	08009ae8 	.word	0x08009ae8

08008b94 <_Bfree>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b98:	0005      	movs	r5, r0
 8008b9a:	000c      	movs	r4, r1
 8008b9c:	2e00      	cmp	r6, #0
 8008b9e:	d10e      	bne.n	8008bbe <_Bfree+0x2a>
 8008ba0:	2010      	movs	r0, #16
 8008ba2:	f7ff ff95 	bl	8008ad0 <malloc>
 8008ba6:	1e02      	subs	r2, r0, #0
 8008ba8:	6268      	str	r0, [r5, #36]	; 0x24
 8008baa:	d104      	bne.n	8008bb6 <_Bfree+0x22>
 8008bac:	218a      	movs	r1, #138	; 0x8a
 8008bae:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <_Bfree+0x40>)
 8008bb0:	4809      	ldr	r0, [pc, #36]	; (8008bd8 <_Bfree+0x44>)
 8008bb2:	f7fd ff87 	bl	8006ac4 <__assert_func>
 8008bb6:	6046      	str	r6, [r0, #4]
 8008bb8:	6086      	str	r6, [r0, #8]
 8008bba:	6006      	str	r6, [r0, #0]
 8008bbc:	60c6      	str	r6, [r0, #12]
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	d007      	beq.n	8008bd2 <_Bfree+0x3e>
 8008bc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008bc4:	6862      	ldr	r2, [r4, #4]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	0092      	lsls	r2, r2, #2
 8008bca:	189b      	adds	r3, r3, r2
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	601c      	str	r4, [r3, #0]
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	08009a02 	.word	0x08009a02
 8008bd8:	08009ae8 	.word	0x08009ae8

08008bdc <__multadd>:
 8008bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bde:	000e      	movs	r6, r1
 8008be0:	9001      	str	r0, [sp, #4]
 8008be2:	000c      	movs	r4, r1
 8008be4:	001d      	movs	r5, r3
 8008be6:	2000      	movs	r0, #0
 8008be8:	690f      	ldr	r7, [r1, #16]
 8008bea:	3614      	adds	r6, #20
 8008bec:	6833      	ldr	r3, [r6, #0]
 8008bee:	3001      	adds	r0, #1
 8008bf0:	b299      	uxth	r1, r3
 8008bf2:	4351      	muls	r1, r2
 8008bf4:	0c1b      	lsrs	r3, r3, #16
 8008bf6:	4353      	muls	r3, r2
 8008bf8:	1949      	adds	r1, r1, r5
 8008bfa:	0c0d      	lsrs	r5, r1, #16
 8008bfc:	195b      	adds	r3, r3, r5
 8008bfe:	0c1d      	lsrs	r5, r3, #16
 8008c00:	b289      	uxth	r1, r1
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	185b      	adds	r3, r3, r1
 8008c06:	c608      	stmia	r6!, {r3}
 8008c08:	4287      	cmp	r7, r0
 8008c0a:	dcef      	bgt.n	8008bec <__multadd+0x10>
 8008c0c:	2d00      	cmp	r5, #0
 8008c0e:	d022      	beq.n	8008c56 <__multadd+0x7a>
 8008c10:	68a3      	ldr	r3, [r4, #8]
 8008c12:	42bb      	cmp	r3, r7
 8008c14:	dc19      	bgt.n	8008c4a <__multadd+0x6e>
 8008c16:	6863      	ldr	r3, [r4, #4]
 8008c18:	9801      	ldr	r0, [sp, #4]
 8008c1a:	1c59      	adds	r1, r3, #1
 8008c1c:	f7ff ff76 	bl	8008b0c <_Balloc>
 8008c20:	1e06      	subs	r6, r0, #0
 8008c22:	d105      	bne.n	8008c30 <__multadd+0x54>
 8008c24:	0002      	movs	r2, r0
 8008c26:	21b5      	movs	r1, #181	; 0xb5
 8008c28:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <__multadd+0x80>)
 8008c2a:	480d      	ldr	r0, [pc, #52]	; (8008c60 <__multadd+0x84>)
 8008c2c:	f7fd ff4a 	bl	8006ac4 <__assert_func>
 8008c30:	0021      	movs	r1, r4
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	310c      	adds	r1, #12
 8008c36:	1c9a      	adds	r2, r3, #2
 8008c38:	0092      	lsls	r2, r2, #2
 8008c3a:	300c      	adds	r0, #12
 8008c3c:	f7ff ff5d 	bl	8008afa <memcpy>
 8008c40:	0021      	movs	r1, r4
 8008c42:	9801      	ldr	r0, [sp, #4]
 8008c44:	f7ff ffa6 	bl	8008b94 <_Bfree>
 8008c48:	0034      	movs	r4, r6
 8008c4a:	1d3b      	adds	r3, r7, #4
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	18e3      	adds	r3, r4, r3
 8008c50:	605d      	str	r5, [r3, #4]
 8008c52:	1c7b      	adds	r3, r7, #1
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	0020      	movs	r0, r4
 8008c58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c5a:	46c0      	nop			; (mov r8, r8)
 8008c5c:	08009a74 	.word	0x08009a74
 8008c60:	08009ae8 	.word	0x08009ae8

08008c64 <__hi0bits>:
 8008c64:	0003      	movs	r3, r0
 8008c66:	0c02      	lsrs	r2, r0, #16
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4282      	cmp	r2, r0
 8008c6c:	d101      	bne.n	8008c72 <__hi0bits+0xe>
 8008c6e:	041b      	lsls	r3, r3, #16
 8008c70:	3010      	adds	r0, #16
 8008c72:	0e1a      	lsrs	r2, r3, #24
 8008c74:	d101      	bne.n	8008c7a <__hi0bits+0x16>
 8008c76:	3008      	adds	r0, #8
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	0f1a      	lsrs	r2, r3, #28
 8008c7c:	d101      	bne.n	8008c82 <__hi0bits+0x1e>
 8008c7e:	3004      	adds	r0, #4
 8008c80:	011b      	lsls	r3, r3, #4
 8008c82:	0f9a      	lsrs	r2, r3, #30
 8008c84:	d101      	bne.n	8008c8a <__hi0bits+0x26>
 8008c86:	3002      	adds	r0, #2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	db03      	blt.n	8008c96 <__hi0bits+0x32>
 8008c8e:	3001      	adds	r0, #1
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	d400      	bmi.n	8008c96 <__hi0bits+0x32>
 8008c94:	2020      	movs	r0, #32
 8008c96:	4770      	bx	lr

08008c98 <__lo0bits>:
 8008c98:	6803      	ldr	r3, [r0, #0]
 8008c9a:	0002      	movs	r2, r0
 8008c9c:	2107      	movs	r1, #7
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	4008      	ands	r0, r1
 8008ca2:	420b      	tst	r3, r1
 8008ca4:	d00d      	beq.n	8008cc2 <__lo0bits+0x2a>
 8008ca6:	3906      	subs	r1, #6
 8008ca8:	2000      	movs	r0, #0
 8008caa:	420b      	tst	r3, r1
 8008cac:	d105      	bne.n	8008cba <__lo0bits+0x22>
 8008cae:	3002      	adds	r0, #2
 8008cb0:	4203      	tst	r3, r0
 8008cb2:	d003      	beq.n	8008cbc <__lo0bits+0x24>
 8008cb4:	40cb      	lsrs	r3, r1
 8008cb6:	0008      	movs	r0, r1
 8008cb8:	6013      	str	r3, [r2, #0]
 8008cba:	4770      	bx	lr
 8008cbc:	089b      	lsrs	r3, r3, #2
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	e7fb      	b.n	8008cba <__lo0bits+0x22>
 8008cc2:	b299      	uxth	r1, r3
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	d101      	bne.n	8008ccc <__lo0bits+0x34>
 8008cc8:	2010      	movs	r0, #16
 8008cca:	0c1b      	lsrs	r3, r3, #16
 8008ccc:	b2d9      	uxtb	r1, r3
 8008cce:	2900      	cmp	r1, #0
 8008cd0:	d101      	bne.n	8008cd6 <__lo0bits+0x3e>
 8008cd2:	3008      	adds	r0, #8
 8008cd4:	0a1b      	lsrs	r3, r3, #8
 8008cd6:	0719      	lsls	r1, r3, #28
 8008cd8:	d101      	bne.n	8008cde <__lo0bits+0x46>
 8008cda:	3004      	adds	r0, #4
 8008cdc:	091b      	lsrs	r3, r3, #4
 8008cde:	0799      	lsls	r1, r3, #30
 8008ce0:	d101      	bne.n	8008ce6 <__lo0bits+0x4e>
 8008ce2:	3002      	adds	r0, #2
 8008ce4:	089b      	lsrs	r3, r3, #2
 8008ce6:	07d9      	lsls	r1, r3, #31
 8008ce8:	d4e9      	bmi.n	8008cbe <__lo0bits+0x26>
 8008cea:	3001      	adds	r0, #1
 8008cec:	085b      	lsrs	r3, r3, #1
 8008cee:	d1e6      	bne.n	8008cbe <__lo0bits+0x26>
 8008cf0:	2020      	movs	r0, #32
 8008cf2:	e7e2      	b.n	8008cba <__lo0bits+0x22>

08008cf4 <__i2b>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	000c      	movs	r4, r1
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	f7ff ff07 	bl	8008b0c <_Balloc>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	d106      	bne.n	8008d10 <__i2b+0x1c>
 8008d02:	21a0      	movs	r1, #160	; 0xa0
 8008d04:	0002      	movs	r2, r0
 8008d06:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <__i2b+0x24>)
 8008d08:	4804      	ldr	r0, [pc, #16]	; (8008d1c <__i2b+0x28>)
 8008d0a:	0049      	lsls	r1, r1, #1
 8008d0c:	f7fd feda 	bl	8006ac4 <__assert_func>
 8008d10:	2301      	movs	r3, #1
 8008d12:	6144      	str	r4, [r0, #20]
 8008d14:	6103      	str	r3, [r0, #16]
 8008d16:	bd10      	pop	{r4, pc}
 8008d18:	08009a74 	.word	0x08009a74
 8008d1c:	08009ae8 	.word	0x08009ae8

08008d20 <__multiply>:
 8008d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d22:	690b      	ldr	r3, [r1, #16]
 8008d24:	0014      	movs	r4, r2
 8008d26:	6912      	ldr	r2, [r2, #16]
 8008d28:	000d      	movs	r5, r1
 8008d2a:	b089      	sub	sp, #36	; 0x24
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	da01      	bge.n	8008d34 <__multiply+0x14>
 8008d30:	0025      	movs	r5, r4
 8008d32:	000c      	movs	r4, r1
 8008d34:	692f      	ldr	r7, [r5, #16]
 8008d36:	6926      	ldr	r6, [r4, #16]
 8008d38:	6869      	ldr	r1, [r5, #4]
 8008d3a:	19bb      	adds	r3, r7, r6
 8008d3c:	9302      	str	r3, [sp, #8]
 8008d3e:	68ab      	ldr	r3, [r5, #8]
 8008d40:	19ba      	adds	r2, r7, r6
 8008d42:	4293      	cmp	r3, r2
 8008d44:	da00      	bge.n	8008d48 <__multiply+0x28>
 8008d46:	3101      	adds	r1, #1
 8008d48:	f7ff fee0 	bl	8008b0c <_Balloc>
 8008d4c:	9001      	str	r0, [sp, #4]
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d106      	bne.n	8008d60 <__multiply+0x40>
 8008d52:	215e      	movs	r1, #94	; 0x5e
 8008d54:	0002      	movs	r2, r0
 8008d56:	4b48      	ldr	r3, [pc, #288]	; (8008e78 <__multiply+0x158>)
 8008d58:	4848      	ldr	r0, [pc, #288]	; (8008e7c <__multiply+0x15c>)
 8008d5a:	31ff      	adds	r1, #255	; 0xff
 8008d5c:	f7fd feb2 	bl	8006ac4 <__assert_func>
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	3314      	adds	r3, #20
 8008d66:	469c      	mov	ip, r3
 8008d68:	19bb      	adds	r3, r7, r6
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4463      	add	r3, ip
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	4663      	mov	r3, ip
 8008d72:	9903      	ldr	r1, [sp, #12]
 8008d74:	428b      	cmp	r3, r1
 8008d76:	d32c      	bcc.n	8008dd2 <__multiply+0xb2>
 8008d78:	002b      	movs	r3, r5
 8008d7a:	0022      	movs	r2, r4
 8008d7c:	3314      	adds	r3, #20
 8008d7e:	00bf      	lsls	r7, r7, #2
 8008d80:	3214      	adds	r2, #20
 8008d82:	9306      	str	r3, [sp, #24]
 8008d84:	00b6      	lsls	r6, r6, #2
 8008d86:	19db      	adds	r3, r3, r7
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	1993      	adds	r3, r2, r6
 8008d8c:	9307      	str	r3, [sp, #28]
 8008d8e:	2304      	movs	r3, #4
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	002b      	movs	r3, r5
 8008d94:	9904      	ldr	r1, [sp, #16]
 8008d96:	3315      	adds	r3, #21
 8008d98:	9200      	str	r2, [sp, #0]
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	d305      	bcc.n	8008daa <__multiply+0x8a>
 8008d9e:	1b4b      	subs	r3, r1, r5
 8008da0:	3b15      	subs	r3, #21
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	3301      	adds	r3, #1
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	9305      	str	r3, [sp, #20]
 8008daa:	9b07      	ldr	r3, [sp, #28]
 8008dac:	9a00      	ldr	r2, [sp, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d311      	bcc.n	8008dd6 <__multiply+0xb6>
 8008db2:	9b02      	ldr	r3, [sp, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	dd06      	ble.n	8008dc6 <__multiply+0xa6>
 8008db8:	9b03      	ldr	r3, [sp, #12]
 8008dba:	3b04      	subs	r3, #4
 8008dbc:	9303      	str	r3, [sp, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d053      	beq.n	8008e6e <__multiply+0x14e>
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	9a02      	ldr	r2, [sp, #8]
 8008dca:	0018      	movs	r0, r3
 8008dcc:	611a      	str	r2, [r3, #16]
 8008dce:	b009      	add	sp, #36	; 0x24
 8008dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dd2:	c304      	stmia	r3!, {r2}
 8008dd4:	e7cd      	b.n	8008d72 <__multiply+0x52>
 8008dd6:	9b00      	ldr	r3, [sp, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	b298      	uxth	r0, r3
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d01b      	beq.n	8008e18 <__multiply+0xf8>
 8008de0:	4667      	mov	r7, ip
 8008de2:	2400      	movs	r4, #0
 8008de4:	9e06      	ldr	r6, [sp, #24]
 8008de6:	ce02      	ldmia	r6!, {r1}
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	b28b      	uxth	r3, r1
 8008dec:	4343      	muls	r3, r0
 8008dee:	b292      	uxth	r2, r2
 8008df0:	189b      	adds	r3, r3, r2
 8008df2:	191b      	adds	r3, r3, r4
 8008df4:	0c0c      	lsrs	r4, r1, #16
 8008df6:	4344      	muls	r4, r0
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	0c11      	lsrs	r1, r2, #16
 8008dfc:	1861      	adds	r1, r4, r1
 8008dfe:	0c1c      	lsrs	r4, r3, #16
 8008e00:	1909      	adds	r1, r1, r4
 8008e02:	0c0c      	lsrs	r4, r1, #16
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	0409      	lsls	r1, r1, #16
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	c708      	stmia	r7!, {r3}
 8008e0c:	9b04      	ldr	r3, [sp, #16]
 8008e0e:	42b3      	cmp	r3, r6
 8008e10:	d8e9      	bhi.n	8008de6 <__multiply+0xc6>
 8008e12:	4663      	mov	r3, ip
 8008e14:	9a05      	ldr	r2, [sp, #20]
 8008e16:	509c      	str	r4, [r3, r2]
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	0c1e      	lsrs	r6, r3, #16
 8008e1e:	d020      	beq.n	8008e62 <__multiply+0x142>
 8008e20:	4663      	mov	r3, ip
 8008e22:	002c      	movs	r4, r5
 8008e24:	4660      	mov	r0, ip
 8008e26:	2700      	movs	r7, #0
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3414      	adds	r4, #20
 8008e2c:	6822      	ldr	r2, [r4, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	b291      	uxth	r1, r2
 8008e32:	4371      	muls	r1, r6
 8008e34:	6802      	ldr	r2, [r0, #0]
 8008e36:	0c12      	lsrs	r2, r2, #16
 8008e38:	1889      	adds	r1, r1, r2
 8008e3a:	19cf      	adds	r7, r1, r7
 8008e3c:	0439      	lsls	r1, r7, #16
 8008e3e:	430b      	orrs	r3, r1
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	cc02      	ldmia	r4!, {r1}
 8008e44:	6843      	ldr	r3, [r0, #4]
 8008e46:	0c09      	lsrs	r1, r1, #16
 8008e48:	4371      	muls	r1, r6
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	0c3f      	lsrs	r7, r7, #16
 8008e4e:	18cb      	adds	r3, r1, r3
 8008e50:	9a04      	ldr	r2, [sp, #16]
 8008e52:	19db      	adds	r3, r3, r7
 8008e54:	0c1f      	lsrs	r7, r3, #16
 8008e56:	3004      	adds	r0, #4
 8008e58:	42a2      	cmp	r2, r4
 8008e5a:	d8e7      	bhi.n	8008e2c <__multiply+0x10c>
 8008e5c:	4662      	mov	r2, ip
 8008e5e:	9905      	ldr	r1, [sp, #20]
 8008e60:	5053      	str	r3, [r2, r1]
 8008e62:	9b00      	ldr	r3, [sp, #0]
 8008e64:	3304      	adds	r3, #4
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	2304      	movs	r3, #4
 8008e6a:	449c      	add	ip, r3
 8008e6c:	e79d      	b.n	8008daa <__multiply+0x8a>
 8008e6e:	9b02      	ldr	r3, [sp, #8]
 8008e70:	3b01      	subs	r3, #1
 8008e72:	9302      	str	r3, [sp, #8]
 8008e74:	e79d      	b.n	8008db2 <__multiply+0x92>
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	08009a74 	.word	0x08009a74
 8008e7c:	08009ae8 	.word	0x08009ae8

08008e80 <__pow5mult>:
 8008e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e82:	2303      	movs	r3, #3
 8008e84:	0015      	movs	r5, r2
 8008e86:	0007      	movs	r7, r0
 8008e88:	000e      	movs	r6, r1
 8008e8a:	401a      	ands	r2, r3
 8008e8c:	421d      	tst	r5, r3
 8008e8e:	d008      	beq.n	8008ea2 <__pow5mult+0x22>
 8008e90:	4925      	ldr	r1, [pc, #148]	; (8008f28 <__pow5mult+0xa8>)
 8008e92:	3a01      	subs	r2, #1
 8008e94:	0092      	lsls	r2, r2, #2
 8008e96:	5852      	ldr	r2, [r2, r1]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	0031      	movs	r1, r6
 8008e9c:	f7ff fe9e 	bl	8008bdc <__multadd>
 8008ea0:	0006      	movs	r6, r0
 8008ea2:	10ad      	asrs	r5, r5, #2
 8008ea4:	d03d      	beq.n	8008f22 <__pow5mult+0xa2>
 8008ea6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008ea8:	2c00      	cmp	r4, #0
 8008eaa:	d10f      	bne.n	8008ecc <__pow5mult+0x4c>
 8008eac:	2010      	movs	r0, #16
 8008eae:	f7ff fe0f 	bl	8008ad0 <malloc>
 8008eb2:	1e02      	subs	r2, r0, #0
 8008eb4:	6278      	str	r0, [r7, #36]	; 0x24
 8008eb6:	d105      	bne.n	8008ec4 <__pow5mult+0x44>
 8008eb8:	21d7      	movs	r1, #215	; 0xd7
 8008eba:	4b1c      	ldr	r3, [pc, #112]	; (8008f2c <__pow5mult+0xac>)
 8008ebc:	481c      	ldr	r0, [pc, #112]	; (8008f30 <__pow5mult+0xb0>)
 8008ebe:	0049      	lsls	r1, r1, #1
 8008ec0:	f7fd fe00 	bl	8006ac4 <__assert_func>
 8008ec4:	6044      	str	r4, [r0, #4]
 8008ec6:	6084      	str	r4, [r0, #8]
 8008ec8:	6004      	str	r4, [r0, #0]
 8008eca:	60c4      	str	r4, [r0, #12]
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	689c      	ldr	r4, [r3, #8]
 8008ed0:	9301      	str	r3, [sp, #4]
 8008ed2:	2c00      	cmp	r4, #0
 8008ed4:	d108      	bne.n	8008ee8 <__pow5mult+0x68>
 8008ed6:	0038      	movs	r0, r7
 8008ed8:	4916      	ldr	r1, [pc, #88]	; (8008f34 <__pow5mult+0xb4>)
 8008eda:	f7ff ff0b 	bl	8008cf4 <__i2b>
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	0004      	movs	r4, r0
 8008ee2:	6098      	str	r0, [r3, #8]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	6003      	str	r3, [r0, #0]
 8008ee8:	2301      	movs	r3, #1
 8008eea:	421d      	tst	r5, r3
 8008eec:	d00a      	beq.n	8008f04 <__pow5mult+0x84>
 8008eee:	0031      	movs	r1, r6
 8008ef0:	0022      	movs	r2, r4
 8008ef2:	0038      	movs	r0, r7
 8008ef4:	f7ff ff14 	bl	8008d20 <__multiply>
 8008ef8:	0031      	movs	r1, r6
 8008efa:	9001      	str	r0, [sp, #4]
 8008efc:	0038      	movs	r0, r7
 8008efe:	f7ff fe49 	bl	8008b94 <_Bfree>
 8008f02:	9e01      	ldr	r6, [sp, #4]
 8008f04:	106d      	asrs	r5, r5, #1
 8008f06:	d00c      	beq.n	8008f22 <__pow5mult+0xa2>
 8008f08:	6820      	ldr	r0, [r4, #0]
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d107      	bne.n	8008f1e <__pow5mult+0x9e>
 8008f0e:	0022      	movs	r2, r4
 8008f10:	0021      	movs	r1, r4
 8008f12:	0038      	movs	r0, r7
 8008f14:	f7ff ff04 	bl	8008d20 <__multiply>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	6020      	str	r0, [r4, #0]
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	0004      	movs	r4, r0
 8008f20:	e7e2      	b.n	8008ee8 <__pow5mult+0x68>
 8008f22:	0030      	movs	r0, r6
 8008f24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	08009c38 	.word	0x08009c38
 8008f2c:	08009a02 	.word	0x08009a02
 8008f30:	08009ae8 	.word	0x08009ae8
 8008f34:	00000271 	.word	0x00000271

08008f38 <__lshift>:
 8008f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f3a:	000c      	movs	r4, r1
 8008f3c:	0017      	movs	r7, r2
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	1155      	asrs	r5, r2, #5
 8008f42:	b087      	sub	sp, #28
 8008f44:	18eb      	adds	r3, r5, r3
 8008f46:	9302      	str	r3, [sp, #8]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	9301      	str	r3, [sp, #4]
 8008f4c:	6849      	ldr	r1, [r1, #4]
 8008f4e:	68a3      	ldr	r3, [r4, #8]
 8008f50:	9004      	str	r0, [sp, #16]
 8008f52:	9a01      	ldr	r2, [sp, #4]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	db10      	blt.n	8008f7a <__lshift+0x42>
 8008f58:	9804      	ldr	r0, [sp, #16]
 8008f5a:	f7ff fdd7 	bl	8008b0c <_Balloc>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	0002      	movs	r2, r0
 8008f62:	0006      	movs	r6, r0
 8008f64:	0019      	movs	r1, r3
 8008f66:	3214      	adds	r2, #20
 8008f68:	4298      	cmp	r0, r3
 8008f6a:	d10c      	bne.n	8008f86 <__lshift+0x4e>
 8008f6c:	21da      	movs	r1, #218	; 0xda
 8008f6e:	0002      	movs	r2, r0
 8008f70:	4b26      	ldr	r3, [pc, #152]	; (800900c <__lshift+0xd4>)
 8008f72:	4827      	ldr	r0, [pc, #156]	; (8009010 <__lshift+0xd8>)
 8008f74:	31ff      	adds	r1, #255	; 0xff
 8008f76:	f7fd fda5 	bl	8006ac4 <__assert_func>
 8008f7a:	3101      	adds	r1, #1
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	e7e8      	b.n	8008f52 <__lshift+0x1a>
 8008f80:	0098      	lsls	r0, r3, #2
 8008f82:	5011      	str	r1, [r2, r0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	42ab      	cmp	r3, r5
 8008f88:	dbfa      	blt.n	8008f80 <__lshift+0x48>
 8008f8a:	43eb      	mvns	r3, r5
 8008f8c:	17db      	asrs	r3, r3, #31
 8008f8e:	401d      	ands	r5, r3
 8008f90:	211f      	movs	r1, #31
 8008f92:	0023      	movs	r3, r4
 8008f94:	0038      	movs	r0, r7
 8008f96:	00ad      	lsls	r5, r5, #2
 8008f98:	1955      	adds	r5, r2, r5
 8008f9a:	6922      	ldr	r2, [r4, #16]
 8008f9c:	3314      	adds	r3, #20
 8008f9e:	0092      	lsls	r2, r2, #2
 8008fa0:	4008      	ands	r0, r1
 8008fa2:	4684      	mov	ip, r0
 8008fa4:	189a      	adds	r2, r3, r2
 8008fa6:	420f      	tst	r7, r1
 8008fa8:	d02a      	beq.n	8009000 <__lshift+0xc8>
 8008faa:	3101      	adds	r1, #1
 8008fac:	1a09      	subs	r1, r1, r0
 8008fae:	9105      	str	r1, [sp, #20]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	9503      	str	r5, [sp, #12]
 8008fb4:	4667      	mov	r7, ip
 8008fb6:	6818      	ldr	r0, [r3, #0]
 8008fb8:	40b8      	lsls	r0, r7
 8008fba:	4301      	orrs	r1, r0
 8008fbc:	9803      	ldr	r0, [sp, #12]
 8008fbe:	c002      	stmia	r0!, {r1}
 8008fc0:	cb02      	ldmia	r3!, {r1}
 8008fc2:	9003      	str	r0, [sp, #12]
 8008fc4:	9805      	ldr	r0, [sp, #20]
 8008fc6:	40c1      	lsrs	r1, r0
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d8f3      	bhi.n	8008fb4 <__lshift+0x7c>
 8008fcc:	0020      	movs	r0, r4
 8008fce:	3015      	adds	r0, #21
 8008fd0:	2304      	movs	r3, #4
 8008fd2:	4282      	cmp	r2, r0
 8008fd4:	d304      	bcc.n	8008fe0 <__lshift+0xa8>
 8008fd6:	1b13      	subs	r3, r2, r4
 8008fd8:	3b15      	subs	r3, #21
 8008fda:	089b      	lsrs	r3, r3, #2
 8008fdc:	3301      	adds	r3, #1
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	50e9      	str	r1, [r5, r3]
 8008fe2:	2900      	cmp	r1, #0
 8008fe4:	d002      	beq.n	8008fec <__lshift+0xb4>
 8008fe6:	9b02      	ldr	r3, [sp, #8]
 8008fe8:	3302      	adds	r3, #2
 8008fea:	9301      	str	r3, [sp, #4]
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	9804      	ldr	r0, [sp, #16]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	0021      	movs	r1, r4
 8008ff4:	6133      	str	r3, [r6, #16]
 8008ff6:	f7ff fdcd 	bl	8008b94 <_Bfree>
 8008ffa:	0030      	movs	r0, r6
 8008ffc:	b007      	add	sp, #28
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	cb02      	ldmia	r3!, {r1}
 8009002:	c502      	stmia	r5!, {r1}
 8009004:	429a      	cmp	r2, r3
 8009006:	d8fb      	bhi.n	8009000 <__lshift+0xc8>
 8009008:	e7f0      	b.n	8008fec <__lshift+0xb4>
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	08009a74 	.word	0x08009a74
 8009010:	08009ae8 	.word	0x08009ae8

08009014 <__mcmp>:
 8009014:	6902      	ldr	r2, [r0, #16]
 8009016:	690b      	ldr	r3, [r1, #16]
 8009018:	b530      	push	{r4, r5, lr}
 800901a:	0004      	movs	r4, r0
 800901c:	1ad0      	subs	r0, r2, r3
 800901e:	429a      	cmp	r2, r3
 8009020:	d10d      	bne.n	800903e <__mcmp+0x2a>
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	3414      	adds	r4, #20
 8009026:	3114      	adds	r1, #20
 8009028:	18e2      	adds	r2, r4, r3
 800902a:	18c9      	adds	r1, r1, r3
 800902c:	3a04      	subs	r2, #4
 800902e:	3904      	subs	r1, #4
 8009030:	6815      	ldr	r5, [r2, #0]
 8009032:	680b      	ldr	r3, [r1, #0]
 8009034:	429d      	cmp	r5, r3
 8009036:	d003      	beq.n	8009040 <__mcmp+0x2c>
 8009038:	2001      	movs	r0, #1
 800903a:	429d      	cmp	r5, r3
 800903c:	d303      	bcc.n	8009046 <__mcmp+0x32>
 800903e:	bd30      	pop	{r4, r5, pc}
 8009040:	4294      	cmp	r4, r2
 8009042:	d3f3      	bcc.n	800902c <__mcmp+0x18>
 8009044:	e7fb      	b.n	800903e <__mcmp+0x2a>
 8009046:	4240      	negs	r0, r0
 8009048:	e7f9      	b.n	800903e <__mcmp+0x2a>
	...

0800904c <__mdiff>:
 800904c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904e:	000e      	movs	r6, r1
 8009050:	0007      	movs	r7, r0
 8009052:	0011      	movs	r1, r2
 8009054:	0030      	movs	r0, r6
 8009056:	b087      	sub	sp, #28
 8009058:	0014      	movs	r4, r2
 800905a:	f7ff ffdb 	bl	8009014 <__mcmp>
 800905e:	1e05      	subs	r5, r0, #0
 8009060:	d110      	bne.n	8009084 <__mdiff+0x38>
 8009062:	0001      	movs	r1, r0
 8009064:	0038      	movs	r0, r7
 8009066:	f7ff fd51 	bl	8008b0c <_Balloc>
 800906a:	1e02      	subs	r2, r0, #0
 800906c:	d104      	bne.n	8009078 <__mdiff+0x2c>
 800906e:	4b40      	ldr	r3, [pc, #256]	; (8009170 <__mdiff+0x124>)
 8009070:	4940      	ldr	r1, [pc, #256]	; (8009174 <__mdiff+0x128>)
 8009072:	4841      	ldr	r0, [pc, #260]	; (8009178 <__mdiff+0x12c>)
 8009074:	f7fd fd26 	bl	8006ac4 <__assert_func>
 8009078:	2301      	movs	r3, #1
 800907a:	6145      	str	r5, [r0, #20]
 800907c:	6103      	str	r3, [r0, #16]
 800907e:	0010      	movs	r0, r2
 8009080:	b007      	add	sp, #28
 8009082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009084:	2301      	movs	r3, #1
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2800      	cmp	r0, #0
 800908a:	db04      	blt.n	8009096 <__mdiff+0x4a>
 800908c:	0023      	movs	r3, r4
 800908e:	0034      	movs	r4, r6
 8009090:	001e      	movs	r6, r3
 8009092:	2300      	movs	r3, #0
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	0038      	movs	r0, r7
 8009098:	6861      	ldr	r1, [r4, #4]
 800909a:	f7ff fd37 	bl	8008b0c <_Balloc>
 800909e:	1e02      	subs	r2, r0, #0
 80090a0:	d103      	bne.n	80090aa <__mdiff+0x5e>
 80090a2:	2190      	movs	r1, #144	; 0x90
 80090a4:	4b32      	ldr	r3, [pc, #200]	; (8009170 <__mdiff+0x124>)
 80090a6:	0089      	lsls	r1, r1, #2
 80090a8:	e7e3      	b.n	8009072 <__mdiff+0x26>
 80090aa:	9b01      	ldr	r3, [sp, #4]
 80090ac:	2700      	movs	r7, #0
 80090ae:	60c3      	str	r3, [r0, #12]
 80090b0:	6920      	ldr	r0, [r4, #16]
 80090b2:	3414      	adds	r4, #20
 80090b4:	9401      	str	r4, [sp, #4]
 80090b6:	9b01      	ldr	r3, [sp, #4]
 80090b8:	0084      	lsls	r4, r0, #2
 80090ba:	191b      	adds	r3, r3, r4
 80090bc:	0034      	movs	r4, r6
 80090be:	9302      	str	r3, [sp, #8]
 80090c0:	6933      	ldr	r3, [r6, #16]
 80090c2:	3414      	adds	r4, #20
 80090c4:	0099      	lsls	r1, r3, #2
 80090c6:	1863      	adds	r3, r4, r1
 80090c8:	9303      	str	r3, [sp, #12]
 80090ca:	0013      	movs	r3, r2
 80090cc:	3314      	adds	r3, #20
 80090ce:	469c      	mov	ip, r3
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	9b01      	ldr	r3, [sp, #4]
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	9b04      	ldr	r3, [sp, #16]
 80090d8:	cc02      	ldmia	r4!, {r1}
 80090da:	cb20      	ldmia	r3!, {r5}
 80090dc:	9304      	str	r3, [sp, #16]
 80090de:	b2ab      	uxth	r3, r5
 80090e0:	19df      	adds	r7, r3, r7
 80090e2:	b28b      	uxth	r3, r1
 80090e4:	1afb      	subs	r3, r7, r3
 80090e6:	0c09      	lsrs	r1, r1, #16
 80090e8:	0c2d      	lsrs	r5, r5, #16
 80090ea:	1a6d      	subs	r5, r5, r1
 80090ec:	1419      	asrs	r1, r3, #16
 80090ee:	186d      	adds	r5, r5, r1
 80090f0:	4661      	mov	r1, ip
 80090f2:	142f      	asrs	r7, r5, #16
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	042d      	lsls	r5, r5, #16
 80090f8:	432b      	orrs	r3, r5
 80090fa:	c108      	stmia	r1!, {r3}
 80090fc:	9b03      	ldr	r3, [sp, #12]
 80090fe:	468c      	mov	ip, r1
 8009100:	42a3      	cmp	r3, r4
 8009102:	d8e8      	bhi.n	80090d6 <__mdiff+0x8a>
 8009104:	0031      	movs	r1, r6
 8009106:	9c03      	ldr	r4, [sp, #12]
 8009108:	3115      	adds	r1, #21
 800910a:	2304      	movs	r3, #4
 800910c:	428c      	cmp	r4, r1
 800910e:	d304      	bcc.n	800911a <__mdiff+0xce>
 8009110:	1ba3      	subs	r3, r4, r6
 8009112:	3b15      	subs	r3, #21
 8009114:	089b      	lsrs	r3, r3, #2
 8009116:	3301      	adds	r3, #1
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	9901      	ldr	r1, [sp, #4]
 800911c:	18cc      	adds	r4, r1, r3
 800911e:	9905      	ldr	r1, [sp, #20]
 8009120:	0026      	movs	r6, r4
 8009122:	18cb      	adds	r3, r1, r3
 8009124:	469c      	mov	ip, r3
 8009126:	9902      	ldr	r1, [sp, #8]
 8009128:	428e      	cmp	r6, r1
 800912a:	d310      	bcc.n	800914e <__mdiff+0x102>
 800912c:	9e02      	ldr	r6, [sp, #8]
 800912e:	1ee1      	subs	r1, r4, #3
 8009130:	2500      	movs	r5, #0
 8009132:	428e      	cmp	r6, r1
 8009134:	d304      	bcc.n	8009140 <__mdiff+0xf4>
 8009136:	0031      	movs	r1, r6
 8009138:	3103      	adds	r1, #3
 800913a:	1b0c      	subs	r4, r1, r4
 800913c:	08a4      	lsrs	r4, r4, #2
 800913e:	00a5      	lsls	r5, r4, #2
 8009140:	195b      	adds	r3, r3, r5
 8009142:	3b04      	subs	r3, #4
 8009144:	6819      	ldr	r1, [r3, #0]
 8009146:	2900      	cmp	r1, #0
 8009148:	d00f      	beq.n	800916a <__mdiff+0x11e>
 800914a:	6110      	str	r0, [r2, #16]
 800914c:	e797      	b.n	800907e <__mdiff+0x32>
 800914e:	ce02      	ldmia	r6!, {r1}
 8009150:	b28d      	uxth	r5, r1
 8009152:	19ed      	adds	r5, r5, r7
 8009154:	0c0f      	lsrs	r7, r1, #16
 8009156:	1429      	asrs	r1, r5, #16
 8009158:	1879      	adds	r1, r7, r1
 800915a:	140f      	asrs	r7, r1, #16
 800915c:	b2ad      	uxth	r5, r5
 800915e:	0409      	lsls	r1, r1, #16
 8009160:	430d      	orrs	r5, r1
 8009162:	4661      	mov	r1, ip
 8009164:	c120      	stmia	r1!, {r5}
 8009166:	468c      	mov	ip, r1
 8009168:	e7dd      	b.n	8009126 <__mdiff+0xda>
 800916a:	3801      	subs	r0, #1
 800916c:	e7e9      	b.n	8009142 <__mdiff+0xf6>
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	08009a74 	.word	0x08009a74
 8009174:	00000232 	.word	0x00000232
 8009178:	08009ae8 	.word	0x08009ae8

0800917c <__d2b>:
 800917c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800917e:	2101      	movs	r1, #1
 8009180:	0014      	movs	r4, r2
 8009182:	001e      	movs	r6, r3
 8009184:	9f08      	ldr	r7, [sp, #32]
 8009186:	f7ff fcc1 	bl	8008b0c <_Balloc>
 800918a:	1e05      	subs	r5, r0, #0
 800918c:	d105      	bne.n	800919a <__d2b+0x1e>
 800918e:	0002      	movs	r2, r0
 8009190:	4b26      	ldr	r3, [pc, #152]	; (800922c <__d2b+0xb0>)
 8009192:	4927      	ldr	r1, [pc, #156]	; (8009230 <__d2b+0xb4>)
 8009194:	4827      	ldr	r0, [pc, #156]	; (8009234 <__d2b+0xb8>)
 8009196:	f7fd fc95 	bl	8006ac4 <__assert_func>
 800919a:	0333      	lsls	r3, r6, #12
 800919c:	0076      	lsls	r6, r6, #1
 800919e:	0b1b      	lsrs	r3, r3, #12
 80091a0:	0d76      	lsrs	r6, r6, #21
 80091a2:	d124      	bne.n	80091ee <__d2b+0x72>
 80091a4:	9301      	str	r3, [sp, #4]
 80091a6:	2c00      	cmp	r4, #0
 80091a8:	d027      	beq.n	80091fa <__d2b+0x7e>
 80091aa:	4668      	mov	r0, sp
 80091ac:	9400      	str	r4, [sp, #0]
 80091ae:	f7ff fd73 	bl	8008c98 <__lo0bits>
 80091b2:	9c00      	ldr	r4, [sp, #0]
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d01e      	beq.n	80091f6 <__d2b+0x7a>
 80091b8:	9b01      	ldr	r3, [sp, #4]
 80091ba:	2120      	movs	r1, #32
 80091bc:	001a      	movs	r2, r3
 80091be:	1a09      	subs	r1, r1, r0
 80091c0:	408a      	lsls	r2, r1
 80091c2:	40c3      	lsrs	r3, r0
 80091c4:	4322      	orrs	r2, r4
 80091c6:	616a      	str	r2, [r5, #20]
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	9c01      	ldr	r4, [sp, #4]
 80091cc:	61ac      	str	r4, [r5, #24]
 80091ce:	1e63      	subs	r3, r4, #1
 80091d0:	419c      	sbcs	r4, r3
 80091d2:	3401      	adds	r4, #1
 80091d4:	612c      	str	r4, [r5, #16]
 80091d6:	2e00      	cmp	r6, #0
 80091d8:	d018      	beq.n	800920c <__d2b+0x90>
 80091da:	4b17      	ldr	r3, [pc, #92]	; (8009238 <__d2b+0xbc>)
 80091dc:	18f6      	adds	r6, r6, r3
 80091de:	2335      	movs	r3, #53	; 0x35
 80091e0:	1836      	adds	r6, r6, r0
 80091e2:	1a18      	subs	r0, r3, r0
 80091e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e6:	603e      	str	r6, [r7, #0]
 80091e8:	6018      	str	r0, [r3, #0]
 80091ea:	0028      	movs	r0, r5
 80091ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091ee:	2280      	movs	r2, #128	; 0x80
 80091f0:	0352      	lsls	r2, r2, #13
 80091f2:	4313      	orrs	r3, r2
 80091f4:	e7d6      	b.n	80091a4 <__d2b+0x28>
 80091f6:	616c      	str	r4, [r5, #20]
 80091f8:	e7e7      	b.n	80091ca <__d2b+0x4e>
 80091fa:	a801      	add	r0, sp, #4
 80091fc:	f7ff fd4c 	bl	8008c98 <__lo0bits>
 8009200:	2401      	movs	r4, #1
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	612c      	str	r4, [r5, #16]
 8009206:	616b      	str	r3, [r5, #20]
 8009208:	3020      	adds	r0, #32
 800920a:	e7e4      	b.n	80091d6 <__d2b+0x5a>
 800920c:	4b0b      	ldr	r3, [pc, #44]	; (800923c <__d2b+0xc0>)
 800920e:	18c0      	adds	r0, r0, r3
 8009210:	4b0b      	ldr	r3, [pc, #44]	; (8009240 <__d2b+0xc4>)
 8009212:	6038      	str	r0, [r7, #0]
 8009214:	18e3      	adds	r3, r4, r3
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	18eb      	adds	r3, r5, r3
 800921a:	6958      	ldr	r0, [r3, #20]
 800921c:	f7ff fd22 	bl	8008c64 <__hi0bits>
 8009220:	0164      	lsls	r4, r4, #5
 8009222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009224:	1a24      	subs	r4, r4, r0
 8009226:	601c      	str	r4, [r3, #0]
 8009228:	e7df      	b.n	80091ea <__d2b+0x6e>
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	08009a74 	.word	0x08009a74
 8009230:	0000030a 	.word	0x0000030a
 8009234:	08009ae8 	.word	0x08009ae8
 8009238:	fffffbcd 	.word	0xfffffbcd
 800923c:	fffffbce 	.word	0xfffffbce
 8009240:	3fffffff 	.word	0x3fffffff

08009244 <_calloc_r>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	0c13      	lsrs	r3, r2, #16
 8009248:	0c0d      	lsrs	r5, r1, #16
 800924a:	d11e      	bne.n	800928a <_calloc_r+0x46>
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10c      	bne.n	800926a <_calloc_r+0x26>
 8009250:	b289      	uxth	r1, r1
 8009252:	b294      	uxth	r4, r2
 8009254:	434c      	muls	r4, r1
 8009256:	0021      	movs	r1, r4
 8009258:	f000 f88c 	bl	8009374 <_malloc_r>
 800925c:	1e05      	subs	r5, r0, #0
 800925e:	d01b      	beq.n	8009298 <_calloc_r+0x54>
 8009260:	0022      	movs	r2, r4
 8009262:	2100      	movs	r1, #0
 8009264:	f7fd fc86 	bl	8006b74 <memset>
 8009268:	e016      	b.n	8009298 <_calloc_r+0x54>
 800926a:	1c1d      	adds	r5, r3, #0
 800926c:	1c0b      	adds	r3, r1, #0
 800926e:	b292      	uxth	r2, r2
 8009270:	b289      	uxth	r1, r1
 8009272:	b29c      	uxth	r4, r3
 8009274:	4351      	muls	r1, r2
 8009276:	b2ab      	uxth	r3, r5
 8009278:	4363      	muls	r3, r4
 800927a:	0c0c      	lsrs	r4, r1, #16
 800927c:	191c      	adds	r4, r3, r4
 800927e:	0c22      	lsrs	r2, r4, #16
 8009280:	d107      	bne.n	8009292 <_calloc_r+0x4e>
 8009282:	0424      	lsls	r4, r4, #16
 8009284:	b289      	uxth	r1, r1
 8009286:	430c      	orrs	r4, r1
 8009288:	e7e5      	b.n	8009256 <_calloc_r+0x12>
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <_calloc_r+0x4e>
 800928e:	1c13      	adds	r3, r2, #0
 8009290:	e7ed      	b.n	800926e <_calloc_r+0x2a>
 8009292:	230c      	movs	r3, #12
 8009294:	2500      	movs	r5, #0
 8009296:	6003      	str	r3, [r0, #0]
 8009298:	0028      	movs	r0, r5
 800929a:	bd70      	pop	{r4, r5, r6, pc}

0800929c <_free_r>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	0005      	movs	r5, r0
 80092a0:	2900      	cmp	r1, #0
 80092a2:	d010      	beq.n	80092c6 <_free_r+0x2a>
 80092a4:	1f0c      	subs	r4, r1, #4
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	da00      	bge.n	80092ae <_free_r+0x12>
 80092ac:	18e4      	adds	r4, r4, r3
 80092ae:	0028      	movs	r0, r5
 80092b0:	f000 f9ee 	bl	8009690 <__malloc_lock>
 80092b4:	4a1d      	ldr	r2, [pc, #116]	; (800932c <_free_r+0x90>)
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d105      	bne.n	80092c8 <_free_r+0x2c>
 80092bc:	6063      	str	r3, [r4, #4]
 80092be:	6014      	str	r4, [r2, #0]
 80092c0:	0028      	movs	r0, r5
 80092c2:	f000 f9ed 	bl	80096a0 <__malloc_unlock>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d908      	bls.n	80092de <_free_r+0x42>
 80092cc:	6821      	ldr	r1, [r4, #0]
 80092ce:	1860      	adds	r0, r4, r1
 80092d0:	4283      	cmp	r3, r0
 80092d2:	d1f3      	bne.n	80092bc <_free_r+0x20>
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	1841      	adds	r1, r0, r1
 80092da:	6021      	str	r1, [r4, #0]
 80092dc:	e7ee      	b.n	80092bc <_free_r+0x20>
 80092de:	001a      	movs	r2, r3
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <_free_r+0x4e>
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	d9f9      	bls.n	80092de <_free_r+0x42>
 80092ea:	6811      	ldr	r1, [r2, #0]
 80092ec:	1850      	adds	r0, r2, r1
 80092ee:	42a0      	cmp	r0, r4
 80092f0:	d10b      	bne.n	800930a <_free_r+0x6e>
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	1809      	adds	r1, r1, r0
 80092f6:	1850      	adds	r0, r2, r1
 80092f8:	6011      	str	r1, [r2, #0]
 80092fa:	4283      	cmp	r3, r0
 80092fc:	d1e0      	bne.n	80092c0 <_free_r+0x24>
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	1841      	adds	r1, r0, r1
 8009304:	6011      	str	r1, [r2, #0]
 8009306:	6053      	str	r3, [r2, #4]
 8009308:	e7da      	b.n	80092c0 <_free_r+0x24>
 800930a:	42a0      	cmp	r0, r4
 800930c:	d902      	bls.n	8009314 <_free_r+0x78>
 800930e:	230c      	movs	r3, #12
 8009310:	602b      	str	r3, [r5, #0]
 8009312:	e7d5      	b.n	80092c0 <_free_r+0x24>
 8009314:	6821      	ldr	r1, [r4, #0]
 8009316:	1860      	adds	r0, r4, r1
 8009318:	4283      	cmp	r3, r0
 800931a:	d103      	bne.n	8009324 <_free_r+0x88>
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	1841      	adds	r1, r0, r1
 8009322:	6021      	str	r1, [r4, #0]
 8009324:	6063      	str	r3, [r4, #4]
 8009326:	6054      	str	r4, [r2, #4]
 8009328:	e7ca      	b.n	80092c0 <_free_r+0x24>
 800932a:	46c0      	nop			; (mov r8, r8)
 800932c:	20000330 	.word	0x20000330

08009330 <sbrk_aligned>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4e0f      	ldr	r6, [pc, #60]	; (8009370 <sbrk_aligned+0x40>)
 8009334:	000d      	movs	r5, r1
 8009336:	6831      	ldr	r1, [r6, #0]
 8009338:	0004      	movs	r4, r0
 800933a:	2900      	cmp	r1, #0
 800933c:	d102      	bne.n	8009344 <sbrk_aligned+0x14>
 800933e:	f000 f88f 	bl	8009460 <_sbrk_r>
 8009342:	6030      	str	r0, [r6, #0]
 8009344:	0029      	movs	r1, r5
 8009346:	0020      	movs	r0, r4
 8009348:	f000 f88a 	bl	8009460 <_sbrk_r>
 800934c:	1c43      	adds	r3, r0, #1
 800934e:	d00a      	beq.n	8009366 <sbrk_aligned+0x36>
 8009350:	2303      	movs	r3, #3
 8009352:	1cc5      	adds	r5, r0, #3
 8009354:	439d      	bics	r5, r3
 8009356:	42a8      	cmp	r0, r5
 8009358:	d007      	beq.n	800936a <sbrk_aligned+0x3a>
 800935a:	1a29      	subs	r1, r5, r0
 800935c:	0020      	movs	r0, r4
 800935e:	f000 f87f 	bl	8009460 <_sbrk_r>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d101      	bne.n	800936a <sbrk_aligned+0x3a>
 8009366:	2501      	movs	r5, #1
 8009368:	426d      	negs	r5, r5
 800936a:	0028      	movs	r0, r5
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	20000334 	.word	0x20000334

08009374 <_malloc_r>:
 8009374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009376:	2203      	movs	r2, #3
 8009378:	1ccb      	adds	r3, r1, #3
 800937a:	4393      	bics	r3, r2
 800937c:	3308      	adds	r3, #8
 800937e:	0006      	movs	r6, r0
 8009380:	001f      	movs	r7, r3
 8009382:	2b0c      	cmp	r3, #12
 8009384:	d232      	bcs.n	80093ec <_malloc_r+0x78>
 8009386:	270c      	movs	r7, #12
 8009388:	42b9      	cmp	r1, r7
 800938a:	d831      	bhi.n	80093f0 <_malloc_r+0x7c>
 800938c:	0030      	movs	r0, r6
 800938e:	f000 f97f 	bl	8009690 <__malloc_lock>
 8009392:	4d32      	ldr	r5, [pc, #200]	; (800945c <_malloc_r+0xe8>)
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	001c      	movs	r4, r3
 8009398:	2c00      	cmp	r4, #0
 800939a:	d12e      	bne.n	80093fa <_malloc_r+0x86>
 800939c:	0039      	movs	r1, r7
 800939e:	0030      	movs	r0, r6
 80093a0:	f7ff ffc6 	bl	8009330 <sbrk_aligned>
 80093a4:	0004      	movs	r4, r0
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d11e      	bne.n	80093e8 <_malloc_r+0x74>
 80093aa:	682c      	ldr	r4, [r5, #0]
 80093ac:	0025      	movs	r5, r4
 80093ae:	2d00      	cmp	r5, #0
 80093b0:	d14a      	bne.n	8009448 <_malloc_r+0xd4>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	0029      	movs	r1, r5
 80093b6:	18e3      	adds	r3, r4, r3
 80093b8:	0030      	movs	r0, r6
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	f000 f850 	bl	8009460 <_sbrk_r>
 80093c0:	9b01      	ldr	r3, [sp, #4]
 80093c2:	4283      	cmp	r3, r0
 80093c4:	d143      	bne.n	800944e <_malloc_r+0xda>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	3703      	adds	r7, #3
 80093ca:	1aff      	subs	r7, r7, r3
 80093cc:	2303      	movs	r3, #3
 80093ce:	439f      	bics	r7, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	2f0c      	cmp	r7, #12
 80093d4:	d200      	bcs.n	80093d8 <_malloc_r+0x64>
 80093d6:	270c      	movs	r7, #12
 80093d8:	0039      	movs	r1, r7
 80093da:	0030      	movs	r0, r6
 80093dc:	f7ff ffa8 	bl	8009330 <sbrk_aligned>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d034      	beq.n	800944e <_malloc_r+0xda>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	19df      	adds	r7, r3, r7
 80093e8:	6027      	str	r7, [r4, #0]
 80093ea:	e013      	b.n	8009414 <_malloc_r+0xa0>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dacb      	bge.n	8009388 <_malloc_r+0x14>
 80093f0:	230c      	movs	r3, #12
 80093f2:	2500      	movs	r5, #0
 80093f4:	6033      	str	r3, [r6, #0]
 80093f6:	0028      	movs	r0, r5
 80093f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093fa:	6822      	ldr	r2, [r4, #0]
 80093fc:	1bd1      	subs	r1, r2, r7
 80093fe:	d420      	bmi.n	8009442 <_malloc_r+0xce>
 8009400:	290b      	cmp	r1, #11
 8009402:	d917      	bls.n	8009434 <_malloc_r+0xc0>
 8009404:	19e2      	adds	r2, r4, r7
 8009406:	6027      	str	r7, [r4, #0]
 8009408:	42a3      	cmp	r3, r4
 800940a:	d111      	bne.n	8009430 <_malloc_r+0xbc>
 800940c:	602a      	str	r2, [r5, #0]
 800940e:	6863      	ldr	r3, [r4, #4]
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	6053      	str	r3, [r2, #4]
 8009414:	0030      	movs	r0, r6
 8009416:	0025      	movs	r5, r4
 8009418:	f000 f942 	bl	80096a0 <__malloc_unlock>
 800941c:	2207      	movs	r2, #7
 800941e:	350b      	adds	r5, #11
 8009420:	1d23      	adds	r3, r4, #4
 8009422:	4395      	bics	r5, r2
 8009424:	1aea      	subs	r2, r5, r3
 8009426:	429d      	cmp	r5, r3
 8009428:	d0e5      	beq.n	80093f6 <_malloc_r+0x82>
 800942a:	1b5b      	subs	r3, r3, r5
 800942c:	50a3      	str	r3, [r4, r2]
 800942e:	e7e2      	b.n	80093f6 <_malloc_r+0x82>
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	e7ec      	b.n	800940e <_malloc_r+0x9a>
 8009434:	6862      	ldr	r2, [r4, #4]
 8009436:	42a3      	cmp	r3, r4
 8009438:	d101      	bne.n	800943e <_malloc_r+0xca>
 800943a:	602a      	str	r2, [r5, #0]
 800943c:	e7ea      	b.n	8009414 <_malloc_r+0xa0>
 800943e:	605a      	str	r2, [r3, #4]
 8009440:	e7e8      	b.n	8009414 <_malloc_r+0xa0>
 8009442:	0023      	movs	r3, r4
 8009444:	6864      	ldr	r4, [r4, #4]
 8009446:	e7a7      	b.n	8009398 <_malloc_r+0x24>
 8009448:	002c      	movs	r4, r5
 800944a:	686d      	ldr	r5, [r5, #4]
 800944c:	e7af      	b.n	80093ae <_malloc_r+0x3a>
 800944e:	230c      	movs	r3, #12
 8009450:	0030      	movs	r0, r6
 8009452:	6033      	str	r3, [r6, #0]
 8009454:	f000 f924 	bl	80096a0 <__malloc_unlock>
 8009458:	e7cd      	b.n	80093f6 <_malloc_r+0x82>
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	20000330 	.word	0x20000330

08009460 <_sbrk_r>:
 8009460:	2300      	movs	r3, #0
 8009462:	b570      	push	{r4, r5, r6, lr}
 8009464:	4d06      	ldr	r5, [pc, #24]	; (8009480 <_sbrk_r+0x20>)
 8009466:	0004      	movs	r4, r0
 8009468:	0008      	movs	r0, r1
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	f7fa f90a 	bl	8003684 <_sbrk>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d103      	bne.n	800947c <_sbrk_r+0x1c>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d000      	beq.n	800947c <_sbrk_r+0x1c>
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	bd70      	pop	{r4, r5, r6, pc}
 800947e:	46c0      	nop			; (mov r8, r8)
 8009480:	20000338 	.word	0x20000338

08009484 <_raise_r>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	0004      	movs	r4, r0
 8009488:	000d      	movs	r5, r1
 800948a:	291f      	cmp	r1, #31
 800948c:	d904      	bls.n	8009498 <_raise_r+0x14>
 800948e:	2316      	movs	r3, #22
 8009490:	6003      	str	r3, [r0, #0]
 8009492:	2001      	movs	r0, #1
 8009494:	4240      	negs	r0, r0
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800949a:	2b00      	cmp	r3, #0
 800949c:	d004      	beq.n	80094a8 <_raise_r+0x24>
 800949e:	008a      	lsls	r2, r1, #2
 80094a0:	189b      	adds	r3, r3, r2
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d108      	bne.n	80094ba <_raise_r+0x36>
 80094a8:	0020      	movs	r0, r4
 80094aa:	f000 f831 	bl	8009510 <_getpid_r>
 80094ae:	002a      	movs	r2, r5
 80094b0:	0001      	movs	r1, r0
 80094b2:	0020      	movs	r0, r4
 80094b4:	f000 f81a 	bl	80094ec <_kill_r>
 80094b8:	e7ed      	b.n	8009496 <_raise_r+0x12>
 80094ba:	2000      	movs	r0, #0
 80094bc:	2a01      	cmp	r2, #1
 80094be:	d0ea      	beq.n	8009496 <_raise_r+0x12>
 80094c0:	1c51      	adds	r1, r2, #1
 80094c2:	d103      	bne.n	80094cc <_raise_r+0x48>
 80094c4:	2316      	movs	r3, #22
 80094c6:	3001      	adds	r0, #1
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	e7e4      	b.n	8009496 <_raise_r+0x12>
 80094cc:	2400      	movs	r4, #0
 80094ce:	0028      	movs	r0, r5
 80094d0:	601c      	str	r4, [r3, #0]
 80094d2:	4790      	blx	r2
 80094d4:	0020      	movs	r0, r4
 80094d6:	e7de      	b.n	8009496 <_raise_r+0x12>

080094d8 <raise>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <raise+0x10>)
 80094dc:	0001      	movs	r1, r0
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	f7ff ffd0 	bl	8009484 <_raise_r>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	2000000c 	.word	0x2000000c

080094ec <_kill_r>:
 80094ec:	2300      	movs	r3, #0
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	4d06      	ldr	r5, [pc, #24]	; (800950c <_kill_r+0x20>)
 80094f2:	0004      	movs	r4, r0
 80094f4:	0008      	movs	r0, r1
 80094f6:	0011      	movs	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7fa f842 	bl	8003582 <_kill>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d103      	bne.n	800950a <_kill_r+0x1e>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d000      	beq.n	800950a <_kill_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	20000338 	.word	0x20000338

08009510 <_getpid_r>:
 8009510:	b510      	push	{r4, lr}
 8009512:	f7fa f830 	bl	8003576 <_getpid>
 8009516:	bd10      	pop	{r4, pc}

08009518 <__sread>:
 8009518:	b570      	push	{r4, r5, r6, lr}
 800951a:	000c      	movs	r4, r1
 800951c:	250e      	movs	r5, #14
 800951e:	5f49      	ldrsh	r1, [r1, r5]
 8009520:	f000 f8c6 	bl	80096b0 <_read_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	db03      	blt.n	8009530 <__sread+0x18>
 8009528:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800952a:	181b      	adds	r3, r3, r0
 800952c:	6563      	str	r3, [r4, #84]	; 0x54
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	4a02      	ldr	r2, [pc, #8]	; (800953c <__sread+0x24>)
 8009534:	4013      	ands	r3, r2
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	e7f9      	b.n	800952e <__sread+0x16>
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	ffffefff 	.word	0xffffefff

08009540 <__swrite>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	001f      	movs	r7, r3
 8009544:	898b      	ldrh	r3, [r1, #12]
 8009546:	0005      	movs	r5, r0
 8009548:	000c      	movs	r4, r1
 800954a:	0016      	movs	r6, r2
 800954c:	05db      	lsls	r3, r3, #23
 800954e:	d505      	bpl.n	800955c <__swrite+0x1c>
 8009550:	230e      	movs	r3, #14
 8009552:	5ec9      	ldrsh	r1, [r1, r3]
 8009554:	2200      	movs	r2, #0
 8009556:	2302      	movs	r3, #2
 8009558:	f000 f874 	bl	8009644 <_lseek_r>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	4a05      	ldr	r2, [pc, #20]	; (8009574 <__swrite+0x34>)
 8009560:	0028      	movs	r0, r5
 8009562:	4013      	ands	r3, r2
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	0032      	movs	r2, r6
 8009568:	230e      	movs	r3, #14
 800956a:	5ee1      	ldrsh	r1, [r4, r3]
 800956c:	003b      	movs	r3, r7
 800956e:	f000 f81f 	bl	80095b0 <_write_r>
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009574:	ffffefff 	.word	0xffffefff

08009578 <__sseek>:
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	000c      	movs	r4, r1
 800957c:	250e      	movs	r5, #14
 800957e:	5f49      	ldrsh	r1, [r1, r5]
 8009580:	f000 f860 	bl	8009644 <_lseek_r>
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	1c42      	adds	r2, r0, #1
 8009588:	d103      	bne.n	8009592 <__sseek+0x1a>
 800958a:	4a05      	ldr	r2, [pc, #20]	; (80095a0 <__sseek+0x28>)
 800958c:	4013      	ands	r3, r2
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	bd70      	pop	{r4, r5, r6, pc}
 8009592:	2280      	movs	r2, #128	; 0x80
 8009594:	0152      	lsls	r2, r2, #5
 8009596:	4313      	orrs	r3, r2
 8009598:	81a3      	strh	r3, [r4, #12]
 800959a:	6560      	str	r0, [r4, #84]	; 0x54
 800959c:	e7f8      	b.n	8009590 <__sseek+0x18>
 800959e:	46c0      	nop			; (mov r8, r8)
 80095a0:	ffffefff 	.word	0xffffefff

080095a4 <__sclose>:
 80095a4:	b510      	push	{r4, lr}
 80095a6:	230e      	movs	r3, #14
 80095a8:	5ec9      	ldrsh	r1, [r1, r3]
 80095aa:	f000 f815 	bl	80095d8 <_close_r>
 80095ae:	bd10      	pop	{r4, pc}

080095b0 <_write_r>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	0004      	movs	r4, r0
 80095b4:	0008      	movs	r0, r1
 80095b6:	0011      	movs	r1, r2
 80095b8:	001a      	movs	r2, r3
 80095ba:	2300      	movs	r3, #0
 80095bc:	4d05      	ldr	r5, [pc, #20]	; (80095d4 <_write_r+0x24>)
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7fa f818 	bl	80035f4 <_write>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d103      	bne.n	80095d0 <_write_r+0x20>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d000      	beq.n	80095d0 <_write_r+0x20>
 80095ce:	6023      	str	r3, [r4, #0]
 80095d0:	bd70      	pop	{r4, r5, r6, pc}
 80095d2:	46c0      	nop			; (mov r8, r8)
 80095d4:	20000338 	.word	0x20000338

080095d8 <_close_r>:
 80095d8:	2300      	movs	r3, #0
 80095da:	b570      	push	{r4, r5, r6, lr}
 80095dc:	4d06      	ldr	r5, [pc, #24]	; (80095f8 <_close_r+0x20>)
 80095de:	0004      	movs	r4, r0
 80095e0:	0008      	movs	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7fa f822 	bl	800362c <_close>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d103      	bne.n	80095f4 <_close_r+0x1c>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d000      	beq.n	80095f4 <_close_r+0x1c>
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	bd70      	pop	{r4, r5, r6, pc}
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	20000338 	.word	0x20000338

080095fc <_fstat_r>:
 80095fc:	2300      	movs	r3, #0
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	4d06      	ldr	r5, [pc, #24]	; (800961c <_fstat_r+0x20>)
 8009602:	0004      	movs	r4, r0
 8009604:	0008      	movs	r0, r1
 8009606:	0011      	movs	r1, r2
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	f7fa f819 	bl	8003640 <_fstat>
 800960e:	1c43      	adds	r3, r0, #1
 8009610:	d103      	bne.n	800961a <_fstat_r+0x1e>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d000      	beq.n	800961a <_fstat_r+0x1e>
 8009618:	6023      	str	r3, [r4, #0]
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	20000338 	.word	0x20000338

08009620 <_isatty_r>:
 8009620:	2300      	movs	r3, #0
 8009622:	b570      	push	{r4, r5, r6, lr}
 8009624:	4d06      	ldr	r5, [pc, #24]	; (8009640 <_isatty_r+0x20>)
 8009626:	0004      	movs	r4, r0
 8009628:	0008      	movs	r0, r1
 800962a:	602b      	str	r3, [r5, #0]
 800962c:	f7fa f816 	bl	800365c <_isatty>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d103      	bne.n	800963c <_isatty_r+0x1c>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d000      	beq.n	800963c <_isatty_r+0x1c>
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	20000338 	.word	0x20000338

08009644 <_lseek_r>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	0004      	movs	r4, r0
 8009648:	0008      	movs	r0, r1
 800964a:	0011      	movs	r1, r2
 800964c:	001a      	movs	r2, r3
 800964e:	2300      	movs	r3, #0
 8009650:	4d05      	ldr	r5, [pc, #20]	; (8009668 <_lseek_r+0x24>)
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7fa f80b 	bl	800366e <_lseek>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d103      	bne.n	8009664 <_lseek_r+0x20>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d000      	beq.n	8009664 <_lseek_r+0x20>
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	20000338 	.word	0x20000338

0800966c <__ascii_mbtowc>:
 800966c:	b082      	sub	sp, #8
 800966e:	2900      	cmp	r1, #0
 8009670:	d100      	bne.n	8009674 <__ascii_mbtowc+0x8>
 8009672:	a901      	add	r1, sp, #4
 8009674:	1e10      	subs	r0, r2, #0
 8009676:	d006      	beq.n	8009686 <__ascii_mbtowc+0x1a>
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <__ascii_mbtowc+0x1e>
 800967c:	7813      	ldrb	r3, [r2, #0]
 800967e:	600b      	str	r3, [r1, #0]
 8009680:	7810      	ldrb	r0, [r2, #0]
 8009682:	1e43      	subs	r3, r0, #1
 8009684:	4198      	sbcs	r0, r3
 8009686:	b002      	add	sp, #8
 8009688:	4770      	bx	lr
 800968a:	2002      	movs	r0, #2
 800968c:	4240      	negs	r0, r0
 800968e:	e7fa      	b.n	8009686 <__ascii_mbtowc+0x1a>

08009690 <__malloc_lock>:
 8009690:	b510      	push	{r4, lr}
 8009692:	4802      	ldr	r0, [pc, #8]	; (800969c <__malloc_lock+0xc>)
 8009694:	f7ff f9ad 	bl	80089f2 <__retarget_lock_acquire_recursive>
 8009698:	bd10      	pop	{r4, pc}
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	2000032c 	.word	0x2000032c

080096a0 <__malloc_unlock>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	4802      	ldr	r0, [pc, #8]	; (80096ac <__malloc_unlock+0xc>)
 80096a4:	f7ff f9a6 	bl	80089f4 <__retarget_lock_release_recursive>
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	2000032c 	.word	0x2000032c

080096b0 <_read_r>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	0004      	movs	r4, r0
 80096b4:	0008      	movs	r0, r1
 80096b6:	0011      	movs	r1, r2
 80096b8:	001a      	movs	r2, r3
 80096ba:	2300      	movs	r3, #0
 80096bc:	4d05      	ldr	r5, [pc, #20]	; (80096d4 <_read_r+0x24>)
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f9 ff7b 	bl	80035ba <_read>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d103      	bne.n	80096d0 <_read_r+0x20>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d000      	beq.n	80096d0 <_read_r+0x20>
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	20000338 	.word	0x20000338

080096d8 <__ascii_wctomb>:
 80096d8:	0003      	movs	r3, r0
 80096da:	1e08      	subs	r0, r1, #0
 80096dc:	d005      	beq.n	80096ea <__ascii_wctomb+0x12>
 80096de:	2aff      	cmp	r2, #255	; 0xff
 80096e0:	d904      	bls.n	80096ec <__ascii_wctomb+0x14>
 80096e2:	228a      	movs	r2, #138	; 0x8a
 80096e4:	2001      	movs	r0, #1
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	4240      	negs	r0, r0
 80096ea:	4770      	bx	lr
 80096ec:	2001      	movs	r0, #1
 80096ee:	700a      	strb	r2, [r1, #0]
 80096f0:	e7fb      	b.n	80096ea <__ascii_wctomb+0x12>
	...

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	46c0      	nop			; (mov r8, r8)
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr
